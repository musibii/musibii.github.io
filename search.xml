<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django restframework之使用序列化组件增加与修改</title>
    <url>/2019/02/22/Django-restframework%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/</url>
    <content><![CDATA[<h1 id="Django-restframework之使用序列化组件增加与修改"><a href="#Django-restframework之使用序列化组件增加与修改" class="headerlink" title="Django restframework之使用序列化组件增加与修改"></a>Django restframework之使用序列化组件增加与修改</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>在 views 视图中写 API 接口时，使用序列化组件来进行增删查改特别方便，本篇博客详细介绍一下在 views 中具体使用序列化组件。</p>
<h2 id="二-V1版代码"><a href="#二-V1版代码" class="headerlink" title="二 V1版代码"></a>二 V1版代码</h2><h3 id="一-v1版-views-代码"><a href="#一-v1版-views-代码" class="headerlink" title="一 v1版 views 代码"></a>一 v1版 views 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> app01.myser <span class="keyword">import</span> BookSerib</span><br><span class="line"></span><br><span class="line"><span class="comment"># class Author(View):</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        book_ser = BookSerib(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'book_ser.data'</span>, book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        bookname = request.data.get(<span class="string">'name'</span>)</span><br><span class="line">        price = request.data.get(<span class="string">'price'</span>)</span><br><span class="line">        publish = request.data.get(<span class="string">'publish'</span>)</span><br><span class="line">        authors = request.data.get(<span class="string">'author'</span>)</span><br><span class="line">        <span class="comment"># print(authors)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bookname <span class="keyword">and</span> price <span class="keyword">and</span> publish <span class="keyword">and</span> authors:</span><br><span class="line">            pub_obj = models.Publish.objects.filter(name=publish).first()</span><br><span class="line">            book = models.Book.objects.filter(name=bookname).first()</span><br><span class="line">            <span class="keyword">if</span> book:</span><br><span class="line">                response[<span class="string">'msg'</span>] = <span class="string">'图书已存在'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pub_obj:</span><br><span class="line">                    authstr_list = [author.strip() <span class="keyword">for</span> author <span class="keyword">in</span> authors.split(<span class="string">','</span>)]</span><br><span class="line">                    <span class="comment"># print('authstr_list', authstr_list)</span></span><br><span class="line">                    auth_list = []</span><br><span class="line">                    <span class="keyword">for</span> author <span class="keyword">in</span> authstr_list:</span><br><span class="line">                        auth_obj = models.Author.objects.filter(name=author).first()</span><br><span class="line">                        <span class="keyword">if</span> auth_obj:</span><br><span class="line">                            auth_list.append(auth_obj)</span><br><span class="line">                    <span class="keyword">if</span> auth_list:</span><br><span class="line">                        <span class="comment"># print('request.data', request.data)</span></span><br><span class="line">                        ins_dic = dict(request.data)</span><br><span class="line">                        <span class="comment"># print(type(ins_dic))</span></span><br><span class="line">                        ins_dic.pop(<span class="string">'author'</span>)</span><br><span class="line">                        <span class="comment"># print('ins_dic', ins_dic)</span></span><br><span class="line">                        book_obj = models.Book.objects.create(name=bookname, price=price, publish=pub_obj)</span><br><span class="line"></span><br><span class="line">                        book_data = BookSerib(book_obj, many=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># print('book_obj', book_obj)</span></span><br><span class="line">                        <span class="comment"># ret = book_obj.author.add(*auth_list)</span></span><br><span class="line">                        <span class="keyword">for</span> auth <span class="keyword">in</span> auth_list:</span><br><span class="line">                            models.Book2Author.objects.create(book=book_obj, author=auth)</span><br><span class="line">                        <span class="comment"># print('ret', ret)</span></span><br><span class="line">                        response[<span class="string">'msg'</span>] = <span class="string">'新增图书成功'</span></span><br><span class="line">                        response[<span class="string">'book'</span>] = book_data.data</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        response[<span class="string">'msg'</span>] = <span class="string">'作者不存在'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    response[<span class="string">'msg'</span>] = <span class="string">'出版社不存在'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'信息不完整'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h3 id="二-v1版-myser-代码"><a href="#二-v1版-myser-代码" class="headerlink" title="二 v1版 myser 代码"></a>二 v1版 myser 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myser.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSerib</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    name_author = serializers.CharField(source=<span class="string">'name'</span>)</span><br><span class="line">    phone_num = serializers.CharField(source=<span class="string">'phone'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerib</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        fields = <span class="string">'__all__'</span> <span class="comment"># 序列化 Book 表中所有字段</span></span><br><span class="line">        fields = [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'publish'</span>] <span class="comment"># 选择性的序列化字段</span></span><br><span class="line">        exclude = [<span class="string">'pub_date'</span>] <span class="comment"># 列表里面的字段不序列化</span></span><br><span class="line">        depth = <span class="number">1</span> <span class="comment"># 连表查询的深度，不建议使用，因为深度查询的参数不能控制</span></span><br><span class="line">        </span><br><span class="line">    publish_name = serializers.CharField(source=<span class="string">'publish.name'</span>) <span class="comment"># 因为在 Book 表中外键关联了 publish 表，所以可以通过点语法取值</span></span><br><span class="line">    authors = serializers.SerializerMethodField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self, obj)</span>:</span> <span class="comment"># 在那个类中调用该序列化类，比如需要获取 Book 信息，使用 BookSerib 类来序列化数据，那么 obj 就是 Book 类。</span></span><br><span class="line">        author_list = obj.author.all()</span><br><span class="line">        author_ser = AuthorSerib(author_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> author_ser.data</span><br></pre></td></tr></table></figure>
<h2 id="三-V2版代码"><a href="#三-V2版代码" class="headerlink" title="三 V2版代码"></a>三 V2版代码</h2><h3 id="一-v2版-views-代码"><a href="#一-v2版-views-代码" class="headerlink" title="一 v2版 views 代码"></a>一 v2版 views 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line"></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        book_ser = BookSerib(book, many=<span class="literal">False</span>)</span><br><span class="line">        print(<span class="string">'book_ser.data'</span>, book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        response[<span class="string">'msg'</span>] = <span class="string">'获取图书成功'</span></span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除图书</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book = models.Book.objects.filter(pk=id).delete()</span><br><span class="line">        <span class="comment"># book_ser = BookSerib(book, many=False)</span></span><br><span class="line">        response[<span class="string">'msg'</span>] = <span class="string">'删除成功'</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="string">'成功'</span>&#125;</span><br><span class="line">        <span class="comment"># book_info = request.data</span></span><br><span class="line">        book_ser = BookSerib(data=request.data)</span><br><span class="line">        <span class="comment"># 新方法，使用序列化组件保存，但是必须是继承自 ModelSerializer 的序列化类，这样才可以知道要保存的表模型</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="string">'成功'</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="comment"># 修改的话，要把 book 对象当做 instance传进去</span></span><br><span class="line">        book_ser = BookSerib(data=request.data, instance=book_obj)</span><br><span class="line">        <span class="comment"># 新方法，使用序列化组件保存，但是必须是继承自 ModelSerializer 的序列化类，这样才可以知道要保存的表模型</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            <span class="comment"># save既可以修改也可以新增</span></span><br><span class="line">            book_ser.save()</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django序列化组件</category>
      </categories>
  </entry>
  <entry>
    <title>Django-restframework之分页器组件</title>
    <url>/2019/02/26/Django-restframework%E4%B9%8B%E5%88%86%E9%A1%B5%E5%99%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="django-restframework之分页器组件"><a href="#django-restframework之分页器组件" class="headerlink" title="django-restframework之分页器组件"></a>django-restframework之分页器组件</h1><h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h1><p>本篇博客介绍 django-restframework 的分页器组件，在 restframework 框架中的分页器有三种，分别是简单分页、偏移分页、加密分页（url 经过加密）。接下来分别介绍三种分页器的使用方法。</p>
<h2 id="二-简单分页"><a href="#二-简单分页" class="headerlink" title="二 简单分页"></a>二 简单分页</h2><p>查看第 n 页，每页显示 n 条。</p>
<p>page_size = api_settings.PAGE_SIZE    :每页显示条数<br>page_query_param = ‘page’              :查询的页码数<br>page_size_query_param = None          :每页最大显示条数</p>
<p>如果我要的数据是第一页显示10条:<a href="http://127.0.0.1:8000/books/?ccc=10&amp;page=1" target="_blank" rel="noopener">http://127.0.0.1:8000/books/?ccc=10&amp;page=1</a><br>如果我要的是第二页显示5条:<a href="http://127.0.0.1:8000/books/?ccc=5&amp;page=2" target="_blank" rel="noopener">http://127.0.0.1:8000/books/?ccc=5&amp;page=2</a><br>max_page_size = 8                    :控制最大显示多少条<br>如果我想第一页显示10000条,这种不合理,通过这个参数控制,最大显示8条<br>使用:<br>    page_sipmle=PageNumberPagination()<br>    page_sipmle.page_size=4</p>
<p>​    page_sipmle.page_query_param=’aaa’</p>
<p>​    page_sipmle.page_size_query_param=’ccc’<br>​    page_sipmle.max_page_size=8<br>​    book_list = models.Book.objects.all()<br>​    page_list = page_sipmle.paginate_queryset(book_list,request,self)<br>​    book_ser = BookSerializer(instance=page_list, many=True)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">简单分页</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="string">'成功'</span>&#125;</span><br><span class="line">        <span class="comment"># 生成一个PageNumberPagination的对象</span></span><br><span class="line">        page_sipmle=PageNumberPagination()</span><br><span class="line">        page_sipmle.page_size=<span class="number">4</span></span><br><span class="line">        <span class="comment"># page_sipmle.page_query_param='aaa'</span></span><br><span class="line">        page_sipmle.page_size_query_param=<span class="string">'ccc'</span></span><br><span class="line">        page_sipmle.max_page_size=<span class="number">8</span></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        page_list = page_sipmle.paginate_queryset(book_list,request,self)</span><br><span class="line">        book_ser = BookSerializer(instance=page_list, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        print(book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="三偏移分页"><a href="#三偏移分页" class="headerlink" title="三偏移分页"></a>三偏移分页</h2><p>default_limit = api_settings.PAGE_SIZE :默认偏移的条数 5</p>
<p>limit_query_param = ‘limit’       :偏移的条数</p>
<p>offset_query_param = ‘offset’     :是标杆</p>
<p>max_limit = None                  :最大偏移的条数</p>
<p>举例<br>                -<a href="http://127.0.0.1:8000/books/" target="_blank" rel="noopener">http://127.0.0.1:8000/books/</a>   结果是:从1到5<br>                -<a href="http://127.0.0.1:8000/books/?limit=7" target="_blank" rel="noopener">http://127.0.0.1:8000/books/?limit=7</a>  结果是:从1到7<br>                -<a href="http://127.0.0.1:8000/books/?limit=2&amp;offset=6" target="_blank" rel="noopener">http://127.0.0.1:8000/books/?limit=2&amp;offset=6</a>  结果是:从7到8,两条<br>                -<a href="http://127.0.0.1:8000/books/?offset=6" target="_blank" rel="noopener">http://127.0.0.1:8000/books/?offset=6</a>  结果是:从7到11,5条</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 偏移分页</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="string">'成功'</span>&#125;</span><br><span class="line">        <span class="comment"># 生成一个PageNumberPagination的对象</span></span><br><span class="line">        page_limit=LimitOffsetPagination()</span><br><span class="line">        page_limit.default_limit=<span class="number">6</span></span><br><span class="line">        page_limit.max_limit=<span class="number">5</span></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        page_list = page_limit.paginate_queryset(book_list,request,self)</span><br><span class="line">        book_ser = BookSerializer(instance=page_list, many=<span class="literal">True</span>)</span><br><span class="line">        print(book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="四-加密分页"><a href="#四-加密分页" class="headerlink" title="四 加密分页"></a>四 加密分页</h2><p>游标分页:原理:速度最快,但是只能往前走和往后走</p>
<p>cursor_query_param = ‘cursor’  </p>
<p>page_size = api_settings.PAGE_SIZE    :默认每页显示的条数</p>
<p>ordering = ‘id’                       :按谁排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密分页</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> CursorPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="string">'成功'</span>&#125;</span><br><span class="line">        <span class="comment"># 生成一个PageNumberPagination的对象</span></span><br><span class="line">        page_cursor=CursorPagination()</span><br><span class="line">        page_cursor.page_size=<span class="number">5</span></span><br><span class="line">        page_cursor.ordering=<span class="string">"id"</span></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        page_list = page_cursor.paginate_queryset(book_list,request,self)</span><br><span class="line">        book_ser = BookSerializer(instance=page_list, many=<span class="literal">True</span>)</span><br><span class="line">        print(book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        <span class="comment"># return Response(response)</span></span><br><span class="line">        <span class="keyword">return</span> page_cursor.get_paginated_response(book_ser.data)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django restframework之序列化组件</title>
    <url>/2019/02/20/Django-restframework%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django-restframework之序列化组件"><a href="#Django-restframework之序列化组件" class="headerlink" title="Django-restframework之序列化组件"></a>Django-restframework之序列化组件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客介绍 restframework的序列化组件，这个组件可以说是 rest framework 的核心组件，不仅提供了功能强大的序列化功能，还提供了数据验证的功能（与 django 的 forms 组件类似）。</p>
<h2 id="普通版本使用"><a href="#普通版本使用" class="headerlink" title="普通版本使用"></a>普通版本使用</h2><h3 id="urls-配置"><a href="#urls-配置" class="headerlink" title="urls 配置"></a>urls 配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url(r'^books/', views.Books.as_view()),</span></span><br><span class="line">    url(<span class="string">r'^book/(?P&lt;id&gt;\d+)/'</span>, views.Book.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="models-配置"><a href="#models-配置" class="headerlink" title="models 配置"></a>models 配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># book_obj.author.set(*[])</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.IntegerField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    author = models.ManyToManyField(to=<span class="string">'Author'</span>, through=<span class="string">'Book2Author'</span>, through_fields=(<span class="string">'book'</span>, <span class="string">'author'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'图书表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'出版社表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">32</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'作者表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">'Author'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'图书作者表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
<h3 id="myser-配置（序列化组件）"><a href="#myser-配置（序列化组件）" class="headerlink" title="myser 配置（序列化组件）"></a>myser 配置（序列化组件）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerib</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    nid = serializers.CharField()</span><br><span class="line">    title = serializers.CharField(source=<span class="string">'name'</span>)</span><br><span class="line">    pri = serializers.CharField(source=<span class="string">'price'</span>)</span><br><span class="line">    pub_date = serializers.CharField()</span><br><span class="line">    author_dic = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_author_dic</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        authors = obj.author.all()</span><br><span class="line">        print(<span class="string">'authors'</span>, authors)</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'name'</span>: author.name, <span class="string">'phone'</span>: author.phone&#125;</span><br></pre></td></tr></table></figure>
<h3 id="views-配置"><a href="#views-配置" class="headerlink" title="views 配置"></a>views 配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> app01.myser <span class="keyword">import</span> BookSerib</span><br><span class="line"></span><br><span class="line"><span class="comment"># class Author(View):</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        book_ser = BookSerib(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'book_ser.data'</span>, book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        bookname = request.data.get(<span class="string">'name'</span>)</span><br><span class="line">        price = request.data.get(<span class="string">'price'</span>)</span><br><span class="line">        publish = request.data.get(<span class="string">'publish'</span>)</span><br><span class="line">        authors = request.data.get(<span class="string">'author'</span>)</span><br><span class="line">        <span class="comment"># print(authors)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bookname <span class="keyword">and</span> price <span class="keyword">and</span> publish <span class="keyword">and</span> authors:</span><br><span class="line">            pub_obj = models.Publish.objects.filter(name=publish).first()</span><br><span class="line">            book = models.Book.objects.filter(name=bookname).first()</span><br><span class="line">            <span class="keyword">if</span> book:</span><br><span class="line">                response[<span class="string">'msg'</span>] = <span class="string">'图书已存在'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pub_obj:</span><br><span class="line">                    authstr_list = [author.strip() <span class="keyword">for</span> author <span class="keyword">in</span> authors.split(<span class="string">','</span>)]</span><br><span class="line">                    <span class="comment"># print('authstr_list', authstr_list)</span></span><br><span class="line">                    auth_list = []</span><br><span class="line">                    <span class="keyword">for</span> author <span class="keyword">in</span> authstr_list:</span><br><span class="line">                        auth_obj = models.Author.objects.filter(name=author).first()</span><br><span class="line">                        <span class="keyword">if</span> auth_obj:</span><br><span class="line">                            auth_list.append(auth_obj)</span><br><span class="line">                    <span class="keyword">if</span> auth_list:</span><br><span class="line">                        <span class="comment"># print('request.data', request.data)</span></span><br><span class="line">                        ins_dic = dict(request.data)</span><br><span class="line">                        <span class="comment"># print(type(ins_dic))</span></span><br><span class="line">                        ins_dic.pop(<span class="string">'author'</span>)</span><br><span class="line">                        <span class="comment"># print('ins_dic', ins_dic)</span></span><br><span class="line">                        book_obj = models.Book.objects.create(name=bookname, price=price, publish=pub_obj)</span><br><span class="line"></span><br><span class="line">                        book_data = BookSerib(book_obj, many=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># print('book_obj', book_obj)</span></span><br><span class="line">                        <span class="comment"># ret = book_obj.author.add(*auth_list)</span></span><br><span class="line">                        <span class="keyword">for</span> auth <span class="keyword">in</span> auth_list:</span><br><span class="line">                            models.Book2Author.objects.create(book=book_obj, author=auth)</span><br><span class="line">                        <span class="comment"># print('ret', ret)</span></span><br><span class="line">                        response[<span class="string">'msg'</span>] = <span class="string">'新增图书成功'</span></span><br><span class="line">                        response[<span class="string">'book'</span>] = book_data.data</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        response[<span class="string">'msg'</span>] = <span class="string">'作者不存在'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    response[<span class="string">'msg'</span>] = <span class="string">'出版社不存在'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'信息不完整'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="进阶版本使用"><a href="#进阶版本使用" class="headerlink" title="进阶版本使用"></a>进阶版本使用</h2><p>主要是序列化模块里面的改动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myser.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSerib</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    name_author = serializers.CharField(source=<span class="string">'name'</span>)</span><br><span class="line">    phone_num = serializers.CharField(source=<span class="string">'phone'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerib</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    nid = serializers.CharField()</span><br><span class="line">    title = serializers.CharField(source=<span class="string">'name'</span>)</span><br><span class="line">    pri = serializers.CharField(source=<span class="string">'price'</span>)</span><br><span class="line">    pub_date = serializers.CharField()</span><br><span class="line">    author_dic = serializers.SerializerMethodField()</span><br><span class="line">    <span class="comment"># author_dic = AuthorSerib()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_author_dic</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        authors = obj.author.all()</span><br><span class="line">        </span><br><span class="line">        authors_ser = AuthorSerib(authors, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> authors_ser.data</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对于外键关联的字段，因为在 Book 表中存储的是对象，所以可以对该对象再使用序列化，新建了序列化 Author 的序列化类用来对 author 进行序列化</span></span><br></pre></td></tr></table></figure>
<h2 id="终极版本使用"><a href="#终极版本使用" class="headerlink" title="终极版本使用"></a>终极版本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myser.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSerib</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    name_author = serializers.CharField(source=<span class="string">'name'</span>)</span><br><span class="line">    phone_num = serializers.CharField(source=<span class="string">'phone'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerib</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        fields = <span class="string">'__all__'</span> <span class="comment"># 序列化 Book 表中所有字段</span></span><br><span class="line">        fields = [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'publish'</span>] <span class="comment"># 选择性的序列化字段</span></span><br><span class="line">        exclude = [<span class="string">'pub_date'</span>] <span class="comment"># 列表里面的字段不序列化</span></span><br><span class="line">        depth = <span class="number">1</span> <span class="comment"># 连表查询的深度，不建议使用，因为深度查询的参数不能控制</span></span><br><span class="line">        </span><br><span class="line">    publish_name = serializers.CharField(source=<span class="string">'publish.name'</span>) <span class="comment"># 因为在 Book 表中外键关联了 publish 表，所以可以通过点语法取值</span></span><br><span class="line">    authors = serializers.SerializerMethodField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self, obj)</span>:</span> <span class="comment"># 在那个类中调用该序列化类，比如需要获取 Book 信息，使用 BookSerib 类来序列化数据，那么 obj 就是 Book 类。</span></span><br><span class="line">        author_list = obj.author.all()</span><br><span class="line">        author_ser = AuthorSerib(author_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> author_ser.data</span><br></pre></td></tr></table></figure>
<p>注意：fields 和 exclude 不能连用</p>
]]></content>
      <categories>
        <category>Django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django restframework序列化组件之局部钩子与全局钩子</title>
    <url>/2019/02/22/Django-restframework%E4%B9%8B%E5%B1%80%E9%83%A8%E9%92%A9%E5%AD%90%E4%B8%8E%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<h1 id="django-restframework-序列化组件之局部钩子与全局钩子"><a href="#django-restframework-序列化组件之局部钩子与全局钩子" class="headerlink" title="django-restframework 序列化组件之局部钩子与全局钩子"></a>django-restframework 序列化组件之局部钩子与全局钩子</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django-restframework之权限组件源码分析</title>
    <url>/2019/02/25/Django-restframework%E4%B9%8B%E6%9D%83%E9%99%90%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Django-restframework-之权限源码分析"><a href="#Django-restframework-之权限源码分析" class="headerlink" title="Django-restframework 之权限源码分析"></a>Django-restframework 之权限源码分析</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>上篇博客分析了 restframework 框架的认证组件的执行了流程并自定义了认证类。这篇博客分析 restframework 的权限组件执行流程。入口函数依然是<code>APIView.initial</code>。</p>
<p>权限的判断是在用户认证之后进行的，restframework 框架里面的自带的认证实现的功能很简单，如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0jktxy968j31g20h4wkb.jpg" alt></p>
<p>这个方法通常来讲会根据需求定制，该方法执行结束后悔返回用户信息和其他数据，根据需求，在上篇博客我返回了用户对象和 token 值。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0jl0tqmrnj31fs0hegr3.jpg" alt></p>
<p>本来这些应该在上篇博客结束的，主要是因为今天学习权限组件时又想到有些遗漏所以在这里补充。</p>
<h2 id="二-权限组件执行流程"><a href="#二-权限组件执行流程" class="headerlink" title="二 权限组件执行流程"></a>二 权限组件执行流程</h2><p><code>APIView.perform_authentication()</code>方法结束，其实是根据<code>mro</code>列表找到的。接下来执行<code>APIView.check_permissions()</code>方法，restframework 框架自带的权限类相当于没有，因为所有需要进行权限认证的都是返回 True，所以这个也需要根据实际需求来定制。</p>
<h3 id="1-执行-APIView-check-permissions"><a href="#1-执行-APIView-check-permissions" class="headerlink" title="1. 执行 APIView.check_permissions"></a>1. 执行 APIView.check_permissions</h3><p>其实套路和认证组件很相似</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0jl9579ybj31e60ayadx.jpg" alt></p>
<h3 id="2-执行APIView-get-permission"><a href="#2-执行APIView-get-permission" class="headerlink" title="2. 执行APIView.get_permission"></a>2. 执行APIView.get_permission</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0jla4o31rj31fe05ydi5.jpg" alt></p>
<p>对比权限和认证的查找相关类的流程可以发现认证类是在实例化<code>Request</code>对象时就把认证类获取当作参数传进去了，而权限类并没有。猜测 restframework 框架只要需要进行用户认证，所以虽然认证写的功能也不完善，但是还是必要的，而权限相关的认证和实际需求有关，所以就没有这么麻烦，猜测频率也一样，也需要自己重写和配置。</p>
<h3 id="3-执行APIView-permission-classes"><a href="#3-执行APIView-permission-classes" class="headerlink" title="3. 执行APIView.permission_classes"></a>3. 执行APIView.permission_classes</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0jlkg121wj31g609u0w8.jpg" alt></p>
<p>经过这几步就可以找到权限类</p>
<h2 id="三-自定义权限组件"><a href="#三-自定义权限组件" class="headerlink" title="三 自定义权限组件"></a>三 自定义权限组件</h2><p>其实基本步骤和认证组件一样</p>
<h3 id="1-views-py"><a href="#1-views-py" class="headerlink" title="1. views.py"></a>1. views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> permiss_classes</span><br></pre></td></tr></table></figure>
<h3 id="2-permiss-classes-py"><a href="#2-permiss-classes-py" class="headerlink" title="2. permiss_classes.py"></a>2. permiss_classes.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'guanjian'</span>)</span><br><span class="line">        user = request.user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user.user_type == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>只要用户权限满足才能获取相关信息，所以在用户表中加了个字段用来标识用户权限的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line"></span><br><span class="line">    book = models.ManyToManyField(to=<span class="string">'Book'</span>, through=<span class="string">'User2Book'</span>, through_fields=(<span class="string">'user'</span>, <span class="string">'book'</span>))</span><br><span class="line"></span><br><span class="line">    user_choice = ((<span class="number">0</span>, <span class="string">'封禁用户'</span>), (<span class="number">1</span>, <span class="string">'普通用户'</span>), (<span class="number">2</span>, <span class="string">'超级用户'</span>))</span><br><span class="line">    user_type = models.IntegerField(default=<span class="number">0</span>, choices=user_choice)</span><br></pre></td></tr></table></figure>
<p>完整的 models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># book_obj.author.set(*[])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class UserToken(models.Model):</span></span><br><span class="line"><span class="comment">#     nid = models.AutoField(primary_key=True)</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to='UserInfo', default=1)</span></span><br><span class="line"><span class="comment">#     token = models.CharField(max_length=64, default='123456')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line"></span><br><span class="line">    book = models.ManyToManyField(to=<span class="string">'Book'</span>, through=<span class="string">'User2Book'</span>, through_fields=(<span class="string">'user'</span>, <span class="string">'book'</span>))</span><br><span class="line"></span><br><span class="line">    user_choice = ((<span class="number">0</span>, <span class="string">'封禁用户'</span>), (<span class="number">1</span>, <span class="string">'普通用户'</span>), (<span class="number">2</span>, <span class="string">'超级用户'</span>))</span><br><span class="line">    user_type = models.IntegerField(default=<span class="number">0</span>, choices=user_choice)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'用户表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户拥有的图书表，因为是多对多关系，所以是中间表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">'UserInfo'</span>)</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.IntegerField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    author = models.ManyToManyField(to=<span class="string">'Author'</span>, through=<span class="string">'Book2Author'</span>, through_fields=(<span class="string">'book'</span>, <span class="string">'author'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'图书表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'出版社表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">32</span>, default=<span class="number">15764503613</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'作者表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">'Author'</span>, to_field=<span class="string">'nid'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'图书作者表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
<h2 id="四-配置自定义权限类"><a href="#四-配置自定义权限类" class="headerlink" title="四 配置自定义权限类"></a>四 配置自定义权限类</h2><h3 id="1-局部配置"><a href="#1-局部配置" class="headerlink" title="1. 局部配置"></a>1. 局部配置</h3><p>假设在用户认证通过后需要判断用户的权限，那么需要在该视图类中定义一个参数<code>permission_classes</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    </span><br><span class="line">    permission_classes = [permiss_classes.LoginPermission]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># authentication_classes = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h3 id="2-全局使用"><a href="#2-全局使用" class="headerlink" title="2. 全局使用"></a>2. 全局使用</h3><p>全局使用的话需要在项目的 settings 中配置，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [<span class="string">'app01.permiss_classes.LoginPermission'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-局部禁用"><a href="#3-局部禁用" class="headerlink" title="3. 局部禁用"></a>3. 局部禁用</h3><p>局部禁用需要在视图类中定义一个空的<code>permission_classes</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permission_classes = []</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django restframework之序列化组件源码探析</title>
    <url>/2019/02/22/Django-restframework%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E6%8E%A2%E6%9E%90/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Django restframework之流程分析</title>
    <url>/2019/02/21/Django-restframework%E4%B9%8B%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Django-restframework-源码分析之认证"><a href="#Django-restframework-源码分析之认证" class="headerlink" title="Django-restframework 源码分析之认证"></a>Django-restframework 源码分析之认证</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学习了 django 的一个 restframework 框架，对于里面的执行流程产生了兴趣，经过昨天一晚上初步搞清楚了执行流程（部分方法还不太清楚），于是想详细的总结一下当来一个请求时，在该框架里面是如何执行的？</p>
<h2 id="启动项目时"><a href="#启动项目时" class="headerlink" title="启动项目时"></a>启动项目时</h2><p>昨天在调试django时，发现在 APIView 中打的断点没有断下来，而是打在 View 中的断点断下来了，调试了很多次，最后发现，在 django 项目启动时，会首先加载 urls 中的文件，执行 views 中类的 as_view方法，其实是继承自 APIView 的，APIView 继承自 django 原生 View 的as_view 方法。</p>
<p>里面一个参数叫 pattern_name，对应的值是admin:auth_group_change，如下图所示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dqrtq01oj310m0cadjc.jpg" alt></p>
<p>目前还不清楚这里面的具体流程是什么，但是并不妨碍阅读之后的源码，在这只要清楚一点，在 Django 项目启动时，路由所对应的CBV里面的相关方法的内存地址已经获取到。这样做的好处就是提高效率，坏处可能有一点点，会提升性能的消耗。</p>
<h2 id="具体路由和逻辑代码"><a href="#具体路由和逻辑代码" class="headerlink" title="具体路由和逻辑代码"></a>具体路由和逻辑代码</h2><p>在这里假设来一个 GET 请求，urls 和 views里面的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line">url(<span class="string">r'^book/(?P&lt;id&gt;\d+)/'</span>, views.Book.as_view()),</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line"></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        book_ser = BookSerib(book, many=<span class="literal">False</span>)</span><br><span class="line">        print(<span class="string">'book_ser.data'</span>, book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        response[<span class="string">'msg'</span>] = <span class="string">'获取图书成功'</span></span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<p>urls 里面就是一个典型的 CBV 的路由配置，在 views 中一个是路由分发方法，一个是获取单本图书信息（通过 id）。</p>
<h2 id="as-view-具体执行流程"><a href="#as-view-具体执行流程" class="headerlink" title="as_view 具体执行流程"></a>as_view 具体执行流程</h2><p>在项目启动时，相应的函数内存地址已经获取到，那么具体是怎么获取到的呢？</p>
<p>在上面的代码中可以看到 <code>Book</code>类是继承自<code>APIView</code>类的，所以在路由配置里面执行的<code>as_view</code>方法如果<code>Book</code>类没有重写，那么执行的就是按照<code>mro</code>列表顺序查找到的第一个方法，在这里执行的是<code>APIView</code>类中的<code>as_view</code>方法。</p>
<p>查看该源码如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dr5k56eqj31kg0mwdop.jpg" alt></p>
<p><code>APIView</code>类的父类是<code>View</code>类，查看该类的<code>as_view</code>方法，源码如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0dtkje60nj31b00u0k29.jpg" alt></p>
<p>具体<code>as_view</code>就是将<code>view</code>函数的内存地址返回，以便请求来时直接调用。</p>
<p>而<code>initkwargs</code>这个参数应该是由 django 内部传的一些参数，如下所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0ds6hb8o9j311w0bmn1o.jpg" alt></p>
<h2 id="请求到来时"><a href="#请求到来时" class="headerlink" title="请求到来时"></a>请求到来时</h2><p>因为经过 django 先执行了<code>as_view</code>返回<code>view</code>的内存地址，所以会直接执行<code>view</code>函数，如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dttrs9t9j31m8082dls.jpg" alt></p>
<p>在这里该 self 由于是 继承自<code>APIView</code>类的<code>Book</code>类的对象，所以<code>dispatch</code>方法首先去自身找，之后去父类找，在<code>APIView</code>类中找到<code>dispatch</code>方法，源码如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0du0o9jnej31mg0tewsm.jpg" alt></p>
<h3 id="initialize-request方法："><a href="#initialize-request方法：" class="headerlink" title="initialize_request方法："></a>initialize_request方法：</h3><p>源码如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0du2ggqlaj31gy0ein1a.jpg" alt></p>
<p>在实例化<code>Request</code>对象时，<code>authenticators</code>参数需要在认证时使用，所以先把这个参数的值找出来。步骤如下：</p>
<ul>
<li>调用 self.get_authenticators</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0du4kpwcij31la05iwh3.jpg" alt></p>
<ul>
<li>找到 self.authentication_classes</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0du79kijtj31gc0fmjyl.jpg" alt></p>
<ul>
<li>找到 api_settings,才能找到DEFAULT_AUTHENTICATION_CLASSES</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0du8ss6x4j31iw05atad.jpg" alt></p>
<ul>
<li>DEFAULT和IMPORT_STRINGS参数</li>
</ul>
<ol>
<li>DEFAULT参数</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0duhenrzgj31hy0rwakr.jpg" alt></p>
<ol start="2">
<li>IMPORT_STRINGS参数</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0dulz5m9tj31fs0j2qa6.jpg" alt></p>
<ul>
<li>实例化 APISettings 对象</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dv587iu9j31e40pugul.jpg" alt></p>
<ul>
<li>通过__getattr__方法获取值</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dve7p0ntj31ko0nsqcj.jpg" alt></p>
<ul>
<li>执行perform_import方法</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0dvpmnf7ij31lm0c879s.jpg" alt></p>
<ul>
<li>执行import_from_string</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0dvul5mptj31jy0ceahi.jpg" alt></p>
<ul>
<li>执行import_module</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0dvx80nw0j31fa0iigra.jpg" alt></p>
<ul>
<li>执行_bootstrap._gcd_import</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0dw0ns9znj31h00cy43l.jpg" alt></p>
<ul>
<li>执行_sanity_check</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0dw3ij3ivj31fm0e043v.jpg" alt></p>
<ul>
<li>_sanity_check返回，执行_find_and_load方法</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0dw6pw2ghj31f60dq79n.jpg" alt></p>
<ul>
<li>所以通过__getattr__的到的是一个列表，里面是两个类，分别是[rest_framework_authentication_SessionAuthentication, rest_framework_authentication_BasicAuthentication]</li>
</ul>
<p>到这里，initialize_request方法执行结束，得到一个经过 Request 类实例化的 request 对象，该对象里面含有原生 request 对象，可以通过<code>request._request</code>取到。</p>
<h3 id="initial-方法："><a href="#initial-方法：" class="headerlink" title="initial 方法："></a>initial 方法：</h3><p>源码如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0dwg9bl40j31f00i00zn.jpg" alt></p>
<p>这里传入的<code>request</code>参数是经过<code>Request</code>封装后的参数</p>
<ul>
<li>执行get_format_suffix</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0dxa7s5azj31bs06etbd.jpg" alt></p>
<p>执行完这个方法，<code>self_format_kwarg = None</code>，</p>
<ul>
<li>执行perform_content_negotiation</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0dxfetavbj31lq0ckq70.jpg" alt></p>
<ol>
<li>执行self.get_renders</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0dxq4mzrzj31ha05s0vq.jpg" alt></p>
<ol start="2">
<li>执行self.get_content_negotiator</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0e02qiaoxj31hi07y0vv.jpg" alt></p>
<ol start="3">
<li>执行 conneg.select_renderer方法</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0e0a0yqxyj315h0u0qhz.jpg" alt></p>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>Django-restframework源码分析</category>
      </categories>
  </entry>
  <entry>
    <title>Django-restframework之认证组件源码分析</title>
    <url>/2019/02/25/Django-restframework%E4%B9%8B%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Django-restframework-源码之认证组件源码分析"><a href="#Django-restframework-源码之认证组件源码分析" class="headerlink" title="Django-restframework 源码之认证组件源码分析"></a>Django-restframework 源码之认证组件源码分析</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>之前在 Django-restframework 的流程分析博客中，把最重要的关于认证、权限和频率的方法找到了。该方法是 <code>APIView</code> 的一个名为<code>initial</code>的类方法，也就是在 <code>views</code> 中定义的视图类方法，继承自<code>APIView</code>方法。该方法源码如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0dwg9bl40j31f00i00zn.jpg" alt></p>
<p>那么当代码执行到这里时，最开始执行的是用户的认证，也就是<code>perform_autnentication</code>方法。下面来深入的分析一下在用户认证中具体是怎么执行的。</p>
<h2 id="二-用户认证执行流程"><a href="#二-用户认证执行流程" class="headerlink" title="二 用户认证执行流程"></a>二 用户认证执行流程</h2><p>进入查看该方法源码如下：</p>
<h3 id="1-执行APIView-perform-authentication"><a href="#1-执行APIView-perform-authentication" class="headerlink" title="1. 执行APIView.perform_authentication"></a>1. 执行APIView.perform_authentication</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0iwgbisf8j31fo0amn0x.jpg" alt></p>
<h3 id="2-执行-Request-user"><a href="#2-执行-Request-user" class="headerlink" title="2. 执行 Request.user"></a>2. 执行 Request.user</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0iwl2czl2j31gq0aw42m.jpg" alt></p>
<h3 id="3-执行Request-authenticate"><a href="#3-执行Request-authenticate" class="headerlink" title="3. 执行Request._authenticate"></a>3. 执行Request._authenticate</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0iwpb0y2gj31fa0i60zj.jpg" alt></p>
<h3 id="4-Request-authenticators"><a href="#4-Request-authenticators" class="headerlink" title="4. Request.authenticators"></a>4. Request.authenticators</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0iwvea7l5j31fq0qothu.jpg" alt></p>
<h3 id="5-APIView-initialize-request"><a href="#5-APIView-initialize-request" class="headerlink" title="5. APIView.initialize_request"></a>5. APIView.initialize_request</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0iwxa95i8j31fq0dgtdn.jpg" alt></p>
<h3 id="6-APIView-get-authticators"><a href="#6-APIView-get-authticators" class="headerlink" title="6. APIView.get_authticators"></a>6. APIView.get_authticators</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0iwztiuimj31fw05qjte.jpg" alt></p>
<h3 id="7-api-settings-DEFAULT-AUTHENTICATION-CLASSES"><a href="#7-api-settings-DEFAULT-AUTHENTICATION-CLASSES" class="headerlink" title="7. api_settings.DEFAULT_AUTHENTICATION_CLASSES"></a>7. api_settings.DEFAULT_AUTHENTICATION_CLASSES</h3><p>到这里就是查找APIView 配置的问题了，后面的DEFAULT_AUTHENTICATION_CLASSES是默认的认证类，该类定义在<code>settings.py</code>文件中。之后我会写一篇 Django 加载项目配置的博客，到时候详细分析一下，这会涉及到 python 的两种加载文件的方式，一种是 import；一种是使用<code>importlib</code>模块导入。</p>
<h2 id="三-自定义认证组件"><a href="#三-自定义认证组件" class="headerlink" title="三 自定义认证组件"></a>三 自定义认证组件</h2><p>了解了 restframework 的认证流程，对于需要自定义认证组件其实很明了，就是自定义认证类，重写 <code>authenticate</code> 方法。不过这还不行，我们还需要进行一下配置。</p>
<p>需求：在之前的项目中，我们需要在服务器中保存相关的 cookie 或 session 来进行用户身份校验，那么如何使用 restframework 的认证来实现该需求，使得既能校验身份，也可以不用在服务端保存用户的 cookie 或 session。</p>
<p>首先不管 cookie 或 session 都是为了校验用户的，那么在这里我们可以使用一个随机字符串（加密后的），当客户端朝服务端发送请求时会携带该值，之后进行反解用来对比。</p>
<h3 id="1-urls-py"><a href="#1-urls-py" class="headerlink" title="1. urls.py"></a>1. urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^login/'</span>, views.Login.as_view()),</span><br></pre></td></tr></table></figure>
<h3 id="2-views-py"><a href="#2-views-py" class="headerlink" title="2. views.py"></a>2. views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 随机token值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(id, salt=<span class="string">'123'</span>)</span>:</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(bytes(str(id), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    md.update(bytes(salt, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md.hexdigest() + <span class="string">'|'</span> + str(id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆视图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def dispatch(self, request, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     return super(Login, self).dispatch(request, *args, **kwargs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        name = request.data.get(<span class="string">'name'</span>)</span><br><span class="line">        password = request.data.get(<span class="string">'password'</span>)</span><br><span class="line">        print(name, password)</span><br><span class="line">        user_obj = models.UserInfo.objects.filter(name=name, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> user_obj:</span><br><span class="line">            token = get_token(user_obj.pk)</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'登陆成功'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">100</span></span><br><span class="line">            response[<span class="string">'token'</span>] = token</span><br><span class="line">            print(<span class="string">'111'</span>, token)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'用户名或密码错误'</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h3 id="3-authenticate-classes-py"><a href="#3-authenticate-classes-py" class="headerlink" title="3. authenticate_classes.py"></a>3. authenticate_classes.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 校验 token</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_token</span><span class="params">(token, salt=<span class="string">'123'</span>)</span>:</span></span><br><span class="line">    ls = token.split(<span class="string">'|'</span>)</span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(bytes(ls[<span class="number">-1</span>], encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    md.update(bytes(salt, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">if</span> md.hexdigest() == ls[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写的认证类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        token = request.data.get(<span class="string">'token'</span>)</span><br><span class="line">        print(<span class="string">'222'</span>, token)</span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            succ = check_token(token)</span><br><span class="line">            <span class="keyword">if</span> succ:</span><br><span class="line">                id = request.data.get(<span class="string">'uid'</span>)</span><br><span class="line">            	user = modeles.UserInfo.objects.filter(pk=id).first()</span><br><span class="line">                <span class="keyword">if</span> user:</span><br><span class="line">                	print(<span class="string">'333'</span>)</span><br><span class="line">                	<span class="comment"># user =</span></span><br><span class="line">                	<span class="keyword">return</span> user, token</span><br><span class="line">               	<span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> NotAuthenticated(<span class="string">'数据库错'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> NotAuthenticated(<span class="string">'认证失败'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotAuthenticated(<span class="string">'请先登录'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h3><p>只有经过认证的才能获取相关信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    <span class="comment"># authentication_classes = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="四-配置自定义认证类"><a href="#四-配置自定义认证类" class="headerlink" title="四 配置自定义认证类"></a>四 配置自定义认证类</h2><h3 id="1-局部配置"><a href="#1-局部配置" class="headerlink" title="1. 局部配置"></a>1. 局部配置</h3><p>假设一个功能需要登陆成功才可以使用，那么只需要在该视图类中定义一个参数<code>authentication_classes</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 配置该参数可以局部使用</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h3 id="2-全局使用"><a href="#2-全局使用" class="headerlink" title="2. 全局使用"></a>2. 全局使用</h3><p>全局使用的话需要在项目 settings 中配置，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"app01.authenticate_classes.BookAuth"</span>,]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样对 views 中所有的请求方法都有效。因为所有的视图类都会加载 settings 中的配置。这些都是在<code>dispatch</code>方法中完成的。</p>
<h3 id="3-局部禁用"><a href="#3-局部禁用" class="headerlink" title="3. 局部禁用"></a>3. 局部禁用</h3><p>局部禁用的话只需要在视图类中定义一个空的<code>authentication_classes</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">authentication_classes = []</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django-restframework 源码</category>
      </categories>
  </entry>
  <entry>
    <title>django-restframework之缓存</title>
    <url>/2019/02/27/Django-restframework%E4%B9%8B%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="django-restframework之缓存系统"><a href="#django-restframework之缓存系统" class="headerlink" title="django-restframework之缓存系统"></a>django-restframework之缓存系统</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><h3 id="一-为什么需要缓存"><a href="#一-为什么需要缓存" class="headerlink" title="一 为什么需要缓存"></a>一 为什么需要缓存</h3><p>在动态网站中，用户所有的请求，服务器都会去数据库中进行相应的增、删、查、改，渲染模块，执行业务逻辑，最后生成用户看到的页面。</p>
<p>当一个网站的用户访问量很大的时候，每一次的后台操作，都会消耗很多的服务端资源，所以必须使用缓存来减轻后端服务期的压力。</p>
<p>缓存是将一些常用的数据保存在内存中火车 memcache 中，在一定的时间内有人来访问这些数据时，则不再去执行数据库及渲染等操作，而是直接从内存或 memcache 的缓存中去取得数据，之后再返回给用户。</p>
<h3 id="二-Django-中的六种缓存方式"><a href="#二-Django-中的六种缓存方式" class="headerlink" title="二 Django 中的六种缓存方式"></a>二 Django 中的六种缓存方式</h3><ol>
<li>开发调试缓存</li>
<li>内存缓存</li>
<li>文件缓存</li>
<li>数据库缓存</li>
<li>Memcache 缓存（使用 python-memcached 模块）</li>
<li>Memcache 缓存（使用 pylibmc 模块）</li>
</ol>
<h2 id="二-Django-中的缓存配置"><a href="#二-Django-中的缓存配置" class="headerlink" title="二 Django 中的缓存配置"></a>二 Django 中的缓存配置</h2><h3 id="一-开发调试缓存"><a href="#一-开发调试缓存" class="headerlink" title="一 开发调试缓存"></a>一 开发调试缓存</h3><p>此模式为开发调试使用，实际上不执行任何操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.dummy.DummyCache'</span>,  <span class="comment"># 缓存后台使用的引擎</span></span><br><span class="line">  <span class="string">'TIMEOUT'</span>: <span class="number">300</span>,            <span class="comment"># 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）</span></span><br><span class="line">  <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,          <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,          <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-内存缓存"><a href="#二-内存缓存" class="headerlink" title="二 内存缓存"></a>二 内存缓存</h3><p>将缓存内容保存到内存中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.locmem.LocMemCache'</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">  <span class="string">'LOCATION'</span>: <span class="string">'unique-snowflake'</span>,         <span class="comment"># 写在内存中的变量的唯一值 </span></span><br><span class="line">  <span class="string">'TIMEOUT'</span>:<span class="number">300</span>,             <span class="comment"># 缓存超时时间(默认为300秒,None表示永不过期)</span></span><br><span class="line">  <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,           <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,          <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-文件缓存"><a href="#三-文件缓存" class="headerlink" title="三 文件缓存"></a>三 文件缓存</h3><p>将缓存数据存储在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.filebased.FileBasedCache'</span>, <span class="comment">#指定缓存使用的引擎</span></span><br><span class="line">  <span class="string">'LOCATION'</span>: <span class="string">'/var/tmp/django_cache'</span>,        <span class="comment">#指定缓存的路径</span></span><br><span class="line">  <span class="string">'TIMEOUT'</span>:<span class="number">300</span>,              <span class="comment">#缓存超时时间(默认为300秒,None表示永不过期)</span></span><br><span class="line">  <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,            <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,           <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四-数据库缓存"><a href="#四-数据库缓存" class="headerlink" title="四 数据库缓存"></a>四 数据库缓存</h3><p>将缓存数据存储在数据库中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.db.DatabaseCache'</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">  <span class="string">'LOCATION'</span>: <span class="string">'cache_table'</span>,          <span class="comment"># 数据库表    </span></span><br><span class="line">  <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,           <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,          <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：创建缓存的数据表使用的语句：</span></span><br><span class="line">python manage.py createcachetable</span><br></pre></td></tr></table></figure>
<h3 id="五-Memcache缓存"><a href="#五-Memcache缓存" class="headerlink" title="五 Memcache缓存"></a>五 Memcache缓存</h3><p>使用 python-memcached 模块连接 memcache</p>
<p>Memcached 是 Django 原生支持的缓存系统。要使用 Memcached，需要下载 Memcached 的支持库 python-memcached 或 pylibmc。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>, <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">  <span class="string">'LOCATION'</span>: <span class="string">'192.168.10.100:11211'</span>,         <span class="comment"># 指定Memcache缓存服务器的IP地址和端口</span></span><br><span class="line">  <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,            <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,           <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LOCATION也可以配置成如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'LOCATION'</span>: <span class="string">'unix:/tmp/memcached.sock'</span>,   <span class="comment"># 指定局域网内的主机名加socket套接字为Memcache缓存服务器</span></span><br><span class="line"><span class="string">'LOCATION'</span>: [         <span class="comment"># 指定一台或多台其他主机ip地址加端口为Memcache缓存服务器</span></span><br><span class="line"> <span class="string">'192.168.10.100:11211'</span>,</span><br><span class="line"> <span class="string">'192.168.10.101:11211'</span>,</span><br><span class="line"> <span class="string">'192.168.10.102:11211'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="六-Memcache缓存"><a href="#六-Memcache缓存" class="headerlink" title="六 Memcache缓存"></a>六 Memcache缓存</h3><p>使用 pylibmc 模块连接 Memcache</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">settings.py文件配置</span><br><span class="line"> CACHES = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">   <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.PyLibMCCache'</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">   <span class="string">'LOCATION'</span>:<span class="string">'192.168.10.100:11211'</span>,         <span class="comment"># 指定本机的11211端口为Memcache缓存服务器</span></span><br><span class="line">   <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">    <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,            <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">    <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,           <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">   &#125;,  </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>LOCATION也可以配置为如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'LOCATION'</span>: <span class="string">'/tmp/memcached.sock'</span>,  <span class="comment"># 指定某个路径为缓存目录</span></span><br><span class="line"><span class="string">'LOCATION'</span>: [       <span class="comment"># 分布式缓存,在多台服务器上运行Memcached进程,程序会把多台服务器当作一个单独的缓存,而不会在每台服务器上复制缓存值</span></span><br><span class="line"> <span class="string">'192.168.10.100:11211'</span>,</span><br><span class="line"> <span class="string">'192.168.10.101:11211'</span>,</span><br><span class="line"> <span class="string">'192.168.10.102:11211'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Memcached 是基于内存的缓存，数据存储在内存中。所以如果服务器死机的话，数据会丢失，所以 Memcached 一般与其他缓存配合使用。</p>
<h2 id="三-Django-中的缓存应用"><a href="#三-Django-中的缓存应用" class="headerlink" title="三 Django 中的缓存应用"></a>三 Django 中的缓存应用</h2><p>Django 提供了不同粒度的缓存，可以缓存某个页面，可以只缓存一个页面的某个部分，甚至可以缓存整个网站。</p>
<p>数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">6</span>, decimal_places=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="一-视图函数使用缓存"><a href="#一-视图函数使用缓存" class="headerlink" title="一 视图函数使用缓存"></a>一 视图函数使用缓存</h3><p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache_page(15)          #超时时间为15秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">　　t=time.time()      <span class="comment">#获取当前时间</span></span><br><span class="line">　　bookList=Book.objects.all()</span><br><span class="line">　　<span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,locals())</span><br></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前时间:-----&#123;&#123; t &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in bookList %&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.name &#125;&#125;---------&gt;&#123;&#123; book.price &#125;&#125;$<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个例子是基于内存的缓存配置，基于文件的缓存该怎么配置呢？</p>
<p>更改 settings.py 的配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line"> <span class="string">'default'</span>: &#123;</span><br><span class="line">  <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.filebased.FileBasedCache'</span>, <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">  <span class="string">'LOCATION'</span>: <span class="string">'E:\django_cache'</span>,          <span class="comment"># 指定缓存的路径</span></span><br><span class="line">  <span class="string">'TIMEOUT'</span>: <span class="number">300</span>,              <span class="comment"># 缓存超时时间(默认为300秒,None表示永不过期)</span></span><br><span class="line">  <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">   <span class="string">'MAX_ENTRIES'</span>: <span class="number">300</span>,            <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">   <span class="string">'CULL_FREQUENCY'</span>: <span class="number">3</span>,           <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后再次刷新浏览器，可以看到在刚才配置的目录下生成缓存文件，通过测试可以知道，Django 会以自己的形式把缓存文件保存在配置文件中指定的目录中。</p>
<h3 id="二-全站使用缓存"><a href="#二-全站使用缓存" class="headerlink" title="二 全站使用缓存"></a>二 全站使用缓存</h3><p>全站缓存需要使用 Django 的中间件。</p>
<p>用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用<code>FetchFromCacheMiddleware</code>获取内容并返回给用户。</p>
<p>当返回给用户之前，判断缓存中是否已经存在，如果不存在，则<code>UpdateCacheMiddleware</code>会将缓存保存在 Django 的缓存中，以实现全站缓存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存整个站点，是最简单的缓存方式</span></span><br><span class="line"><span class="comment"># 在 MIDDLEWARE_CLASSES 中加入 “update” 和 “fetch” 中间件</span></span><br><span class="line"></span><br><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    <span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>, <span class="comment">#第一</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>, <span class="comment">#最后</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>具体中间件配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    <span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>,   <span class="comment">#响应HttpResponse中设置几个headers</span></span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.SessionAuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,   <span class="comment">#用来缓存通过GET和HEAD方法获取的状态码为200的响应</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CACHE_MIDDLEWARE_SECONDS=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">     t=time.time()      <span class="comment">#获取当前时间</span></span><br><span class="line">     bookList=Book.objects.all()</span><br><span class="line">     <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(request)</span>:</span></span><br><span class="line">    t=time.time()      <span class="comment">#获取当前时间</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"HELLO:"</span>+str(t))</span><br></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>当前时间:-----&#123;&#123; t &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in bookList %&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.name &#125;&#125;---------&gt;&#123;&#123; book.price &#125;&#125;$<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其余代码不变，刷新浏览器是10秒，页面上的时间变化一次，这样就实现了全站缓存。</p>
<h3 id="三-局部缓存"><a href="#三-局部缓存" class="headerlink" title="三 局部缓存"></a>三 局部缓存</h3><p>刷新页面时，整个网页只有某部分实现缓存。</p>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">     t=time.time()      <span class="comment">#获取当前时间</span></span><br><span class="line">     bookList=Book.objects.all()</span><br><span class="line">     <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,locals())</span><br></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load cache %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>不缓存:-----&#123;&#123; t &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% cache 2 'name' %&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>缓存:-----:&#123;&#123; t &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">&#123;% endcache %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>django-restframework之路由控制、解析器及响应器</title>
    <url>/2019/02/27/Django-restframework%E4%B9%8B%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6%E3%80%81%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8F%8A%E5%93%8D%E5%BA%94%E5%99%A8/</url>
    <content><![CDATA[<h1 id="django-restframework之路由控制、解析器及响应器"><a href="#django-restframework之路由控制、解析器及响应器" class="headerlink" title="django-restframework之路由控制、解析器及响应器"></a>django-restframework之路由控制、解析器及响应器</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>本篇博客介绍 restframework 框架的剩下几个组件，路由控制有三种：传统路由、半自动路由及全自动路由；解析器是用来解析要响应的数据格式，比如是<code>form-data</code>、<code>json</code>、或是<code>urlencoded</code>等数据格式；响应器根据用户请求 url 或用户可以接受的数据格式来筛选出合适的渲染组件。</p>
<h2 id="二-路由控制"><a href="#二-路由控制" class="headerlink" title="二 路由控制"></a>二 路由控制</h2><h3 id="一-传统路由"><a href="#一-传统路由" class="headerlink" title="一 传统路由"></a>一 传统路由</h3><p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^books/$'</span>, views.BookView.as_view()),</span><br><span class="line">    url(<span class="string">r'^books/(?P&lt;pk&gt;\d+)$'</span>, views.BookDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        bs = BookSerializers(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 添加一条数据</span></span><br><span class="line">        print(request.data)</span><br><span class="line"></span><br><span class="line">        bs=BookSerializers(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save()  <span class="comment"># 生成记录</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        book_obj=models.Book.objects.filter(pk=pk).first()</span><br><span class="line">        bs=BookSerializers(book_obj,many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        book_obj = models.Book.objects.filter(pk=pk).first()</span><br><span class="line"></span><br><span class="line">        bs=BookSerializers(data=request.data,instance=book_obj)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save() <span class="comment"># update</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        models.Book.objects.filter(pk=pk).delete()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<h3 id="二-半自动路由（视图类继承-ModelViewSet）"><a href="#二-半自动路由（视图类继承-ModelViewSet）" class="headerlink" title="二 半自动路由（视图类继承 ModelViewSet）"></a>二 半自动路由（视图类继承 ModelViewSet）</h3><p>原理就是重写 as_view方法，以致可以找到请求方法和响应视图方法的对应关系。</p>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^publish/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">    url(<span class="string">r'^publish/(?P&lt;pk&gt;\d+)/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure>
<h3 id="三-全自动路由（自动生成路由）"><a href="#三-全自动路由（自动生成路由）" class="headerlink" title="三 全自动路由（自动生成路由）"></a>三 全自动路由（自动生成路由）</h3><p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">router=routers.DefaultRouter()</span><br><span class="line"><span class="comment"># 两个参数，一个是匹配的路由，一个是视图中写的CBV的类</span></span><br><span class="line">router.register(<span class="string">'publish'</span>,views.PublishView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/publish/format=json(渲染器通过这个判断，返回渲染的页面)</span></span><br><span class="line">    <span class="comment"># url(r'^publish/', views.PublishView.as_view(&#123;'get':'list','post':'create'&#125;)),</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/publish.json(渲染器通过这个判断，返回渲染的页面)</span></span><br><span class="line">    <span class="comment"># url(r'^publish\.(?P&lt;format&gt;\w+)$', views.PublishView.as_view(&#123;'get':'list','post':'create'&#125;)),</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以用 以下方式访问</span></span><br><span class="line">    <span class="comment"># 1 http://127.0.0.1:8000/publish/</span></span><br><span class="line">    <span class="comment"># 2 http://127.0.0.1:8000/publish.json</span></span><br><span class="line">    <span class="comment"># 3 http://127.0.0.1:8000/publish/3</span></span><br><span class="line">    <span class="comment"># 4 http://127.0.0.1:8000/publish/3.json   </span></span><br><span class="line">    url(<span class="string">r''</span>,include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure>
<h2 id="三-解析器"><a href="#三-解析器" class="headerlink" title="三 解析器"></a>三 解析器</h2><h3 id="一-解析器的作用"><a href="#一-解析器的作用" class="headerlink" title="一 解析器的作用"></a>一 解析器的作用</h3><p>根据请求头的<code>Content-Type</code>参数来选择对应的解析器对请求体内容进行处理，有<code>application/json</code>、<code>x-www-form-urlencoded</code>、<code>form-data</code>等格式。</p>
<h3 id="二-全局使用解析器"><a href="#二-全局使用解析器" class="headerlink" title="二 全局使用解析器"></a>二 全局使用解析器</h3><p><strong>settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PARSER_CLASSES'</span>:[</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="三-局部使用解析器"><a href="#三-局部使用解析器" class="headerlink" title="三 局部使用解析器"></a>三 局部使用解析器</h3><ol>
<li>仅处理请求头 content-type 为 application/json 的请求体</li>
</ol>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views.s5_parser <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部配置该参数</span></span><br><span class="line">    parser_classes = [JSONParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>仅处理请求头 content-type 为 application/x-www-form-urlencoded 的请求体</li>
</ol>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FormParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    parser_classes = [FormParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>仅处理请求头 content-type 为 multipart/form-data 的请求体</li>
</ol>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> MultiPartParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    parser_classes = [MultiPartParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/test/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>仅上传文件</li>
</ol>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/(?P&lt;filename&gt;[^/]+)'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    parser_classes = [FileUploadParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, filename, *args, **kwargs)</span>:</span></span><br><span class="line">        print(filename)</span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/test/f1.numbers"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>同时多个 parser</li>
</ol>
<p>当同时使用多个 parser 时，restframework 会根据请求头 content-ty 自动进行对应，并使用相应的 parset</p>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser, FormParser, MultiPartParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    parser_classes = [JSONParser, FormParser, MultiPartParser, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="四-解析器源码分析"><a href="#四-解析器源码分析" class="headerlink" title="四 解析器源码分析"></a>四 解析器源码分析</h3><p>当调用<code>request.data</code>时才进行解析数据，这里的 request 是<code>Request</code>类对象。</p>
<h3 id="1-request-data"><a href="#1-request-data" class="headerlink" title="1. request.data"></a>1. request.data</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kqmdpvw1j31ei05a3zw.jpg" alt></p>
<h3 id="2-request-load-data-and-files"><a href="#2-request-load-data-and-files" class="headerlink" title="2. request._load_data_and_files"></a>2. request._load_data_and_files</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kqotpvh1j31he0h2aeo.jpg" alt></p>
<h3 id="3-request-parse"><a href="#3-request-parse" class="headerlink" title="3. request._parse"></a>3. request._parse</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0kqq6ygpfj317o0u014z.jpg" alt></p>
<h3 id="4-request-stream"><a href="#4-request-stream" class="headerlink" title="4. request._stream"></a>4. request._stream</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kqt5fjfcj31o4088dhq.jpg" alt></p>
<h3 id="5-self-parsers"><a href="#5-self-parsers" class="headerlink" title="5. self.parsers"></a>5. self.parsers</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0kqvaag38j31bc0d6acy.jpg" alt></p>
<h3 id="6-self-parser-classes"><a href="#6-self-parser-classes" class="headerlink" title="6. self.parser_classes"></a>6. self.parser_classes</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0kqvrnzhhj3186058q4g.jpg" alt></p>
<p>self.parser_classes就是设置在视图类中的一个列表</p>
<h3 id="7-self-negotiator-select-parser"><a href="#7-self-negotiator-select-parser" class="headerlink" title="7. self.negotiator.select_parser"></a>7. self.negotiator.select_parser</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0kr59pii8j317y0c4n0a.jpg" alt></p>
<p>根据数据格式选择对应的数据解析器</p>
<h3 id="8-self-get-parser-context"><a href="#8-self-get-parser-context" class="headerlink" title="8. self.get_parser_context"></a>8. self.get_parser_context</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kr8zeojmj317w0d0q6e.jpg" alt></p>
<h3 id="9-stream、media-type和-self-parser-context准备好"><a href="#9-stream、media-type和-self-parser-context准备好" class="headerlink" title="9. stream、media_type和 self.parser_context准备好"></a>9. stream、media_type和 self.parser_context准备好</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0krbxm80sj31ho0isq9l.jpg" alt></p>
<p>###10. 假设该解析器为 JSONParser</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kreazcuhj31hu0kiq96.jpg" alt></p>
<h2 id="四-响应器"><a href="#四-响应器" class="headerlink" title="四 响应器"></a>四 响应器</h2><h3 id="一-作用"><a href="#一-作用" class="headerlink" title="一 作用"></a>一 作用</h3><p>根据用户请求的 URL 或用户可接受的数据类型，筛选出合适的渲染组件。</p>
<p>用户请求 URL：</p>
<ul>
<li><a href="http://127.0.0.1:8000/test/?format=json" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=json</a></li>
<li><a href="http://127.0.0.1:8000/test.json" target="_blank" rel="noopener">http://127.0.0.1:8000/test.json</a></li>
</ul>
<h3 id="二内置渲染器"><a href="#二内置渲染器" class="headerlink" title="二内置渲染器"></a>二内置渲染器</h3><p>显示 json 格式：JSONRenderer</p>
<p>访问 url：</p>
<ul>
<li><a href="http://127.0.0.1:8000/test/?format=json" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=json</a></li>
<li><a href="http://127.0.0.1:8000/test.json" target="_blank" rel="noopener">http://127.0.0.1:8000/test.json</a></li>
<li><a href="http://127.0.0.1:8000/test/" target="_blank" rel="noopener">http://127.0.0.1:8000/test/</a></li>
</ul>
<p>默认显示格式：BrowsableAPIRenderer（可以修改 html 文件）</p>
<p>访问 url：</p>
<ul>
<li><a href="http://127.0.0.1:8000/test/?format=api" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=api</a></li>
<li><a href="http://127.0.0.1:8000/test.api" target="_blank" rel="noopener">http://127.0.0.1:8000/test.api</a></li>
<li><a href="http://127.0.0.1:8000/test/" target="_blank" rel="noopener">http://127.0.0.1:8000/test/</a></li>
</ul>
<p>表格方式：AdminRenderer</p>
<p>访问 url：</p>
<ul>
<li><a href="http://127.0.0.1:8000/test/format=admin" target="_blank" rel="noopener">http://127.0.0.1:8000/test/format=admin</a></li>
<li><a href="http://127.0.0.1:8000/test.admin" target="_blank" rel="noopener">http://127.0.0.1:8000/test.admin</a></li>
<li><a href="http://127.0.0.1:8000/test/" target="_blank" rel="noopener">http://127.0.0.1:8000/test/</a></li>
</ul>
<p>form 表单方式：HTMLFormRenderer</p>
<p>访问 url：</p>
<ul>
<li><a href="http://127.0.0.1:8000/test/?format=form" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=form</a></li>
<li><a href="http://127.0.0.1:8000/test.form" target="_blank" rel="noopener">http://127.0.0.1:8000/test.form</a></li>
<li><a href="http://127.0.0.1:8000/test/" target="_blank" rel="noopener">http://127.0.0.1:8000/test/</a></li>
</ul>
<h3 id="三-局部使用"><a href="#三-局部使用" class="headerlink" title="三 局部使用"></a>三 局部使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span>  HTMLFormRenderer,BrowsableAPIRenderer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    renderer_classes = [HTMLFormRenderer,BrowsableAPIRenderer ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        book_obj=models.Book.objects.filter(pk=pk).first()</span><br><span class="line">        bs=BookSerializers(book_obj,many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        book_obj = models.Book.objects.filter(pk=pk).first()</span><br><span class="line"></span><br><span class="line">        bs=BookSerializers(data=request.data,instance=book_obj)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save() <span class="comment"># update</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        models.Book.objects.filter(pk=pk).delete()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<h3 id="四-全局使用"><a href="#四-全局使用" class="headerlink" title="四 全局使用"></a>四 全局使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>:[<span class="string">'rest_framework.renderers.JSONRenderer'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="五-自定义显示模板"><a href="#五-自定义显示模板" class="headerlink" title="五 自定义显示模板"></a>五 自定义显示模板</h3><p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span>  TemplateHTMLRenderer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    renderer_classes = [TemplateHTMLRenderer]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        book_obj=models.Book.objects.filter(pk=pk).first()</span><br><span class="line">        bs=BookSerializers(book_obj,many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(bs.data,template_name=<span class="string">'aa.html'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123; title &#125;&#125;</span><br><span class="line">&#123;&#123; publishDate &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>django-restframework之视图类</title>
    <url>/2019/02/26/Django-restframework%E4%B9%8B%E8%A7%86%E5%9B%BE%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="django-restframework之视图组件及规范化接口"><a href="#django-restframework之视图组件及规范化接口" class="headerlink" title="django-restframework之视图组件及规范化接口"></a>django-restframework之视图组件及规范化接口</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>在写接口的时候，比如增删查改，在获取所有的数据以及获取单个数据时，具体的代码逻辑几乎完全一样，就是参数不同，所以可以通过视图类来减少代码冗余。</p>
<h2 id="二-规范化接口"><a href="#二-规范化接口" class="headerlink" title="二 规范化接口"></a>二 规范化接口</h2><p>在之前的代码都是做 if 判断来进行代码执行的逻辑，而强壮的代码必然会有 try-except 用来捕捉程序的不确定错误，这样可以减少代码的错误发生概率。</p>
<h2 id="三-原始版本接口"><a href="#三-原始版本接口" class="headerlink" title="三 原始版本接口"></a>三 原始版本接口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    permission_classes = [permiss_classes.LoginPermission]</span><br><span class="line">    <span class="comment"># throttle_classes = [thrott_classes.BookThrottle]</span></span><br><span class="line">    throttle_classes = []</span><br><span class="line">    <span class="comment"># authentication_classes = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        book_ser = myser.BookSer(data=request.data, instance=book_obj)</span><br><span class="line">        <span class="comment"># 新方法，使用序列化组件保存，但是必须是继承自 ModelSerializer 的序列化类，这样才可以知道要保存的表模型</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            <span class="comment"># save既可以修改也可以新增</span></span><br><span class="line">            book_ser.save()</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        models.Book.objects.filter(pk=id).delete()</span><br><span class="line">        response[<span class="string">'msg'</span>] = <span class="string">'删除成功'</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="四-规范化接口"><a href="#四-规范化接口" class="headerlink" title="四 规范化接口"></a>四 规范化接口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = MyResponse()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = models.Book.objects.get(pk=id)</span><br><span class="line">            book_ser = BookSerializer(instance=book, many=<span class="literal">False</span>)</span><br><span class="line">            response.book = book_ser.data</span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist <span class="keyword">as</span>  e:</span><br><span class="line">            response.status = <span class="number">101</span></span><br><span class="line">            response.msg = <span class="string">'id不存在'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            response.status = <span class="number">201</span></span><br><span class="line">            <span class="comment"># response.msg = '您的操作有误'</span></span><br><span class="line">            response.msg = str(e)</span><br><span class="line">        <span class="keyword">return</span> Response(response.get_dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = MyResponse()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = models.Book.objects.get(pk=id)</span><br><span class="line">            book_ser = BookSerializer(data=request.data, instance=book)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> book_ser.is_valid():</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">'数据校验失败'</span>)</span><br><span class="line">            book_ser.save()</span><br><span class="line">            response.book = book_ser.data</span><br><span class="line">            response.msg = <span class="string">'修改成功'</span></span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist <span class="keyword">as</span>  e:</span><br><span class="line">            response.status = <span class="number">101</span></span><br><span class="line">            response.msg = <span class="string">'id不存在'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            response.status = <span class="number">201</span></span><br><span class="line">            <span class="comment"># response.msg = '您的操作有误'</span></span><br><span class="line">            response.msg = str(e)</span><br><span class="line">        <span class="keyword">return</span> Response(response.get_dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = MyResponse()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            models.Book.objects.filter(pk=id).delete()</span><br><span class="line">            response.msg = <span class="string">'删除成功'</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            response.status = <span class="number">201</span></span><br><span class="line">            <span class="comment"># response.msg = '您的操作有误'</span></span><br><span class="line">            response.msg = str(e)</span><br><span class="line">        <span class="keyword">return</span> Response(response.get_dic)</span><br></pre></td></tr></table></figure>
<h2 id="五-视图类相关使用"><a href="#五-视图类相关使用" class="headerlink" title="五 视图类相关使用"></a>五 视图类相关使用</h2><p>原理就是 restframework 框架帮我们封装了一些方法，我们只要修改某些配置就可以使用它提供的方法，可以大大的减少代码的冗余。</p>
<p>封装类里面需要使用的方法：</p>
<ul>
<li>DestroyModelMixin:删除</li>
<li>UpdateModelMixin,:更新</li>
<li>RetrieveModelMixin :获取一条</li>
<li>CreateModelMixin:新增一条</li>
<li>ListModelMixin:获取所有</li>
</ul>
<p>这几个方法和增删查改的接口的作用是一样的，所以只需要把相关的 model 对象和序列化类传过去就可以无缝衔接。</p>
<h3 id="1-使用-mixin-类和-generice-类编写视图"><a href="#1-使用-mixin-类和-generice-类编写视图" class="headerlink" title="1. 使用 mixin 类和 generice 类编写视图"></a>1. 使用 mixin 类和 generice 类编写视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> CreateModelMixin,RetrieveModelMixin,ListModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ListModelMixin,CreateModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span><span class="params">(RetrieveModelMixin,UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                        DestroyModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,*args,**kwargs)</span><br></pre></td></tr></table></figure>
<h3 id="2-使用-generics-下的-ListCreateAPIView-RetrieveUpdateDestroyAPIView"><a href="#2-使用-generics-下的-ListCreateAPIView-RetrieveUpdateDestroyAPIView" class="headerlink" title="2. 使用 generics 下的 ListCreateAPIView,RetrieveUpdateDestroyAPIView"></a>2. 使用 generics 下的 ListCreateAPIView,RetrieveUpdateDestroyAPIView</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView,RetrieveUpdateDestroyAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span><span class="params">(RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure>
<h3 id="3-使用-ModelViewSet"><a href="#3-使用-ModelViewSet" class="headerlink" title="3. 使用 ModelViewSet"></a>3. 使用 ModelViewSet</h3><p><strong>路由：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publish/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">    url(<span class="string">r'^publish/(?P&lt;pk&gt;\d+)/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>&#125;)),</span><br></pre></td></tr></table></figure>
<p><strong>视图：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure>
<p>最后只封装成一个视图类就可以实现两套路由，具体逻辑就是<code>as_view</code>后面的参数的映射关系，最后可以根据 mro 列表来查找对应的执行方法。</p>
<h2 id="六-ModelViewSet-的执行流程"><a href="#六-ModelViewSet-的执行流程" class="headerlink" title="六 ModelViewSet 的执行流程"></a>六 ModelViewSet 的执行流程</h2><h3 id="1-class-ModelViewSet"><a href="#1-class-ModelViewSet" class="headerlink" title="1. class ModelViewSet"></a>1. class ModelViewSet</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0kp08jo70j31q60bcq6r.jpg" alt></p>
<p>###2. class GenericViewSet</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kp2oyubnj31je074dk3.jpg" alt></p>
<h3 id="3-ViewSetMixin中的-as-view"><a href="#3-ViewSetMixin中的-as-view" class="headerlink" title="3. ViewSetMixin中的 as_view"></a>3. ViewSetMixin中的 as_view</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0kpb56ao7j31os0kw13p.jpg" alt></p>
]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django-restframework之频率组件源码分析</title>
    <url>/2019/02/25/Django-restframework%E4%B9%8B%E9%A2%91%E7%8E%87%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Django-restframework-之频率源码分析"><a href="#Django-restframework-之频率源码分析" class="headerlink" title="Django-restframework 之频率源码分析"></a>Django-restframework 之频率源码分析</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>经过权限判断之后就是进行频率的判断了，而频率的判断和权限又不一样，认证、权限和频率的执行流程都差不多，使用配置里面的相关类来进行判断。而不和认证和权限一样，频率的配置没有，查看<code>APIView</code>的类属性如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0jolhvijhj31es0fo456.jpg" alt></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0jomlax2gj31g00p2gu9.jpg" alt></p>
<h2 id="二-频率组件执行流程"><a href="#二-频率组件执行流程" class="headerlink" title="二 频率组件执行流程"></a>二 频率组件执行流程</h2><p>虽然<code>restframework</code>原生灭有配置频率，但是提供了几个进行频率判断的类，如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0joona2jrj311i066taz.jpg" alt></p>
<p>其中<code>SimpleRateThrottle</code>类是根据访问者 ip 来进行频率限制的一个类，来看看这个类的执行流程。</p>
<h3 id="1-init方法"><a href="#1-init方法" class="headerlink" title="1. init方法"></a>1. init方法</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0jsqpl8dkj31fq0l8tft.jpg" alt></p>
<h3 id="2-get-rate"><a href="#2-get-rate" class="headerlink" title="2. get_rate"></a>2. get_rate</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0jt3y8eoej31fu0dq0xd.jpg" alt></p>
<h3 id="3-执行-allow-request方法"><a href="#3-执行-allow-request方法" class="headerlink" title="3. 执行 allow_request方法"></a>3. 执行 allow_request方法</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0jt85q53sj31ee0mqgsg.jpg" alt></p>
<h3 id="4-get-cache-key"><a href="#4-get-cache-key" class="headerlink" title="4. get_cache_key"></a>4. get_cache_key</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0jt9uszixj31ag07ogow.jpg" alt></p>
<h3 id="5-时间差判断"><a href="#5-时间差判断" class="headerlink" title="5. 时间差判断"></a>5. 时间差判断</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0jtef84ajj31ds0b2q9a.jpg" alt></p>
<h3 id="6-throttle-success"><a href="#6-throttle-success" class="headerlink" title="6. throttle_success"></a>6. throttle_success</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0jtgzjdg2j31ew07wn02.jpg" alt></p>
<p>认证失败的话执行<code>throttle_failure</code>，其实就是返回<code>False</code>。</p>
<h3 id="7-wait"><a href="#7-wait" class="headerlink" title="7. wait"></a>7. wait</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0k1tmv4b2j31ew0dudji.jpg" alt></p>
<h2 id="三-自定义频率组件"><a href="#三-自定义频率组件" class="headerlink" title="三 自定义频率组件"></a>三 自定义频率组件</h2><h3 id="1-自定义频率类"><a href="#1-自定义频率类" class="headerlink" title="1. 自定义频率类"></a>1. 自定义频率类</h3><p>频率类需要继承自带的频率类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from rest_framework.throttling import BaseThrottle</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookThrottle</span><span class="params">(BaseThrottle)</span>:</span></span><br><span class="line"></span><br><span class="line">    VISIT_RECORD = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        print(request.META)</span><br><span class="line">        REMOTE_ADDR = request.META.get(<span class="string">'REMOTE_ADDR'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        ctime = time.time()</span><br><span class="line">        <span class="keyword">if</span> REMOTE_ADDR <span class="keyword">not</span> <span class="keyword">in</span> self.VISIT_RECORD:</span><br><span class="line">            self.VISIT_RECORD[REMOTE_ADDR] = [ctime,]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        self.history = self.VISIT_RECORD.get(REMOTE_ADDR)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> ctime - self.history[<span class="number">-1</span>] &gt; <span class="number">60</span>:</span><br><span class="line">            self.history.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.history) &lt; <span class="number">3</span>:</span><br><span class="line">            self.history.insert(<span class="number">0</span>, ctime)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        ctime = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span> - (ctime - self.history[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 频率类代码注释</span></span><br><span class="line">         <span class="comment"># 访问频率的逻辑</span></span><br><span class="line"><span class="comment">#         #     &#123;'ip地址':[16:13:39,16:13:19,],'ip地址2':[时间1,时间2],&#125;</span></span><br><span class="line"><span class="comment">#         # （1）取出访问者ip</span></span><br><span class="line"><span class="comment">#         # （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问，在字典里，继续往下走</span></span><br><span class="line"><span class="comment">#         # （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line"><span class="comment">#         # （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line"><span class="comment">#         # （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line"><span class="comment">#         #（1）取出访问者ip</span></span><br><span class="line"><span class="comment">#         # print(request.META)</span></span><br><span class="line"><span class="comment">#         # REMOTE_ADDR 就是访问者的ip:127.0.0.1</span></span><br><span class="line"><span class="comment">#         ip=request.META.get('REMOTE_ADDR')</span></span><br><span class="line"><span class="comment">#         import time</span></span><br><span class="line"><span class="comment">#         # 获取当前时间</span></span><br><span class="line"><span class="comment">#         ctime=time.time()</span></span><br><span class="line"><span class="comment">#         # （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问</span></span><br><span class="line"><span class="comment">#         if ip not in self.VISIT_RECORD:</span></span><br><span class="line"><span class="comment">#             self.VISIT_RECORD[ip]=[ctime,]</span></span><br><span class="line"><span class="comment">#             # &#123;'127.0.0.1':[时间1,时间1,]&#125;</span></span><br><span class="line"><span class="comment">#             return True</span></span><br><span class="line"><span class="comment">#         # self.history=[时间1,时间1,]</span></span><br><span class="line"><span class="comment">#         self.history=self.VISIT_RECORD.get(ip)</span></span><br><span class="line"><span class="comment">#         # （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line"><span class="comment">#         while self.history and ctime-self.history[-1]&gt;60:</span></span><br><span class="line"><span class="comment">#             self.history.pop()</span></span><br><span class="line"><span class="comment">#         # （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line"><span class="comment">#         # （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line"><span class="comment">#         if len(self.history)&lt;3:</span></span><br><span class="line"><span class="comment">#             self.history.insert(0,ctime)</span></span><br><span class="line"><span class="comment">#             return True</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             return False</span></span><br></pre></td></tr></table></figure>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p>使用很简单，在需要进行频率控制的视图类中定义一个属性<code>throttle_classes</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    permission_classes = [permiss_classes.LoginPermission]</span><br><span class="line">    throttle_classes = [thrott_classes.BookThrottle]</span><br><span class="line">    <span class="comment"># authentication_classes = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<h2 id="四-配置自定义频率类"><a href="#四-配置自定义频率类" class="headerlink" title="四 配置自定义频率类"></a>四 配置自定义频率类</h2><h3 id="1-局部配置"><a href="#1-局部配置" class="headerlink" title="1. 局部配置"></a>1. 局部配置</h3><p>其实上面的就是局部配置，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    permission_classes = [permiss_classes.LoginPermission]</span><br><span class="line">    throttle_classes = [thrott_classes.BookThrottle]</span><br></pre></td></tr></table></figure>
<h3 id="2-全局使用"><a href="#2-全局使用" class="headerlink" title="2. 全局使用"></a>2. 全局使用</h3><p>全局配置如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: [<span class="string">'app01.thrott_classes.BookThrottle'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-局部禁用"><a href="#3-局部禁用" class="headerlink" title="3. 局部禁用"></a>3. 局部禁用</h3><p>局部禁用需要在视图类中定义一个空的<code>throttle_classes</code>属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">throttle_classes = []</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Django（一）</title>
    <url>/2019/01/03/Django%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（一）"><a href="#Django-系列博客（一）" class="headerlink" title="Django 系列博客（一）"></a>Django 系列博客（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习了 python 这么久，终于到了Django 框架。这可以说是 python 名气最大的web 框架了，那么从今天开始会开始从 Django框架的安装到使用一步步的学习，这系列博客不会像前端的那样水了（立个 flag），希望可以成为高质量的博客。那么本篇博客介绍 Django 的安装以及如何在电脑上运行第一个 Django 应用。</p>
<h2 id="Django-的安装"><a href="#Django-的安装" class="headerlink" title="Django 的安装"></a>Django 的安装</h2><p>Django 的安装很简单，在 win 和 mac 上面都可以使用 pip 安装命令安装，也可以通过 pycharm 安装，或者下载文件在命令行使用安装工具安装。</p>
<p>接下来我在 ubuntu 上安装做示例。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fytf37kex3j323m0b4grs.jpg" alt></p>
<p>在这里还安装了一个依赖包 pytz。这是用来做时区转换的一个第三方库。</p>
<p>其他平台的 pip 安装方式一样，不过要选用 python3的对应 pip 来安装，因为现在的 Django 版本已经不支持 python2了。</p>
<h2 id="虚拟环境的安装"><a href="#虚拟环境的安装" class="headerlink" title="虚拟环境的安装"></a>虚拟环境的安装</h2><h3 id="什么是虚拟环境"><a href="#什么是虚拟环境" class="headerlink" title="什么是虚拟环境"></a>什么是虚拟环境</h3><ul>
<li>对真实的 python 解释器的一个拷贝版本</li>
<li>事实有效，可以独立存在并运行解释 python 代码</li>
<li>可以在计算机上拷贝多个虚拟环境</li>
</ul>
<h3 id="为什么要使用虚拟环境"><a href="#为什么要使用虚拟环境" class="headerlink" title="为什么要使用虚拟环境"></a>为什么要使用虚拟环境</h3><ul>
<li>保证真实环境的纯净性</li>
<li>框架的多版本共存</li>
<li>方便做框架的版本迭代</li>
<li>降低多框架共存的维护成本</li>
</ul>
<h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><ol>
<li>通过 pip 安装虚拟环境库</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fytffrpobtj313k03gabz.jpg" alt></p>
<p>因为我之前已经下载好了，所以这里直接显示请求已经完成，并且后面是安装的绝对路径。</p>
<ol start="2">
<li>前往目标文件夹</li>
</ol>
<p>这个文件夹是你用来保存虚拟环境的文件夹，该文件夹一旦确定就不要轻易更改。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fytfvs3iloj313m03eadv.jpg" alt="image-20190103154126721"></p>
<p>这个 py3-env1是创建的一个纯净虚拟环境。</p>
<ol start="3">
<li>创建纯净的虚拟环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv 虚拟环境名 (py3-env2)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>终端启动虚拟环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> py3-env1\Scripts</span><br><span class="line">activate</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>进入虚拟环境下的 python 开发环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>关闭虚拟环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>Pycharm的开发配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">添加：创建项目 -&gt; Project Interpreter -&gt; Existing interpreter -&gt; Virtualenv Environment | System Interpreter -&gt; 目标路径下的 python.exe</span><br><span class="line">删除：Setting -&gt; Project -&gt; Project Interpreter -&gt; Show All</span><br></pre></td></tr></table></figure>
<p><strong>mac 电脑从第三步直接到最后一步就好</strong></p>
<h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建非纯净环境：</span></span><br><span class="line"><span class="comment">#	-- virtualenv-clone 本地环境 虚拟环境名</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mac配置终端，在终端运行虚拟环境</span></span><br><span class="line"><span class="comment"># 在用户根目录下的.bash_profile（没有需手动创建）文件中设置</span></span><br><span class="line"><span class="comment"># alias 终端指令名(env-py3)='/Library/Virtualenv/虚拟环境名/bin/python3'</span></span><br><span class="line"><span class="comment"># alias 终端指令名(env-pip3)='/Library/Virtualenv/虚拟环境名/bin/pip3'</span></span><br></pre></td></tr></table></figure>
<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>因为 Django 框架应用层是采用的 HTTP 协议，所以有必要了解 HTTP 协议。</p>
<h3 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h3><ul>
<li>HTTP（HyperText Transport Protocol） 是超文本传输协议，而 HTTPS 也归属于 HTTP 协议，S 代表安全。</li>
<li>基于 TCP/IP协议基础上的应用层协议，底层实现仍为 socket</li>
<li>基于请求-响应模式：通信一定是从客户端开始，服务端接收到客户端一定会做出对应响应</li>
<li>无状态：协议不对任何一次通信状态和任何数据做保存</li>
<li>无连接：一次连接只完成一次请求-响应，请求-响应完毕后会立即断开连接。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fytiu7oqkyj317o0cijsy.jpg" alt></p>
<h3 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h3><p>一次 HTTP 连接称之为一个事务，过程可以分为四步</p>
<ol>
<li>客户端与服务端建立连接</li>
<li>客户端发生一个 HTTP 协议指定格式的请求</li>
<li>服务端接收请求后，回应一个 HTTP 协议指定格式的响应</li>
<li>客户端将服务端的响应展现给用户</li>
</ol>
<h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul>
<li>1开头：</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fytilmuo50j30uu08kq4s.jpg" alt></p>
<ul>
<li>2开头：</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fytim5vbrcj30uo0l843c.jpg" alt></p>
<ul>
<li>3开头：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fytimwo2xij30uu0nydli.jpg" alt></p>
<ul>
<li>4开头：</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fytinhww87j30xm0tejy4.jpg" alt></p>
<ul>
<li>5开头：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fytioeyy9mj30xm0tegt3.jpg" alt></p>
<h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求行  请求头  请求体</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">POST / HTTP/1.1\r\n</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8001\r\n</span></span><br><span class="line"><span class="string">Connection: keep-alive\r\n</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1\r\n</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\r\n</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br\r\n</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8\r\n</span></span><br><span class="line"><span class="string">\r\n</span></span><br><span class="line"><span class="string">usr=abc&amp;pwd=123</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应行  响应头  响应体</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">HTTP/1.1 200 OK\r\n</span></span><br><span class="line"><span class="string">Content-type:text/html\r\n</span></span><br><span class="line"><span class="string">\r\n</span></span><br><span class="line"><span class="string">Login Success</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h2 id="使用原生-socket-完成和浏览器的交互"><a href="#使用原生-socket-完成和浏览器的交互" class="headerlink" title="使用原生 socket 完成和浏览器的交互"></a>使用原生 socket 完成和浏览器的交互</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>_socket</span><br><span class="line">	-- <span class="number">01</span>_client.html：前台通过form表单访问后台的页面</span><br><span class="line">	-- <span class="number">01</span>_login.html：后台测试渲染给前台的登录页面</span><br><span class="line">	-- <span class="number">01</span>_index.html：后台测试渲染给前台的主页</span><br><span class="line">	-- <span class="number">01</span>_server.py：后台服务器文件</span><br></pre></td></tr></table></figure>
<p>因为 B/S架构的客户端已经由浏览器写好，所以只需要关注服务器端就ok。</p>
<h3 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置响应头(包含响应行)</span></span><br><span class="line">RESP_HEADER = <span class="string">b'HTTP/1.1 200 OK\r\nContent-type:text/html;charset=utf-8\r\n\r\n'</span> <span class="comment"># 连续两个\r\n表示响应头结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置服务器 socket 相关信息</span></span><br><span class="line">server = socket()</span><br><span class="line">server.bind(<span class="string">''</span>, <span class="number">8080</span>) <span class="comment"># 空字符串表示绑定本机</span></span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line">print((<span class="string">'服务：http://localhost:8080'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取Browser以 http 协议发来的请求</span></span><br><span class="line">    client, addr = server.accept()</span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 数据报文 包含请求行 请求头 请求体</span></span><br><span class="line">    print(data)</span><br><span class="line">    client.send(RESP_HEADER)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># /index =&gt; 响应主页</span></span><br><span class="line">    <span class="comment"># /login =&gt; 登录页面</span></span><br><span class="line">    <span class="comment"># 错误 =&gt; 404</span></span><br><span class="line">    <span class="comment"># 数据 data, 字节形式 =&gt; 字符串形式</span></span><br><span class="line">    strData = str(data, encodeing)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析请求的数据，分析得到路由</span></span><br><span class="line">    my_route = strData.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后台没有设置的路由，统统由404来处理</span></span><br><span class="line">    dt = <span class="string">b'404'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置的路由返回响应的页面文件</span></span><br><span class="line">    <span class="keyword">if</span> my_route == <span class="string">'/index'</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'index 页面路径'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            dt = f.read()</span><br><span class="line">    <span class="keyword">if</span> my_route == <span class="string">'/login'</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'login 页面路径'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            dt = f.read()</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># /favicon.ico该请求是往后台请求标签图标</span></span><br><span class="line">    <span class="keyword">if</span> my_route == <span class="string">'/favicon.ico'</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            dt = f.read()</span><br><span class="line">    <span class="comment"># 服务器发送响应体</span></span><br><span class="line">    client.send(dt)</span><br><span class="line">    <span class="comment"># 一次循环，代表一次响应，也就是一次事务的完成，要关闭 http 请求连接</span></span><br><span class="line">    client.close()</span><br></pre></td></tr></table></figure>
<h3 id="修改返回数据，完善响应体"><a href="#修改返回数据，完善响应体" class="headerlink" title="修改返回数据，完善响应体"></a>修改返回数据，完善响应体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">client.send(<span class="string">b'HTTP/1.1 200 OK\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'Normal Socket Web'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># html代码，请求头要设置支持 html 代码</span></span><br><span class="line">client.send(<span class="string">b'HTTP/1.1 200 OK\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'Content-type:text/html\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'&lt;h1&gt;Normal Socket Web&lt;/h1&gt;'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># html文件（同级目录建立一个index.html页面）</span></span><br><span class="line">client.send(<span class="string">b'HTTP/1.1 200 OK\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'Content-type:text/html\r\n'</span>)</span><br><span class="line">client.send(<span class="string">b'\r\n'</span>)</span><br><span class="line"><span class="comment"># 利用文件方式读取页面</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'01_index.html'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dt = f.read()</span><br><span class="line">client.send(dt)</span><br></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>修改接收数据，模拟后台路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分析接收到的数据</span></span><br><span class="line">data = client.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 保证接收到的数据作为字符串进行以下处理</span></span><br><span class="line">data = str(data, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 拆分出地址位</span></span><br><span class="line">route = data.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 匹配地址，做出不同的响应</span></span><br><span class="line"><span class="keyword">if</span> route == <span class="string">'/index'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'01_index.html'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    	dt = f.read()</span><br><span class="line"><span class="keyword">elif</span> route == <span class="string">'/login'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'01_login.html'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    	dt = f.read()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    dt = <span class="string">b'404'</span></span><br><span class="line">client.send(dt)</span><br></pre></td></tr></table></figure>
<h2 id="框架演变"><a href="#框架演变" class="headerlink" title="框架演变"></a>框架演变</h2><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02_frame</span><br><span class="line">	-- favicon.ico</span><br><span class="line">	-- index.html</span><br><span class="line">	-- manage.py</span><br></pre></td></tr></table></figure>
<h3 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a>manage.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 响应头</span></span><br><span class="line">RESP_HEADER = <span class="string">b'HTTP/1.1 200 OK\r\nContent-type:text/html\r\n\r\n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 以字节方式读取文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'index.html'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ico</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 数据库操作</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, db=<span class="string">'django'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>)</span><br><span class="line">    cur = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line">    cur.execute(<span class="string">'select * from user'</span>)</span><br><span class="line">    users = cur.fetchall()</span><br><span class="line">    print(users)</span><br><span class="line">    users = <span class="string">'''%d:%s</span></span><br><span class="line"><span class="string">    %d:%s'''</span> % (users[<span class="number">0</span>][<span class="string">'id'</span>], users[<span class="number">0</span>][<span class="string">'name'</span>], users[<span class="number">1</span>][<span class="string">'id'</span>], users[<span class="number">1</span>][<span class="string">'name'</span>])</span><br><span class="line">    <span class="keyword">return</span> users.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路由</span></span><br><span class="line">urls = &#123;</span><br><span class="line">    <span class="comment"># 请求路径与请求处理函数一一对应</span></span><br><span class="line">    <span class="string">'/index'</span>: index,</span><br><span class="line">    <span class="string">'/favicon.ico'</span>: ico,</span><br><span class="line">    <span class="string">'/user'</span>: user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置socket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    server = socket.socket()</span><br><span class="line">    server.bind((host, port))</span><br><span class="line">    print(<span class="string">'start:http://'</span> + host + <span class="string">':'</span> + str(port))</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sock, addr = server.accept()</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        data = str(data, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        route = data.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        resp = <span class="string">b'404'</span></span><br><span class="line">        <span class="keyword">if</span> route <span class="keyword">in</span> urls:</span><br><span class="line">            resp = urls[route]()</span><br><span class="line"></span><br><span class="line">        sock.send(RESP_HEADER)</span><br><span class="line">        sock.send(resp)</span><br><span class="line">        sock.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启服务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serve(<span class="string">'127.0.0.1'</span>, <span class="number">8002</span>)</span><br></pre></td></tr></table></figure>
<h2 id="项目演变"><a href="#项目演变" class="headerlink" title="项目演变"></a>项目演变</h2><h3 id="目录结构-2"><a href="#目录结构-2" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">03_proj</span><br><span class="line">	-- template</span><br><span class="line">		-- index.html</span><br><span class="line">		-- user.html</span><br><span class="line">	favicon.ico</span><br><span class="line">	start.py</span><br><span class="line">	urls.py</span><br><span class="line">	views.py</span><br></pre></td></tr></table></figure>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="user-html"><a href="#user-html" class="headerlink" title="user.html"></a>user.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>password<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for user in users%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.password&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> urls <span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(env, response)</span>:</span></span><br><span class="line">    print(env)</span><br><span class="line">    <span class="comment"># 设置响应头</span></span><br><span class="line">    response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    route = env[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    print(route)</span><br><span class="line">    data = urls[<span class="string">'error'</span>]()</span><br><span class="line">    <span class="keyword">if</span> route <span class="keyword">in</span> urls:</span><br><span class="line">        data = urls[route]()</span><br><span class="line">    <span class="comment"># 返回二进制响应体</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = make_server(<span class="string">'127.0.0.1'</span>, <span class="number">8003</span>, app)</span><br><span class="line">    print(<span class="string">'start:http://127.0.0.1:8003'</span>)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> *</span><br><span class="line">urls = &#123;</span><br><span class="line">    <span class="string">'/index'</span>: index,</span><br><span class="line">    <span class="string">'/favicon.ico'</span>: ico,</span><br><span class="line">    <span class="string">'/user'</span>: user,</span><br><span class="line">    <span class="string">'error'</span>: error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 利用jinja2来渲染模板，将后台数据传给前台</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'templates/index.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    tem = Template(dt)</span><br><span class="line">    resp = tem.render(name=<span class="string">'主页'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ico</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 数据库操作</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, db=<span class="string">'django'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>)</span><br><span class="line">    cur = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line">    cur.execute(<span class="string">'select * from user'</span>)</span><br><span class="line">    users = cur.fetchall()</span><br><span class="line">    print(users)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'templates/user.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    tem = Template(dt)</span><br><span class="line">    resp = tem.render(users=users)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b'404'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>django-restframework处理跨域问题</title>
    <url>/2019/02/27/Django-restframework%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="django-restframework-处理跨域问题"><a href="#django-restframework-处理跨域问题" class="headerlink" title="django-restframework 处理跨域问题"></a>django-restframework 处理跨域问题</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>想要处理跨域问题，首先需要了解同源策略。</p>
<h2 id="二-同源策略"><a href="#二-同源策略" class="headerlink" title="二  同源策略"></a>二  同源策略</h2><p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也是最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p>
<p>请求的 url 地址，必须与浏览器上的 url 地址处在同域上，也就是域名、端口、协议相同。</p>
<h2 id="三-CORS-简介"><a href="#三-CORS-简介" class="headerlink" title="三 CORS 简介"></a>三 CORS 简介</h2><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<h2 id="四-CORS-基本流程"><a href="#四-CORS-基本流程" class="headerlink" title="四 CORS 基本流程"></a>四 CORS 基本流程</h2><p>浏览器将CORS请求分成两类：<strong>简单请求（simple request）</strong>和<strong>非简单请求（not-so-simple request</strong>）。<br>浏览器发出CORS<strong>简单请求</strong>，<strong>只需要在头信息之中增加一个Origin字</strong>段。<br>浏览器发出CORS<strong>非简单请求</strong>，<strong>会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</strong></p>
<h2 id="五-CORS-两种请求详解"><a href="#五-CORS-两种请求详解" class="headerlink" title="五 CORS 两种请求详解"></a>五 CORS 两种请求详解</h2><p>浏览器发出的请求可以分为简单请求和非简单请求。</p>
<h3 id="一-简单请求"><a href="#一-简单请求" class="headerlink" title="一 简单请求"></a>一 简单请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1) 请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line">（2）HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span><br></pre></td></tr></table></figure>
<h3 id="二-非简单请求"><a href="#二-非简单请求" class="headerlink" title="二 非简单请求"></a>二 非简单请求</h3><p>凡是不同时满足上面两个条件，就属于非简单请求。浏览器对这两种请求的处理是不一样的。</p>
<h3 id="三-简单请求和非简单请求的区别"><a href="#三-简单请求和非简单请求的区别" class="headerlink" title="三 简单请求和非简单请求的区别"></a>三 简单请求和非简单请求的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 简单请求和非简单请求的区别？</span><br><span class="line"></span><br><span class="line">   简单请求：一次请求</span><br><span class="line">   非简单请求：两次请求，在发送数据之前会先发一次请求用于做“预检”，只有“预检”通过后才再发送一次请求用于数据传输。</span><br><span class="line">* 关于“预检”</span><br><span class="line"></span><br><span class="line">- 请求方式：OPTIONS</span><br><span class="line">- “预检”其实做检查，检查如果通过则允许传输数据，检查不通过则不再发送真正想要发送的消息</span><br><span class="line">- 如何“预检”</span><br><span class="line">     =&gt; 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Method</span><br><span class="line">     =&gt; 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Headers</span><br></pre></td></tr></table></figure>
<h2 id="六-两种请求支持跨域"><a href="#六-两种请求支持跨域" class="headerlink" title="六 两种请求支持跨域"></a>六 两种请求支持跨域</h2><h3 id="一-简单请求支持跨域"><a href="#一-简单请求支持跨域" class="headerlink" title="一 简单请求支持跨域"></a>一 简单请求支持跨域</h3><p>服务器只需要设置响应头为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin = &apos;域名&apos; 或 &apos;*&apos;</span><br></pre></td></tr></table></figure>
<h3 id="二-非简单请求支持跨域"><a href="#二-非简单请求支持跨域" class="headerlink" title="二 非简单请求支持跨域"></a>二 非简单请求支持跨域</h3><p>由于复杂请求时，首先会发送‘’预检‘’请求，如果预检成功，则发送真实请求。</p>
<ul>
<li>‘’预检‘’请求时，允许请求方式需要服务器设置响应头：<code>Access-Control-Request-Method</code></li>
<li>‘’预检‘’请求时，允许请求头则需要服务器设置响应头：<code>Access-Control-Request-Headers</code></li>
</ul>
<h2 id="七-django-中实现跨域"><a href="#七-django-中实现跨域" class="headerlink" title="七 django 中实现跨域"></a>七 django 中实现跨域</h2><p>因为每个请求都需要进行判断是否允许，所以在中间件中处理跨域。</p>
<p><strong>settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置了一个 ip 访问白名单</span></span><br><span class="line">WHITE_MENU = [</span><br><span class="line">    <span class="string">'127.0.0.1'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中间件，最后一个</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'app01.mid.CORS'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>mid.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DRESF_03 <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CORS</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        ip_list = settings.WHITE_MENU</span><br><span class="line">        <span class="keyword">if</span> request.META.get(<span class="string">'REMOTE_ADDR'</span>) <span class="keyword">in</span> ip_list:</span><br><span class="line">            response[<span class="string">'Access-Control-Allow-Origin'</span>] = request.META.get(<span class="string">'HTTP_ORIGIN'</span>)</span><br><span class="line">            <span class="comment"># response['Access-Control-Allow-Origin'] = 'http://127.0.0.1'</span></span><br><span class="line">            print(<span class="string">'2345'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'OPTIONS'</span>:</span><br><span class="line">            response[<span class="string">'Access-Control-Allow-Methods'</span>] = <span class="string">'PUT,DELETE'</span></span><br><span class="line">            response[<span class="string">'Access-Control-Allow-Headers'</span>] = <span class="string">'Content-Type'</span></span><br><span class="line">            print(<span class="string">'34567'</span>)</span><br><span class="line">        print(<span class="string">'request'</span>, request.META)</span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>django的配置加载流程</title>
    <url>/2019/02/25/Django%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Django（三）</title>
    <url>/2019/01/05/Django%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（三）"><a href="#Django-系列博客（三）" class="headerlink" title="Django 系列博客（三）"></a>Django 系列博客（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 django 的前后端交互及如何处理 get 请求和 post 请求。</p>
<h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><p>get请求是单纯的请求一个页面资源，一般不建议进行账号信息的传输。</p>
<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.views <span class="keyword">as</span> app_views</span><br><span class="line"><span class="keyword">import</span> newApp.views <span class="keyword">as</span> new_views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^$'</span>, app_views.home),</span><br><span class="line">    <span class="comment"># 路由采用正则匹配, ^以什么开头 $以什么结果</span></span><br><span class="line">    <span class="comment"># 注: 当路由没有子路由是,才在末尾添加$</span></span><br><span class="line">    url(<span class="string">r'^index/$'</span>, app_views.index),</span><br><span class="line">    url(<span class="string">r'login'</span>, app_views.login_action),</span><br><span class="line">    url(<span class="string">r'^new/index/$'</span>, new_views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="配置视图"><a href="#配置视图" class="headerlink" title="配置视图"></a>配置视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个请求,都对应一个视图响应函数,来出现请求,完成响应</span></span><br><span class="line"><span class="comment"># def index(abc):</span></span><br><span class="line"><span class="comment">#     return HttpResponse('hello django')  # 第一个响应</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django.core.handlers.wsgi</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>) <span class="comment"># 第一个响应页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def home(request):</span></span><br><span class="line"><span class="comment">#     return redirect('/index/') # 第一个重定向</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="配置页面资源"><a href="#配置页面资源" class="headerlink" title="配置页面资源"></a>配置页面资源</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>app的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><h3 id="配置路由-1"><a href="#配置路由-1" class="headerlink" title="配置路由"></a>配置路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home),</span><br><span class="line">    url(<span class="string">r'^index/$'</span>, views.index),</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, views.login, name=<span class="string">'lg'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="配置视图-1"><a href="#配置视图-1" class="headerlink" title="配置视图"></a>配置视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def login(request):</span></span><br><span class="line"><span class="string">    print(request.method)</span></span><br><span class="line"><span class="string">    # 如果获取GET请求的提交数据</span></span><br><span class="line"><span class="string">    # import django.core.handlers.wsgi</span></span><br><span class="line"><span class="string">    # print(type(request))</span></span><br><span class="line"><span class="string">    # import django.http.request.QueryDict</span></span><br><span class="line"><span class="string">    # print(type(request.GET))</span></span><br><span class="line"><span class="string">    print(request.GET)</span></span><br><span class="line"><span class="string">    # usr = request.GET['usr']  # 不安全</span></span><br><span class="line"><span class="string">    usr = request.GET.get('usr', 'USR') # 安全, 第一个参数为数据的key, 第二个参数为默认值</span></span><br><span class="line"><span class="string">    print(usr)</span></span><br><span class="line"><span class="string">    pwd = request.GET.get('pwd') # 不设默认值,没有取到值时,返回值为None</span></span><br><span class="line"><span class="string">    print(pwd)</span></span><br><span class="line"><span class="string">    return render(request, 'login.html')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        stus = request.GET.getlist(<span class="string">'stu'</span>)</span><br><span class="line">        print(stus)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 没有GET分支, 发来的请求为POST</span></span><br><span class="line">    usr = request.POST.get(<span class="string">'usr'</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">    print(usr, pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接数据库 =&gt; ORM</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, db=<span class="string">'django'</span>)</span><br><span class="line">    cur = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line">    <span class="comment"># cur.execute('select * from user')</span></span><br><span class="line">    <span class="comment"># users = cur.fetchall()</span></span><br><span class="line">    cur.execute(<span class="string">'select * from user where usr=%s and pwd=%s'</span>, [usr, pwd])</span><br><span class="line">    res = cur.fetchone()</span><br><span class="line">    print(res)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'登录成功'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'登录失败'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="配置页面资源-1"><a href="#配置页面资源-1" class="headerlink" title="配置页面资源"></a>配置页面资源</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./index.css"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/index.css"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/temp.css"</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/ooo/index.css"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/ooo/temp.css"</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/test.css"</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/img/001.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .box &#123;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            height: 380px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;#<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span> 按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span>#&#125;</span></span><br><span class="line"><span class="tag">&#123;#            <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        Large button <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;/<span class="name">button</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#<span class="tag">&lt;/<span class="name">div</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box row col-sm-6 col-sm-offset-3"</span>&gt;</span></span><br><span class="line">        &#123;# action: 没写 | http://localhost:8801/login | /login/ | &#123;% url 'url_name' %&#125; #&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'lg' %&#125;"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">&#123;#            &#123;% csrf_token %&#125;#&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"usr"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"usr"</span> <span class="attr">id</span>=<span class="string">"usr"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"stu"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"stu1"</span>&gt;</span> 学生1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"stu"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"stu2"</span>&gt;</span> 学生2</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"stu"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"stu3"</span>&gt;</span> 学生3</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-info pull-right"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;#<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index/"</span>&gt;</span>前往主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>#&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/bootstrap-3.3.7-dist/js/jquery-3.3.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/bootstrap-3.3.7-dist/js/bootstrap.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><p>Django请求生命周期</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyy7y63im0j30sn0cy76l.jpg" alt></p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（七）</title>
    <url>/2019/01/09/Django%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（七）"><a href="#Django-系列博客（七）" class="headerlink" title="Django 系列博客（七）"></a>Django 系列博客（七）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 中的视图层中的相关参数，HttpRequest 对象、HttpResponse 对象、JsonResponse，以及视图层的两种响应方式 CBV 和 FBV，还有简单的文件上传。</p>
<h2 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h2><p>一个视图函数，简称视图，是一个简单的Python 函数，它接受Web请求并且返回Web响应。响应可以是一张网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片. . . 是任何东西都可以。无论视图本身包含什么逻辑，都要返回响应。代码写在哪里也无所谓，只要它在你的Python目录下面。除此之外没有更多的要求了——可以说“没有什么神奇的地方”。为了将代码放在某处，约定是将视图放置在项目或应用程序目录中的名为<code>views.py</code>的文件中。</p>
<p>下面是一个返回当前日期和时间作为 HTML 文档的视图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, HttpResponseRedirect, redirect</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_datetime</span><span class="params">(request)</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    html = <span class="string">"&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;"</span> % now</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>
<p>这段代码解析：</p>
<ul>
<li>从 <code>django.shortcuts</code>模块导入了<code>HttpResponse</code>类，以及Python的<code>datetime</code>库；</li>
<li>定义了<code>current_datetime</code>函数。它就是视图函数。每个视图函数都使用<code>HttpRequest</code>对象作为第一个参数，并且通常称之为<code>request</code>；</li>
</ul>
<p>注意,视图函数的名称并不重要；不需要用一个统一的命名方式来命名，以便让Django识别它。我们将其命名为<code>current_datetime</code>，是因为这个名称能够精确地反映出它的功能。</p>
<ul>
<li>会返回一个<code>HttpResponse</code>对象，其中包含生成的响应。每个视图函数都负责返回一个<code>HttpResponse</code>对象。</li>
</ul>
<p>在视图层最重要的就是要熟悉两个对象：请求对象（request）和响应对象（HttpResponse）。</p>
<h2 id="HttpRequest-对象"><a href="#HttpRequest-对象" class="headerlink" title="HttpRequest 对象"></a>HttpRequest 对象</h2><h3 id="request-属性"><a href="#request-属性" class="headerlink" title="request 属性"></a>request 属性</h3><p>Django 将请求报文中的请求行、请求头、请求体封装成 HttpRequest 类中的属性。除了特殊说明之外，其他的均为只读属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>HttpRequest.GET</span><br><span class="line"></span><br><span class="line">　　一个类似于字典的对象，包含 HTTP GET 的所有参数。详情请参考 QueryDict 对象。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>HttpRequest.POST</span><br><span class="line"></span><br><span class="line">　　一个类似于字典的对象，如果请求中包含表单数据，则将这些数据封装成 QueryDict 对象。</span><br><span class="line"></span><br><span class="line">　　POST 请求可以带有空的 POST 字典 —— 如果通过 HTTP POST 方法发送一个表单，但是表单中没有任何的数据，QueryDict 对象依然会被创建。</span><br><span class="line">   因此，不应该使用 <span class="keyword">if</span> request.POST  来检查使用的是否是POST 方法；应该使用 <span class="keyword">if</span> request.method == <span class="string">"POST"</span></span><br><span class="line">　　另外：如果使用 POST 上传文件的话，文件信息将包含在 FILES 属性中。</span><br><span class="line">   </span><br><span class="line">   注意：键值对的值是多个的时候,比如checkbox类型的input标签，select标签，需要用：</span><br><span class="line">        request.POST.getlist(<span class="string">"hobby"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>HttpRequest.body</span><br><span class="line"></span><br><span class="line">　　一个字符串，代表请求报文的主体。在处理非 HTTP 形式的报文时非常有用，例如：二进制图片、XML,Json等。</span><br><span class="line">　　但是，如果要处理表单数据的时候，推荐还是使用 HttpRequest.POST 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>HttpRequest.path</span><br><span class="line"></span><br><span class="line">　　一个字符串，表示请求的路径组件（不含域名）。</span><br><span class="line">　　例如：<span class="string">"/music/bands/the_beatles/"</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>HttpRequest.method</span><br><span class="line"></span><br><span class="line">　　一个字符串，表示请求使用的HTTP 方法。必须使用大写。</span><br><span class="line">　　例如：<span class="string">"GET"</span>、<span class="string">"POST"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>HttpRequest.encoding</span><br><span class="line"></span><br><span class="line">　　一个字符串，表示提交的数据的编码方式（如果为 <span class="literal">None</span> 则表示使用 DEFAULT_CHARSET 的设置，默认为 <span class="string">'utf-8'</span>）。</span><br><span class="line">   这个属性是可写的，你可以修改它来修改访问表单数据使用的编码。</span><br><span class="line">   接下来对属性的任何访问（例如从 GET 或 POST 中读取数据）将使用新的 encoding 值。</span><br><span class="line">   如果你知道表单数据的编码不是 DEFAULT_CHARSET ，则使用它。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>HttpRequest.META</span><br><span class="line"></span><br><span class="line"> 　　一个标准的Python 字典，包含所有的HTTP 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：</span><br><span class="line">　　取值：</span><br><span class="line"></span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME 类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送的HTTP Host 头部。</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端的user-agent 字符串。</span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP 地址。</span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">"GET"</span> 或<span class="string">"POST"</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，</span><br><span class="line">    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>HttpRequest.FILES</span><br><span class="line"></span><br><span class="line">　　一个类似于字典的对象，包含所有的上传文件信息。</span><br><span class="line">   FILES 中的每个键为&lt;input type=<span class="string">"file"</span> name=<span class="string">""</span> /&gt; 中的name，值则为对应的数据。</span><br><span class="line">　　注意，FILES 只有在请求的方法为POST 且提交的&lt;form&gt; 带有enctype=<span class="string">"multipart/form-data"</span> 的情况下才会</span><br><span class="line">   包含数据。否则，FILES 将为一个空的类似于字典的对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>HttpRequest.COOKIES</span><br><span class="line"></span><br><span class="line">　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>HttpRequest.session</span><br><span class="line"></span><br><span class="line"> 　　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。</span><br><span class="line">    完整的细节参见会话的文档。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>HttpRequest.user(用户认证组件下使用)</span><br><span class="line"></span><br><span class="line">　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。</span><br><span class="line"></span><br><span class="line">　　如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。你可以通过 is_authenticated() 区分它们。</span><br><span class="line"></span><br><span class="line">    例如：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">        <span class="comment"># Do something for logged-in users.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Do something for anonymous users.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     　　user 只有当Django 启用 AuthenticationMiddleware 中间件时才可用。</span><br><span class="line"></span><br><span class="line">     -------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    匿名用户</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">models</span>.<span class="title">AnonymousUser</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">django</span>.<span class="title">contrib</span>.<span class="title">auth</span>.<span class="title">models</span>.<span class="title">AnonymousUser</span> 类实现了<span class="title">django</span>.<span class="title">contrib</span>.<span class="title">auth</span>.<span class="title">models</span>.<span class="title">User</span> 接口，但具有下面几个不同点：</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">id</span> 永远为<span class="title">None</span>。</span></span><br><span class="line"><span class="class">    <span class="title">username</span> 永远为空字符串。</span></span><br><span class="line"><span class="class">    <span class="title">get_username</span><span class="params">()</span> 永远返回空字符串。</span></span><br><span class="line"><span class="class">    <span class="title">is_staff</span> 和 <span class="title">is_superuser</span> 永远为<span class="title">False</span>。</span></span><br><span class="line"><span class="class">    <span class="title">is_active</span> 永远为 <span class="title">False</span>。</span></span><br><span class="line"><span class="class">    <span class="title">groups</span> 和 <span class="title">user_permissions</span> 永远为空。</span></span><br><span class="line"><span class="class">    <span class="title">is_anonymous</span><span class="params">()</span> 返回<span class="title">True</span> 而不是<span class="title">False</span>。</span></span><br><span class="line"><span class="class">    <span class="title">is_authenticated</span><span class="params">()</span> 返回<span class="title">False</span> 而不是<span class="title">True</span>。</span></span><br><span class="line"><span class="class">    <span class="title">set_password</span><span class="params">()</span>、<span class="title">check_password</span><span class="params">()</span>、<span class="title">save</span><span class="params">()</span> 和<span class="title">delete</span><span class="params">()</span> 引发 <span class="title">NotImplementedError</span>。</span></span><br><span class="line"><span class="class">    <span class="title">New</span> <span class="title">in</span> <span class="title">Django</span> 1.8:</span></span><br><span class="line">    新增 AnonymousUser.get_username() 以更好地模拟 django.contrib.auth.models.User。</span><br></pre></td></tr></table></figure>
<h3 id="request常用方法"><a href="#request常用方法" class="headerlink" title="request常用方法"></a>request常用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>HttpRequest.get_full_path()</span><br><span class="line"></span><br><span class="line">　　返回 path，如果可以将加上查询字符串。</span><br><span class="line"></span><br><span class="line">　　例如：<span class="string">"/music/bands/the_beatles/?print=true"</span></span><br><span class="line">　　注意和path的区别：http://127.0.0.1:8001/order/?name=lqz&amp;age=10</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>HttpRequest.is_ajax()</span><br><span class="line"></span><br><span class="line">　　如果请求是通过XMLHttpRequest 发起的，则返回<span class="literal">True</span>，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串<span class="string">'XMLHttpRequest'</span>。</span><br><span class="line"></span><br><span class="line">　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。</span><br><span class="line"></span><br><span class="line">　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，</span><br><span class="line">   你应该使用 vary_on_headers(<span class="string">'HTTP_X_REQUESTED_WITH'</span>) 装饰你的视图以让响应能够正确地缓存。</span><br></pre></td></tr></table></figure>
<h2 id="HttpResponse-对象"><a href="#HttpResponse-对象" class="headerlink" title="HttpResponse 对象"></a>HttpResponse 对象</h2><p>响应对象主要有三种形式：前面的博客有相关介绍</p>
<ol>
<li>HttpResponse()；</li>
<li>render()；</li>
<li>redirect().</li>
</ol>
<p>HttpResponse()括号内直接跟一个具体的字符串作为响应体，比较直接和简单，所以这里介绍后两种</p>
<h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render(request, template_name[, context])</span><br></pre></td></tr></table></figure>
<p>结合给定的模板和一个上下文字典，返回一个经过 Django渲染后的HttpResponse 对象到前端。</p>
<p>参数：</p>
<ol>
<li>request：用于生成响应的请求对象；</li>
<li>template_name：要使用的模板的完整名称，可选的参数；</li>
<li>context：添加到模板上下文的一个字典。默认是一个空字典，如果字典中的某个值是可调用的，视图将在渲染模板之前调用它；</li>
</ol>
<p>render 方法就是将一个模板页面中的模板语法进行渲染，最终渲染成一个 HTML 页面作为响应返回给前端。</p>
<h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect()"></a>redirect()</h3><p>传递要重定向的一个硬编码的URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/some/url/'</span>)</span><br></pre></td></tr></table></figure>
<p>也可以是一个完成的 url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'http://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h2><p>向前端返回一个 json 格式的字符串，有两种方式：</p>
<h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'musibii'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(data))</span><br><span class="line"><span class="comment"># 从这里可以看出其实 Jsonresponse内部也是调用了 json 的 dumps 方法进行转换</span></span><br></pre></td></tr></table></figure>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'musibii'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JsonResponse(data1,safe=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># safe参数是一种安全机制，因为如果要传输列表类型的数据时，会因为内部的相关机制会产生错误。</span></span><br></pre></td></tr></table></figure>
<h2 id="CBV-和-FBV"><a href="#CBV-和-FBV" class="headerlink" title="CBV 和 FBV"></a>CBV 和 FBV</h2><p>CBV 基于类的视图（Class Base View）和 FBV 基于函数的视图（Function Base View）</p>
<h3 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(View)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request)</span><br><span class="line">        print(args)</span><br><span class="line">        print(kwargs)</span><br><span class="line">        <span class="comment"># 可以写类似装饰器的东西，在前后加代码</span></span><br><span class="line">        obj=super().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        ret = BookInfo.objects.filter(name=name).first()</span><br><span class="line">        print(type(ret))</span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        print(ret.name)</span><br><span class="line">        print(type(ret.__dict__))</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> (ret.__dict__).items():</span><br><span class="line">            <span class="keyword">if</span> key[<span class="number">0</span>].startswith(<span class="string">'_'</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            print(key)</span><br><span class="line">            dic[key] = value</span><br><span class="line">            <span class="comment"># print(dic)</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 第二种</span></span><br><span class="line">        <span class="comment"># ret = BookInfo.objects.all() </span></span><br><span class="line">        <span class="comment"># lis = []</span></span><br><span class="line">        <span class="comment"># for info in ret:</span></span><br><span class="line">        <span class="comment">#     dic = &#123;&#125;</span></span><br><span class="line">        <span class="comment">#     for k, v in (info.__dict__).items():</span></span><br><span class="line">        <span class="comment">#         if key[0].startswitch(''):</span></span><br><span class="line">        <span class="comment">#             continue</span></span><br><span class="line">        <span class="comment">#         dic[key] = v</span></span><br><span class="line">        <span class="comment">#     lis.append(dic)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 第三种</span></span><br><span class="line">        <span class="comment"># li = []</span></span><br><span class="line">        <span class="comment"># ret = BookInfo.objects.all()</span></span><br><span class="line">        <span class="comment"># for book in ret:</span></span><br><span class="line">        <span class="comment">#     dic = &#123;&#125;</span></span><br><span class="line">        <span class="comment">#     for field in book._meta.fields:</span></span><br><span class="line">        <span class="comment">#         dic[field.name] = getattr(book, field.name)</span></span><br><span class="line">        <span class="comment">#     li.append(dic)</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(dic, json_dumps_params=&#123;<span class="string">'ensure_ascii'</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">"GET"</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'file_upload.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="comment"># print(request.body)</span></span><br><span class="line">        <span class="comment"># FILES是一个字典,</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;'myfile': [&lt;InMemoryUploadedFile: 1.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        <span class="comment"># 拿到上传的文件对象</span></span><br><span class="line"></span><br><span class="line">        file=request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        print(type(file))</span><br><span class="line">        <span class="keyword">from</span> django.core.files.uploadedfile <span class="keyword">import</span> InMemoryUploadedFile</span><br><span class="line">        <span class="keyword">with</span> open(file.name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># for line in file.chunks():</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'上传成功'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="简单文件上传"><a href="#简单文件上传" class="headerlink" title="简单文件上传"></a>简单文件上传</h2><h3 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># upload_file.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile"</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile2"</span>&gt;</span>#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件"></a>路由文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">	url(<span class="string">r'^upload_file/$'</span>, views.UploadFile.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'upload_file.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        file = request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        <span class="comment"># print(file['file'])</span></span><br><span class="line">        <span class="keyword">from</span> django.core.files.uploadedfile <span class="keyword">import</span> InMemoryUploadedFile</span><br><span class="line">        print(time.time())</span><br><span class="line">        filename = str(time.time()).split(<span class="string">'.'</span>)[<span class="number">0</span>] + file.name</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'上传成功'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（九）</title>
    <url>/2019/01/14/Django%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（九）"><a href="#Django-系列博客（九）" class="headerlink" title="Django 系列博客（九）"></a>Django 系列博客（九）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 模板的导入与继承以及导入导入静态文件的几种方式。</p>
<h2 id="模板导入"><a href="#模板导入" class="headerlink" title="模板导入"></a>模板导入</h2><h3 id="模板导入-1"><a href="#模板导入-1" class="headerlink" title="模板导入"></a>模板导入</h3><p>语法：<code></code>&123;% include ‘模板名称’ %&125;</p>
<p>如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .head &amp;123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: #2aabd2;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            font-size: 25px;</span><br><span class="line">        &amp;125;</span><br><span class="line">        .container-fluid &amp;123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &amp;125;</span><br><span class="line">        a &amp;123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            text-decoration: none !important;</span><br><span class="line">        &amp;125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span>图书管理系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line">            &amp;123;% include 'left.html' %&amp;125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span></span><br><span class="line">            &amp;123;% block right %&amp;125;</span><br><span class="line"></span><br><span class="line">            &amp;123;% endblock %&amp;125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &amp;123;% block content %&amp;125;</span><br><span class="line"></span><br><span class="line">        &amp;123;% endblock %&amp;125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- left.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book/"</span>&gt;</span>图书列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author/"</span>&gt;</span>作者列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publish/"</span>&gt;</span>出版社列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other.html --&gt;</span></span><br><span class="line">&amp;123;% extends 'base.html' %&amp;125;</span><br><span class="line"></span><br><span class="line">&amp;123;% block content %&amp;125;</span><br><span class="line"> &amp;123;&amp;123; blcok.super &amp;125;&amp;125;</span><br><span class="line">&amp;123;% endblock content %&amp;125;</span><br></pre></td></tr></table></figure>
<h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>Django 模板引擎中最强大的也是最复杂的除了 orm 就是模板继承了。模板继承可以让您创建一个基本的‘’骨架‘’模板，它包含您站点的全部元素，并且可以定义可以被子模板覆盖的 blocks。</p>
<p>通过下面的例子，可以容易的理解模板继承：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&amp;123;% block title %&amp;125;My amazing site&amp;123;% endblock %&amp;125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    &amp;123;% block sidebar %&amp;125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &amp;123;% endblock %&amp;125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    &amp;123;% block content %&amp;125;&amp;123;% endblock %&amp;125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个模版，我们把它叫作 <code>base.html</code>， 它定义了一个可以用于两列排版页面的简单HTML骨架。“子模版”的工作是用它们的内容填充空的blocks。</p>
<p>在这个例子中， <code>block</code> 标签定义了三个可以被子模版内容填充的block。 <code>block</code> 告诉模版引擎： 子模版可能会覆盖掉模版中的这些位置。</p>
<p>子模版可能看起来是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% extends "base.html" %&amp;125;</span><br><span class="line"> </span><br><span class="line">&amp;123;% block title %&amp;125;My amazing blog&amp;123;% endblock %&amp;125;</span><br><span class="line"> </span><br><span class="line">&amp;123;% block content %&amp;125;</span><br><span class="line">&amp;123;% for entry in blog_entries %&amp;125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&amp;123;&amp;123; entry.title &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;123;&amp;123; entry.body &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&amp;123;% endfor %&amp;125;</span><br><span class="line">&amp;123;% endblock %&amp;125;</span><br></pre></td></tr></table></figure>
<p><code>extends</code> 标签是这里的关键。它告诉模版引擎，这个模版“继承”了另一个模版。当模版系统处理这个模版时，首先，它将定位父模版——在此例中，就是“base.html”。</p>
<p>那时，模版引擎将注意到 <code>base.html</code> 中的三个 <code>block</code> 标签，并用子模版中的内容来替换这些block。根据 <code>blog_entries</code> 的值，输出可能看起来是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My amazing blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Entry one<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first entry.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Entry two<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my second entry.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请注意，子模版并没有定义 <code>sidebar</code> block，所以系统使用了父模版中的值。父模版的 <code>&amp;123;% block %&amp;125;</code> 标签中的内容总是被用作备选内容（fallback）。</p>
<p>这种方式使代码得到最大程度的复用，并且使得添加内容到共享的内容区域更加简单，例如，部分范围内的导航。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果在模板中使用<code>&amp;123;% extends %&amp;125;</code>标签，它必须是模板中的第一个标签。其他的任何情况下，模板继承都将无法工作。</li>
<li>在<code>base</code>模板中设置越多的<code>&amp;123;% block %&amp;125;</code>标签越好。请记住，子模板不必定义全部父模板中的<code>blocks</code>，所以，你可以在大多数<code>blocks</code>中填充合理的默认内容，然后，只定义你需要的那一个。多一点钩子总比少一点好。</li>
<li>如果你发现在大量的模板中复制内容，那可能意味着你应该把内容移到父模板中的一个<code>&amp;123;% block %&amp;125;</code>。</li>
<li>如果需要从父模板中获取块的内容，<code>&amp;123;&amp;123; block.super &amp;125;&amp;125;</code>变量可以完成这个任务。如果要添加父块的内容而不是完全覆盖它，这将非常有用。使用<code>&amp;123;&amp;123; block.super &amp;125;&amp;125;</code>插入数据将不会自动转义，因为它已经在父模板中进行了必要的转义。</li>
<li>为了更好地可读性，你也可以给你的<code>&amp;123;&amp; endblock %&amp;125;</code>标签一个名字。例如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% block content %&amp;125;</span><br><span class="line">&amp;123;% endblock content %&amp;125;</span><br></pre></td></tr></table></figure>
<p>​    在大型模板中，这个方法可以让你清楚地看到哪个标签被关闭了。</p>
<ul>
<li>不能在一个模板中定义多个相同名字的<code>block</code>标签。</li>
</ul>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><h3 id="settings-py中的静态文件设置"><a href="#settings-py中的静态文件设置" class="headerlink" title="settings.py中的静态文件设置"></a>settings.py中的静态文件设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="在模板中加载静态文件"><a href="#在模板中加载静态文件" class="headerlink" title="在模板中加载静态文件"></a>在模板中加载静态文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% load static %&amp;125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&amp;123;% static "</span><span class="attr">images</span>/<span class="attr">hi.jpg</span>" %&amp;<span class="attr">125</span>;" <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引用-js-文件"><a href="#引用-js-文件" class="headerlink" title="引用 js 文件"></a>引用 js 文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% load static %&amp;125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&amp;123;% static "</span><span class="attr">mytest.js</span>" %&amp;<span class="attr">125</span>;"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多个文件使用多次取别名"><a href="#多个文件使用多次取别名" class="headerlink" title="多个文件使用多次取别名"></a>多个文件使用多次取别名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% load static %&amp;125;</span><br><span class="line">&amp;123;% static "images/hi.jpg" as myphoto %&amp;125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&amp;123;&amp;123; myphoto &amp;125;&amp;125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-get-static-prefix"><a href="#使用-get-static-prefix" class="headerlink" title="使用 get_static_prefix"></a>使用 get_static_prefix</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% load static %&amp;125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&amp;123;% get_static_prefix %&amp;125;images/hi.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% load static %&amp;125;</span><br><span class="line">&amp;123;% get_static_prefix as STATIC_PREFIX %&amp;125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&amp;123;&amp;123; STATIC_PREFIX &amp;125;&amp;125;images/hi.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&amp;123;&amp;123; STATIC_PREFIX &amp;125;&amp;125;images/hi2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hello!"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-inclusion-tag返回-html-代码片段"><a href="#使用-inclusion-tag返回-html-代码片段" class="headerlink" title="使用 inclusion_tag返回 html 代码片段"></a>使用 inclusion_tag返回 html 代码片段</h2><h3 id="my-inclusion-py"><a href="#my-inclusion-py" class="headerlink" title="my_inclusion.py"></a>my_inclusion.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># @register.inclusion_tag('inclusion.html')</span></span><br><span class="line"><span class="comment"># def myinclusion():</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag('book_inclusion.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_inclusion</span><span class="params">(bookinfo)</span>:</span></span><br><span class="line">    print(<span class="string">'...'</span>, bookinfo)</span><br><span class="line">    <span class="comment"># print(bookinfo[0])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for info in bookinfo:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     a = infos.values()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(a.length)</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> foo <span class="keyword">in</span> bookinfo:</span><br><span class="line">        li.append(foo)</span><br><span class="line">    <span class="keyword">return</span> &amp;<span class="number">123</span>;<span class="string">'bookinfo'</span>: li&amp;<span class="number">125</span>;</span><br></pre></td></tr></table></figure>
<h3 id="book-inclusion-html"><a href="#book-inclusion-html" class="headerlink" title="book_inclusion.html"></a>book_inclusion.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>pub_date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>author<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>pub<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &amp;123;% for foo in bookinfo %&amp;125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.id &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.name &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.price &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.pub_date &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.author &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;123;&amp;123; foo.pub &amp;125;&amp;125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book/edit/?id=&amp;123;&amp;123; foo.id &amp;125;&amp;125;"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book/delete/?id=&amp;123;&amp;123; foo.id &amp;125;&amp;125;"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &amp;123;% endfor %&amp;125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="book-html"><a href="#book-html" class="headerlink" title="book.html"></a>book.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;123;% extends 'base.html' %&amp;125;</span><br><span class="line"></span><br><span class="line">&amp;123;% block content %&amp;125;</span><br><span class="line">    &amp;123;% load inclusions %&amp;125;</span><br><span class="line">    &amp;123;% book_inclusion bookinfo %&amp;125;</span><br><span class="line">&amp;123;% endblock %&amp;125;</span><br><span class="line"></span><br><span class="line">&amp;123;% block right %&amp;125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book/addto/"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&amp;123;% endblock %&amp;125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（五）</title>
    <url>/2019/01/08/Django%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（五）"><a href="#Django-系列博客（五）" class="headerlink" title="Django 系列博客（五）"></a>Django 系列博客（五）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过上一篇博客学习了 django 处理数据的协议 wsgi，现在应该可以学习 python 是如何处理数据的了。所以本篇博客介绍 Django 的运行方式与处理流程总结。当然还是借鉴学习大佬的博客，本篇博客参考<a href="https://segmentfault.com/a/1190000002399134" target="_blank" rel="noopener">点击</a>，这篇博客我看了三遍，感觉还是没有完全搞懂。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（二）</title>
    <url>/2019/01/04/Django%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（二）"><a href="#Django-系列博客（二）" class="headerlink" title="Django 系列博客（二）"></a>Django 系列博客（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天博客的内容为使用 Django 完成第一个 Django 页面，并进行一些简单页面的搭建和转跳。</p>
<h2 id="命令行搭建-Django-项目"><a href="#命令行搭建-Django-项目" class="headerlink" title="命令行搭建 Django 项目"></a>命令行搭建 Django 项目</h2><h3 id="创建纯净虚拟环境"><a href="#创建纯净虚拟环境" class="headerlink" title="创建纯净虚拟环境"></a>创建纯净虚拟环境</h3><p>在上一篇博客中已经安装好了虚拟环境，所以用虚拟环境来安装指定版本的 Django。为了可以从头到尾的走一遍流程，我重新创建了一个虚拟环境。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuq46n1ycj313k0b00yf.jpg" alt></p>
<h3 id="激活虚拟环境并安装-Django"><a href="#激活虚拟环境并安装-Django" class="headerlink" title="激活虚拟环境并安装 Django"></a>激活虚拟环境并安装 Django</h3><ol>
<li>首先进入虚拟环境路径下的 bin 目录</li>
<li>使用命令激活虚拟环境</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuq6rh7h5j313g05oaci.jpg" alt></p>
<ol start="3">
<li>安装指定版本 Django</li>
</ol>
<p>首先使用 pip3 list 命令查看</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuq7edhb1j313o05kwfx.jpg" alt></p>
<p>可以看到都是创建虚拟环境时安装的依赖包，现在使用 pip 命令安装指定 django 版本，因为做项目需要稳定，所以安装的版本不是最新的。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyuq9n2jaej313m0e0n3c.jpg" alt></p>
<p>可以看到新安装了2个包，pytz 是 python time zone 的缩写，是用来转换时区的包。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>前往目标路径创建项目，在这里我的 django 项目都在我的家目录下面的 django_project里面。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fyuqe1vnb2j313c04wgo1.jpg" alt></p>
<p>进入要创建项目的路径下，使用下面的命令创建一个 django 项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject project_name</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuuczax3cj313q03ijt8.jpg" alt></p>
<p>可以看到多了个文件夹。查看项目结构</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuudl83h1j313m08smz6.jpg" alt></p>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>进入项目根目录使用下面命令创建一个 app。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp app_name</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuuftcwznj313m0dm42j.jpg" alt></p>
<p>创建成功并查看项目结构。</p>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>使用下面命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 127.0.0.1:8888</span><br></pre></td></tr></table></figure>
<p>成功后会在本机上的8888端口开启 django 服务</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fyuuhy11ctj313q0dg43k.jpg" alt></p>
<p>访问8888端口会显示下图页面</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuuis02hwj31b30u0qdz.jpg" alt></p>
<p>好了，到现在你已经开启了第一个 django 服务，并且还是使用了命令行。</p>
<h2 id="pycharm-创建-Django-项目"><a href="#pycharm-创建-Django-项目" class="headerlink" title="pycharm 创建 Django 项目"></a>pycharm 创建 Django 项目</h2><p>其实会使用命令行创建项目那么使用 pycharm 应该是手到擒来，毕竟 pycharm 已经做了很多工作了。不过也有点麻烦。。。</p>
<h3 id="在虚拟环境下使用-pycharm-安装指定django-版本"><a href="#在虚拟环境下使用-pycharm-安装指定django-版本" class="headerlink" title="在虚拟环境下使用 pycharm 安装指定django 版本"></a>在虚拟环境下使用 pycharm 安装指定django 版本</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuupb78ktj31bi0u0wuz.jpg" alt></p>
<h3 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuuqqcy7ij31740sowkx.jpg" alt></p>
<h3 id="项目目录结构及作用"><a href="#项目目录结构及作用" class="headerlink" title="项目目录结构及作用"></a>项目目录结构及作用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目目录：包含项目最基本的一些配置</span><br><span class="line">	-- __init__.py：模块的配置文件，将blog_proj文件夹变成了模块</span><br><span class="line">	-- settings.py：配置总文件</span><br><span class="line">	-- urls.py：url配置文件，django项目中的所有页面都需要对其配置url地址</span><br><span class="line">	-- wsgi.py：(web server gateway interface)，服务器网关接口，python应用与web服务器直接通信的接口</span><br><span class="line">templates：模板文件夹，存放html文件的(页面)，支持使用Django模板语言(DTL)，也可以使用第三方(jinja2)</span><br><span class="line">manage.py：项目管理器，与项目交互的命令行工具集的入口，查看支持的所有命令python3 manage.py</span><br></pre></td></tr></table></figure>
<h3 id="settings-py结构"><a href="#settings-py结构" class="headerlink" title="settings.py结构"></a>settings.py结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目安全码</span></span><br><span class="line">SECRET_KEY = <span class="string">'guwba1u$18=&amp;*8kf44_u&amp;swqb@xlwgel7n$0rs=(+f10yvz)p0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试模式，上线项目要关闭debug模式，不然后台出现异常会直接抛给前台展现给用户看了</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上线项目中，规定只能以什么ip地址来访问django项目</span></span><br><span class="line"><span class="comment"># DEBUG = FALSE</span></span><br><span class="line"><span class="comment"># ALLOWED_HOSTS = ['localhost']</span></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目自带的应用</span></span><br><span class="line"><span class="comment"># 我们创建了自己的应用就要将自定义应用添加到该配置</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件</span></span><br><span class="line"><span class="comment"># django自带的工具集</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置url配件文件的根文件，执行urls.py</span></span><br><span class="line">ROOT_URLCONF = <span class="string">'项目目录.urls'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板，一个个html文件</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 如果使用第三方，可以在这个地方修改模板引擎</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器网关接口应用</span></span><br><span class="line">WSGI_APPLICATION = <span class="string">'项目目录.wsgi.application'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="comment"># 要配置自定义数据库去下面链接去查询详细配置</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码认证配置</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators</span></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.MinimumLengthValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.CommonPasswordValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.NumericPasswordValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 国际化相关配置</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/topics/i18n/</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line">TIME_ZONE = <span class="string">'UTC'</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件地址 (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br></pre></td></tr></table></figure>
<h3 id="创建项目应用"><a href="#创建项目应用" class="headerlink" title="创建项目应用"></a>创建项目应用</h3><p>使用 pycharm 自带的命令行工具来创建应用</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyuuvtcnljj31b30u0atp.jpg" alt></p>
<p>应用创建完后将应用名添加到 settings.py文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    	...</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="comment"># 添加的自定义应用</span></span><br><span class="line">    <span class="string">'app'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="app目录结构"><a href="#app目录结构" class="headerlink" title="app目录结构"></a>app目录结构</h3><p>创建后的 app 目录结构和使用命令行创建的一样，下面来看看具体都有什么作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">migrations：数据迁移(移植)模块，内容都是由Django自动生成</span><br><span class="line">	-- __init__.py</span><br><span class="line">__init__.py</span><br><span class="line">admin.py：应用的后台管理系统配置</span><br><span class="line">apps.py：django 1.9后，本应用的相关配置</span><br><span class="line">models.py：数据模型模块，使用ORM框架，类似于MVC模式下的Model层</span><br><span class="line">tests.py：自动化测试模块，可以写自动化测试脚本</span><br><span class="line">views.py：执行相应的逻辑代码模块(相应什么，如何相应)，代码逻辑处理的主要地点，项目的大部分代码所在位置</span><br></pre></td></tr></table></figure>
<h2 id="页面响应"><a href="#页面响应" class="headerlink" title="页面响应"></a>页面响应</h2><h3 id="第一个响应"><a href="#第一个响应" class="headerlink" title="第一个响应"></a>第一个响应</h3><p>通过配置路由和视图文件来响应第一次连接请求。</p>
<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入应用视图</span></span><br><span class="line"><span class="keyword">import</span> app.views <span class="keyword">as</span> app_view <span class="comment"># 取别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置路由</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 为指定函数配置 url</span></span><br><span class="line">    url(<span class="string">r'^index/&amp;'</span>, app_view.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="配置视图"><a href="#配置视图" class="headerlink" title="配置视图"></a>配置视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入处理请求的 http 相应功能</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># django中每一个请求都会设置相应函数来进行处理</span></span><br><span class="line"><span class="comment"># 函数的参数约定为 request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index page!'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>启动服务后访问 localhost:8000/index/，可以看到响应为 index 函数里填写的响应，说明服务成功启动并且响应了自己想要的响应字符串。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuvics5u0j31b30u0thr.jpg" alt></p>
<h3 id="第一个模板页面"><a href="#第一个模板页面" class="headerlink" title="第一个模板页面"></a>第一个模板页面</h3><p>项目目录下有个 templates 文件夹是专门用于存放页面资源的，比如index.html</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 参数：请求对象 request，模板 html 文件，传给前台的资源</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure>
<p>index.html 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置完成后，访问127.0.0.1:8000/index/后显示为：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuxy92naoj31b30u0wno.jpg" alt></p>
<p>在 views.py文件中编写对应响应功能函数时，会自动出现模板文件</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyuxzv8234j311k07awfu.jpg" alt></p>
<p>这是因为在 settings.py文件中已经把模板路径配置好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 如果使用第三方，可以在这个地方修改模板引擎</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="comment"># 模板页面默认路径：项目根路径下的templates文件夹</span></span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="comment"># 允许所有app均拥有自己的模板文件夹</span></span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="第一个重定向"><a href="#第一个重定向" class="headerlink" title="第一个重定向"></a>第一个重定向</h3><p>和上面的一样，首先在 views.py文件中配置响应函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="comment"># / 路径渲染index.html页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"><span class="comment"># /index/ 路径重定向到 / 路径，达到渲染index.html页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure>
<p>响应的路由配置为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="comment"># 导入应用视图</span></span><br><span class="line"><span class="keyword">import</span> app.views <span class="keyword">as</span> app_view</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^index/$'</span>, app_view.index),</span><br><span class="line">    url(<span class="string">r'^$'</span>, app_view.home),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyuy56m6f8j31c00u0qd3.jpg" alt></p>
<p>状态码显示为301说明发生了转跳，查看网络详细信息发现在index/中有个 location 字段，</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyuy91l4xfj30wf0u0gt0.jpg" alt></p>
<p>该字段值为 <strong>/</strong>，说明转跳到了根目录下。</p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="url应用移植"><a href="#url应用移植" class="headerlink" title="url应用移植"></a>url应用移植</h3><h4 id="项目目录下的urls-py文件"><a href="#项目目录下的urls-py文件" class="headerlink" title="项目目录下的urls.py文件"></a>项目目录下的urls.py文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入include功能，将url配置转移到指定应用内部的自身url配置文件</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 将url配置操作交给app_test自身的urls.py来进行操作</span></span><br><span class="line">    <span class="comment"># app-test/为app_test应用的总路径</span></span><br><span class="line">    url(<span class="string">r'^app-test/'</span>, include(<span class="string">'app_test.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="app-test下的urls-py文件"><a href="#app-test下的urls-py文件" class="headerlink" title="app_test下的urls.py文件"></a>app_test下的urls.py文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 1.不要直接留空，直接留空 http://localhost:8000/app-test/* 均可以访问</span></span><br><span class="line">    <span class="comment"># 2.如果要配置index，访问的地址为 http://localhost:8000/app-test/index</span></span><br><span class="line">    <span class="comment"># 3.配置方式：r'^index/$'，不要省略 / 符号</span></span><br><span class="line">    <span class="comment"># 4.正则是否以$标识结尾取决于该路径是否会有下一级路径</span></span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="多应用相同模板页面冲突"><a href="#多应用相同模板页面冲突" class="headerlink" title="多应用相同模板页面冲突"></a>多应用相同模板页面冲突</h3><p>如果在两个应用中均有相同的模板页面假如为index.html</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.在应用templates文件夹下建立与应用同名的文件夹，eg：app_text下就建立app_text</span></span><br><span class="line"><span class="comment"># 2.将模板创建在与应用同名的模板文件夹下</span></span><br><span class="line"><span class="comment"># 3.修改指定应用下views.py处理请求的render模板指向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 模板指向：blog_app应用的templates下的blog_app文件夹中的index.html</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'app_text/index.html'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="静态资源的配置"><a href="#静态资源的配置" class="headerlink" title="静态资源的配置"></a>静态资源的配置</h3><p>假如页面需要一些静态资源，比如需要 css 样式、js 文件等，那么就需要在 settings 文件中配置好静态文件的路径。</p>
<h4 id="配置-settings-py文件"><a href="#配置-settings-py文件" class="headerlink" title="配置 settings.py文件"></a>配置 settings.py文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态文件地址 (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># 在项目根目录下新建static文件夹，静态资源均放在该文件夹中</span></span><br><span class="line"><span class="comment"># 增加STATICFILES_DIRS配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">	os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 前端页面加载静态资源的路径：/static/... (...为具体在static文件夹中的路径)</span></span><br></pre></td></tr></table></figure>
<h4 id="拓展静态资源配置"><a href="#拓展静态资源配置" class="headerlink" title="拓展静态资源配置"></a>拓展静态资源配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果要将项目根目录下source文件夹也作为静态资源路径</span></span><br><span class="line"><span class="comment"># STATICFILES_DIRS增加source配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">	os.path.join(BASE_DIR, <span class="string">'source'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 前端页面加载静态资源路径依旧不变，Django会自动索引：/static/... (...为具体在source文件夹中的路径)</span></span><br></pre></td></tr></table></figure>
<h2 id="url正则"><a href="#url正则" class="headerlink" title="url正则"></a>url正则</h2><h3 id="原生字符串"><a href="#原生字符串" class="headerlink" title="原生字符串"></a>原生字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py配置路由</span></span><br><span class="line">url(<span class="string">r'test'</span>, app_view.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py设置响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题：请求地址包含test均可以访问</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test =&gt; /test | /atest | /testa | /atesta | /test/a | /test/</span></span><br></pre></td></tr></table></figure>
<h3 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py配置路由</span></span><br><span class="line">url(<span class="string">r'^test'</span>, app_view.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py设置响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题：请求地址以test开头均可以访问</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test =&gt; /test | /testa | /test/a | /test/</span></span><br></pre></td></tr></table></figure>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py配置路由</span></span><br><span class="line">url(<span class="string">r'^test$'</span>, app_view.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py设置响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题：只能一种方式访问</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test =&gt; /test</span></span><br><span class="line"><span class="comment"># 不能以 /test/ 访问</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test/</span></span><br></pre></td></tr></table></figure>
<h3 id="优化结尾"><a href="#优化结尾" class="headerlink" title="优化结尾"></a>优化结尾</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py配置路由</span></span><br><span class="line">url(<span class="string">r'^test/$'</span>, app_view.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py设置响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /test 和 /test/ 均可以访问</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题：不能作为应用总路由</span></span><br><span class="line"><span class="comment"># eg：app_test应用在项目urls.py</span></span><br><span class="line"><span class="comment"># url(r'^app-test/', include('app_test.urls')) 末尾不能加$，因为作为应用总目录，是有下一级，如果用$标识结尾了，就代表不能有下一级路由</span></span><br></pre></td></tr></table></figure>
<h3 id="地址捕获"><a href="#地址捕获" class="headerlink" title="地址捕获"></a>地址捕获</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py配置路由</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)/\d+/(\d+)/$'</span>, app_view.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应请求路径</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/test/1/22/333/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request, arg1, arg2)</span>:</span></span><br><span class="line">    <span class="comment"># arg1: str 1</span></span><br><span class="line">    <span class="comment"># arg2: str 333</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常规路由配置</span></span><br><span class="line"><span class="comment"># r'^index/$'</span></span><br><span class="line"><span class="comment"># r'^page/2/$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用路由配置</span></span><br><span class="line"><span class="comment"># r'^app/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根路由配置</span></span><br><span class="line"><span class="comment"># r'^$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由配置均以 / 结尾</span></span><br><span class="line"><span class="comment"># ()中的字段会被请求响应函数捕获</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制响应函数捕获的变量名</span></span><br><span class="line"><span class="comment"># (?P&lt;num&gt;[0-9]+) 响应函数参数(requset, num)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（八）</title>
    <url>/2019/01/10/Django%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（八）"><a href="#Django-系列博客（八）" class="headerlink" title="Django 系列博客（八）"></a>Django 系列博客（八）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 中的模板层，模板都是Django 使用相关函数渲染后传输给前端在显式的，为了想要渲染出我们想要的数据，需要学习模板语法，相关过滤器、标签。</p>
<h2 id="模板简介"><a href="#模板简介" class="headerlink" title="模板简介"></a>模板简介</h2><p>你可能注意到下面的例子返回文本的方式有点特别。当我们使用相关函数来渲染模板的时候，首先是打开了模板文件，然后将需要传入的参数填到文件中在返回给前端。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_datetime</span><span class="params">(request)</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    html = <span class="string">'&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;'</span> % now</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>
<p>尽管这很能直观的解释视图层的工作方式，但直接将 HTML 硬编码到你的视图里却不是个好主意。</p>
<ul>
<li>对页面设计进行的任何改变都必须对<code>python</code>代码进行相应的更改。站点设计的修改往往比底层<code>python</code>代码的修改要频繁的多，因此如何可以在不进行<code>python</code>代码修改的情况下变更设计，那将会方便的多。</li>
<li><code>python</code>代码编写和<code>html</code>设计是两项不同的工作，大多数专业的网站开发环境都会分配不同的部分或者开发人员来完成。设计者和<code>html/css</code>的编码人员不应该被要求去编辑<code>python</code>的代码来完成他们的工作。</li>
<li>程序员编写<code>python</code>代码和设计人员制作模板两项工作同时进行的效率是最高的，远胜于让一个人等待另一个人完成对某个既包含<code>python</code>又包含<code>html</code>的文件的编辑工作。</li>
</ul>
<p><strong>基于上述这些原因，将页面的设计和 Python 的代码分离开来会更干净简洁更易维护。可以使用 Django 的模板系统（Templates System）来实现这种模式。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_time</span><span class="params">(req)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    html = <span class="string">'&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;'</span> % now</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># django模板修改的视图函数</span></span><br><span class="line">    <span class="keyword">from</span> django.template <span class="keyword">import</span> Template, Context</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    t = <span class="string">'&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;'</span> % now</span><br><span class="line">    c = Context(&amp;<span class="comment">#123;'current_date': str(now)&amp;#125;)</span></span><br><span class="line">    html = t.render(c)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 另一种写法</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> render(req, <span class="string">'current_datetime.html'</span>, &amp;<span class="comment">#123;'current_date': str(now)[:19]&amp;#125;)</span></span><br></pre></td></tr></table></figure>
<p>模板语法终点：</p>
<ol>
<li>变量：&#123;&#123; 变量名 &#125;&#125;<ol>
<li>深度查询，用点语法</li>
<li>过滤器</li>
</ol>
</li>
<li>标签：&#123;&#123; % % &#125;&#125;</li>
</ol>
<h2 id="模板语法变量"><a href="#模板语法变量" class="headerlink" title="模板语法变量"></a>模板语法变量</h2><p>在 Django 模板中遍历复杂数据结构的关键是点语法</p>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">template_test</span><span class="params">(request)</span>:</span></span><br><span class="line">    name = <span class="string">'lqz'</span></span><br><span class="line">    li = [<span class="string">'lqz'</span>, <span class="number">1</span>, <span class="string">'18'</span>]</span><br><span class="line">    dic = &amp;<span class="comment">#123;'name': 'lqz', 'age': 18&amp;#125;</span></span><br><span class="line">    ll2 = [</span><br><span class="line">        &amp;<span class="comment">#123;'name': 'lqz', 'age': 18&amp;#125;,</span></span><br><span class="line">        &amp;<span class="comment">#123;'name': 'lqz2', 'age': 19&amp;#125;,</span></span><br><span class="line">        &amp;<span class="comment">#123;'name': 'egon', 'age': 20&amp;#125;,</span></span><br><span class="line">        &amp;<span class="comment">#123;'name': 'kevin', 'age': 23&amp;#125;</span></span><br><span class="line">    ]</span><br><span class="line">    ll3=[]</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">            print(<span class="string">'test函数'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_classmethod</span><span class="params">(cls)</span>:</span></span><br><span class="line">            print(<span class="string">'类方法'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'类方法'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">static_method</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">'静态方法'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'静态方法'</span></span><br><span class="line"></span><br><span class="line">    lqz = Person(<span class="string">'lqz'</span>)</span><br><span class="line">    egon = Person(<span class="string">'egon'</span>)</span><br><span class="line">    person_list = [lqz, egon]</span><br><span class="line">    bo = <span class="literal">True</span></span><br><span class="line">    te = test()</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    now=datetime.datetime.now()</span><br><span class="line">    link1=<span class="string">'&lt;a href="https://www.baidu.com"&gt;点我&lt;a&gt;'</span></span><br><span class="line">    <span class="keyword">from</span> django.utils <span class="keyword">import</span> safestring</span><br><span class="line">    link=safestring.mark_safe(link1)</span><br><span class="line">    <span class="comment"># html特殊符号对照表（http://tool.chinaz.com/Tools/htmlchar.aspx）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这样传到前台不会变成特殊字符，因为django给处理了</span></span><br><span class="line">    dot=<span class="string">'&amp;spades;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request, 'template_index.html', &amp;#123;'name':name,'person_list':person_list&amp;#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'template_index.html'</span>, locals())</span><br></pre></td></tr></table></figure>
<h3 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> dic <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> lqz <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> person_list <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> bo <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> te <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>深度查询句点符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li.1 <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> dic.name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> lqz.test <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> lqz.name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> person_list.0 <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> person_list.1.name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#注意：冒号后面不能加空格#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> now | date:"Y-m-d H:i:s" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#如果变量为空，设置默认值,空数据，None，变量不存在，都适用#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> name |default:'数据为空' <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#计算长度，只有一个参数#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> person_list |length <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#计算文件大小#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> 1024 |filesizeformat <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#字符串切片，前闭后开，前面取到，后面取不到#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> 'hello world lqz' |slice:"2:-1" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> 'hello world lqz' |slice:"2:5" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#截断字符，至少三个起步，因为会有三个省略号（传负数，1，2，3都是三个省略号）#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> '刘清政 world lqz' |truncatechars:"4" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#截断文字，以空格做区分，这个不算省略号#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> '刘清政   是      大帅比 谢谢' |truncatewords:"1" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> link1 <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> link1|safe <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> link <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;spades;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> dot <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#add   可以加负数，传数字字符串都可以#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> "10"|add:"-2" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li.1|add:"-2" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li.1|add:2 <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li.1|add:"2" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> li.1|add:"-2e" <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#upper#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> name|upper <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> 'LQZ'|lower <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模版语法之标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#for 循环 循环列表，循环字典，循环列表对象#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ui</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% for foo in dic %<span class="symbol">&amp;#125;</span></span><br><span class="line">                    <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> foo <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% endfor %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>#也可以混用html标签#<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% for foo in li %<span class="symbol">&amp;#125;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% endfor %<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#表格#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% for foo in ll2 %<span class="symbol">&amp;#125;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> foo.name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> foo.age <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% endfor %<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>#'parentloop': <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#125;</span>, 'counter0': 0, 'counter': 1, 'revcounter': 4, 'revcounter0': 3, 'first': True, 'last': False<span class="symbol">&amp;#125;</span>#<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% for foo in ll2 %<span class="symbol">&amp;#125;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> forloop.counter <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> foo.name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> foo.age <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span>% endfor %<span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% for foo in ll5 %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo.name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% empty %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>空的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% endfor %<span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>if判断<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% if name %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>hi <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> name <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% else %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% endif %<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#还有elif#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>with<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% with ll2.0.name as n %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> n <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% endwith %<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> n <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% load my_tag_filter %<span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> 3|multi_filter:3 <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#传参必须用空格区分#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% multi_tag 3 9 10 %<span class="symbol">&amp;#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;#123;</span>#可以跟if连用#<span class="symbol">&amp;#125;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% if 3|multi_filter:3 &gt; 9 %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>大于<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% else %<span class="symbol">&amp;#125;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>小于<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;#123;</span>% endif %<span class="symbol">&amp;#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：点语法也可以用来引用对象的方法（无参数方法）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>字典:<span class="symbol">&amp;#123;</span><span class="symbol">&amp;#123;</span> dic.name.upper <span class="symbol">&amp;#125;</span><span class="symbol">&amp;#125;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="模板之过滤器"><a href="#模板之过滤器" class="headerlink" title="模板之过滤器"></a>模板之过滤器</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;obj|filter__name:param&amp;#125;&amp;#125;  变量名字|过滤器名称：变量</span><br></pre></td></tr></table></figure>
<h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>如果一个变量是 false 或者为空，使用给定的默认值。否则使用变量的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|default:&quot;nothing&quot; &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>返回值得长度。它对字符串和列表都有效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|length &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<p>如果<code>value</code>是<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code>，那么输出是4。</p>
<h3 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a>filesizeformat</h3><p>将值格式化为一个‘’人类可读的文件尺寸‘’（’13KB’, ‘4.1MB’等）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|filesizeformat &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>value</code> 是 123456789，输出将会是 <code>117.7 MB</code>。　</p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>输出格式化时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|date:&quot;Y-m-d&quot; &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<p>如果<code>value=datetime.datetime.now()</code>，那么结果会是<code>2019-01-10</code>。</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>该方法只能传入一个参数，通常使用引号包裹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; file_size|filesizeformat &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<p>如果后台的 <code>file_size</code>为1024，那么结果会是<code>1KB</code>。</p>
<h3 id="truncatechars"><a href="#truncatechars" class="headerlink" title="truncatechars"></a>truncatechars</h3><p>如果字符串字符多于指定的字符数量，那么会被阶段。截断的字符串将以可翻译的省略号序列<code>(&#39;...&#39;)</code>结束。</p>
<p><strong>参数：要截断的字符数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|truncatechars:9 &amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>
<h3 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h3><p>Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value=&quot;&lt;a href=&quot;&quot;&gt;点击&lt;/a&gt;&quot; # 不希望转义的链接</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123; value|safe&amp;#125;&amp;#125; # 添加 safe 过滤器就可以不转义了</span><br></pre></td></tr></table></figure>
<h3 id="其他过滤器"><a href="#其他过滤器" class="headerlink" title="其他过滤器"></a>其他过滤器</h3><table>
<thead>
<tr>
<th>过滤器</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>upper</td>
<td>以大写方式输出</td>
<td>user.name</td>
</tr>
<tr>
<td>add</td>
<td>给value加上一个数值</td>
<td>user.age</td>
</tr>
<tr>
<td>addslashes</td>
<td>单引号加上转义号</td>
<td></td>
</tr>
<tr>
<td>capfirst</td>
<td>第一个字母大写</td>
<td>‘good’\</td>
<td>capfirst,返回 good</td>
</tr>
<tr>
<td>center</td>
<td>输出指定长度的字符串，把变量居中</td>
<td>‘abcd’\</td>
<td>center:’50’</td>
</tr>
<tr>
<td>cut</td>
<td>删除指定字符串</td>
<td>‘You are not a English’\</td>
<td>cut:’not’</td>
</tr>
<tr>
<td>date</td>
<td>格式化日期</td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>如果值不存在，则使用默认值代替</td>
<td>valut\</td>
<td>default:’(N/A)’</td>
</tr>
<tr>
<td>default_if_none</td>
<td>如果值为None, 则使用默认值代替</td>
<td></td>
</tr>
<tr>
<td>dicsort</td>
<td>按某字段排序，变量必须是一个dictionary</td>
<td>for moment in moments \</td>
<td>dictsort:’id’(百分号加大括号)</td>
</tr>
<tr>
<td>dictsortreversed</td>
<td>按某字段倒序排序，变量必须是dictionary</td>
<td></td>
</tr>
<tr>
<td>divisibleby</td>
<td>判断是否可以被数字整除</td>
<td>224 \</td>
<td>divisibleby:2 返回True</td>
</tr>
<tr>
<td>escape</td>
<td>按HTML转义，比如将”&lt;”转换为”&amp;lt”</td>
<td></td>
</tr>
<tr>
<td>filesizeformat</td>
<td>增加数字的可读性，转换结果为13KB,89MB,3Bytes等</td>
<td>1024 \</td>
<td>filesizeformat 返回1.0KB</td>
</tr>
<tr>
<td>first</td>
<td>返回列表的第1个元素，变量必须是一个列表</td>
<td></td>
</tr>
<tr>
<td>floatformat</td>
<td>转换为指定精度的小数，默认保留1位小数</td>
<td>3.1415926\</td>
<td>floatformat:3 返回3.142四舍五入</td>
</tr>
<tr>
<td>get_digit</td>
<td>从个位数开始截取指定位置的数字</td>
<td>12345\</td>
<td>get_digit:’1’</td>
</tr>
<tr>
<td>join</td>
<td>用指定分隔符连接列表</td>
<td>[‘abc’,’45’]\</td>
<td>join:’<em> 返回 abc</em>45’</td>
</tr>
<tr>
<td>length</td>
<td>返回列表中元素的个数或字符串长度</td>
<td></td>
</tr>
<tr>
<td>length_is</td>
<td>检查列表，字符串长度是否符合指定的值</td>
<td>hello\</td>
<td>length_is:’3’</td>
</tr>
<tr>
<td>linebreaks</td>
<td>用<p>或<br>标签包裹变量</p></td>
<td>‘Hi\n\nDavid’\</td>
<td>linebreaks，返回<p>Hi</p><p>David</p></td>
</tr>
<tr>
<td>linebreaksbr</td>
<td>用<br>标签代替换行符</td>
<td></td>
</tr>
<tr>
<td>linenumbers</td>
<td>为变量中的每一行加上行号</td>
<td></td>
</tr>
<tr>
<td>ljust</td>
<td>输出指定长度的字符串，变量左对齐</td>
<td>‘ab’\</td>
<td>ljust:5 返回’ab   ‘</td>
</tr>
<tr>
<td>lower</td>
<td>字符串变小写</td>
<td></td>
</tr>
<tr>
<td>make_list</td>
<td>将字符串转换为列表</td>
<td></td>
</tr>
<tr>
<td>pluralize</td>
<td>根据数字确定是否输出英文复数符号</td>
<td></td>
</tr>
<tr>
<td>random</td>
<td>返回列表的随机一项</td>
<td></td>
</tr>
<tr>
<td>removetags</td>
<td>删除字符串中指定的HTML标记</td>
<td>value\</td>
<td>removetags:’h1 h2’</td>
</tr>
<tr>
<td>rjust</td>
<td>输出指定长度的字符串，变量右对齐</td>
<td></td>
</tr>
<tr>
<td>slice</td>
<td>切片操作， 返回列表</td>
<td>[3,9,1]\</td>
<td>slice:’:2’，返回[3,9], ‘asdikfjhihgie’\</td>
<td>slice:’5’,返回’asdik’</td>
</tr>
<tr>
<td>slugify</td>
<td>在字符串中留下减号和下划线，其它符号删除，空格用减号替换</td>
<td>‘5-2=3and5 2=3’\</td>
<td>slugify,返回5-2 3and5-23</td>
</tr>
<tr>
<td>stringformat</td>
<td>字符串格式化，语法同python</td>
<td></td>
</tr>
<tr>
<td>time</td>
<td>返回日期的时间部分</td>
<td></td>
</tr>
<tr>
<td>timesince</td>
<td>以“到现在为止过了多长时间”显示时间变量</td>
<td>结果可能为45days，3hours</td>
</tr>
<tr>
<td>timeuntil</td>
<td>以“从现在开始到时间变量”还有多长时间显示时间变量</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>每个单词首字母大写</td>
<td></td>
</tr>
<tr>
<td>truncatewords</td>
<td>将字符串转换为省略表达方式</td>
<td>‘This is a pen’\</td>
<td>truncatewords:2 返回’This is …’</td>
</tr>
<tr>
<td>truncatewords_html</td>
<td>同上，但保留其中的HTML标签</td>
<td>‘<p>This is a pen</p>‘\</td>
<td>truncatewords:2,返回 <p>This is …</p></td>
</tr>
<tr>
<td>urlencode</td>
<td>将字符串中的特殊字符转换为url兼容表达方式</td>
<td>‘<a href="http://www.aaa.com/foo?a=b&amp;b=c&#39;\" target="_blank" rel="noopener">http://www.aaa.com/foo?a=b&amp;b=c&#39;\</a></td>
<td>urlencode</td>
</tr>
<tr>
<td>urlize</td>
<td>将变量字符串中的url由纯文本变为链接</td>
<td></td>
</tr>
<tr>
<td>wordcount</td>
<td>返回变量字符串中的单词数</td>
<td></td>
</tr>
<tr>
<td>yesno</td>
<td>将布尔变量转换为字符串yes, no 或maybe</td>
<td>True\</td>
<td>yesno,False\</td>
<td>yesno,None\</td>
<td>yesno,返回 yes,no,maybe</td>
</tr>
</tbody>
</table>
<h2 id="模板之标签"><a href="#模板之标签" class="headerlink" title="模板之标签"></a>模板之标签</h2><p>标签看起来像是这样的：&#123;% tag %&#125;。标签比变量更加复杂：一些在输出中创建文本，一些通过循环或逻辑来控制流程，一些加载其后的变量将使用到的额外信息到模板中。一些标签需要开始和结束标签（例如&#123;% tag %&#125;…标签 内容… &#123;% endtag %&#125;）。</p>
<h3 id="for-标签"><a href="#for-标签" class="headerlink" title="for 标签"></a>for 标签</h3><p>遍历每一个元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% for person in person_list %&amp;#125;</span><br><span class="line">    &lt;p&gt;&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&lt;/p&gt;</span><br><span class="line">&amp;#123;% endfor %&amp;#125;</span><br></pre></td></tr></table></figure>
<p>可以利用<code>&amp;#123;% for obj in list reversed %&amp;#125;</code>反向完成循环。</p>
<p>遍历一个字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% for key,val in dic.items %&amp;#125;</span><br><span class="line">    &lt;p&gt;&amp;#123;&amp;#123; key &amp;#125;&amp;#125;:&amp;#123;&amp;#123; val &amp;#125;&amp;#125;&lt;/p&gt;</span><br><span class="line">&amp;#123;% endfor %&amp;#125;</span><br></pre></td></tr></table></figure>
<p>注：循环序号可以通过<code></code>&#123;&#123; forloop &#125;&#125;显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forloop.counter            The current iteration of the loop (1-indexed) 当前循环的索引值（从1开始）</span><br><span class="line">forloop.counter0           The current iteration of the loop (0-indexed) 当前循环的索引值（从0开始）</span><br><span class="line">forloop.revcounter         The number of iterations from the end of the loop (1-indexed) 当前循环的倒序索引值（从1开始）</span><br><span class="line">forloop.revcounter0        The number of iterations from the end of the loop (0-indexed) 当前循环的倒序索引值（从0开始）</span><br><span class="line">forloop.first              True if this is the first time through the loop 当前循环是不是第一次循环（布尔值）</span><br><span class="line">forloop.last               True if this is the last time through the loop 当前循环是不是最后一次循环（布尔值）</span><br><span class="line">forloop.parentloop         本层循环的外层循环</span><br></pre></td></tr></table></figure>
<h3 id="for…empty"><a href="#for…empty" class="headerlink" title="for…empty"></a>for…empty</h3><p><code>for</code> 标签带有一个可选的<code>&amp;#123;% empty %&amp;#125;</code> 从句，以便在给出的组是空的或者没有被找到时，可以有所操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% for person in person_list %&amp;#125;</span><br><span class="line">    &lt;p&gt;&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&amp;#123;% empty %&amp;#125;</span><br><span class="line">    &lt;p&gt;sorry,no person here&lt;/p&gt;</span><br><span class="line">&amp;#123;% endfor %&amp;#125;</span><br></pre></td></tr></table></figure>
<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p><code>&amp;#123;% if %&amp;#125;</code>会对一个变量求值，如果它的值是“True”（存在、不为空、且不是boolean类型的false值），对应的内容块会输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% if num &gt; 100 or num &lt; 0 %&amp;#125;</span><br><span class="line">    &lt;p&gt;无效&lt;/p&gt;</span><br><span class="line">&amp;#123;% elif num &gt; 80 and num &lt; 100 %&amp;#125;</span><br><span class="line">    &lt;p&gt;优秀&lt;/p&gt;</span><br><span class="line">&amp;#123;% else %&amp;#125;</span><br><span class="line">    &lt;p&gt;凑活吧&lt;/p&gt;</span><br><span class="line">&amp;#123;% endif %&amp;#125;</span><br></pre></td></tr></table></figure>
<p>if语句支持：and、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</p>
<h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>使用一个简单地名字缓存一个复杂的变量，当你需要使用一个“昂贵的”方法（比如访问数据库）很多次的时候是非常有用的</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% with total=business.employees.count %&amp;#125;</span><br><span class="line">    &amp;#123;&amp;#123; total &amp;#125;&amp;#125; employee&amp;#123;&amp;#123; total|pluralize &amp;#125;&amp;#125;</span><br><span class="line">&amp;#123;% endwith %&amp;#125;</span><br><span class="line">不要写成as</span><br></pre></td></tr></table></figure>
<h3 id="cerf-token"><a href="#cerf-token" class="headerlink" title="cerf_token"></a>cerf_token</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% csrf_token%&amp;#125;</span><br></pre></td></tr></table></figure>
<p>这个标签用于跨站请求伪造保护</p>
<h2 id="自定义标签和过滤器"><a href="#自定义标签和过滤器" class="headerlink" title="自定义标签和过滤器"></a>自定义标签和过滤器</h2><ol>
<li><p><strong>在settings中的INSTALLED_APPS配置当前app，不然django无法找到自定义的simple_tag.</strong></p>
</li>
<li><p><strong>在app中创建templatetags模块(模块名只能是templatetags)</strong></p>
</li>
<li><p><strong>创建任意 .py 文件，如：my_tags.py</strong></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"> </span><br><span class="line">register = template.Library()   <span class="comment">#register的名字是固定的,不可改变</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_multi</span><span class="params">(v1,v2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  v1 * v2</span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_tag_multi</span><span class="params">(v1,v2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  v1 * v2</span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input</span><span class="params">(id,arg)</span>:</span></span><br><span class="line">    result = <span class="string">"&lt;input type='text' id='%s' class='%s' /&gt;"</span> %(id,arg,)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(result)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>使用自定义 simple_tag和 fileter 的 html 文件中导入之前创建的 my_tags.py</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% load my_tags %&amp;#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><strong>使用simple_tag和filter（如何调用）</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% load xxx %&amp;#125;  </span><br><span class="line">      </span><br><span class="line"># num=12</span><br><span class="line">&amp;#123;&amp;#123; num|filter_multi:2 &amp;#125;&amp;#125; #24</span><br><span class="line"> </span><br><span class="line">&amp;#123;&amp;#123; num|filter_multi:&quot;[22,333,4444]&quot; &amp;#125;&amp;#125;</span><br><span class="line"> </span><br><span class="line">&amp;#123;% simple_tag_multi 2 5 %&amp;#125;  参数不限,但不能放在if for语句中</span><br><span class="line">&amp;#123;% simple_tag_multi num 5 %&amp;#125;</span><br></pre></td></tr></table></figure>
<p>注意：filter 可以用在 if 等语句后，simple_tag不可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#123;% if num|filter_multi:30 &gt; 100 %&amp;#125;</span><br><span class="line">    &amp;#123;&amp;#123; num|filter_multi:30 &amp;#125;&amp;#125;</span><br><span class="line">&amp;#123;% endif %&amp;#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十七）</title>
    <url>/2019/01/20/Django%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十七）"><a href="#Django-系列博客（十七）" class="headerlink" title="Django 系列博客（十七）"></a>Django 系列博客（十七）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 的 cookie 和 session 组件。</p>
<h2 id="COOKIE与SESSION"><a href="#COOKIE与SESSION" class="headerlink" title="COOKIE与SESSION"></a>COOKIE与SESSION</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>cookie：是浏览器为Web服务器存储的一小段消息。每次浏览器从某个服务器请求页面时，它收到服务器返回的 cookies。它保存在浏览器下的某个文件夹下。</p>
<p>session：Django 的 session 机制会向请求的浏览器发送 cookie 字符串。同时会保存一份到本地，用来验证浏览器登陆是否为同一用户。它存在于服务器，Django 默认会把 session 存入到数据库中。</p>
<p>session 依赖于 cookie，如果浏览器不能保存 cookies 那么 session 就失效了。因为它需要浏览器的 cookie 值（sessionid）去 session 里做对比。session 就是用来在服务器端保存用户的会话状态。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十一）</title>
    <url>/2019/01/14/Django%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十一）"><a href="#Django-系列博客（十一）" class="headerlink" title="Django 系列博客（十一）"></a>Django 系列博客（十一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍使用 ORM 来进行多表的操作，当然重点在查询方面。</p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>实例：</p>
<p>作者模型：一个作者有姓名和年龄。</p>
<p>作者详细模型：把作者的详情放到详情表，包含生日，手机号，家庭住址等信息。作者详情模型和作者模型之间是一对一的关系（one-to-one）。</p>
<p>出版商模型：出版商有名称，所在城市。</p>
<p>书籍模型： 书籍有书名和出版日期，一本书可能会有多个作者，一个作者也可以写多本书，所以作者和书籍的关系就是多对多的关联关系(many-to-many);一本书只应该由一个出版商出版，所以出版商和书籍是一对多关联关系(one-to-many)。</p>
<h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'id'</span>, on_delete=models.CASCADE)</span><br><span class="line">    pub_date = models.DateField()</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    author = models.OneToOneField(to=Author, to_field=<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="表关联关系如下"><a href="#表关联关系如下" class="headerlink" title="表关联关系如下"></a>表关联关系如下</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fz6f8a6sbcj30eb0e4abw.jpg" alt></p>
<p>注意：</p>
<ol>
<li>表的名称为 app名字_modelName，是根据模型中的元数据自动生成的，也可以重写为别的名称；</li>
<li>id 字段如果没有定义，会自动添加；</li>
<li>对于外键字段，Django 会自动在字段名前面加上‘’_id‘’来创建数据库中的列名；</li>
<li>这个例子中的 CREATE TABLE SQL语句使用 PostgreSQL 语法格式，要注意的是 Django 会根据 settings 中指定的数据库类型来使用相应的 sql 语句；</li>
<li>定义好模型后，需要告诉 Django 使用这些模型，你要做的是修改配置文件中的 INSTALL_APPSZ 中设置，在其中添加 models.py所在应用的名称；</li>
<li>外键字段 ForeignKey 有一个 null=True的设置（允许外键接受空值 NULL），你可以赋给它空值 None。</li>
</ol>
<h2 id="添加表记录"><a href="#添加表记录" class="headerlink" title="添加表记录"></a>添加表记录</h2><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>方式一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish_obj=Publish.objects.get(nid=<span class="number">1</span>)</span><br><span class="line">   book_obj=Book.objects.create(title=<span class="string">""</span>,publishDate=<span class="string">"2012-12-12"</span>,price=<span class="number">100</span>,publish=publish_obj)</span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj=Book.objects.create(title=<span class="string">""</span>,publishDate=<span class="string">"2012-12-12"</span>,price=<span class="number">100</span>,publish_id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">关键点:</span><br><span class="line"></span><br><span class="line">    一 book_obj.publish=Publish.objects.filter(id=book_obj.publish_id).first()</span><br><span class="line"></span><br><span class="line">    二 book_obj.authors.all()</span><br><span class="line">       关键点:book.authors.all()  <span class="comment"># 与这本书关联的作者集合</span></span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> book.id=<span class="number">3</span></span><br><span class="line">        <span class="number">2</span> book_authors</span><br><span class="line">            id  book_id  author_ID</span><br><span class="line">            <span class="number">3</span>      <span class="number">3</span>             <span class="number">1</span></span><br><span class="line">            <span class="number">4</span>      <span class="number">3</span>             <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>  author</span><br><span class="line">           id   name</span><br><span class="line">           <span class="number">1</span>   musibii</span><br><span class="line">           <span class="number">2</span>   thales</span><br><span class="line"></span><br><span class="line">    book_obj.authors.all()    -------&gt;   [musibii,thales]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -----一对多添加</span></span><br><span class="line">    pub=Publish.objects.create(name=<span class="string">'北京出版社'</span>,email=<span class="string">'445676@qq.com'</span>,city=<span class="string">'北京'</span>)</span><br><span class="line">    print(pub)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为book表绑定和publish的关系</span></span><br><span class="line">    <span class="keyword">import</span> datetime,time</span><br><span class="line">    now=datetime.datetime.now().__str__()</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    print(type(now))</span><br><span class="line">    print(now)</span><br><span class="line">    <span class="comment"># 日期类型必须是日期对象或者字符串形式的2018-09-12（2018-9-12），其它形式不行</span></span><br><span class="line">    Book.objects.create(name=<span class="string">'海燕3'</span>,price=<span class="number">333.123</span>,publish_date=now,publish_id=<span class="number">2</span>)</span><br><span class="line">    Book.objects.create(name=<span class="string">'海3燕3'</span>,price=<span class="number">35.123</span>,publish_date=<span class="string">'2018/02/28'</span>,publish=pub)</span><br><span class="line">    pub=Publish.objects.filter(nid=<span class="number">1</span>).first()</span><br><span class="line">    book=Book.objects.create(name=<span class="string">'测试书籍'</span>,price=<span class="number">33</span>,publish_date=<span class="string">'2018-7-28'</span>,publish=pub)</span><br><span class="line">    print(book.publish.name)</span><br><span class="line">    <span class="comment"># 查询出版了红楼梦这本书出版社的邮箱</span></span><br><span class="line">    book=Book.objects.filter(name=<span class="string">'红楼梦'</span>).first()</span><br><span class="line">    print(book.publish.email)</span><br></pre></td></tr></table></figure>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前生成的书籍对象</span></span><br><span class="line">    book_obj=Book.objects.create(title=<span class="string">"追风筝的人"</span>,price=<span class="number">200</span>,publishDate=<span class="string">"2012-11-12"</span>,publish_id=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 为书籍绑定的做作者对象</span></span><br><span class="line">    yuan=Author.objects.filter(name=<span class="string">"shao"</span>).first() <span class="comment"># 在Author表中主键为2的纪录</span></span><br><span class="line">    egon=Author.objects.filter(name=<span class="string">"zuan"</span>).first() <span class="comment"># 在Author表中主键为1的纪录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定多对多关系,即向关系表book_authors中添加纪录</span></span><br><span class="line">    book_obj.authors.add(shao,zuan)    <span class="comment">#  将某些特定的 model 对象添加到被关联对象集合中。   =======    book_obj.authors.add(*[])</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.filter(name=<span class="string">'红楼梦'</span>).first()</span><br><span class="line">    musibii=Author.objects.filter(name=<span class="string">'musibii'</span>).first()</span><br><span class="line">    eureka=Author.objects.filter(name=<span class="string">'eureka'</span>).first()</span><br><span class="line">    <span class="comment"># 1 没有返回值，直接传对象</span></span><br><span class="line">    book.authors.add(musibii,eureka)</span><br><span class="line">    <span class="comment"># 2 直接传作者id</span></span><br><span class="line">    book.authors.add(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 3 直接传列表,会打散</span></span><br><span class="line">    book.authors.add(*[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># 解除多对多关系</span></span><br><span class="line">    book = Book.objects.filter(name=<span class="string">'红楼梦'</span>).first()</span><br><span class="line">    <span class="comment"># 1 传作者id</span></span><br><span class="line">    book.authors.remove(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2 传作者对象</span></span><br><span class="line">    egon = Author.objects.filter(name=<span class="string">'musibii'</span>).first()</span><br><span class="line">    book.authors.remove(musibii)</span><br><span class="line">    <span class="comment">#3 传*列表</span></span><br><span class="line">    book.authors.remove(*[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">    <span class="comment">#4 删除所有</span></span><br><span class="line">    book.authors.clear()</span><br><span class="line">    <span class="comment"># 5 拿到与 这本书关联的所有作者，结果是queryset对象，作者列表</span></span><br><span class="line">    ret=book.authors.all()</span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="comment"># 6 queryset对象，又可以继续点（查询红楼梦这本书所有作者的名字）</span></span><br><span class="line">    ret=book.authors.all().values(<span class="string">'name'</span>)</span><br><span class="line">    print(ret)</span><br><span class="line">    <span class="comment"># 以上总结：</span></span><br><span class="line">    <span class="comment"># （1）</span></span><br><span class="line">    <span class="comment"># book=Book.objects.filter(name='红楼梦').first()</span></span><br><span class="line">    <span class="comment"># print(book)</span></span><br><span class="line">    <span class="comment"># 在点publish的时候，其实就是拿着publish_id又去app01_publish这个表里查数据了</span></span><br><span class="line">    <span class="comment"># print(book.publish)</span></span><br><span class="line">    <span class="comment"># （2）book.authors.all()</span></span><br></pre></td></tr></table></figure>
<h3 id="多对多关系常用-API"><a href="#多对多关系常用-API" class="headerlink" title="多对多关系常用 API"></a>多对多关系常用 API</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj.authors.remove()      <span class="comment"># 将某个特定的对象从被关联对象集合中去除。    ======   book_obj.authors.remove(*[])</span></span><br><span class="line">book_obj.authors.clear()       <span class="comment">#清空被关联对象集合</span></span><br><span class="line">book_obj.authors.set()         <span class="comment">#先清空再设置</span></span><br></pre></td></tr></table></figure>
<h2 id="基于对象的跨表查询"><a href="#基于对象的跨表查询" class="headerlink" title="基于对象的跨表查询"></a>基于对象的跨表查询</h2><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h3><p><strong>正向查询按字段</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询主键为1的书籍的出版社所在的城市</span></span><br><span class="line">book_obj=Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line"><span class="comment"># book_obj.publish 是主键为1的书籍对象关联的出版社对象</span></span><br><span class="line">print(book_obj.publish.city)</span><br></pre></td></tr></table></figure>
<p><strong>反向查询按表名小写_set</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish=Publish.objects.get(name=<span class="string">"苹果出版社"</span>)</span><br><span class="line"><span class="comment">#publish.book_set.all() : 与苹果出版社关联的所有书籍对象集合</span></span><br><span class="line">book_list=publish.book_set.all()    </span><br><span class="line"><span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">       print(book_obj.title)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多正向查询</span></span><br><span class="line">    book=Book.objects.filter(name=<span class="string">'红楼梦'</span>).first()</span><br><span class="line">    print(book.publish)<span class="comment">#与这本书关联的出版社对象</span></span><br><span class="line">    print(book.publish.name)</span><br><span class="line">    <span class="comment"># 一对多反向查询</span></span><br><span class="line">    <span class="comment"># 人民出版社出版过的书籍名称</span></span><br><span class="line">    pub=Publish.objects.filter(name=<span class="string">'人民出版社'</span>).first()</span><br><span class="line">    ret=pub.book_set.all()</span><br><span class="line">    print(ret)</span><br></pre></td></tr></table></figure>
<h3 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h3><p><strong>正向查询按字段</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">egon=Author.objects.filter(name=<span class="string">"egon"</span>).first()</span><br><span class="line">print(egon.authorDetail.telephone)</span><br></pre></td></tr></table></figure>
<p><strong>反向查询按表名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有住址在北京的作者的姓名</span></span><br><span class="line"> </span><br><span class="line">authorDetail_list=AuthorDetail.objects.filter(addr=<span class="string">"beijing"</span>)</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> authorDetail_list:</span><br><span class="line">     print(obj.author.name)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对一正向查询</span></span><br><span class="line">    <span class="comment"># lqz的手机号</span></span><br><span class="line">    musibii=Author.objects.filter(name=<span class="string">'musibii'</span>).first()</span><br><span class="line">    tel=musibii.author_detail.telephone</span><br><span class="line">    print(tel)</span><br><span class="line">    <span class="comment"># 一对一反向查询</span></span><br><span class="line">    <span class="comment"># 地址在北京的作者姓名</span></span><br><span class="line">    author_detail=AuthorDatail.objects.filter(addr=<span class="string">'北京'</span>).first()</span><br><span class="line">    name=author_detail.author.name</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>
<h3 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h3><p><strong>正向查询按字段</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有作者的名字以及手机号</span></span><br><span class="line"> </span><br><span class="line">book_obj=Book.objects.filter(title=<span class="string">"眉"</span>).first()</span><br><span class="line">authors=book_obj.authors.all()</span><br><span class="line"><span class="keyword">for</span> author_obj <span class="keyword">in</span> authors:</span><br><span class="line">     print(author_obj.name,author_obj.authorDetail.telephone)</span><br></pre></td></tr></table></figure>
<p><strong>反向查询按表名_set</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询musibii出过的所有书籍的名字</span></span><br><span class="line"> </span><br><span class="line">author_obj=Author.objects.get(name=<span class="string">"musibii"</span>)</span><br><span class="line">book_list=author_obj.book_set.all()        <span class="comment">#与musibii作者相关的所有书籍</span></span><br><span class="line"><span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">    print(book_obj.title)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向查询----查询红楼梦所有作者名称</span></span><br><span class="line">book=Book.objects.filter(name=<span class="string">'红楼梦'</span>).first()</span><br><span class="line">ret=book.authors.all()</span><br><span class="line">print(ret)</span><br><span class="line"><span class="keyword">for</span> auth <span class="keyword">in</span> ret:</span><br><span class="line">    print(auth.name)</span><br><span class="line"><span class="comment"># 反向查询 查询lqz这个作者写的所有书</span></span><br><span class="line">author=Author.objects.filter(name=<span class="string">'lqz'</span>).first()</span><br><span class="line">ret=author.book_set.all()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<p><strong>注意：可以通过在 ForeignKey() 和ManyToManyField的定义中设置 related_name 的值来覆写 FOO_set 的名称。例如，如果 Article model 中做一下更改：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish = ForeignKey(Book, related_name=<span class="string">'bookList'</span>)</span><br></pre></td></tr></table></figure>
<p>之后使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询 人民出版社出版过的所有书籍</span></span><br><span class="line"> </span><br><span class="line">publish=Publish.objects.get(name=<span class="string">"人民出版社"</span>)</span><br><span class="line">book_list=publish.bookList.all()  <span class="comment"># 与人民出版社关联的所有书籍对象集合</span></span><br></pre></td></tr></table></figure>
<h2 id="基于双下划线的跨表查询"><a href="#基于双下划线的跨表查询" class="headerlink" title="基于双下划线的跨表查询"></a>基于双下划线的跨表查询</h2><p>Django 还提供了一种直观而高效的方式在查询(lookups)中表示关联关系，它能自动确认 SQL JOIN 联系。要做跨关系查询，就使用两个下划线来链接模型(model)间关联字段的名称，直到最终链接到你想要的model 为止。</p>
<p><strong>正向查询按字段，反向查询按表名小姐用来告诉 ORM 引擎 join 哪张表</strong></p>
<h3 id="一对多查询-1"><a href="#一对多查询-1" class="headerlink" title="一对多查询"></a>一对多查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询苹果出版社出版过的所有书籍的名字与价格(一对多)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向查询 按字段:publish</span></span><br><span class="line"></span><br><span class="line">queryResult=Book.objects</span><br><span class="line">　　　　　　　　.filter(publish__name=<span class="string">"苹果出版社"</span>)</span><br><span class="line">　　　　　　　　.values_list(<span class="string">"title"</span>,<span class="string">"price"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询 按表名:book</span></span><br><span class="line"></span><br><span class="line">queryResult=Publish.objects</span><br><span class="line">　　　　　　　　　　.filter(name=<span class="string">"苹果出版社"</span>)</span><br><span class="line">　　　　　　　　　　.values_list(<span class="string">"book__title"</span>,<span class="string">"book__price"</span>)</span><br><span class="line">查询的本质一样，就是select <span class="keyword">from</span>的表不一样</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向查询按字段，反向查询按表名小写</span></span><br><span class="line"><span class="comment"># 查询红楼梦这本书出版社的名字</span></span><br><span class="line"><span class="comment"># select * from app01_book inner join app01_publish</span></span><br><span class="line"><span class="comment"># on app01_book.publish_id=app01_publish.nid</span></span><br><span class="line">ret=Book.objects.filter(name=<span class="string">'红楼梦'</span>).values(<span class="string">'publish__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">ret=Publish.objects.filter(book__name=<span class="string">'红楼梦'</span>).values(<span class="string">'name'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h3 id="多对多查询-1"><a href="#多对多查询-1" class="headerlink" title="多对多查询"></a>多对多查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询musibii出过的所有书籍的名字(多对多)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向查询 按字段:authors:</span></span><br><span class="line">queryResult=Book.objects</span><br><span class="line">　　　　　　　　　　　　.filter(authors__name=<span class="string">"yuan"</span>)</span><br><span class="line">　　　　　　　　　　　　.values_list(<span class="string">"title"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询 按表名:book</span></span><br><span class="line">queryResult=Author.objects</span><br><span class="line">　　　　　　　　　　　　　　.filter(name=<span class="string">"yuan"</span>)</span><br><span class="line">　　　　　　　　　　　　　　.values_list(<span class="string">"book__title"</span>,<span class="string">"book__price"</span>)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向查询按字段，反向查询按表名小写</span></span><br><span class="line"><span class="comment"># 查询红楼梦这本书出版社的名字</span></span><br><span class="line"><span class="comment"># select * from app01_book inner join app01_publish</span></span><br><span class="line"><span class="comment"># on app01_book.publish_id=app01_publish.nid</span></span><br><span class="line">ret=Book.objects.filter(name=<span class="string">'红楼梦'</span>).values(<span class="string">'publish__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">ret=Publish.objects.filter(book__name=<span class="string">'红楼梦'</span>).values(<span class="string">'name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># sql 语句就是from的表不一样</span></span><br><span class="line"><span class="comment"># -------多对多正向查询</span></span><br><span class="line"><span class="comment"># 查询红楼梦所有的作者</span></span><br><span class="line">ret=Book.objects.filter(name=<span class="string">'红楼梦'</span>).values(<span class="string">'authors__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># ---多对多反向查询</span></span><br><span class="line">ret=Author.objects.filter(book__name=<span class="string">'红楼梦'</span>).values(<span class="string">'name'</span>)</span><br><span class="line">ret=Author.objects.filter(book__name=<span class="string">'红楼梦'</span>).values(<span class="string">'name'</span>,<span class="string">'author_detail__addr'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h3 id="一对一查询-1"><a href="#一对一查询-1" class="headerlink" title="一对一查询"></a>一对一查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向查询</span></span><br><span class="line">ret = Author.objects.filter(name=<span class="string">"musibii"</span>).values(<span class="string">"authordetail__telephone"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询</span></span><br><span class="line">ret = AuthorDetail.objects.filter(author__name=<span class="string">"musibii"</span>).values(<span class="string">"telephone"</span>)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询musibii的手机号</span></span><br><span class="line">    <span class="comment"># 正向查</span></span><br><span class="line">ret=Author.objects.filter(name=<span class="string">'musibii'</span>).values(<span class="string">'author_detail__telephone'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 反向查</span></span><br><span class="line">ret= AuthorDatail.objects.filter(author__name=<span class="string">'musibii'</span>).values(<span class="string">'telephone'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h3 id="连续跨表"><a href="#连续跨表" class="headerlink" title="连续跨表"></a>连续跨表</h3><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询eureka的手机号</span></span><br><span class="line"><span class="comment"># 查询人民出版社出版过的所有书籍的名字以及作者的姓名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向查询</span></span><br><span class="line">queryResult=Book.objects</span><br><span class="line">　　　　　　　　　　　　.filter(publish__name=<span class="string">"人民出版社"</span>)</span><br><span class="line">　　　　　　　　　　　　.values_list(<span class="string">"title"</span>,<span class="string">"authors__name"</span>)</span><br><span class="line"><span class="comment"># 反向查询</span></span><br><span class="line">queryResult=Publish.objects</span><br><span class="line">　　　　　　　　　　　　　　.filter(name=<span class="string">"人民出版社"</span>)</span><br><span class="line">　　　　　　　　　　　　　　.values_list(<span class="string">"book__title"</span>,<span class="string">"book__authors__age"</span>,<span class="string">"book__authors__name"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习: 手机号以151开头的作者出版过的所有书籍名称以及出版社名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1:</span></span><br><span class="line">queryResult=Book.objects</span><br><span class="line">　　　　　　　　　　　　.filter(authors__authorDetail__telephone__regex=<span class="string">"151"</span>)</span><br><span class="line">　　　　　　　　　　　　.values_list(<span class="string">"title"</span>,<span class="string">"publish__name"</span>)</span><br><span class="line"><span class="comment"># 方式2:    </span></span><br><span class="line">ret=Author.objects</span><br><span class="line">      .filter(authordetail__telephone__startswith=<span class="string">"151"</span>)</span><br><span class="line">      .values(<span class="string">"book__title"</span>,<span class="string">"book__publish__name"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ----进阶练习，连续跨表</span></span><br><span class="line"><span class="comment"># 查询手机号以33开头的作者出版过的书籍名称以及书籍出版社名称</span></span><br><span class="line"><span class="comment"># author_datail author book publish</span></span><br><span class="line"><span class="comment"># 基于authorDatail表</span></span><br><span class="line">ret=AuthorDatail.objects.filter(telephone__startswith=<span class="string">'33'</span>).values(<span class="string">'author__book__name'</span>,<span class="string">'author__book__publish__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 基于Author表</span></span><br><span class="line">ret=Author.objects.filter(author_detail__telephone__startswith=<span class="number">33</span>).values(<span class="string">'book__name'</span>,<span class="string">'book__publish__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 基于Book表</span></span><br><span class="line">ret=Book.objects.filter(authors__author_detail__telephone__startswith=<span class="string">'33'</span>).values(<span class="string">'name'</span>,<span class="string">'publish__name'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 基于Publish表</span></span><br><span class="line">ret=Publish.objects.filter(book__authors__author_detail__telephone__startswith=<span class="string">'33'</span>).values(<span class="string">'book__name'</span>,<span class="string">'name'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h3 id="related-name"><a href="#related-name" class="headerlink" title="related_name"></a>related_name</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish = ForeignKey(Blog, related_name=<span class="string">'bookList'</span>)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查询人民出版社出版过的所有书籍的名字与价格(一对多)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询 不再按表名:book,而是related_name:bookList</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queryResult = Publish.objects</span><br><span class="line">　　　　　　　　　　　　　　.filter(name=<span class="string">"人民出版社"</span>)</span><br><span class="line">　　　　　　　　　　　　　　.values_list(<span class="string">"bookList__title"</span>, <span class="string">"bookList__price"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十二）</title>
    <url>/2019/01/16/Django%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十二）"><a href="#Django-系列博客（十二）" class="headerlink" title="Django 系列博客（十二）"></a>Django 系列博客（十二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客继续介绍 Django 中的查询，分别为聚合查询和分组查询，以及 F 和 Q 查询。</p>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p>语法：<code>aggregate(*args, **kwargs)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算所有图书的平均价格</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br></pre></td></tr></table></figure>
<p>aggregate()是 QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值得标识符，值是计算出来的聚合值。建的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定个名称，可以向聚合子句提供它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.aggregate(average_price=Avg(<span class="string">'price'</span>))</span><br></pre></td></tr></table></figure>
<p>如果你希望生成不止一个聚合值，你可以向 aggregate()子句中添加另一个参数。所以如果想知道所有图书价格的最大值和最小值，可以这样查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Max, Min</span><br><span class="line">Book.objects.aggregate(Avg(<span class="string">'price'</span>), Max(<span class="string">'price'</span>), Min(<span class="string">'price'</span>))</span><br></pre></td></tr></table></figure>
<p>具体例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有书籍的平均价格</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Count,Max,Min</span><br><span class="line">ret=Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line"><span class="comment"># &#123;'price__avg': 202.896&#125;</span></span><br><span class="line"><span class="comment"># 可以改名字</span></span><br><span class="line">ret=Book.objects.all().aggregate(avg_price=Avg(<span class="string">'price'</span>))</span><br><span class="line"><span class="comment"># 统计平均价格和最大价格</span></span><br><span class="line">ret=Book.objects.all().aggregate(avg_price=Avg(<span class="string">'price'</span>),max_price=Max(<span class="string">'price'</span>))</span><br><span class="line"><span class="comment"># 统计最小价格</span></span><br><span class="line">ret = Book.objects.all().aggregate(avg_price=Avg(<span class="string">'price'</span>), min_price=Min(<span class="string">'price'</span>))</span><br><span class="line"><span class="comment"># 统计个数和平均价格</span></span><br><span class="line">ret = Book.objects.all().aggregate(avg_price=Avg(<span class="string">'price'</span>), max_price=Max(<span class="string">'price'</span>),count=Count(<span class="string">'price'</span>))</span><br><span class="line">ret = Book.objects.all().aggregate(avg_price=Avg(<span class="string">'price'</span>), max_price=Max(<span class="string">'price'</span>),count=Count(<span class="string">'nid'</span>))</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group by 那个表就以那个表作为基表</span><br><span class="line">values 在前：表示 group by</span><br><span class="line">values 在后：表示取值</span><br><span class="line">filter 在前：表示 where 条件</span><br><span class="line">filter 在后：表示 having</span><br></pre></td></tr></table></figure>
<h3 id="分组查询案例"><a href="#分组查询案例" class="headerlink" title="分组查询案例"></a>分组查询案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有作者写的书的总价格大于26的</span></span><br><span class="line"><span class="comment"># filter()在annotate后面，表示对分组后的结果进行筛选，相当于having</span></span><br><span class="line"><span class="comment"># annotate前的values()表示按该字段分组，相当于group by，可以省略，默认会按Author的id分组</span></span><br><span class="line"><span class="comment"># 后面的values()表示取值</span></span><br><span class="line">ret=Author.objects.all().values(<span class="string">'pk'</span>).annotate(s=Sum(<span class="string">'book__price'</span>)).filter(s__gt=<span class="number">26</span>).values(<span class="string">'name'</span>,<span class="string">'s'</span>)</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">ret=Author.objects.all().annotate(s=Sum(<span class="string">'book__price'</span>)).filter(s__gt=<span class="number">26</span>).values(<span class="string">'name'</span>,<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询各个作者出的书的总价格</span></span><br><span class="line"><span class="comment"># s相当于给求和结果取名字，在vlaues取值中，可以引用</span></span><br><span class="line">ret = Author.objects.all().annotate(s=Sum(<span class="string">'price'</span>)).values(<span class="string">'name'</span>,<span class="string">'s'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计不止一个作者的图书</span></span><br><span class="line">ret=Book.objects.all().values(<span class="string">'pk'</span>).annotate(c=Count(<span class="string">'authors'</span>)).filter(c__gt=<span class="number">1</span>).values(<span class="string">'name'</span>,<span class="string">'c'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">ret = Book.objects.annotate(author_num=Count(<span class="string">"authors"</span>)).filter(author_num__gt=<span class="number">1</span>).values(<span class="string">'name'</span>,<span class="string">'author_num'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h2 id="F-查询"><a href="#F-查询" class="headerlink" title="F 查询"></a>F 查询</h2><h3 id="什么是-F-查询"><a href="#什么是-F-查询" class="headerlink" title="什么是 F 查询"></a>什么是 F 查询</h3><p>如果要对两个字段的值作比较，就不能直接比较，必须借助 F()的实例，可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">fliter(commit_num_gt=F(<span class="string">'read_num'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="F-查询的使用"><a href="#F-查询的使用" class="headerlink" title="F 查询的使用"></a>F 查询的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询评论数大于阅读数的书</span></span><br><span class="line">book = models.Book.objects.filter(commit_num__gt=F(<span class="string">'read_num'</span>)).values(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有书的评论数加1</span></span><br><span class="line">models.Book.objects.all().update(commit_num=F(<span class="string">'commit_num'</span>)+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Q-查询"><a href="#Q-查询" class="headerlink" title="Q 查询"></a>Q 查询</h2><h3 id="什么是-Q-查询"><a href="#什么是-Q-查询" class="headerlink" title="什么是 Q 查询"></a>什么是 Q 查询</h3><p>对两个字段的值进行或、与、非运算，不能直接运算，需要用 Q()的实例。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 且  -----&gt;  &amp;</span></span><br><span class="line"><span class="comment"># 或  -----&gt;  |</span></span><br><span class="line"><span class="comment"># 非  -----&gt;  ~</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">fliter(Q(name=<span class="string">'tom'</span>)|Q(name=<span class="string">'tony'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="Q-查询的使用"><a href="#Q-查询的使用" class="headerlink" title="Q 查询的使用"></a>Q 查询的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询不是tom写的书的名字</span></span><br><span class="line">ret = models.Book.objects.filter(~Q(authors__name=<span class="string">'tom'</span>)).values(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询作者名字是tom或者名字是tony的书</span></span><br><span class="line">ret = models.Book.objects.filter(Q(authors__name=<span class="string">'tom'</span>)|Q(authors__name=<span class="string">'tony'</span>)).values(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>在实际开发中，外键通常不用：</p>
<ul>
<li>约束性太强</li>
<li>查询效率低</li>
<li><p>可以通过<code>db_constraint=False</code>来取消外键约束，在 orm 创建表的时候，外键的约束不会存在，但是这样会产生脏数据。</p>
</li>
<li><p>建外键约束，包括 unique 都是为了不产生脏数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（六）</title>
    <url>/2019/01/09/Django%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（六）"><a href="#Django-系列博客（六）" class="headerlink" title="Django 系列博客（六）"></a>Django 系列博客（六）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 中的路由控制部分，一个网络请求首先到达的就是路由这部分，经过路由与视图层的映射关系再执行相应的代码逻辑并将结果返回给客户端。</p>
<h2 id="Django-中路由的作用"><a href="#Django-中路由的作用" class="headerlink" title="Django 中路由的作用"></a>Django 中路由的作用</h2><p>URL 配置（URLconf）可以比作是 Django 支撑网站的目录。它的本质是 URL 要为该 URL 滴啊用的视图函数之间的映射表。以这种方式告诉 Django，对于客户端发来的 URL 要具体调用视图层的哪段代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># ^$ 这个路由对应视图函数中的 home 方法，只要浏览器往该网址发送请求，就会响应到这个函数执行。</span></span><br></pre></td></tr></table></figure>
<h2 id="简单的路由配置"><a href="#简单的路由配置" class="headerlink" title="简单的路由配置"></a>简单的路由配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(正则表达式, views视图函数, 默认参数, 路由别名),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>正则表达式：一个正则表达式字符串；</li>
<li>views 视图函数：一个可调用对象，通常为一个视图函数或一个指定视图路径的字符串；</li>
<li>默认参数：可选的要传递给视图函数的默认参数（字典形式）；</li>
<li>路由别名：一个可选的name 参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^article/(\d&#123;4&#125;)/(\d&#123;2&#125;)'</span>, views.article),</span><br><span class="line">    url(<span class="string">r'^user/(?P&lt;name&gt;[a-z]&#123;3&#125;)'</span>, views.user_havename),</span><br><span class="line">    url(<span class="string">r'^user/$'</span>, views.user)]</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>若要从 URL 中捕获一个值，只需要在它周围放置一对圆括号；</li>
<li>不需要添加一个前导的反斜杠，因为每个 url 都有。例如，应该是<code>^articles</code>而不是<code>^/articles</code>。</li>
<li>每个正则表达式前面的<code>r</code>是可选的，但是建议加上，表示这是个原生字符串，字符串中的任何字符都不应该转义。</li>
<li>urlpatterns 中的元素按照书写顺序从上往下逐一匹配正则表达式，一旦匹配成功则不再继续。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一些请求的例子：</span><br><span class="line"></span><br><span class="line">/articles/<span class="number">2005</span>/<span class="number">03</span>/ 请求将匹配列表中的第三个模式。Django 将调用函数views.month_archive(request, <span class="string">'2005'</span>, <span class="string">'03'</span>)。</span><br><span class="line">/articles/<span class="number">2005</span>/<span class="number">3</span>/ 不匹配任何URL 模式，因为列表中的第三个模式要求月份应该是两个数字。</span><br><span class="line">/articles/<span class="number">2003</span>/ 将匹配列表中的第一个模式不是第二个，因为模式按顺序匹配，第一个会首先测试是否匹配。请像这样自由插入一些特殊的情况来探测匹配的次序。</span><br><span class="line">/articles/<span class="number">2003</span> 不匹配任何一个模式，因为每个模式要求URL 以一个反斜线结尾。</span><br><span class="line">/articles/<span class="number">2003</span>/<span class="number">03</span>/<span class="number">03</span>/ 将匹配最后一个模式。Django 将调用函数views.article_detail(request, <span class="string">'2003'</span>, <span class="string">'03'</span>, <span class="string">'03'</span>)。</span><br></pre></td></tr></table></figure>
<h3 id="APPEND-SLASH"><a href="#APPEND-SLASH" class="headerlink" title="APPEND_SLASH"></a>APPEND_SLASH</h3><p>该参数的作用是会在访问连接的时候，如果连接没有加斜杠，会自动加上。可以在<code>global_settings.py</code>中修改。</p>
<p>项目的 settings 中没有改配置的选项，一个项目会有两个 settings。</p>
<p>效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^blog/$'</span>, views.blog),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>当我们访问<code>http://www.example.com/blog</code>时，默认将网址自动替换成<code>http://www.example.com/blog/</code>。如果将该配置值设为<code>false</code>，此时在向该网址发送请求时就会提示找不到页面。</p>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>当我们需要捕获 url 中的参数并要传递给视图函数时，有两种捕获方式：无名分组和有名分组。无名分组就是该值没有变量标识，传值的时候采用位置参数传递；有名分组就是给捕获的值赋值一个变量，这样就可以通过关键字参数传值了。</p>
<h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py文件</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^article/(\d&#123;4&#125;)/(\d&#123;2&#125;)'</span>, views.article),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py文件</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span><span class="params">(reques, year, month)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'您要查看%s 年%s 月的文章'</span> %(year, month))</span><br></pre></td></tr></table></figure>
<p>通过圆括号捕获年份和月份，然后通过位置参数传递给 year 和 month 变量，接着在 views 函数中使用。</p>
<h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret=re.search(<span class="string">'(?P&lt;year&gt;[0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)'</span>,<span class="string">'2012/12'</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">print(ret.group(<span class="number">1</span>))</span><br><span class="line">print(ret.group(<span class="number">2</span>))</span><br><span class="line">print(ret.group(<span class="string">'year'</span>))</span><br></pre></td></tr></table></figure>
<p>这些示例使用简单的、没有命名的正则表达式组（通过圆括号）来捕获 URL 中的值并以位置参数传递给视图。在更高级的用法中，可以使用命名的正则表达式组来捕获 URL 中的值并以关键子参数传递给视图函数。</p>
<p>在python 正则表达式中，命名有名分组的语法时<code>(P&lt;变量名&gt;pattern)</code>，其中变量名是分组的标识符，pattern 是要匹配的正则表达式。下面是上面 URLconf 使用有名分组的重写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;)/$'</span>, views.archive_detail),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 捕获到的数据都是 str 类型</span></span><br><span class="line"><span class="comment"># 视图函数里可以指定默认值</span></span><br><span class="line">url(<span class="string">'blog/$'</span>, views.blog),</span><br><span class="line"><span class="comment"># url('blog/?(?P&lt;num&gt;[0-9]&#123;1&#125;)', views.blog),</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog</span><span class="params">(request, num=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<p>这个实现与前面的示例完全相同，只有一个细微的差别：捕获的值作为关键字参数而不是位置参数传递给视图函数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/articles/<span class="number">2005</span>/<span class="number">03</span>/ 请求将调用views.month_archive(request, year=<span class="string">'2005'</span>, month=<span class="string">'03'</span>)函数，而不是views.month_archive(request, <span class="string">'2005'</span>, <span class="string">'03'</span>)。</span><br><span class="line">    /articles/<span class="number">2003</span>/<span class="number">03</span>/<span class="number">03</span>/ 请求将调用函数views.article_detail(request, year=<span class="string">'2003'</span>, month=<span class="string">'03'</span>, day=<span class="string">'03'</span>)。</span><br></pre></td></tr></table></figure>
<p>在实际应用中，这意味你的 URLconf 会更加清晰且不容易产生参数顺序问题的错误，可以在视图函数定义中重新安排参数的顺序。</p>
<h2 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h2><p>其实和项目名相同的文件夹下面的<code>urls.py</code>文件是整个项目的根路由：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fz0ezyntddj31120fkwka.jpg" alt></p>
<p>这是整个项目的根路由，所有向该项目发送的连接请求，首先需要从该路由配置里面过滤，如果只有一个应用，或者路由配置不多一个根路由就足够了，但当 app 多起来之后还是使用一个根路由配置会造成路由混乱，所以有了路由分发，比如这是发往<code>app_01</code>应用的连接，那么在根路由中进行路由分发，把连接转向<code>app_01</code>中的路由中进行处理，这就是路由分发。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根路由配置</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(r'^app_01/', include('app_01.urls')), # 注意前面的正则表达式后面不能加$</span></span><br><span class="line">    url(<span class="string">r'^app_01/'</span>, include(urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用路由配置</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(r'^test/(?P&lt;year&gt;[0-9]&#123;2&#125;)/$', views.url_test),</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>在使用 Django 项目时，一个常见的需求是获得 URL 的最终形式，以用于嵌入到生成的内容中（视图中和显示给用户的 URL 等）或者用于处理服务器端的导航（重定向等）。人们强烈希望不要硬编码这些 URL（费时费力、不可扩展且易产生错误）或者设计一种与 URLconf 毫不相关的专门的 URL 生成机制，因为这样容易导致一定程度上产生过期的 URL。</p>
<p>在需要 URL 的地方，对于不同层级，Django 提供不同的工具用于 URL 反查：</p>
<ul>
<li>在模板中：使用 url 模板标签；</li>
<li>在 python 代码中：使用<code>from django.urls import reverse</code>。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py文件</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> app_01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'^test/(?P&lt;year&gt;[0-9]&#123;2&#125;)/(P?&lt;month&gt;[0-9]&#123;2&#125;)/$'</span>, views.url_test, name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<!-- html文件 -->
<p><code>&lt;a href=&quot;&amp;#123;% url &#39;test&#39; 10 23 %&amp;#125;&quot;&gt;哈哈&lt;/a&gt;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py文件</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect, reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url_test</span><span class="params">(request, year, month)</span>:</span></span><br><span class="line">    url = reverse(<span class="string">'test'</span>, args=(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ul>
<li>在 html 代码里面使用<code>&amp;#123;% url &#39;别名&#39; 参数 参数... %&amp;#125;</code>；</li>
<li>在视图函数中：<ul>
<li><code>url = reverse(&#39;test&#39;)</code></li>
<li><code>url = reverse(&#39;test&#39;, args=(10, 20))</code></li>
</ul>
</li>
</ul>
<p>当命名 URL 模式时，要确保使用的名称不会与其他应用中的名称产生冲突。如果你的 URL 模式叫做 comment，而另外一个应用中也有一个同样的名字，当你在模板中使用这个名称的时候不能保证将插入哪个 URL。在 URL 名称加上一个前缀，比如应用的名称，将会减少冲突的可能。建议使用<code>myapp-comment</code>。</p>
<h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>命名空间（namespace）是表示标识符的可见范围。一个标识符可在多个命名空间中定义，它在不同命名空间中的含义是互不相干的。这样在一个新的命名空间中可以定义任何标识符，它们不会与任何已有的标识符产生冲突，因为已有的定义处于其他的命名空间中。</p>
<p>由于<code>name</code>没有作用域，Django 在返解 URL 时，会在项目的全局路径中按顺序搜索，当查找到第一个<code>name</code>指定的 URL 时，立即返回。</p>
<p>在开发项目时，会经常使用<code>name</code>属性反解出 URL，当不小心在不同的 app 的 urls 中定义相同的<code>name</code>时，可能会导致 URL 反解错误，为了避免发生引入了命名空间。</p>
<h3 id="创建-app01和-app02"><a href="#创建-app01和-app02" class="headerlink" title="创建 app01和 app02"></a>创建 app01和 app02</h3><p><code>python manage.py startapp app01</code></p>
<p><code>python manage.py startapp app02</code></p>
<h3 id="根路由"><a href="#根路由" class="headerlink" title="根路由"></a>根路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'app01/'</span>, include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    path(<span class="string">'app02/'</span>, include(<span class="string">'app02.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="app01的-urls-py"><a href="#app01的-urls-py" class="headerlink" title="app01的 urls.py"></a>app01的 urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'index/'</span>,views.index,name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="app02的-urls-py"><a href="#app02的-urls-py" class="headerlink" title="app02的 urls.py"></a>app02的 urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'index/'</span>, views.index,name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="app01的视图"><a href="#app01的视图" class="headerlink" title="app01的视图"></a>app01的视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    url=reverse(<span class="string">'index'</span>)</span><br><span class="line">    print(url)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index app01'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="app02的视图"><a href="#app02的视图" class="headerlink" title="app02的视图"></a>app02的视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    url=reverse(<span class="string">'index'</span>)</span><br><span class="line">    print(url)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index app02'</span>)</span><br></pre></td></tr></table></figure>
<p>这样都找<code>index.html</code>，app01和 app02找到的都是app02的 index。如何处理？在路由分发的时候指定名称空间。根路由在路由分发是，指定名称空间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一</span></span><br><span class="line">path(<span class="string">'app01/'</span>, include((<span class="string">'app01.urls'</span>,<span class="string">'app01'</span>))),</span><br><span class="line">path(<span class="string">'app02/'</span>, include((<span class="string">'app02.urls'</span>,<span class="string">'app02'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二</span></span><br><span class="line">url(<span class="string">r'app01/'</span>,include(<span class="string">'app01.urls'</span>,namespace=<span class="string">'app01'</span>)),</span><br><span class="line">url(<span class="string">r'app02/'</span>,include(<span class="string">'app02.urls'</span>,namespace=<span class="string">'app02'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三</span></span><br><span class="line">url(<span class="string">r'app01/'</span>,include((<span class="string">'app01.urls'</span>,<span class="string">'app01'</span>))),</span><br><span class="line">url(<span class="string">r'app02/'</span>,include((<span class="string">'app02.urls'</span>,<span class="string">'app02'</span>)))</span><br></pre></td></tr></table></figure>
<p>在视图函数反向解析的时候，指定名称空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url=reverse(<span class="string">'app02:index'</span>)</span><br><span class="line">print(url)</span><br><span class="line">url2=reverse(<span class="string">'app01:index'</span>)</span><br><span class="line">print(url2)</span><br></pre></td></tr></table></figure>
<p>在模板里面也是用相应的名称空间名：</p>
<p><code>&lt;a href=&quot;&amp;#123;% url &#39;app02:index&#39;%&amp;#125;&quot;&gt;哈哈&lt;/a&gt;</code></p>
<h2 id="Django2-0版的-path"><a href="#Django2-0版的-path" class="headerlink" title="Django2.0版的 path"></a>Django2.0版的 path</h2><p>Django2.0的<code>re_path</code>和1.0的<code>url</code>一样。2.0多了个<code>path</code></p>
<p>思考情况如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [  </span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;year&gt;[0-9]&amp;#123;4&amp;#125;)/'</span>, year_archive),  </span><br><span class="line">    re_path(<span class="string">'article/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/detail/'</span>, detail_view),  </span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/edit/'</span>, edit_view),  </span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/delete/'</span>, delete_view),  </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>考虑下这样的两个问题：</p>
<p>第一个问题，函数 <code>year_archive</code> 中year参数是字符串类型的，因此需要先转化为整数类型的变量值，当然<code>year=int(year)</code> 不会有诸如如TypeError或者ValueError的异常。那么有没有一种方法，在url中，使得这一转化步骤可以由Django自动完成？</p>
<p>第二个问题，三个路由中article_id都是同样的正则表达式，但是你需要写三遍，当之后article_id规则改变后，需要同时修改三处代码，那么有没有一种方法，只需修改一处即可？</p>
<p>在Django2.0中，可以使用 <code>path</code> 解决以上的两个问题。</p>
<h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path  </span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views  </span><br><span class="line">urlpatterns = [  </span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),  </span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),  </span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>, views.month_archive),  </span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug&gt;/'</span>, views.article_detail),  </span><br><span class="line">　　 <span class="comment"># path才支持，re_path不支持</span></span><br><span class="line">　　 path(<span class="string">'order/&lt;int:year&gt;'</span>,views.order),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>基本规则：</p>
<ul>
<li>使用尖括号(&lt;&gt;)从 url中捕获值；</li>
<li>捕获值中可以包含一个转化器类型（converter type），比如使用<code>&lt;int:name&gt;</code>捕获一个整数变量。如果没有转化器，将匹配任何字符串，也包含<code>/</code>字符。</li>
<li>无需添加前导斜杠</li>
</ul>
<p>以上是示例，分别和上面的基本示例对应：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fz0i7r12avj317c0eoju2.jpg" alt></p>
<h3 id="path-转换器"><a href="#path-转换器" class="headerlink" title="path 转换器"></a>path 转换器</h3><ul>
<li>str：匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式；</li>
<li>int：匹配正整数，包含0；</li>
<li>slug：匹配字母、数字、横杠以及下划线组成的字符串；</li>
<li>uuid：匹配格式化的<code>uuid</code>，如075194d3-6885-417e-a8a8-6c931e272f00。</li>
<li>path： 匹配任何非空字符，包含了路径分隔符（/）</li>
</ul>
<h3 id="注册自定义转化器"><a href="#注册自定义转化器" class="headerlink" title="注册自定义转化器"></a>注册自定义转化器</h3><p>对于一些复杂或者复用的需要，可以定义自己的转化器。转化器是一个类或接口，它的要求有三点：</p>
<ul>
<li>regex类属性，字符串类型；</li>
<li>to_python(self, value)方法，value 是由类属性 regex 所匹配到的字符串，返回具体的 python 变量值，以供 Django 传递到对应的视图函数中；</li>
<li>to_url(self, value)方法，和to_python相反，value 是一个具体的 python 变量值，返回其字符串，通常用于 url 反向引用。</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">'[0-9]&#123;4&#125;'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%04d'</span> % value</span><br></pre></td></tr></table></figure>
<p>使用<code>register_converter</code>将其注册到 URL 配置中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> converters, views</span><br><span class="line"></span><br><span class="line">register_converter(converters.FourDigitYearConverter, <span class="string">'yyyy'</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.spwcial_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;yyyy:year&gt;/'</span>, views.year_archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十三）</title>
    <url>/2019/01/17/Django%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十三）"><a href="#Django-系列博客（十三）" class="headerlink" title="Django 系列博客（十三）"></a>Django 系列博客（十三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 中的常用字段和参数。</p>
<h2 id="ORM-字段"><a href="#ORM-字段" class="headerlink" title="ORM 字段"></a>ORM 字段</h2><h3 id="AutoField"><a href="#AutoField" class="headerlink" title="AutoField"></a>AutoField</h3><p>int 自增列，必须填入参数 primary_key=True。当 model 中如果没有自增列，则会自动创建一个列名为 id 的列。</p>
<h3 id="IntegerField"><a href="#IntegerField" class="headerlink" title="IntegerField"></a>IntegerField</h3><p>一个整数类型，范围在-2147483648 to 2147483647。</p>
<h3 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a>CharField</h3><p>字符类型，必须提供max_length参数， max_length表示字符长度。</p>
<h3 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a>DateField</h3><p>日期字段，日期格式  YYYY-MM-DD，相当于Python中的datetime.date()实例。</p>
<h3 id="DateTimeField"><a href="#DateTimeField" class="headerlink" title="DateTimeField"></a>DateTimeField</h3><p>日期时间字段，格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]，相当于Python中的datetime.datetime()实例。</p>
<h2 id="常用和非常用字段"><a href="#常用和非常用字段" class="headerlink" title="常用和非常用字段"></a>常用和非常用字段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AutoField(Field)</span><br><span class="line">- int自增列，必须填入参数</span><br><span class="line">primary_key = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">BigAutoField(AutoField)</span><br><span class="line">- bigint自增列，必须填入参数</span><br><span class="line">primary_key = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">注：当model中如果没有自增列，则自动会创建一个列名为id的列</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自动创建一个列名为id的且为自增的整数列</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义自增列</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SmallIntegerField(IntegerField):</span><br><span class="line">- 小整数 - <span class="number">32768</span> ～ <span class="number">32767</span></span><br><span class="line"></span><br><span class="line">PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</span><br><span class="line">- 正小整数</span><br><span class="line"><span class="number">0</span> ～ <span class="number">32767</span></span><br><span class="line">IntegerField(Field)</span><br><span class="line">- 整数列(有符号的) - <span class="number">2147483648</span> ～ <span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</span><br><span class="line">- 正整数</span><br><span class="line"><span class="number">0</span> ～ <span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">BigIntegerField(IntegerField):</span><br><span class="line">- 长整型(有符号的) - <span class="number">9223372036854775808</span> ～ <span class="number">9223372036854775807</span></span><br><span class="line"></span><br><span class="line">BooleanField(Field)</span><br><span class="line">- 布尔值类型</span><br><span class="line"></span><br><span class="line">NullBooleanField(Field):</span><br><span class="line">- 可以为空的布尔值</span><br><span class="line"></span><br><span class="line">CharField(Field)</span><br><span class="line">- 字符类型</span><br><span class="line">- 必须提供max_length参数， max_length表示字符长度</span><br><span class="line"></span><br><span class="line">TextField(Field)</span><br><span class="line">- 文本类型</span><br><span class="line"></span><br><span class="line">EmailField(CharField)：</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供验证机制</span><br><span class="line"></span><br><span class="line">IPAddressField(Field)</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供验证</span><br><span class="line">IPV4</span><br><span class="line">机制</span><br><span class="line"></span><br><span class="line">GenericIPAddressField(Field)</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供验证</span><br><span class="line">Ipv4和Ipv6</span><br><span class="line">- 参数：</span><br><span class="line">protocol，用于指定Ipv4或Ipv6， <span class="string">'both'</span>, <span class="string">"ipv4"</span>, <span class="string">"ipv6"</span></span><br><span class="line">unpack_ipv4， 如果指定为<span class="literal">True</span>，则输入::ffff: <span class="number">192.0</span></span><br><span class="line"><span class="number">.2</span></span><br><span class="line"><span class="number">.1</span></span><br><span class="line">时候，可解析为<span class="number">192</span></span><br><span class="line"><span class="number">.0</span></span><br><span class="line"><span class="number">.2</span></span><br><span class="line"><span class="number">.1</span>，开启此功能，需要protocol = <span class="string">"both"</span></span><br><span class="line"></span><br><span class="line">URLField(CharField)</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供验证</span><br><span class="line">URL</span><br><span class="line"></span><br><span class="line">SlugField(CharField)</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供验证支持</span><br><span class="line">字母、数字、下划线、连接符（减号）</span><br><span class="line"></span><br><span class="line">CommaSeparatedIntegerField(CharField)</span><br><span class="line">- 字符串类型，格式必须为逗号分割的数字</span><br><span class="line"></span><br><span class="line">UUIDField(Field)</span><br><span class="line">- 字符串类型，Django</span><br><span class="line">Admin以及ModelForm中提供对UUID格式的验证</span><br><span class="line"></span><br><span class="line">FilePathField(Field)</span><br><span class="line">- 字符串，Django</span><br><span class="line">Admin以及ModelForm中提供读取文件夹下文件的功能</span><br><span class="line">- 参数：</span><br><span class="line">path, 文件夹路径</span><br><span class="line">match = <span class="literal">None</span>, 正则匹配</span><br><span class="line">recursive = <span class="literal">False</span>, 递归下面的文件夹</span><br><span class="line">allow_files = <span class="literal">True</span>, 允许文件</span><br><span class="line">allow_folders = <span class="literal">False</span>, 允许文件夹</span><br><span class="line"></span><br><span class="line">FileField(Field)</span><br><span class="line">- 字符串，路径保存在数据库，文件上传到指定目录</span><br><span class="line">- 参数：</span><br><span class="line">upload_to = <span class="string">""</span></span><br><span class="line">上传文件的保存路径</span><br><span class="line">storage = <span class="literal">None</span></span><br><span class="line">存储组件，默认django.core.files.storage.FileSystemStorage</span><br><span class="line"></span><br><span class="line">ImageField(FileField)</span><br><span class="line">- 字符串，路径保存在数据库，文件上传到指定目录</span><br><span class="line">- 参数：</span><br><span class="line">upload_to = <span class="string">""</span></span><br><span class="line">上传文件的保存路径</span><br><span class="line">storage = <span class="literal">None</span></span><br><span class="line">存储组件，默认django.core.files.storage.FileSystemStorage</span><br><span class="line">width_field = <span class="literal">None</span>, 上传图片的高度保存的数据库字段名（字符串）</span><br><span class="line">height_field = <span class="literal">None</span></span><br><span class="line">上传图片的宽度保存的数据库字段名（字符串）</span><br><span class="line"></span><br><span class="line">DateTimeField(DateField)</span><br><span class="line">- 日期 + 时间格式</span><br><span class="line">YYYY - MM - DD</span><br><span class="line">HH: MM[:ss[.uuuuuu]][TZ]</span><br><span class="line"></span><br><span class="line">DateField(DateTimeCheckMixin, Field)</span><br><span class="line">- 日期格式</span><br><span class="line">YYYY - MM - DD</span><br><span class="line"></span><br><span class="line">TimeField(DateTimeCheckMixin, Field)</span><br><span class="line">- 时间格式</span><br><span class="line">HH: MM[:ss[.uuuuuu]]</span><br><span class="line"></span><br><span class="line">DurationField(Field)</span><br><span class="line">- 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型</span><br><span class="line"></span><br><span class="line">FloatField(Field)</span><br><span class="line">- 浮点型</span><br><span class="line"></span><br><span class="line">DecimalField(Field)</span><br><span class="line">- <span class="number">10</span></span><br><span class="line">进制小数</span><br><span class="line">- 参数：</span><br><span class="line">max_digits，小数总长度</span><br><span class="line">decimal_places，小数位长度</span><br><span class="line"></span><br><span class="line">BinaryField(Field)</span><br><span class="line">- 二进制类型</span><br></pre></td></tr></table></figure>
<h2 id="ORM字段与数据库实际字段的对应关系"><a href="#ORM字段与数据库实际字段的对应关系" class="headerlink" title="ORM字段与数据库实际字段的对应关系"></a>ORM字段与数据库实际字段的对应关系</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对应关系：</span><br><span class="line">    <span class="string">'AutoField'</span>: <span class="string">'integer AUTO_INCREMENT'</span>,</span><br><span class="line">    <span class="string">'BigAutoField'</span>: <span class="string">'bigint AUTO_INCREMENT'</span>,</span><br><span class="line">    <span class="string">'BinaryField'</span>: <span class="string">'longblob'</span>,</span><br><span class="line">    <span class="string">'BooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line">    <span class="string">'CharField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">    <span class="string">'CommaSeparatedIntegerField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">    <span class="string">'DateField'</span>: <span class="string">'date'</span>,</span><br><span class="line">    <span class="string">'DateTimeField'</span>: <span class="string">'datetime'</span>,</span><br><span class="line">    <span class="string">'DecimalField'</span>: <span class="string">'numeric(%(max_digits)s, %(decimal_places)s)'</span>,</span><br><span class="line">    <span class="string">'DurationField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line">    <span class="string">'FileField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">    <span class="string">'FilePathField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">    <span class="string">'FloatField'</span>: <span class="string">'double precision'</span>,</span><br><span class="line">    <span class="string">'IntegerField'</span>: <span class="string">'integer'</span>,</span><br><span class="line">    <span class="string">'BigIntegerField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line">    <span class="string">'IPAddressField'</span>: <span class="string">'char(15)'</span>,</span><br><span class="line">    <span class="string">'GenericIPAddressField'</span>: <span class="string">'char(39)'</span>,</span><br><span class="line">    <span class="string">'NullBooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line">    <span class="string">'OneToOneField'</span>: <span class="string">'integer'</span>,</span><br><span class="line">    <span class="string">'PositiveIntegerField'</span>: <span class="string">'integer UNSIGNED'</span>,</span><br><span class="line">    <span class="string">'PositiveSmallIntegerField'</span>: <span class="string">'smallint UNSIGNED'</span>,</span><br><span class="line">    <span class="string">'SlugField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">    <span class="string">'SmallIntegerField'</span>: <span class="string">'smallint'</span>,</span><br><span class="line">    <span class="string">'TextField'</span>: <span class="string">'longtext'</span>,</span><br><span class="line">    <span class="string">'TimeField'</span>: <span class="string">'time'</span>,</span><br><span class="line">    <span class="string">'UUIDField'</span>: <span class="string">'char(32)'</span>,</span><br></pre></td></tr></table></figure>
<h2 id="ORM字段参数"><a href="#ORM字段参数" class="headerlink" title="ORM字段参数"></a>ORM字段参数</h2><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>用于表示某个字段可以为空。</p>
<h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>如果设置 unique=True，则该字段在此表中必须是惟一的。</p>
<h3 id="db-index"><a href="#db-index" class="headerlink" title="db_index"></a>db_index</h3><p>如果 db_index=True， 则代表着为此字段设置索引。</p>
<h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>为该字段设置默认值。</p>
<h3 id="auto-now-add"><a href="#auto-now-add" class="headerlink" title="auto_now_add"></a>auto_now_add</h3><p>配置 auto_now_add=True，创建数据记录的时候会把当前时间添加到数据库。</p>
<h3 id="auto-now"><a href="#auto-now" class="headerlink" title="auto_now"></a>auto_now</h3><p>配置 auto_now=True，每次更新数据记录的时候会更新该字段。</p>
<h3 id="具体意思"><a href="#具体意思" class="headerlink" title="具体意思"></a>具体意思</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null                数据库中字段是否可以为空</span><br><span class="line">db_column           数据库中字段的列名</span><br><span class="line">db_tablespace</span><br><span class="line">default             数据库中字段的默认值</span><br><span class="line">primary_key         数据库中字段是否为主键</span><br><span class="line">db_index            数据库中字段是否可以建立索引</span><br><span class="line">unique              数据库中字段是否可以建立唯一索引</span><br><span class="line">unique_for_date     数据库中字段【日期】部分是否可以建立唯一索引</span><br><span class="line">unique_for_month    数据库中字段【月】部分是否可以建立唯一索引</span><br><span class="line">unique_for_year     数据库中字段【年】部分是否可以建立唯一索引</span><br><span class="line"></span><br><span class="line">verbose_name        Admin中显示的字段名称</span><br><span class="line">blank               Admin中是否允许用户输入为空</span><br><span class="line">editable            Admin中是否可以编辑</span><br><span class="line">help_text           Admin中该字段的提示信息</span><br><span class="line">choices             Admin中显示选择框的内容，用不变动的数据放在内存中从而避免跨表操作</span><br><span class="line">                    如：gf = models.IntegerField(choices=[(<span class="number">0</span>, <span class="string">'何穗'</span>),(<span class="number">1</span>, <span class="string">'大表姐'</span>),],default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">error_messages      自定义错误信息（字典类型），从而定制想要显示的错误信息；</span><br><span class="line">                    字典健：null, blank, invalid, invalid_choice, unique, <span class="keyword">and</span> unique_for_date</span><br><span class="line">                    如：&#123;<span class="string">'null'</span>: <span class="string">"不能为空."</span>, <span class="string">'invalid'</span>: <span class="string">'格式错误'</span>&#125;</span><br><span class="line"></span><br><span class="line">validators          自定义错误验证（列表类型），从而定制想要的验证规则</span><br><span class="line">                    <span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line">                    <span class="keyword">from</span> django.core.validators <span class="keyword">import</span> EmailValidator,URLValidator,DecimalValidator,\</span><br><span class="line">                    MaxLengthValidator,MinLengthValidator,MaxValueValidator,MinValueValidator</span><br><span class="line">                    如：</span><br><span class="line">                        test = models.CharField(</span><br><span class="line">                            max_length=<span class="number">32</span>,</span><br><span class="line">                            error_messages=&#123;</span><br><span class="line">                                <span class="string">'c1'</span>: <span class="string">'优先错信息1'</span>,</span><br><span class="line">                                <span class="string">'c2'</span>: <span class="string">'优先错信息2'</span>,</span><br><span class="line">                                <span class="string">'c3'</span>: <span class="string">'优先错信息3'</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            validators=[</span><br><span class="line">                                RegexValidator(regex=<span class="string">'root_\d+'</span>, message=<span class="string">'错误了'</span>, code=<span class="string">'c1'</span>),</span><br><span class="line">                                RegexValidator(regex=<span class="string">'root_112233\d+'</span>, message=<span class="string">'又错误了'</span>, code=<span class="string">'c2'</span>),</span><br><span class="line">                                EmailValidator(message=<span class="string">'又错误了'</span>, code=<span class="string">'c3'</span>), ]                )</span><br></pre></td></tr></table></figure>
<h2 id="关系字段"><a href="#关系字段" class="headerlink" title="关系字段"></a>关系字段</h2><h3 id="ForeignKey"><a href="#ForeignKey" class="headerlink" title="ForeignKey"></a>ForeignKey</h3><p>外键类型在ORM中用来表示外键关联关系，一般把ForeignKey字段设置在 ‘一对多’中’多’的一方。ForeignKey可以和其他表做关联关系同时也可以和自身做关联关系。</p>
<p>####to</p>
<p>设置要关联的表</p>
<p>####to_field</p>
<p>设置要关联的表的字段</p>
<p>####related_name</p>
<p>反向查询时，使用的字段名，用于代替原反向查询时的’表名_set’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish = ForeignKey(Blog, related_name=<span class="string">'booklist'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="db-constraint"><a href="#db-constraint" class="headerlink" title="db_constraint"></a>db_constraint</h4><p>是否在数据库中创建外键约束，默认为 True。</p>
<h3 id="OneToOneField"><a href="#OneToOneField" class="headerlink" title="OneToOneField"></a>OneToOneField</h3><p>一对一字段，通常使用一对一字段用来扩展已有字段。</p>
<p>一对一的关联关系多用在当一张表的不同字段查询频次差距过大的情况下，将本可以存储在一张表的字段拆开放置在两张表中，然后将两张表建立一对一的关联关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">18</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    author = models.OneToOneField(to=Author, to_field=<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure>
<p>####to</p>
<p>设置要关联的表</p>
<p>####to_field</p>
<p>设置要关联的字段。</p>
<p>####on_delete</p>
<p>级联删除选项</p>
<h3 id="ManyToManyField"><a href="#ManyToManyField" class="headerlink" title="ManyToManyField"></a>ManyToManyField</h3><p>用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。</p>
<h4 id="to"><a href="#to" class="headerlink" title="to"></a>to</h4><p>设置要关联的表</p>
<h4 id="related-name"><a href="#related-name" class="headerlink" title="related_name"></a>related_name</h4><p>反向查询时，使用的字段名，用于代替原反向查询时的’表名_set’。</p>
<h4 id="symmetrical"><a href="#symmetrical" class="headerlink" title="symmetrical"></a>symmetrical</h4><p>仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为 True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    friends = models.ManyToManyField(<span class="string">"self"</span>)</span><br></pre></td></tr></table></figure>
<p>此时，person 对象没有 person_set属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    friends = models.ManyToManyField(<span class="string">"self"</span>, symmetrical=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>此时，person 对象可以使用 person_set 属性进行反向查询。</p>
<h4 id="through"><a href="#through" class="headerlink" title="through"></a>through</h4><p>在使用 ManyToManyField 字段时，Django 将自动生成一张表来管理多对多的关联关系。但是当我们手动创建第三张表来管理多对多关系时，就需要通过 through 来指定第三张表的表名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'id'</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>, through=<span class="string">'Book2Author'</span>, through_fields=(<span class="string">'book'</span>, <span class="string">'author'</span>))</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>, to_field=<span class="string">'id'</span>, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    book = models.ForeignKey(to=Book)</span><br><span class="line">    author = models.ForeignKey(to=Author)</span><br></pre></td></tr></table></figure>
<h4 id="through-field"><a href="#through-field" class="headerlink" title="through_field"></a>through_field</h4><p>设置要关联的字段：关联字段在Book2Author中，从这个表到Book 表，所以把 book 写在前面。</p>
<h4 id="db-table"><a href="#db-table" class="headerlink" title="db_table"></a>db_table</h4><p>默认创建第三张表时，设置表的名字。</p>
<h2 id="多对多关联关系的三种方式"><a href="#多对多关联关系的三种方式" class="headerlink" title="多对多关联关系的三种方式"></a>多对多关联关系的三种方式</h2><h3 id="方式一：手动创建第三张表"><a href="#方式一：手动创建第三张表" class="headerlink" title="方式一：手动创建第三张表"></a>方式一：手动创建第三张表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'id'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>, to_field=<span class="string">'id'</span>, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    book = models.ForeignKey(to=Book)</span><br><span class="line">    author = models.ForeignKey(to=Author)</span><br></pre></td></tr></table></figure>
<h3 id="方式二：通过-ManyToManyField-自动创建第三张表"><a href="#方式二：通过-ManyToManyField-自动创建第三张表" class="headerlink" title="方式二：通过 ManyToManyField 自动创建第三张表"></a>方式二：通过 ManyToManyField 自动创建第三张表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'id'</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>, to_field=<span class="string">'id'</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>
<h3 id="方式三：设置-ManyToManyField-并指定手动创建第三张表"><a href="#方式三：设置-ManyToManyField-并指定手动创建第三张表" class="headerlink" title="方式三：设置 ManyToManyField 并指定手动创建第三张表"></a>方式三：设置 ManyToManyField 并指定手动创建第三张表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>, to_field=<span class="string">'id'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>, to_field=<span class="string">'id'</span>, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    book = models.ForeignKey(to=Book)</span><br><span class="line">    author = models.ForeignKey(to=Author)</span><br></pre></td></tr></table></figure>
<p>当业务需要在第三张关系表中存储额外的字段时，就要使用第三种方式。</p>
<p>这样创建的第三张表无法使用 set、add、remove、clear方法来管理对多多关系，需要通过第三张表来进行增、删、改，查询一样。</p>
<h2 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FixedCharField</span><span class="params">(models.Field)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义的char类型的字段类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_length, *args, **kwargs)</span>:</span></span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        super(FixedCharField, self).__init__(max_length=max_length, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        限定生成数据库表的字段类型为char，长度为max_length指定的值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'char(%s)'</span> % self.max_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">25</span>)</span><br><span class="line">    <span class="comment"># 使用自定义的char类型的字段</span></span><br><span class="line">    cname = FixedCharField(max_length=<span class="number">25</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十五）</title>
    <url>/2019/01/20/Django%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十五）"><a href="#Django-系列博客（十五）" class="headerlink" title="Django 系列博客（十五）"></a>Django 系列博客（十五）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍使用 Django 的分页器组件完成分页功能。</p>
<h2 id="分页器简介"><a href="#分页器简介" class="headerlink" title="分页器简介"></a>分页器简介</h2><p>在页面数据量过多时，一次性显示所有页面会造成页面不美观，这时候需要分页，不一次性显示所有页面，随当前页的变化而动态改变分页区间。</p>
<h2 id="分页器组件常用方法"><a href="#分页器组件常用方法" class="headerlink" title="分页器组件常用方法"></a>分页器组件常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line">Paginator对象：paginator = Paginator(object_list, <span class="number">10</span>) <span class="comment"># 10为每页为十条数据</span></span><br><span class="line">paginator.per_page: 每页显示条数 <span class="comment"># 为10</span></span><br><span class="line">paginator.count: 数据总数</span><br><span class="line">paginator.num_pages: 总页数</span><br><span class="line">paginator.page_range: 总页数的索引范围，如：(<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">page对象：page = paginator.page(current_page)</span><br><span class="line">page.has_next: 是否有下一页</span><br><span class="line">page.next_page_number: 下一页页码</span><br><span class="line">page.has_previous: 是否有上一页</span><br><span class="line">page.object_list: 分页之后的数据列表</span><br><span class="line">page.paginator: paginator 对象</span><br></pre></td></tr></table></figure>
<h2 id="view-层"><a href="#view-层" class="headerlink" title="view 层"></a>view 层</h2><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagetest</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 批量插入数据</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        li.append(UserInfo.objects.create(name=<span class="string">'musibii%s'</span> %i, pwd=<span class="string">'woloveyou%s'</span> %i))</span><br><span class="line">    ret = UserInfo.objects.bulk_create(li, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagelist</span><span class="params">(request)</span>:</span></span><br><span class="line">    user = UserInfo.objects.all().order_by(<span class="string">'pk'</span>)</span><br><span class="line">    paginator = Paginator(user, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        currentpage = int(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># page = paginator.page(currentpage)</span></span><br><span class="line">        print(currentpage)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        currentpage = <span class="number">1</span></span><br><span class="line">    page = paginator.page(currentpage)</span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages &gt; <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">if</span> currentpage - <span class="number">5</span> &lt;= <span class="number">1</span> :</span><br><span class="line">            page_range = range(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">elif</span> currentpage + <span class="number">5</span> &gt;= paginator.num_pages:</span><br><span class="line">            page_range = range(paginator.num_pages<span class="number">-10</span>, paginator.num_pages+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_range = range(currentpage - <span class="number">5</span>, currentpage + <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_range = paginator.page_range</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'pagelist.html'</span>, locals())</span><br></pre></td></tr></table></figure>
<h2 id="模板层"><a href="#模板层" class="headerlink" title="模板层"></a>模板层</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pagelist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-offset-3 col-md-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for user in page %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.pwd &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">                    &#123;% if page.has_previous %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pagelist/?page=&#123;&#123; page.previous_page_number &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% for foo in page_range %&#125;</span><br><span class="line">                    &#123;% if currentpage == foo %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pagelist/?page=&#123;&#123; foo &#125;&#125;"</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pagelist/?page=&#123;&#123; foo &#125;&#125;"</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                &#123;% if page.has_next %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pagelist/?page=&#123;&#123; page.next_page_number &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    </span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十四）</title>
    <url>/2019/01/17/Django%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十四）"><a href="#Django-系列博客（十四）" class="headerlink" title="Django 系列博客（十四）"></a>Django 系列博客（十四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍在 html 中使用 ajax 与后台进行数据交互。</p>
<h2 id="什么是-ajax"><a href="#什么是-ajax" class="headerlink" title="什么是 ajax"></a>什么是 ajax</h2><p>ajax（Asynchronous Javascript And XML）翻译成中文就是‘’异步 JavaScript 和 XML‘’。即使用 JavaScript 语言与服务器进行异步交互，传输的数据为 XML（现在更多地使用 json）。</p>
<ul>
<li>同步交互：客户端发出一个请求后，需要等待服务器响应结束，才能发出第二个请求；</li>
<li>异步交互：客户端发出一个请求后，无需等待服务器响应结束，也能发出第二个请求。</li>
</ul>
<p>ajax 除了异步的特点外，还有一个就是：浏览器页面局部刷新。在页面没有进行刷新的情况下进行数据交互。</p>
<p>优点：</p>
<ul>
<li>ajax 使用JavaScript 技术向服务器发送异步请求；</li>
<li>ajax 无需刷新整个页面。</li>
</ul>
<h2 id="基于-jQuery-的-ajax-实现"><a href="#基于-jQuery-的-ajax-实现" class="headerlink" title="基于 jQuery 的 ajax 实现"></a>基于 jQuery 的 ajax 实现</h2><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>regist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span>#&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>确认密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"tpwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    $('#submit').click(function () &#123;</span><br><span class="line">        console.log($('#submit'));</span><br><span class="line">        &#123;#$.ajax(&#123;#&#125;</span><br><span class="line">        &#123;#    url:'/regist/',#&#125;</span><br><span class="line">        &#123;#    type:'post',#&#125;</span><br><span class="line">        &#123;#    data:&#123;name:$("#name").val(), pwd:$("#pwd").val(), tpwd:$("#tpwd")&#125;,#&#125;</span><br><span class="line">        &#123;#    success:function (data) &#123;#&#125;</span><br><span class="line">        &#123;#        console.log(data)#&#125;</span><br><span class="line">        &#123;#    &#125;#&#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:'/regist/',</span><br><span class="line">            type:'post',</span><br><span class="line">            data:&#123;name:$("#name").val(), pwd:$("#pwd").val(), tpwd:$("#tpwd").val()&#125;,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                console.log(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> args[<span class="number">0</span>].method == <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> kwargs[<span class="string">'contentType'</span>] == <span class="string">'application/json'</span>:</span><br><span class="line">            <span class="keyword">import</span> json</span><br><span class="line">            args[<span class="number">0</span>].POST = json.loads(args[<span class="number">0</span>].body)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># json.loads()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regist</span><span class="params">(request)</span>:</span></span><br><span class="line">    dic = &#123;<span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    print(request.body)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'regist.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'/////'</span>)</span><br><span class="line">        print(request.POST, <span class="string">'dddd'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        tpwd = request.POST.get(<span class="string">'tpwd'</span>)</span><br><span class="line"></span><br><span class="line">        user = UserInfo.objects.filter(name=name).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            dic[<span class="string">'status'</span>] = <span class="number">100</span></span><br><span class="line">            dic[<span class="string">'msg'</span>] = <span class="string">'用户已存在'</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">and</span> pwd <span class="keyword">and</span> tpwd:</span><br><span class="line">                <span class="keyword">if</span> pwd == tpwd:</span><br><span class="line">                    UserInfo.objects.create(name=name, pwd=pwd)</span><br><span class="line">                    dic[<span class="string">'msg'</span>] = <span class="string">'注册成功'</span></span><br><span class="line">                    <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dic[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">                    dic[<span class="string">'msg'</span>] = <span class="string">'两次密码不一样'</span></span><br><span class="line">                    <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">                dic[<span class="string">'msg'</span>] = <span class="string">'密码不正确'</span></span><br><span class="line">                <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    dic = &#123;<span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line"></span><br><span class="line">        user = UserInfo.objects.filter(name=name).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            dic[<span class="string">'status'</span>] = <span class="number">100</span></span><br><span class="line">            dic[<span class="string">'msg'</span>] = <span class="string">'用户不存在，请注册'</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> pwd == user.pwd:</span><br><span class="line">                dic[<span class="string">'msg'</span>] = <span class="string">'登陆成功'</span></span><br><span class="line">                <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">                dic[<span class="string">'msg'</span>] = <span class="string">'密码错误'</span></span><br><span class="line">                <span class="keyword">return</span> JsonResponse(dic)</span><br></pre></td></tr></table></figure>
<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#submit3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'/auth/'</span>,</span><br><span class="line">                type: <span class="string">'post'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    <span class="string">'user'</span>: $(<span class="string">"#id_name"</span>).val(),</span><br><span class="line">                    <span class="string">'password'</span>: $(<span class="string">'#id_password'</span>).val()</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    &#123;#console.log(data)#&#125;</span><br><span class="line">                    <span class="keyword">var</span> data=<span class="built_in">JSON</span>.parse(data)</span><br><span class="line">                    <span class="keyword">if</span> (data.user)&#123;</span><br><span class="line">                        location.href=<span class="string">'https://www.baidu.com'</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        $(<span class="string">".error"</span>).html(data.message).css(&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'margin-left'</span>:<span class="string">'20px'</span>&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><ol>
<li>application/x-www-form-urlencoded</li>
</ol>
<p>这是最常见的 POST 提交数据的方式了。浏览器的原生<form>表单，如果不设置 enctype 属性，那么最终会以 application/x-www-form-urlencoded方式提交数据。类似于下面：</form></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">请求体</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>multipart/form-data</li>
</ol>
<p>当我们使用表单上传文件时，必须让<form>表单的 enctype 等于multipart/form-data。</form></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;user&quot;</span><br><span class="line"></span><br><span class="line">yuan</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>
<p>这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以–boundary 开始，紧接着是内容描述信息，然后回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以–boundary–表示结束。</p>
<p>这种方式一般用于上传文件，各大服务端语言也有很好的支持。</p>
<p>这两种POST 提交的方式，都是浏览器原生支持的，而且先阶段标准中原生<form>表单也只支持这两种方式（通过<form>元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded）。随着越来越多的web站点尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</form></form></p>
<ol start="3">
<li>application/json</li>
</ol>
<p>application/json是另外一种请求头，不过更多的是作为响应头，因为 json 格式的数据时通用数据格式。不过目前也用来作为请求头，用来告诉服务器端主体是序列化后的 json 字符串。由于 json 规范的流行，除了低版本的 IE 之外的各大浏览器都原生支持 json.stringfy，服务器端语言也都有处理 json数据的函数，使用 json 不会遇到什么麻烦。</p>
<p>json 格式支持比键值对复杂的多的结构化数据，这点对数据传输很有用。</p>
<h3 id="基于form表单上传文件"><a href="#基于form表单上传文件" class="headerlink" title="基于form表单上传文件"></a>基于form表单上传文件</h3><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile"</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile2"</span>&gt;</span>#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'upload_file.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        file = request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        <span class="comment"># print(file['file'])</span></span><br><span class="line">        <span class="keyword">from</span> django.core.files.uploadedfile <span class="keyword">import</span> InMemoryUploadedFile</span><br><span class="line">        print(time.time())</span><br><span class="line">        filename = str(time.time()).split(<span class="string">'.'</span>)[<span class="number">0</span>] + file.name</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'上传成功'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="基于ajax-的文件上传"><a href="#基于ajax-的文件上传" class="headerlink" title="基于ajax 的文件上传"></a>基于ajax 的文件上传</h3><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>uploadfile<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"my_file"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myfile = $(<span class="string">'#my_file'</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">        formdata.append(<span class="string">'name'</span>, $(<span class="string">'#name'</span>).val());</span></span><br><span class="line"><span class="javascript">        formdata.append(<span class="string">'myfile'</span>, myfile);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url:<span class="string">'/uploadfile/'</span>,</span></span><br><span class="line"><span class="javascript">            type:<span class="string">'post'</span>,</span></span><br><span class="line"><span class="javascript">            processData:<span class="literal">false</span>, <span class="comment">// 告诉 jQuery 不要处理发送的数据</span></span></span><br><span class="line"><span class="javascript">            contentType:<span class="literal">false</span>, <span class="comment">// 告诉 jQuery 不要设置 Content-Type 请求头</span></span></span><br><span class="line">            data:formdata,</span><br><span class="line"><span class="javascript">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#msg'</span>).text(data)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MEDIA_PATH = <span class="string">'/Users/jingxing/Django/homework/paging/media'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadfile</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'uploadfile.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        myfile = request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        print(myfile)</span><br><span class="line">        filepath = os.path.join(MEDIA_PATH, myfile.name[<span class="number">32</span>:<span class="number">-3</span>]+<span class="string">'jpg'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> myfile:</span><br><span class="line">                f.write(line)</span><br><span class="line">        FileInfo.objects.create(name=request.POST.get(<span class="string">'name'</span>), filepath=filepath)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'上传成功'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ajax-提交-json-格式数据"><a href="#ajax-提交-json-格式数据" class="headerlink" title="ajax 提交 json 格式数据"></a>ajax 提交 json 格式数据</h2><h3 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#submit1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        postdata=&#123;<span class="attr">name1</span>:$(<span class="string">"#name"</span>).val(),<span class="attr">pwd2</span>:$(<span class="string">"#pwd"</span>).val()&#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'/loginjson/'</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            <span class="comment">// 指定提交的编码格式是json格式,</span></span><br><span class="line">            contentType:<span class="string">'application/json'</span>,</span><br><span class="line">            data:<span class="built_in">JSON</span>.stringify(postdata),</span><br><span class="line">            <span class="comment">// data:postdata,</span></span><br><span class="line">            <span class="comment">// data:'123',</span></span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginjson</span><span class="params">(request)</span>:</span></span><br><span class="line">    dic=&#123;<span class="string">'status'</span>:<span class="number">100</span>,<span class="string">'msg'</span>:<span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.GET)</span><br><span class="line">        print(request.body)</span><br><span class="line">        xx=request.body.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># re是个字典&#123;"name1":"lqz","pwd2":"123"&#125;</span></span><br><span class="line">        re=json.loads(xx)</span><br><span class="line">        request.POST=<span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(request.POST)</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># name=re.get('name1')</span></span><br><span class="line">        <span class="comment"># pwd=re.get('pwd2')</span></span><br><span class="line">        <span class="comment"># print(name)</span></span><br><span class="line">        <span class="comment"># print(pwd)</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="后端返回-json-数据"><a href="#后端返回-json-数据" class="headerlink" title="后端返回 json 数据"></a>后端返回 json 数据</h2><h3 id="前端代码-4"><a href="#前端代码-4" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#submit'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'/login/'</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:&#123;<span class="attr">name1</span>:$(<span class="string">"#name"</span>).val(),<span class="attr">pwd2</span>:$(<span class="string">"#pwd"</span>).val()&#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//后台用JsonResponse返回数据</span></span><br><span class="line">                <span class="comment">//data 就会被转成字典</span></span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">typeof</span> data)</span><br><span class="line">                <span class="comment">//JSON.parse(data) 把字符串类型转成字典</span></span><br><span class="line">                data=<span class="built_in">JSON</span>.parse(data)</span><br><span class="line">                &#123;#JSON.stringify()#&#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">typeof</span> dat1)</span><br><span class="line">                <span class="keyword">if</span>(data.status == <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="comment">//成功,跳转到指定页面</span></span><br><span class="line">                    <span class="comment">//location.href=地址,前端就会跳转到指定的url</span></span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                    <span class="comment">//$("#error").text(data.msg+'正在跳转')</span></span><br><span class="line">                    <span class="comment">//location.href=data.url</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">"#error"</span>).text(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="后端代码-4"><a href="#后端代码-4" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    dic=&#123;<span class="string">'status'</span>:<span class="number">100</span>,<span class="string">'msg'</span>:<span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line">    <span class="comment"># if request.is_ajax():</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</span><br><span class="line">        name=request.POST.get(<span class="string">'name1'</span>)</span><br><span class="line">        pwd=request.POST.get(<span class="string">'pwd2'</span>)</span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">'lqz'</span> <span class="keyword">and</span> pwd==<span class="string">'123'</span>:</span><br><span class="line">            dic[<span class="string">'msg'</span>] = <span class="string">'登陆成功'</span></span><br><span class="line">            <span class="comment"># 想让前端跳转</span></span><br><span class="line">            <span class="comment"># dic['url']='http://www.baidu.com'</span></span><br><span class="line">            dic[<span class="string">'url'</span>]=<span class="string">'/test/'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 返回json格式字符串</span></span><br><span class="line">            dic[<span class="string">'status'</span>]=<span class="number">101</span></span><br><span class="line">            dic[<span class="string">'msg'</span>]=<span class="string">'用户名或密码错误'</span></span><br><span class="line">        <span class="comment"># return JsonResponse(dic)</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(dic))</span><br></pre></td></tr></table></figure>
<h2 id="Django内置的序列化数据方法"><a href="#Django内置的序列化数据方法" class="headerlink" title="Django内置的序列化数据方法"></a>Django内置的序列化数据方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    book_list = Book.objects.all()</span><br><span class="line">    ret = serializers.serialize(<span class="string">'json'</span>, book_list)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（四）</title>
    <url>/2019/01/07/Django%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（四）"><a href="#Django-系列博客（四）" class="headerlink" title="Django 系列博客（四）"></a>Django 系列博客（四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 django 如何和数据库进行交互并且通过 model 进行数据的增删查改</p>
<h2 id="ORM简介"><a href="#ORM简介" class="headerlink" title="ORM简介"></a>ORM简介</h2><p>ORM全称是：Object Relational Mapping(对象关系映射)，其主要作用是在编程中，把面向对象的概念跟数据库中表的概念对应起来。举例来说就是，我定义一个对象，那就对应着一张表，这个对象的实例，就对应着表中的一条记录。</p>
<p>比如在大名鼎鼎的 pythonWEB 框架 Django 就是使用了对象关系映射，这个对应 Django 中的 model文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pwd = models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>
<p>通过对象关系映射，这个类就会对应数据库中的 UserInfo 表，里面有三个字段，id 为自增并且为主键，另外两个为 name 和 pwd 字段，都是可变长类型。</p>
<p>通过 orm 和数据库进行交互进行增删查改，获取的数据会在 views 文件中来进行逻辑判断。</p>
<h2 id="数据返回"><a href="#数据返回" class="headerlink" title="数据返回"></a>数据返回</h2><p>当前后端进行交互后需要往前端传送数据，在 Django 中有三种方式：</p>
<ol>
<li>render：返回一个模板（页面）</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyy8jowjanj31cu072tbj.jpg" alt></p>
<p>该函数有五个参数：</p>
<ul>
<li>request：这是前端发过来的数据集合，里面可以获取表单中的数据，或者获取请求方式、状态码等；</li>
<li>template_name：这个是模板名称，模板为 templates 中的 index 文件；</li>
<li>context：内容，需要返回的数据，默认为 None；</li>
<li>content_type：数据内容类型，默认为 None；</li>
<li>using：未知。</li>
</ul>
<p>当调用这个函数时，会找到模板文件，打开，如果 context 不为空的话，就会用 django 的模板渲染方式将数据加到模板中，然后返回给前端。</p>
<p>content为经过loader.render_to_string加工后的数据，然后经过 HttpResponse 类的实例化生成一个对象返回给前端，那么在前端可以通过对象的点语法进行取值。</p>
<ol start="2">
<li>redirect：重定向到某个地址</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyy8qdeoflj318u0m6wiy.jpg" alt></p>
<p>查看源码可知，首先在 redirect 函数中进行了判断，假设该函数没有参数，只有一个重定向路径，也就是 to 这个参数，那么 redirect_class为 HttpResponseRedirect 类，然后进行实例化返回。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyy8wdie8gj315g0u0qaa.jpg" alt></p>
<p>查看 resolve_rul源码，在里面对 to 变量进行了一些判断等工作然后再返回，返回之后经过 redirect_class类（在这里也就是 HTTPResponseRedirect）进行实例化，</p>
<p>查看源码：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyy9rzdpvvj310g034aam.jpg" alt></p>
<p>发现状态码为302，然后进入 HTTPResponseRedirectBase，查看源码：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyy9t05573j31ei0iiq94.jpg" alt></p>
<p>经过 HTTPResponseRedirect 实例化得对象返回到前端。</p>
<ol start="3">
<li>HttpResponse：返回字符串。</li>
</ol>
<p>这个类也是 render 和 redirect 需要调用的类来实例化对象。不过直接由 HttpResponse 类生成的对象是字符串，没有页面显示。</p>
<h2 id="ORM-连接数据库"><a href="#ORM-连接数据库" class="headerlink" title="ORM 连接数据库"></a>ORM 连接数据库</h2><h3 id="ORM-连接-sqlite3"><a href="#ORM-连接-sqlite3" class="headerlink" title="ORM 连接 sqlite3"></a>ORM 连接 sqlite3</h3><ol>
<li>配置 settings 文件</li>
</ol>
<p>其实不用配置，默认就是连接 sqlite3</p>
<p>在 settings 里面有个数据库配置选项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>可以知道 django 默认的数据库引擎为 sqlite3，数据库名字为数据库的路径。连接数据分为两步：</p>
<ol start="2">
<li>在 models 中创建类和字段</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pwd = models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>把表同步到数据库（因为 orm 不能创建表，所以需要手动创建一个对应的数据库）。创建完成后在项目根目录下运行两条命令。</p>
<ul>
<li><code>python3 manage.py makemigrations</code></li>
</ul>
<p>这条命令并没有将 models 中的表同步到数据库，只是在 migrations 中做了一个记录，并且会在 migrations 文件夹中生成一个0001_initial.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Generated by Django 1.11.9 on 2019-01-07 06:59</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    initial = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.CreateModel(</span><br><span class="line">            name=<span class="string">'UserInfo'</span>,</span><br><span class="line">            fields=[</span><br><span class="line">                (<span class="string">'id'</span>, models.AutoField(primary_key=<span class="literal">True</span>, serialize=<span class="literal">False</span>)),</span><br><span class="line">                (<span class="string">'name'</span>, models.CharField(max_length=<span class="number">32</span>)),</span><br><span class="line">                (<span class="string">'pwd'</span>, models.CharField(max_length=<span class="number">32</span>)),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyya9rnlhgj317q052q3w.jpg" alt></p>
<ul>
<li><code>python3 manage.py migrate</code></li>
</ul>
<p>将数据表同步到数据库中</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyyaav44ftj31e80kudmt.jpg" alt></p>
</li>
</ol>
<p>经过这两步会在数据库中创建出来一些表：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyyac3jkwnj311k0degog.jpg" alt></p>
<p>这些表都是什么意思呢？</p>
<p>第一张表app_userinfo为 models 中创建的类所对应的表（mysql 不区分大小写），并且会自动将 app 的名字拼接到表名之前，之后 auth 开头的表示关于认证的表，django 开头的表示 django 认证的表，目前来说不用关心。</p>
<h3 id="ORM-连接Mysql"><a href="#ORM-连接Mysql" class="headerlink" title="ORM 连接Mysql"></a>ORM 连接Mysql</h3><p>连接 mysql 也很简单，比连接 sqlite3多了两步，并且这两步是在之前就要进行的。</p>
<ol>
<li>配置 settings 文件</li>
</ol>
<p>因为是连接 mysql，所以 settings 中的数据库需要更改配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django_03'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：default 对应的value 中的 key 必须使用大写，其他除了 ENGINE 一样外，其他的参数都需要根据自身的数据库来配置</strong>。配置成功后可以通过 pycharm 自带的数据库模块来进行测试是否连接成功：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fyyamun6qij30z10u0n5v.jpg" alt></p>
<p>连接成功会显示 successful。</p>
<ol start="2">
<li>配置 app 下的 init 文件，不要写错地方了</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在 models 中创建类和字段</li>
</ol>
<p>和 sqlite3的一样，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pwd = models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>把表同步到数据库</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库表并没有同步到数据库，只是在migrations内做了一个记录</span></span><br><span class="line">-python3 manage.py makemigrations</span><br><span class="line"><span class="comment">#才将数据表同步到数据库</span></span><br><span class="line">-python3 mangae.py migrate</span><br></pre></td></tr></table></figure>
<h2 id="使用-orm-进行增删查改"><a href="#使用-orm-进行增删查改" class="headerlink" title="使用 orm 进行增删查改"></a>使用 orm 进行增删查改</h2><p>和数据库连接成功后，可以通过表所对应的对象来进行操作，在本文的数据库对象就是<code>UserInfo.object</code>，打印出来可知该对象是<code>app.UserInfo.objects</code>类</p>
<p>通过这个这个类（对应数据库中的表）可以操作数据库</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该表有两个三个字段，其中 id 是自增可以不用传值</span></span><br><span class="line">name = <span class="string">'musibii'</span></span><br><span class="line">pwd = <span class="string">'123'</span></span><br><span class="line">UserInfo.objects.create(name=name, pwd=pwd)</span><br></pre></td></tr></table></figure>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比如 id 为1，想要删除一个数据首先需要根据 id 获取数据</span></span><br><span class="line">UserInfo.objects.filter(id=<span class="number">1</span>).delete()</span><br></pre></td></tr></table></figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="查一个"><a href="#查一个" class="headerlink" title="查一个"></a>查一个</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = UserInfo.object.filter(id=<span class="number">1</span>).first()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<h4 id="查多个"><a href="#查多个" class="headerlink" title="查多个"></a>查多个</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = UserInfo.objects.all()</span><br></pre></td></tr></table></figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'maffia'</span></span><br><span class="line">pwd = <span class="string">'abc'</span></span><br><span class="line">ret = UserInfo.objects.filter(id=<span class="number">1</span>).update(name=name, pwd=pwd)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十六）</title>
    <url>/2019/01/20/Django%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十六）"><a href="#Django-系列博客（十六）" class="headerlink" title="Django 系列博客（十六）"></a>Django 系列博客（十六）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Django 的 forms 组件。</p>
<h2 id="基本属性介绍"><a href="#基本属性介绍" class="headerlink" title="基本属性介绍"></a>基本属性介绍</h2><p>创建 forms 类时，主要涉及到字段和插件，字段用于对用户请求数据的验证，插件用于自动生成 html。</p>
<h3 id="Form-类内置字段介绍"><a href="#Form-类内置字段介绍" class="headerlink" title="Form 类内置字段介绍"></a>Form 类内置字段介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Field</span><br><span class="line">    required=<span class="literal">True</span>,               是否允许为空</span><br><span class="line">    widget=<span class="literal">None</span>,                 HTML插件</span><br><span class="line">    label=<span class="literal">None</span>,                  用于生成Label标签或显示内容</span><br><span class="line">    initial=<span class="literal">None</span>,                初始值</span><br><span class="line">    help_text=<span class="string">''</span>,                帮助信息(在标签旁边显示)</span><br><span class="line">    error_messages=<span class="literal">None</span>,         错误信息 &#123;<span class="string">'required'</span>: <span class="string">'不能为空'</span>, <span class="string">'invalid'</span>: <span class="string">'格式错误'</span>&#125;</span><br><span class="line">    show_hidden_initial=<span class="literal">False</span>,   是否在当前插件后面再加一个隐藏的且具有默认值的插件（可用于检验两次输入是否一直）</span><br><span class="line">    validators=[],               自定义验证规则</span><br><span class="line">    localize=<span class="literal">False</span>,              是否支持本地化</span><br><span class="line">    disabled=<span class="literal">False</span>,              是否可以编辑</span><br><span class="line">    label_suffix=<span class="literal">None</span>            Label内容后缀</span><br><span class="line">    </span><br><span class="line">CharField(Field)</span><br><span class="line">    max_length=<span class="literal">None</span>,             最大长度</span><br><span class="line">    min_length=<span class="literal">None</span>,             最小长度</span><br><span class="line">    strip=<span class="literal">True</span>                   是否移除用户输入空白</span><br><span class="line">  </span><br><span class="line">IntegerField(Field)</span><br><span class="line">    max_value=<span class="literal">None</span>,              最大值</span><br><span class="line">    min_value=<span class="literal">None</span>,              最小值</span><br><span class="line">  </span><br><span class="line">FloatField(IntegerField)</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">DecimalField(IntegerField)</span><br><span class="line">    max_value=<span class="literal">None</span>,              最大值</span><br><span class="line">    min_value=<span class="literal">None</span>,              最小值</span><br><span class="line">    max_digits=<span class="literal">None</span>,             总长度</span><br><span class="line">    decimal_places=<span class="literal">None</span>,         小数位长度</span><br><span class="line">  </span><br><span class="line">BaseTemporalField(Field)</span><br><span class="line">    input_formats=<span class="literal">None</span>          时间格式化  </span><br><span class="line">  </span><br><span class="line">DateField(BaseTemporalField)    格式：<span class="number">2015</span><span class="number">-09</span><span class="number">-01</span></span><br><span class="line">TimeField(BaseTemporalField)    格式：<span class="number">11</span>:<span class="number">12</span></span><br><span class="line">DateTimeField(BaseTemporalField)格式：<span class="number">2015</span><span class="number">-09</span><span class="number">-01</span> <span class="number">11</span>:<span class="number">12</span></span><br><span class="line">  </span><br><span class="line">DurationField(Field)            时间间隔：%d %H:%M:%S.%f</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">RegexField(CharField)</span><br><span class="line">    regex,                      自定制正则表达式</span><br><span class="line">    max_length=<span class="literal">None</span>,            最大长度</span><br><span class="line">    min_length=<span class="literal">None</span>,            最小长度</span><br><span class="line">    error_message=<span class="literal">None</span>,         忽略，错误信息使用 error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'...'</span>&#125;</span><br><span class="line">  </span><br><span class="line">EmailField(CharField)     </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">FileField(Field)</span><br><span class="line">    allow_empty_file=<span class="literal">False</span>     是否允许空文件</span><br><span class="line">  </span><br><span class="line">ImageField(FileField)     </span><br><span class="line">    ...</span><br><span class="line">    注：需要PIL模块，pip3 install Pillow</span><br><span class="line">    以上两个字典使用时，需要注意两点：</span><br><span class="line">        - form表单中 enctype=<span class="string">"multipart/form-data"</span></span><br><span class="line">        - view函数中 obj = MyForm(request.POST, request.FILES)</span><br><span class="line">  </span><br><span class="line">URLField(Field)</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">BooleanField(Field) </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">NullBooleanField(BooleanField)</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">ChoiceField(Field)</span><br><span class="line">    ...</span><br><span class="line">    choices=(),                选项，如：choices = ((<span class="number">0</span>,<span class="string">'上海'</span>),(<span class="number">1</span>,<span class="string">'北京'</span>),)</span><br><span class="line">    required=<span class="literal">True</span>,             是否必填</span><br><span class="line">    widget=<span class="literal">None</span>,               插件，默认select插件</span><br><span class="line">    label=<span class="literal">None</span>,                Label内容</span><br><span class="line">    initial=<span class="literal">None</span>,              初始值</span><br><span class="line">    help_text=<span class="string">''</span>,              帮助提示</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ModelChoiceField(ChoiceField)</span><br><span class="line">    ...                        django.forms.models.ModelChoiceField</span><br><span class="line">    queryset,                  <span class="comment"># 查询数据库中的数据</span></span><br><span class="line">    empty_label=<span class="string">"---------"</span>,   <span class="comment"># 默认空显示内容</span></span><br><span class="line">    to_field_name=<span class="literal">None</span>,        <span class="comment"># HTML中value的值对应的字段</span></span><br><span class="line">    limit_choices_to=<span class="literal">None</span>      <span class="comment"># ModelForm中对queryset二次筛选</span></span><br><span class="line">      </span><br><span class="line">ModelMultipleChoiceField(ModelChoiceField)</span><br><span class="line">    ...                        django.forms.models.ModelMultipleChoiceField</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">TypedChoiceField(ChoiceField)</span><br><span class="line">    coerce = <span class="keyword">lambda</span> val: val   对选中的值进行一次转换</span><br><span class="line">    empty_value= <span class="string">''</span>            空值的默认值</span><br><span class="line">  </span><br><span class="line">MultipleChoiceField(ChoiceField)</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">TypedMultipleChoiceField(MultipleChoiceField)</span><br><span class="line">    coerce = <span class="keyword">lambda</span> val: val   对选中的每一个值进行一次转换</span><br><span class="line">    empty_value= <span class="string">''</span>            空值的默认值</span><br><span class="line">  </span><br><span class="line">ComboField(Field)</span><br><span class="line">    fields=()                  使用多个验证，如下：即验证最大长度<span class="number">20</span>，又验证邮箱格式</span><br><span class="line">                               fields.ComboField(fields=[fields.CharField(max_length=<span class="number">20</span>), fields.EmailField(),])</span><br><span class="line">  </span><br><span class="line">MultiValueField(Field)</span><br><span class="line">    PS: 抽象类，子类中可以实现聚合多个字典去匹配一个值，要配合MultiWidget使用</span><br><span class="line">  </span><br><span class="line">SplitDateTimeField(MultiValueField)</span><br><span class="line">    input_date_formats=<span class="literal">None</span>,   格式列表：[<span class="string">'%Y--%m--%d'</span>, <span class="string">'%m%d/%Y'</span>, <span class="string">'%m/%d/%y'</span>]</span><br><span class="line">    input_time_formats=<span class="literal">None</span>    格式列表：[<span class="string">'%H:%M:%S'</span>, <span class="string">'%H:%M:%S.%f'</span>, <span class="string">'%H:%M'</span>]</span><br><span class="line">  </span><br><span class="line">FilePathField(ChoiceField)     文件选项，目录下文件显示在页面中</span><br><span class="line">    path,                      文件夹路径</span><br><span class="line">    match=<span class="literal">None</span>,                正则匹配</span><br><span class="line">    recursive=<span class="literal">False</span>,           递归下面的文件夹</span><br><span class="line">    allow_files=<span class="literal">True</span>,          允许文件</span><br><span class="line">    allow_folders=<span class="literal">False</span>,       允许文件夹</span><br><span class="line">    required=<span class="literal">True</span>,</span><br><span class="line">    widget=<span class="literal">None</span>,</span><br><span class="line">    label=<span class="literal">None</span>,</span><br><span class="line">    initial=<span class="literal">None</span>,</span><br><span class="line">    help_text=<span class="string">''</span></span><br><span class="line">  </span><br><span class="line">GenericIPAddressField</span><br><span class="line">    protocol=<span class="string">'both'</span>,           both,ipv4,ipv6支持的IP格式</span><br><span class="line">    unpack_ipv4=<span class="literal">False</span>          解析ipv4地址，如果是::ffff:<span class="number">192.0</span><span class="number">.2</span><span class="number">.1</span>时候，可解析为<span class="number">192.0</span><span class="number">.2</span><span class="number">.1</span>， PS：protocol必须为both才能启用</span><br><span class="line">  </span><br><span class="line">SlugField(CharField)           数字，字母，下划线，减号（连字符）</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">UUIDField(CharField)           uuid类型</span><br></pre></td></tr></table></figure>
<h3 id="内直插件"><a href="#内直插件" class="headerlink" title="内直插件"></a>内直插件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TextInput(Input)</span><br><span class="line">NumberInput(TextInput)</span><br><span class="line">EmailInput(TextInput)</span><br><span class="line">URLInput(TextInput)</span><br><span class="line">PasswordInput(TextInput)</span><br><span class="line">HiddenInput(TextInput)</span><br><span class="line">Textarea(Widget)</span><br><span class="line">DateInput(DateTimeBaseInput)</span><br><span class="line">DateTimeInput(DateTimeBaseInput)</span><br><span class="line">TimeInput(DateTimeBaseInput)</span><br><span class="line">CheckboxInput</span><br><span class="line">Select</span><br><span class="line">NullBooleanSelect</span><br><span class="line">SelectMultiple</span><br><span class="line">RadioSelect</span><br><span class="line">CheckboxSelectMultiple</span><br><span class="line">FileInput</span><br><span class="line">ClearableFileInput</span><br><span class="line">MultipleHiddenInput</span><br><span class="line">SplitDateTimeWidget</span><br><span class="line">SplitHiddenDateTimeWidget</span><br><span class="line">SelectDateWidget</span><br></pre></td></tr></table></figure>
<h2 id="校验字段功能"><a href="#校验字段功能" class="headerlink" title="校验字段功能"></a>校验字段功能</h2><p>在没有使用 forms 组件时，如果需要对数据进行校验，比如注册时，对用户名或者密码有位数限制等，我们需要首先获取数据然后手动进行判断，那么有了 forms 组件，这些事统统可以不用手动进行判断了，只需要把限制条件作为参数传进去那么就会自动进行判断。</p>
<h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="comment"># 继承Form这个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 限制name这个字段最长为8,最短为3</span></span><br><span class="line">    name=forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'用户名'</span>,required=<span class="literal">True</span>,error_messages=&#123;<span class="string">'min_length'</span>:<span class="string">'至少为3'</span>,<span class="string">'max_length'</span>:<span class="string">'最长为8,您太长了'</span>&#125;)</span><br><span class="line">    pwd=forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'密码'</span>,error_messages=&#123;<span class="string">'min_length'</span>:<span class="string">'至少为3'</span>,<span class="string">'max_length'</span>:<span class="string">'最长为8,您太长了'</span>&#125;)</span><br><span class="line">    email=forms.EmailField(label=<span class="string">'邮箱'</span>,error_messages=&#123;<span class="string">'invalid'</span>:<span class="string">'邮箱格式不合法'</span>,<span class="string">'required'</span>:<span class="string">'这个字段必填'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># 生成一个空的form对象</span></span><br><span class="line">        myform=MyForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'register.html'</span>,locals())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 生成对象,传参,传字典,要校验数据的字典</span></span><br><span class="line">        <span class="comment"># myform=MyForm(request.POST)</span></span><br><span class="line">        <span class="comment"># 自己写要校验的字典,数据多了,多的是不校验的,但是cleaned_data中也没有多出来的数据</span></span><br><span class="line">        <span class="comment"># dic=&#123;'name':'lqz','pwd':'123','email':'22@qq.com','xx':'xxx'&#125;</span></span><br><span class="line">        <span class="comment"># dic=&#123;'name':'lqz','pwd':'123','email':'22'&#125;</span></span><br><span class="line">        dic=&#123;<span class="string">'name'</span>:<span class="string">'lqzfgsdfgsdf'</span>,<span class="string">'pwd'</span>:<span class="string">'1'</span>,<span class="string">'email'</span>:<span class="string">'5555'</span>&#125;</span><br><span class="line">        myform = MyForm(dic)</span><br><span class="line">        <span class="comment"># 所有字典都校验通过,它就是True的</span></span><br><span class="line">        <span class="keyword">if</span> myform.is_valid():</span><br><span class="line">            <span class="comment"># 取出校验通过的数据</span></span><br><span class="line">            clean_data=myform.cleaned_data</span><br><span class="line">            print(clean_data)</span><br><span class="line">            <span class="comment"># models.UserInfo.objects.create(**clean_data)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 所有的错误信息</span></span><br><span class="line">            <span class="comment"># 只要是校验通过的值,都在cleaned_data中放着</span></span><br><span class="line">            print(myform.cleaned_data)</span><br><span class="line">            print(myform.errors.as_data())</span><br><span class="line">            <span class="comment"># 字典类型</span></span><br><span class="line">            print(type(myform.errors))</span><br><span class="line">            print(myform.errors.get(<span class="string">'name'</span>))</span><br><span class="line">            <span class="keyword">from</span>  django.forms.utils <span class="keyword">import</span> ErrorDict</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="渲染标签功能"><a href="#渲染标签功能" class="headerlink" title="渲染标签功能"></a>渲染标签功能</h2><ol>
<li>渲染方式一</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>forms的模板渲染之一(推荐)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: &#123;&#123; myform.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: &#123;&#123; myform.pwd &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱: &#123;&#123; myform.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>渲染方式二</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>forms的模板渲染之二(推荐)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% for item in myform %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.label &#125;&#125;:&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>渲染方式三</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>forms的模板渲染之三<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">table</span>&gt;</span>#&#125;</span><br><span class="line">&#123;#            &#123;&#123; myform.as_table &#125;&#125;#&#125;</span><br><span class="line">&#123;#    <span class="tag">&lt;/<span class="name">table</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; myform.as_p &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="渲染错误信息功能"><a href="#渲染错误信息功能" class="headerlink" title="渲染错误信息功能"></a>渲染错误信息功能</h2><h3 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            &#123;% for foo in myform %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo.label &#125;&#125;:&#123;&#123; foo &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span>&#123;&#123; foo.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;error_all.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123; myform.name &#125;&#125; <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; myform.errors.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123; myform.pwd &#125;&#125; <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; myform.errors.pwd &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123; myform.email &#125;&#125; <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; myform.errors.email &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app01.MyForm <span class="keyword">import</span> RegForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        myform = RegForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        myform = RegForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> myform.is_valid():</span><br><span class="line">            <span class="comment"># 存数据库,保存这个人</span></span><br><span class="line">            print(myform.cleaned_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 校验不通过,这里面也可能有值</span></span><br><span class="line">            <span class="comment"># 总错误信息&#123;'name':['太长了',],'pwd':['太短了']&#125;</span></span><br><span class="line">            <span class="comment"># print(myform.cleaned_data)</span></span><br><span class="line">            <span class="comment"># 总错误</span></span><br><span class="line">            <span class="comment"># myform.glo_err=myform.errors.get('__all__')</span></span><br><span class="line">            error_all = myform.errors.get(<span class="string">'__all__'</span>)</span><br><span class="line">            <span class="comment"># print()</span></span><br><span class="line">            <span class="comment"># 每一个的错误信息</span></span><br><span class="line">            <span class="comment"># for item in myform:</span></span><br><span class="line">            <span class="comment">#     # ['太长了',]</span></span><br><span class="line">            <span class="comment">#     # print(item.errors[0])</span></span><br><span class="line">            <span class="comment">#     # print(type(item.errors))</span></span><br><span class="line">            <span class="comment">#     from django.forms.utils import ErrorList</span></span><br><span class="line">            <span class="comment">#     # print(item.errors.as_data())</span></span><br><span class="line">            <span class="comment">#     print(item.errors)</span></span><br><span class="line">            <span class="comment">#     # print(type(item.errors))</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, locals())</span><br></pre></td></tr></table></figure>
<h2 id="组件的参数设置"><a href="#组件的参数设置" class="headerlink" title="组件的参数设置"></a>组件的参数设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'用户名'</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                           <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                           <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                           &#125;,</span><br><span class="line">                           widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                           )</span><br><span class="line">    pwd = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'密码'</span>,</span><br><span class="line">                          error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                          <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                          <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                          &#125;,</span><br><span class="line">                          widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                          )</span><br><span class="line">    re_pwd = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'确认密码'</span>,</span><br><span class="line">                          error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                          <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                          <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                          &#125;,</span><br><span class="line">                          widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                          )</span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>, error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'格式不正确'</span>,</span><br><span class="line">                                                         <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                                         &#125;,</span><br><span class="line">                             widget=widgets.EmailInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure>
<h2 id="局部钩子"><a href="#局部钩子" class="headerlink" title="局部钩子"></a>局部钩子</h2><p>继承自 Form类的校验类，可以对类中的每个字段进行校验，校验通过后的数据会放在 clean_data中，没通过的放在errors中，可以通过字段名取值，那么校验通过的字段如果还需要进行其他的判断，比如是否有敏感词，这些单单依靠字段的校验是完成不了的。所以 Django 提供了局部钩子函数，当每个字段进行校验完成后会自动调用该钩子函数。看源码就很清楚了。</p>
<p>首先，所有的数据校验都是调用了 Form 对象的 is_valid()方法进行的。所以进入is_valid()方法。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzcz92yo0ej317e05wq43.jpg" alt></p>
<p><code>self.is_bound</code>为 True，所以进入<code>self.errors</code>方法，为什么没加括号呢，因为被<code>property</code>装饰了，变成了属性。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzczcfh6iaj314y06wab7.jpg" alt></p>
<p><code>self._errors</code>为<code>None</code>，进入<code>full_clean()</code>方法。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzczdidcywj319u0hejur.jpg" alt></p>
<p>在这个方法里，首先定义了<code>cleaned_data</code>为一个空字典，然后就是下面的三个方法：</p>
<ol>
<li>_clean_fields()：见名思义，这个方法是用来校验字段的，就是继承自 Form 中类里面定义的字段。</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzczg7pul5j31a00km7a0.jpg" alt></p>
<p>光看源码不看例子很难理解，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name = forms.CharField(min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, label=<span class="string">'用户名'</span>, required=<span class="literal">True</span>, error_messages=&#123;<span class="string">'min_length'</span>: <span class="string">'用户名长度至少为三位'</span>, <span class="string">'max_length'</span>: <span class="string">'用户名长度最长为八位'</span>, &#125;)</span><br><span class="line">    pwd = forms.CharField(min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, label=<span class="string">'密码'</span>, required=<span class="literal">True</span>, error_messages=&#123;<span class="string">'min_length'</span>: <span class="string">'用户名长度至少为三位'</span>, <span class="string">'max_length'</span>: <span class="string">'用户名长度最长为八位'</span>, &#125;)</span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>, error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'邮箱格式不合法'</span>, <span class="string">'required'</span>: <span class="string">'该字段必填'</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>在<code>self.fields</code>中放的是一个个键值对，比如在上面的<code>MyForm</code>里面的字段<code>name</code>和后面的<code>CharField</code>类的一个对象的对应关系，那么在<code>self.fields</code>里面就有三个对应关系，也就是有三个键值对。</p>
<p>往下走，字典的<code>items()</code>方法，把<code>MyForm</code>里面的字段值赋给了<code>name</code>，把字段指向的类对象赋给了<code>field</code>，之后进行判断，<code>if field.disable:</code>，这个判断是判断类对象的某个属性值，可以知道在定义字段时，并没有定义这个值，那么这个值是否有默认值，进入<code>forms.CharField</code>中查看，</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzcznprlzlj31dk0buwip.jpg" alt></p>
<p>可以看出该类中没有，那么去父类中查看也就是<code>Field</code>：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzczogetz7j318g0iw0zc.jpg" alt></p>
<p>找到了，默认为 False， 所以说<code>if field.disables:</code>为 False， 就走到了下一步：</p>
<p><code>value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))</code>这句看不懂，接着往下走：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzczw7tovmj31580c6q61.jpg" alt></p>
<p>首先，咱们定义的都不是<code>FileField</code>字段，所以走<code>value=field.clean(value)</code>：</p>
<p>因为是字段的方法，所以找<code>forms.CharField</code>，在<code>Field</code>类中找到：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzczyp19qjj312y0b8abt.jpg" alt></p>
<p>这里面有点绕，我先把顺序写出来：</p>
<p>首先要知道<code>value</code>到底是什么：</p>
<p>在上面说过调用了<code>field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))</code>方法，是字段的方法，</p>
<p>在<code>CharField</code>中没找到<code>widget</code>，去<code>Field</code>中寻找，</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzd04jmccnj316c0lkahe.jpg" alt></p>
<p>可以看到<code>widget=TextInput</code>，所以肯定是调用了<code>Textinput</code>的<code>value_from_datadict</code>方法，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzd05oun0bj314404iaay.jpg" alt></p>
<p>没有，去<code>Input</code>，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzd064k2knj31ae0gmjvl.jpg" alt></p>
<p>还是没有，去<code>Widget</code>，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzd06nkwyuj30xe06iabb.jpg" alt></p>
<p>找到，返回了<code>data.get(name)</code>，很显然这是字典的取值方法，但是<code>data</code>是什么呢？</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzd0ueebz8j31eo0ckn1q.jpg" alt></p>
<p><code>data</code>是个<code>QueryDict</code>对象，找到<code>name</code>是什么，就可以知道<code>value</code>是什么了。</p>
<p>可以知道<code>name</code>是通过<code>self.add_prefix(name)</code>获取的，进入：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzd0wrytjqj318m08cmyw.jpg" alt></p>
<p>是个三元表达式，关键在于<code>self.prefix</code>的值是多少。这是个对象属性，很显然去类中找：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzd0y6275kj31a00fmtg2.jpg" alt></p>
<p>所以这个三元表达式的值就是<code>MyForm</code>中定义的字段名，所以通过<code>data.get(name)</code>取得值就是上传的值，比如<code>musibii</code>。</p>
<p>那么执行<code>field.clean(value)</code>相当于把<code>musibii</code>传进去执行，</p>
<p>在<code>field.clean</code>方法中：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzd12155xrj30xu0bkabx.jpg" alt></p>
<ol>
<li>to_python(‘musibii’)：因为<code>CharField</code>中定义了<code>to_python</code>方法，所以进入自己的方法;</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzd15i7025j31co08mdi8.jpg" alt></p>
<p><code>musibii</code>不是None，空字符串、空字典、空元祖，所以进入<code>forece_text(&#39;musibii&#39;)</code>方法：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzd17quomwj315v0u0tja.jpg" alt></p>
<p>别看这么多，其实就进行了一步判断：<code>if issubclass(type(&#39;musibii&#39;), six.text_type):</code>因为这个判断为<code>True</code>，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzd1eefd01j312y09kabq.jpg" alt></p>
<p>所以直接把<code>musibii</code>返回。然后判断<code>if self.strip:</code>因为该参数默认为<code>True</code>，所以<code>value=value.strip()</code>，默认是通过空格进行分割的，走完后后进入<code>self.valitate(&#39;musibii&#39;)</code>，</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzd1gbxww9j31a403egmw.jpg" alt></p>
<p>直接退出进入<code>run_validators(&#39;musibii&#39;)</code>，</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzd1h8mo5rj31dm0d0n0n.jpg" alt></p>
<p>在这个方法里面，主要是进行了字段的一些限制校验，比如长度等，<code>musibii</code>没有错误，返回<code>musibii</code>，然后把该数据加到<code>self.cleaned_data</code>中，表示这个数据是成功通过校验的。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzd1ml7sxtj319c06g76a.jpg" alt></p>
<p>这句代码是反射用法，判断<code>self</code>是否具有<code>clean_name</code>属性，（name 变量的值为 name），因为没有，所以第一个字段的校验结束，进行第二个字段的校验。</p>
<p>如果我们在<code>MyForm</code>类中定义了<code>clean_name</code>或者<code>clean_pwd</code>或者<code>clean_email</code>方法，如果在<code>_clean_fields</code>方法中通过校验就会执行自定义的校验方法，这就是局部钩子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'用户名'</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                           <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                           <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                           &#125;,</span><br><span class="line">                           widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                           )</span><br><span class="line">    pwd = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'密码'</span>,</span><br><span class="line">                          error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                          <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                          <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                          &#125;,</span><br><span class="line">                          widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                          )</span><br><span class="line">    re_pwd = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">'确认密码'</span>,</span><br><span class="line">                          error_messages=&#123;<span class="string">'max_length'</span>: <span class="string">'太长了'</span>,</span><br><span class="line">                                          <span class="string">'min_length'</span>: <span class="string">'太短了'</span>,</span><br><span class="line">                                          <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                          &#125;,</span><br><span class="line">                          widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                          )</span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>, error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'格式不正确'</span>,</span><br><span class="line">                                                         <span class="string">'required'</span>: <span class="string">'该项不能为空'</span></span><br><span class="line">                                                         &#125;,</span><br><span class="line">                             widget=widgets.EmailInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;)</span><br><span class="line">                             )</span><br><span class="line">    <span class="comment"># clean_字段名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 从cleaned_data中取出字段的值</span></span><br><span class="line">        name = self.cleaned_data.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="comment"># # 校验是否以sb开头</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'sb'</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'不能以sb开头'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        <span class="comment"># user = models.UserInfo.objects.filter(name=name).first()</span></span><br><span class="line">        <span class="comment"># if user:</span></span><br><span class="line">        <span class="comment">#     # 用户已经存在,校验不通过,抛一个异常</span></span><br><span class="line">        <span class="comment">#     raise ValidationError('该用户已经存在')</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     # 校验通过,返回要校验的数据</span></span><br><span class="line">        <span class="comment">#     return name</span></span><br><span class="line">    <span class="comment"># def clean_pwd(self):</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br></pre></td></tr></table></figure>
<p>在这里，如果<code>name</code>字段校验通过就会执行<code>clean_name</code>这个方法进行进一步的校验。</p>
<h2 id="全局钩子"><a href="#全局钩子" class="headerlink" title="全局钩子"></a>全局钩子</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzd25040lej319k0gm77o.jpg" alt></p>
<p>当<code>_clean_fields</code>运行结束后会执行<code>_clean_form</code>方法，</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzd2fjs5cpj314008u0u8.jpg" alt></p>
<p>如果<code>MyForm</code>中定义了<code>clean</code>方法的话就会执行该方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        pwd=self.cleaned_data.get(<span class="string">'pwd'</span>)</span><br><span class="line">        re_pwd=self.cleaned_data.get(<span class="string">'re_pwd'</span>)</span><br><span class="line">        <span class="keyword">if</span> pwd==re_pwd:</span><br><span class="line">            <span class="comment"># 正确,返回self.cleaned_data</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 校验失败,抛异常</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br></pre></td></tr></table></figure>
<p>比如要判断两次密码是否一致就可以定义一个全局钩子函数。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="模板层"><a href="#模板层" class="headerlink" title="模板层"></a>模板层</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            &#123;% for foo in myform %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo.label &#125;&#125;:&#123;&#123; foo &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span>&#123;&#123; foo.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;error_all.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        myform = RegForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        myform = RegForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> myform.is_valid():</span><br><span class="line">            <span class="comment"># 存数据库,保存这个人</span></span><br><span class="line">            print(myform.cleaned_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 校验不通过,这里面也可能有值</span></span><br><span class="line">            <span class="comment"># 总错误信息&#123;'name':['太长了',],'pwd':['太短了']&#125;</span></span><br><span class="line">            <span class="comment"># print(myform.cleaned_data)</span></span><br><span class="line">            <span class="comment"># 总错误</span></span><br><span class="line">            <span class="comment"># myform.glo_err=myform.errors.get('__all__')</span></span><br><span class="line">            error_all = myform.errors.get(<span class="string">'__all__'</span>)</span><br><span class="line">            <span class="comment"># print()</span></span><br><span class="line">            <span class="comment"># 每一个的错误信息</span></span><br><span class="line">            <span class="comment"># for item in myform:</span></span><br><span class="line">            <span class="comment">#     # ['太长了',]</span></span><br><span class="line">            <span class="comment">#     # print(item.errors[0])</span></span><br><span class="line">            <span class="comment">#     # print(type(item.errors))</span></span><br><span class="line">            <span class="comment">#     from django.forms.utils import ErrorList</span></span><br><span class="line">            <span class="comment">#     # print(item.errors.as_data())</span></span><br><span class="line">            <span class="comment">#     print(item.errors)</span></span><br><span class="line">            <span class="comment">#     # print(type(item.errors))</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, locals())</span><br></pre></td></tr></table></figure>
<p><strong>全局钩子产生的错误会放到myform.errors[__all__]中</strong></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django（十）</title>
    <url>/2019/01/14/Django%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Django-系列博客（十）"><a href="#Django-系列博客（十）" class="headerlink" title="Django 系列博客（十）"></a>Django 系列博客（十）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍在 Django 中如何对数据库进行增删查改，主要为对单表进行操作。</p>
<h2 id="ORM简介"><a href="#ORM简介" class="headerlink" title="ORM简介"></a>ORM简介</h2><p>查询数据层次图解：如果操作 mysql，ORM 是在 pymysql 之上又进行了一层封装。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fz6c8nqfafj30a70cbaat.jpg" alt></p>
<ul>
<li><p>MVC 或者 MTV 框架中包括一个重要的部分，就是 ORM，它实现了数据模型与数据库的解耦合，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库，极大地减轻了工作量，不需要面对因数据变更而导致的无效劳动。</p>
</li>
<li><p>ORM 是‘’对象-关系-映射‘’的简称</p>
</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fz6cb30y2aj31oo0p2thv.jpg" alt></p>
<p>通过 ORM 可以简化甚至不需要在写 sql 语句，通过操作与数据库中对应的表的类来进行增删查改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql中的表                                                      </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#创建表:</span></span><br><span class="line">     CREATE TABLE employee(                                     </span><br><span class="line">                id INT PRIMARY KEY auto_increment ,                    </span><br><span class="line">                name VARCHAR (<span class="number">20</span>),                                      </span><br><span class="line">                gender BIT default <span class="number">1</span>,                                  </span><br><span class="line">                birthday DATA ,                                         </span><br><span class="line">                department VARCHAR (<span class="number">20</span>),                                </span><br><span class="line">                salary DECIMAL (<span class="number">8</span>,<span class="number">2</span>) unsigned,                          </span><br><span class="line">              );</span><br><span class="line"></span><br><span class="line">  <span class="comment">#sql中的表纪录                                                  </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#添加一条表纪录:                                                          </span></span><br><span class="line">      INSERT employee (name,gender,birthday,salary,department)            </span><br><span class="line">             VALUES   (<span class="string">"alex"</span>,<span class="number">1</span>,<span class="string">"1985-12-12"</span>,<span class="number">8000</span>,<span class="string">"保洁部"</span>);               </span><br><span class="line"></span><br><span class="line">  <span class="comment">#查询一条表纪录:                                                           </span></span><br><span class="line">      SELECT * FROM employee WHERE age=<span class="number">24</span>;                               </span><br><span class="line"></span><br><span class="line">  <span class="comment">#更新一条表纪录:                                                           </span></span><br><span class="line">      UPDATE employee SET birthday=<span class="string">"1989-10-24"</span> WHERE id=<span class="number">1</span>;              </span><br><span class="line"></span><br><span class="line">  <span class="comment">#删除一条表纪录:                                                          </span></span><br><span class="line">      DELETE FROM employee WHERE name=<span class="string">"alex"</span>                             </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#python的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    gender=models.BooleanField()</span><br><span class="line">    birthday=models.DateField()</span><br><span class="line">    department=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    salary=models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#python的类对象</span></span><br><span class="line">		  <span class="comment">#添加一条表纪录:</span></span><br><span class="line">	emp=Employee(name=<span class="string">"alex"</span>,gender=<span class="literal">True</span>,birthday=<span class="string">"1985-12-12"</span>,epartment=<span class="string">"保洁部"</span>)</span><br><span class="line">    emp.save()</span><br><span class="line">    <span class="comment">#查询一条表纪录:</span></span><br><span class="line">    Employee.objects.filter(age=<span class="number">24</span>)</span><br><span class="line">    <span class="comment">#更新一条表纪录:</span></span><br><span class="line">    Employee.objects.filter(id=<span class="number">1</span>).update(birthday=<span class="string">"1989-10-24"</span>)</span><br><span class="line">    <span class="comment">#删除一条表纪录:</span></span><br><span class="line">    Employee.objects.filter(name=<span class="string">"alex"</span>).delete()</span><br></pre></td></tr></table></figure>
<h2 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><ol>
<li>首先在 settings.py中配置好 mysql参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'friday_work'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span>,</span><br><span class="line">        <span class="string">'ATOMIC_REQUEST'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">"init_command"</span>: <span class="string">"SET storage_engine=MyISAM"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'NAME'</span>:要连接的数据库，连接前需要创建好</span><br><span class="line"><span class="string">'USER'</span>:连接数据库的用户名</span><br><span class="line"><span class="string">'PASSWORD'</span>:连接数据库的密码</span><br><span class="line"><span class="string">'HOST'</span>:连接主机，默认本机</span><br><span class="line"><span class="string">'PORT'</span>:端口 默认<span class="number">3306</span></span><br><span class="line"><span class="string">'ATOMIC_REQUEST'</span>: <span class="literal">True</span>,</span><br><span class="line">设置为<span class="literal">True</span>统一个http请求对应的所有sql都放在一个事务中执行（要么所有都成功，要么所有都失败）。</span><br><span class="line">是全局性的配置， 如果要对某个http请求放水（然后自定义事务），可以用non_atomic_requests修饰器 </span><br><span class="line"><span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">             <span class="string">"init_command"</span>: <span class="string">"SET storage_engine=MyISAM"</span>,</span><br><span class="line">            &#125;</span><br><span class="line">设置创建表的存储引擎为MyISAM，INNODB</span><br></pre></td></tr></table></figure>
<p><strong>注意：NAME 即数据库的名字，在 mysql 连接前该数据库必须已经创建，而上面的 sqlite 数据库下的db.sqlite3则是项目自动 创建 USER 和 PASSWORD 分别是数据库的用户名和密码。设置完后，再启动我们的 django 项目前，我们需要激活 mysql。然后，启动项目会报错：no module named MySQLdb 。这是因为django默认你导入的驱动是MySQLdb，可是MySQLdb 对于py3有很大问题，所以我们需要的驱动是PyMySQL 所以，我们只需要找到项目名文件下的<strong>init</strong>,在里面写入下面的代码：</strong></p>
<ol start="2">
<li>在一个模块中设置 mysql 引擎</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在 models.py中创建数据模型</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    pub_data = models.DateField()</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>数据迁移</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>想打印 ORM 转换过程中的 sql，在 settings.py中进行如下设置：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>增加删除字段</li>
</ol>
<p>删除，直接注释掉字段，重新执行数据库迁移命令即可；</p>
<p>新增字段，在类里直接新增字段，直接执行数据库迁移命令会提示输入默认值，此时需要在字段里面设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>​    1. 数据库迁移记录都在 application 下面的 migrations 里面的 py 文件中；</p>
<p>​    2. 使用 showmigrations 命令可以查看没有执行 migrate 的文件；</p>
<p>​    3. makemigrations 是生成一个创建表的记录，migrate 是将更改提交到数据库。</p>
<ol start="7">
<li>在 python 中调用 Django 环境</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"untitled15.settings"</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">    books = models.Book.objects.all()</span><br><span class="line">    print(books)</span><br></pre></td></tr></table></figure>
<h3 id="更多字段和参数"><a href="#更多字段和参数" class="headerlink" title="更多字段和参数"></a>更多字段和参数</h3><p>每个字段有一些特有的参数，例如，CharField 需要 max_length参数来指定 VARCHAR 数据库字段的大小。还有一些适用于所有字段的通用参数。这些参数在文档中有详细定义，这里简单介绍一些常用字段含义：</p>
<ol>
<li><p>AutoField(Field)：int自增列，必须填入参数<code>primary_key=True</code></p>
</li>
<li><p>BigAutoField(AutoField)：bigint 自增列，必须填入参数<code>primary_key=True</code></p>
<p>注：当 model 中没有自增列，则自动会创建一个列名为 id 的字段</p>
</li>
<li><p>SmallIntegerField(IntegerField)：小整数，-32768 ~ 32767</p>
</li>
<li><p>PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)：正小整数 0 ~ 32767</p>
</li>
<li><p>IntegerField(Field)：整数列（有符号）-2147483648 ~ 2147483647</p>
</li>
<li><p>PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)：正整数 0 ~ 2147483647</p>
</li>
<li><p>BigIntegerField(IntegerField)：长整型（有符号）-9223372036854775808 ~ 9223372036854775807</p>
</li>
<li><p>自定义无符号整数字段</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsignedIntegerField</span><span class="params">(models.IntegerField)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'integer UNSIGNED'</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>BooleanField(Field)：布尔值类型</li>
<li>NullBooleanField(Field)：可以为空的布尔值</li>
<li>CharField(Field)：字符类型。必须设置 max_length参数，表示字符长度</li>
<li>TextField(Field)：文本类型</li>
<li>EmailField(CharField)：字符串类型，Django admin 以及 ModelForm 中提供验证机制</li>
<li>IPAddressField(Field)：字符串类型，Django Admin 以及 ModelForm 中提供验证 IPV4机制</li>
<li>GenericIPAddressField(Field)：字符串类型，Django Admin 以及 ModelFOrm 中提供验证 IPV4和 IPV6，参数：protocol，用于指定 IPV4或 IPV6，</li>
<li>URLField(CharField)：字符串类型，Django Admin 以及ModelForm 中提供验证 URL</li>
<li>SlugField(CharField)：字符串类型，Django Admin 以及 ModelForm 中提供验证支持字母、数字、下划线、连接符（减号）</li>
<li>CommaSeparatedIntegerField(CharField)：字符串类型，格式必须为逗号分隔的数字</li>
<li>UUIDField(Field)：字符串类型，Django Admin 以及 ModelForm 中提供对 UUID 格式的验证</li>
<li>FilePathField(Field)：字符串，Django Admin 以及 ModelFOrm 中提供读取文件夹下文件的功能，参数：path：文件夹路径，match=None：正则匹配，recursive=False：递归下面的文件夹，allow_files=True：允许文件，allow_folders=False：允许文件夹</li>
<li>FileField(Field)：字符串，路径保存在数据库，文件上传到指定目录，参数：upload_to=’’’’：上传文件的保存路径，storage=None：存储组件，默认 django.core.files.storage.FileSystemStorage</li>
<li>ImageField(FileFiled)：字符串，路径保存在数据库，文件上传到指定目录，参数：upload_to=’’’’：上传文件的保存路径，storage=None：存储组件，默认django.core.files.storage.FileSystemStorage，width_field=None：上传图片的高度保存的数据库字段名（字符串），height_field=None：上传图片的宽度保存的数据库字段名（字符串）</li>
<li>DateTimeField(DateField)：日期+时间格式：YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]</li>
<li>DateField(DateTimeCheckMixin, Field)：日期格式：YYYY-MM-DD</li>
<li>TimeField(DateTimeCheckMixin, Field)：时间格式：HH:MM[:ss[.uuuuuu]]</li>
<li>DurationField(Field)：长整数，时间间隔，数据库中按照 bigint 存储，ORM 中获取的值为 datetime.timedelta类型</li>
<li>FloatField(Field)：浮点型</li>
<li>DecimalField(Field)：10进制小数，参数：max_digits：小数点总长度，decimal_places：小数位长度</li>
<li>BinaryField(Field)：二进制类型</li>
</ol>
<h3 id="字段中的参数意思"><a href="#字段中的参数意思" class="headerlink" title="字段中的参数意思"></a>字段中的参数意思</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)null</span><br><span class="line"> </span><br><span class="line">如果为True，Django 将用NULL 来在数据库中存储空值。 默认值是 False.</span><br><span class="line"> </span><br><span class="line">(1)blank</span><br><span class="line"> </span><br><span class="line">如果为True，该字段允许不填。默认为False。</span><br><span class="line">要注意，这与 null 不同。null纯粹是数据库范畴的，而 blank 是数据验证范畴的。</span><br><span class="line">如果一个字段的blank=True，表单的验证将允许该字段是空值。如果字段的blank=False，该字段就是必填的。</span><br><span class="line"> </span><br><span class="line">(2)default</span><br><span class="line"> </span><br><span class="line">字段的默认值。可以是一个值或者可调用对象。如果可调用 ，每有新对象被创建它都会被调用。</span><br><span class="line"> </span><br><span class="line">(3)primary_key</span><br><span class="line"> </span><br><span class="line">如果为True，那么这个字段就是模型的主键。如果你没有指定任何一个字段的primary_key=True，</span><br><span class="line">Django 就会自动添加一个IntegerField字段做为主键，所以除非你想覆盖默认的主键行为，</span><br><span class="line">否则没必要设置任何一个字段的primary_key=True。</span><br><span class="line"> </span><br><span class="line">(4)unique</span><br><span class="line"> </span><br><span class="line">如果该值设置为 True, 这个数据字段的值在整张表中必须是唯一的</span><br><span class="line"> </span><br><span class="line">(5)choices</span><br><span class="line">由二元组组成的一个可迭代对象（例如，列表或元组），用来给字段提供选择项。 如果设置了choices ，默认的表单将是一个选择框而不是标准的文本框，&lt;br&gt;而且这个选择框的选项就是choices 中的选项。</span><br></pre></td></tr></table></figure>
<h3 id="返回值为字段在数据库中的属性，-Django-字段默认的值："><a href="#返回值为字段在数据库中的属性，-Django-字段默认的值：" class="headerlink" title="返回值为字段在数据库中的属性， Django 字段默认的值："></a>返回值为字段在数据库中的属性， Django 字段默认的值：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'AutoField'</span>: <span class="string">'integer AUTO_INCREMENT'</span>,</span><br><span class="line"><span class="string">'BigAutoField'</span>: <span class="string">'bigint AUTO_INCREMENT'</span>,</span><br><span class="line"><span class="string">'BinaryField'</span>: <span class="string">'longblob'</span>,</span><br><span class="line"><span class="string">'BooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line"><span class="string">'CharField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line"><span class="string">'CommaSeparatedIntegerField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line"><span class="string">'DateField'</span>: <span class="string">'date'</span>,</span><br><span class="line"><span class="string">'DateTimeField'</span>: <span class="string">'datetime'</span>,</span><br><span class="line"><span class="string">'DecimalField'</span>: <span class="string">'numeric(%(max_digits)s, %(decimal_places)s)'</span>,</span><br><span class="line"><span class="string">'DurationField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line"><span class="string">'FileField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line"><span class="string">'FilePathField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line"><span class="string">'FloatField'</span>: <span class="string">'double precision'</span>,</span><br><span class="line"><span class="string">'IntegerField'</span>: <span class="string">'integer'</span>,</span><br><span class="line"><span class="string">'BigIntegerField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line"><span class="string">'IPAddressField'</span>: <span class="string">'char(15)'</span>,</span><br><span class="line"><span class="string">'GenericIPAddressField'</span>: <span class="string">'char(39)'</span>,</span><br><span class="line"><span class="string">'NullBooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line"><span class="string">'OneToOneField'</span>: <span class="string">'integer'</span>,</span><br><span class="line"><span class="string">'PositiveIntegerField'</span>: <span class="string">'integer UNSIGNED'</span>,</span><br><span class="line"><span class="string">'PositiveSmallIntegerField'</span>: <span class="string">'smallint UNSIGNED'</span>,</span><br><span class="line"><span class="string">'SlugField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line"><span class="string">'SmallIntegerField'</span>: <span class="string">'smallint'</span>,</span><br><span class="line"><span class="string">'TextField'</span>: <span class="string">'longtext'</span>,</span><br><span class="line"><span class="string">'TimeField'</span>: <span class="string">'time'</span>,</span><br><span class="line"><span class="string">'UUIDField'</span>: <span class="string">'char(32)'</span>,</span><br></pre></td></tr></table></figure>
<h2 id="单表增删查改"><a href="#单表增删查改" class="headerlink" title="单表增删查改"></a>单表增删查改</h2><h3 id="添加表记录"><a href="#添加表记录" class="headerlink" title="添加表记录"></a>添加表记录</h3><ol>
<li>第一种方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create方法的返回值book_obj就是插入book表中的python葵花宝典这本书籍纪录对象</span></span><br><span class="line">book_obj=Book.objects.create(title=<span class="string">"python葵花宝典"</span>,state=<span class="literal">True</span>,price=<span class="number">100</span>,publish=<span class="string">"苹果出版社"</span>,pub_date=<span class="string">"2012-12-12"</span>)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>第二种方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj=Book(title=<span class="string">"python葵花宝典"</span>,state=<span class="literal">True</span>,price=<span class="number">100</span>,publish=<span class="string">"苹果出版社"</span>,pub_date=<span class="string">"2012-12-12"</span>)</span><br><span class="line">book_obj.save()</span><br></pre></td></tr></table></figure>
<h3 id="查询表记录"><a href="#查询表记录" class="headerlink" title="查询表记录"></a>查询表记录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt; all():                  查询所有结果</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">2</span>&gt; filter(**kwargs):       它包含了与所给筛选条件相匹配的对象</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">3</span>&gt; get(**kwargs):          返回与所给筛选条件相匹配的对象，返回结果有且只有一个，如果符合筛选条件的对象超过一个或者没有都会抛出错误。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">4</span>&gt; exclude(**kwargs):      它包含了与所给筛选条件不匹配的对象</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">5</span>&gt; order_by(*field):       对查询结果排序(<span class="string">'-id'</span>)</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">6</span>&gt; reverse():              对查询结果反向排序</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">8</span>&gt; count():                返回数据库中匹配查询(QuerySet)的对象数量。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">9</span>&gt; first():                返回第一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">10</span>&gt; last():                返回最后一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">11</span>&gt; exists():              如果QuerySet包含数据，就返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">12</span>&gt; values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列</span><br><span class="line">                            model的实例化对象，而是一个可迭代的字典序列</span><br><span class="line">&lt;<span class="number">13</span>&gt; values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">14</span>&gt; distinct():            从返回结果中剔除重复纪录</span><br></pre></td></tr></table></figure>
<h3 id="基于双下划线的模糊查询"><a href="#基于双下划线的模糊查询" class="headerlink" title="基于双下划线的模糊查询"></a>基于双下划线的模糊查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.filter(price__in=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line">Book.objects.filter(price__gt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__lt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__gte=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__lte=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__range=[<span class="number">100</span>,<span class="number">200</span>])</span><br><span class="line">Book.objects.filter(title__contains=<span class="string">"python"</span>)</span><br><span class="line">Book.objects.filter(title__icontains=<span class="string">"python"</span>)</span><br><span class="line">Book.objects.filter(title__startswith=<span class="string">"py"</span>)</span><br><span class="line">Book.objects.filter(pub_date__year=<span class="number">2012</span>)</span><br></pre></td></tr></table></figure>
<h3 id="删除表记录"><a href="#删除表记录" class="headerlink" title="删除表记录"></a>删除表记录</h3><p>删除方法就是 delete()，它运行时立即删除对象而不返回任何值。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_obj.delete()</span><br></pre></td></tr></table></figure>
<p>你也可以一次性删除多个对象。每个 QuerySet 都有一个 delete() 方法，它一次性删除 QuerySet 中所有的对象。</p>
<p>例如，下面的代码将删除 pub_date 是2005年的 Entry 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</span><br></pre></td></tr></table></figure>
<p>在 Django 删除对象时，会模仿 SQL 约束 ON DELETE CASCADE 的行为，换句话说，删除一个对象时也会删除与它相关联的外键对象。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># This will delete the Blog and all of its Entry objects.</span></span><br><span class="line">b.delete()</span><br></pre></td></tr></table></figure>
<p>要注意的是： delete() 方法是 QuerySet 上的方法，但并不适用于 Manager 本身。这是一种保护机制，是为了避免意外地调用 Entry.objects.delete() 方法导致 所有的 记录被误删除。如果你确认要删除所有的对象，那么你必须显式地调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Entry.objects.all().delete()</span><br></pre></td></tr></table></figure>
<p>如果不要级联删除，可以设置为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pubHouse = models.ForeignKey(to=<span class="string">'Publish'</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h3 id="修改表记录"><a href="#修改表记录" class="headerlink" title="修改表记录"></a>修改表记录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.filter(title__startswith=<span class="string">"py"</span>).update(price=<span class="number">120</span></span><br></pre></td></tr></table></figure>
<p>此外，update()方法对于任何结果集（QuerySet）均有效，这意味着你可以同时更新多条记录 update()方法会返回一个整型数值，表示受影响的记录条数。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 创建本地私有仓库</title>
    <url>/2019/05/03/Docker-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="创建基础仓库"><a href="#创建基础仓库" class="headerlink" title="创建基础仓库"></a>创建基础仓库</h1><ol>
<li>导入仓库镜像 </li>
</ol>
<p>/User/jingxing/download/registry.tar.gz </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker load -i registry.tar.gz</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>重启 docker 服务 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>运行仓库容器 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -d -p 5000:5000 --restart=always --name registry -v /opt/myregistry:/var/lib/registry registry</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>重启 docker 服务 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>给要上传到私有仓库的镜像打标签 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker tag centos_ssh:v2 10.0.0.11:5000/oldboy/centos_ssh:v2</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>修改 docker 配置文件将私有仓库 ip 加进去 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p>内容如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;insecure-registries&quot;: [&quot;10.0.0.11:5000&quot;]</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>重启 docker 服务 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>上传镜像 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker push 10.0.0.11:5000/oldboy/centos_ssh:v2</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>进入仓库容器 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器 id /bin/sh</span><br></pre></td></tr></table></figure>
<h1 id="创建带有-basic-auth-的私有仓库"><a href="#创建带有-basic-auth-的私有仓库" class="headerlink" title="创建带有 basic auth 的私有仓库"></a>创建带有 basic auth 的私有仓库</h1><ol>
<li>安装依赖库 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum install httpd-tools -y</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建认证目录 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mkdir /opt/registry-var/auth/ -p</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>设置密码 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">htpasswd -Bbn oldboy 123456 &gt;&gt; /opt/registry-var/auth/htpasswd</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动仓库镜像 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -d -p 5000:5000 -v /opt/registry-var/auth:/auth/ -v /opt/myregistry:/var/lib/registry -e <span class="string">"REGISTRY_AUTH=htpasswd"</span> -e <span class="string">"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"</span> -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry</span><br></pre></td></tr></table></figure>
<h1 id="删除容器里的镜像文件"><a href="#删除容器里的镜像文件" class="headerlink" title="删除容器里的镜像文件"></a>删除容器里的镜像文件</h1><ol>
<li>进入 docker registry 容器中 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it registyr /bin/sh</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>删除 repo </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">rm -rf /var/lib/registry/docker/registry/v2/repositories/oldboy</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>清除掉 blob </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 的安装</title>
    <url>/2019/03/03/Docker-%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><code>$source /etc/bash_completion.d/docker.io</code></p>
<p>使用 docker 维护的版本：</p>
<ol>
<li>检查 APT 的 HTTPS 支持查看/usr/lib/apt/methods/https文件是否存在<br> <code>$apt-get update</code><br> <code>$apt-get install -y apt-transport-https</code></li>
<li>添加 docker 的 APT 仓库<br> <code>$echo deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/$sources.list.d/docker.list</code></li>
<li>添加仓库的key<br> <code>$apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys
 36A1D7869245C8950F966E92D8576A8BA88D21E9</code></li>
<li>安装<br> <code>$apt-get update</code><br> <code>$apt-get install -y lxc-docker</code></li>
</ol>
<p>以上4步可以通过下面的 shell 脚本来安装</p>
<ol>
<li><code>$sudo apt-get install -y curl</code></li>
<li><code>$curl -sSL https://get.docker.com/ | sudo sh</code></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker的安装、组成及基础命令</title>
    <url>/2019/05/03/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E7%BB%84%E6%88%90%E5%8F%8A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="主机名和-ip-设置"><a href="#主机名和-ip-设置" class="headerlink" title="主机名和 ip 设置"></a>主机名和 ip 设置</h1><p>hostname.sh docker01 10.0.0.11 </p>
<h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">rm -fr /etc/yum.repos.d/local.repo </span><br><span class="line"></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </span><br><span class="line"></span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s#download.docker.com#mirrors.tuna.tsinghua.edu.cn/docker-ce#g'</span> /etc/yum.repos.d/docker-ce.repo </span><br><span class="line"></span><br><span class="line">yum install docker-ce -y </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment"># docker的主要组成部分 </span></span><br><span class="line"></span><br><span class="line">docker是传统的CS架构分为docker client和docker server,和mysql一样 </span><br><span class="line"></span><br><span class="line">1.  查看版本信息 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker server </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2. 监控 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker info </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">docker主要组件有：镜像、容器、仓库、网络和存储 </span><br><span class="line"></span><br><span class="line">启动容器必须需要一个镜像，仓库中只存储镜像 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器 </span></span><br><span class="line"></span><br><span class="line">1. 配置 docker 镜像加速 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">vim /etc/docker/daemon.json </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">```txt </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>] </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动容器 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -d -p 80:80 nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本 </span></span><br><span class="line"></span><br><span class="line">docker run -d -p 80:80 nginx:1.14 </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">1) run 创建并运行 </span><br><span class="line"></span><br><span class="line">2) -d 守护进程启动 </span><br><span class="line"></span><br><span class="line">3) -p 端口映射 </span><br><span class="line"></span><br><span class="line">4) nginx docker 镜像的名字 </span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 的镜像管理 </span></span><br><span class="line"></span><br><span class="line">1. 搜索镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker search 镜像名 </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2. 获取镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker pull </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker pull centos:6.8（没有指定版本，默认会下载最新版） </span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/huangzhichong/alpine-cn:latest </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 查看本地镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker images </span><br><span class="line"></span><br><span class="line">docker image ls </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">4. 删除镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker rmi </span><br><span class="line"></span><br><span class="line">docker image rm centos:lates </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">5. 导出镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker save </span><br><span class="line"></span><br><span class="line">docker image save centos &gt; docker-centos7.4.tar.gz </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">6. 导入镜像 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker load </span><br><span class="line"></span><br><span class="line">docker image load -i docker-centos7.4.tar.gz </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 的容器管理 </span></span><br><span class="line"></span><br><span class="line">1. 启动容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker run -d -p 80:80 nginx:latest </span><br><span class="line"></span><br><span class="line">-d 放在后台 </span><br><span class="line"></span><br><span class="line">-p 端口映射 </span><br><span class="line"></span><br><span class="line">-v 源地址(宿主机):目标地址(容器) </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2. 以交互式启动容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker run -it --name centos6 centos:6.9 /bin/bash </span><br><span class="line"></span><br><span class="line">-it 分配交互式的终端 </span><br><span class="line"></span><br><span class="line">--name 指定容器的名字 </span><br><span class="line"></span><br><span class="line">/bin/sh覆盖容器的初始命令 </span><br><span class="line"></span><br><span class="line">docker run ==== docker create + docker start </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 停止容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker stop CONTAINER_ID or name </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">4. 杀死容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker <span class="built_in">kill</span> container_name </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">5. 查看容器列表 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker ps </span><br><span class="line"></span><br><span class="line">docker ps –a </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">6. 进入容器（目的、调试、排错） </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> (分配一个新的终端) </span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...] </span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id或容器名字 /bin/bash（/bin/sh） </span><br><span class="line"></span><br><span class="line">docker attach（使用同一个终端） </span><br><span class="line"></span><br><span class="line">docker attach [OPTIONS] CONTAINER </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">7. 删除容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker rm </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">8. 批量删除容器 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker rm -f `docker ps -a -q` </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**总结：** </span><br><span class="line"></span><br><span class="line">docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态！ </span><br><span class="line"></span><br><span class="line">9. docker 容器的网络访问（端口映射） </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">指定映射(docker 会自动添加一条iptables规则来实现端口映射) </span><br><span class="line"></span><br><span class="line">-p hostPort:containerPort </span><br><span class="line"></span><br><span class="line">-p ip:hostPort:containerPort 多个容器都想使用80端口 </span><br><span class="line"></span><br><span class="line">-p ip::containerPort(随机端口) </span><br><span class="line"></span><br><span class="line">-p hostPort:containerPort:udp </span><br><span class="line"></span><br><span class="line">-p 81:80 –p 443:443 可以指定多个-p </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">10. 随机映射 </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">docker run -P (随机端口) </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment"># docker的数据卷管理 </span></span><br><span class="line"></span><br><span class="line">/usr/share/nginx/html </span><br><span class="line"></span><br><span class="line">```bash </span><br><span class="line"></span><br><span class="line">数据卷(文件或目录) </span><br><span class="line"></span><br><span class="line">-v 卷名:/data </span><br><span class="line"></span><br><span class="line">-v src（宿主机的目录）:dst（容器的目录） </span><br><span class="line"></span><br><span class="line">数据卷容器 </span><br><span class="line"></span><br><span class="line">--volumes-from（跟某一个已经存在的容器挂载相同的卷） </span><br><span class="line"></span><br><span class="line">基于nginx启动一个容器，监听80和81，访问80，出现nginx默认首页，访问81，出现小鸟。 </span><br><span class="line"></span><br><span class="line">基于多端口的多站点。 </span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（一）</title>
    <url>/2018/12/17/JavaScript%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客（一）"><a href="#JavaScript-系列博客（一）" class="headerlink" title="JavaScript 系列博客（一）"></a>JavaScript 系列博客（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列博客为记录学习 JavaScript 的学习笔记，会从基础开始慢慢探索 js。今天的学习笔记主要为 js 引入、定义变量以及 JavaScript 中数据类型和数据类型之间的转换。</p>
<h2 id="引入-JavaScript"><a href="#引入-JavaScript" class="headerlink" title="引入 JavaScript"></a>引入 JavaScript</h2><h3 id="什么是JavaScript-语言？"><a href="#什么是JavaScript-语言？" class="headerlink" title="什么是JavaScript 语言？"></a>什么是JavaScript 语言？</h3><p>JavaScript 是一种轻量级的脚本语言。所谓的‘’脚本语言‘’，指的是它不具备开发操作系统的能力，而是只用来编写相关应用程序的‘’脚本‘’，使用场景最多的是浏览器中。</p>
<p>JavaScript 也是一种嵌入式语言。本身的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O相关的接口，都要靠宿主环境提供，所以 JavaScript 只适合嵌入更大型的应用程序环境，去调用宿主环境提供的接口。比如和浏览器的交互。</p>
<p>从语法角度看，JavaScript 语言是一种‘’对象模型‘’语言（Object Models）。各种宿主环境通过这个模型，描述自己的功能和操作接口，还支持其他编程范式（比如函数式编程）。</p>
<p>JavaScript 的核心语法非常精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（一系列的具体对象类型，比如 Array、Date 等）。除此之外，各种宿主环境提供额外的接口（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，他提供个额外接口分为三大类。</p>
<ol>
<li>浏览器控制类：操作浏览器</li>
<li>DOM 类：操作网页的各种元素</li>
<li>Web 类：实现互联网的各种功能</li>
</ol>
<p>如果宿主环境是服务器，则会提供各种操作系统的接口，比如文件操作接口，网络通信接口等。</p>
<h3 id="JavaScript-与-Java的关系"><a href="#JavaScript-与-Java的关系" class="headerlink" title="JavaScript 与 Java的关系"></a>JavaScript 与 Java的关系</h3><p>其实我很早就知道 JavaScript 和 Java 了，开始也很纳闷它们之间的关系，这里详细介绍一下。</p>
<p>JavaScript 的基本语法和对象体系，是模仿 Java 设计的。但是JavaScript 没有采用 Java 的静态 类型。正是因为 JavaScript与 Java 有很大的相似性，所以这门语言从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是‘’很像 Java的脚本语言‘’。</p>
<p>JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法比 Java 要自由的多。（约束少了，问题也会多起来）。</p>
<p>除此之外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。</p>
<h3 id="JavaScript-与-ECMAScript-的关系"><a href="#JavaScript-与-ECMAScript-的关系" class="headerlink" title="JavaScript 与 ECMAScript 的关系"></a>JavaScript 与 ECMAScript 的关系</h3><p>1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript 是 Netscape 的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。</p>
<p>1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。</p>
<p>1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p>
<p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。</p>
<p>ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。</p>
<h3 id="在-HTML-中引入-js"><a href="#在-HTML-中引入-js" class="headerlink" title="在 HTML 中引入 js"></a>在 HTML 中引入 js</h3><p>在之前学习 css 中有三种引入 css 的方式，那么也有三种引入 js 的方式。</p>
<ul>
<li>行间式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ddd"</span> <span class="attr">onmouseover</span>=<span class="string">"this.style.color ='red'"</span> <span class="attr">onmouseleave</span>=<span class="string">"this.style.color = 'blue'"</span>&gt;</span>这是行间式 js 的 div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>特点：</p>
<ol>
<li>行间式代码块书写在一个个全局事件名属性中，没有 script 这样的一个全局属性；</li>
<li>在某一个标签的某一个事件属性值中，出现的 this 代表该标签；</li>
<li>该标签对象 this 可以访问该标签的任意全局属性。</li>
</ol>
<ul>
<li>内联式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    ddd.style.backgroundColor = <span class="string">'pink'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>特点：</p>
<ol>
<li>可以通过标签的 id（唯一标识），在 js 代码块中访问到该标签（js 选择器）；</li>
<li>js 代码块中语法采用的是小驼峰命名法，属性的值都是用字符串形式进行复制；</li>
<li>js 属于解释型语言，加载顺序会影响执行结构。</li>
</ol>
<ul>
<li>外联式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/01.js"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// 被屏蔽掉的代码块</span></span></span><br><span class="line"><span class="javascript">    ddd.style.fontSize = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>特点：</p>
<ol>
<li>通过 script 标签的 src 数据连接外部 js 文件；</li>
<li>使用外联的 script（拥有 src 属性）标签，会屏蔽掉标签内部的 js 代码块；</li>
<li>在 js 的任意地方，均有 this对象，this 对象不指向任何标签时，指向的是 window 对象。</li>
</ol>
<h2 id="在-js-中定义变量"><a href="#在-js-中定义变量" class="headerlink" title="在 js 中定义变量"></a>在 js 中定义变量</h2><h3 id="四种定义变量的方式"><a href="#四种定义变量的方式" class="headerlink" title="四种定义变量的方式"></a>四种定义变量的方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">语法: 关键词 变量名 = 变量值</span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span>; <span class="comment">// 省略关键词, 定义的为全局变量, 在任何位置定义, 在任何位置都可以访问, 但不建议使用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// var关键词, 无块级作用域, 定义在块级作用域中的变量, 外界也可以访问</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>; <span class="comment">// let关键词, 有块级作用域, 定义在块级作用域中的变量, 外界无法访问</span></span><br><span class="line"><span class="keyword">const</span> NUM = <span class="number">30</span>; <span class="comment">// const关键词,有块级作用域, 定义在块级作用域中的变量, 外界无法访问, 且变量的值不能再被二次修改, 所以为常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 产生块级作用域的方式</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    直接书写</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if语句可以产生</span></span><br><span class="line"><span class="comment">while语句可以产生</span></span><br><span class="line"><span class="comment">for语句也可以产生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以产生局部作用域, 除了定义在局部作用域中的全局变量(没有关键字的变量声明), 外界可以访问, 其他定义方式, 外界都不可以访问</span></span><br><span class="line"><span class="comment">// ES5 | ES6</span></span><br><span class="line"><span class="comment">// 是ECMAScript两个语法版本, ES6是ES5之后的一个版本, 但是对ES5向下兼容, ES6中支持ES5语法</span></span><br></pre></td></tr></table></figure>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名规范</span></span><br><span class="line"><span class="comment">// 变量命名规范</span></span><br><span class="line"><span class="comment">// 可以由哪些组成: 字母, 数字, _, $, 中文(一般不考虑)</span></span><br><span class="line"><span class="comment">// 可以以什么开头: 字母, _, $, 中文</span></span><br><span class="line"><span class="comment">// 不能出现什么: 关键字, 保留字</span></span><br><span class="line"><span class="comment">// 提倡什么书写规范: 小驼峰, 支持_连接语法</span></span><br><span class="line">好的 = <span class="string">"真好"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(好的);</span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><ul>
<li>number 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 类型, 值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num)</span><br><span class="line">    <span class="comment">// 判断方式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> num == <span class="string">'number'</span>);</span><br><span class="line"></span><br><span class="line">    num = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);</span><br></pre></td></tr></table></figure>
<ul>
<li>string类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'单引号字符串'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str), str);</span><br><span class="line">    str = <span class="string">"双引号字符串"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str), str);</span><br></pre></td></tr></table></figure>
<ul>
<li>boolean 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(res), res);</span><br><span class="line">    res = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(res), res);</span><br></pre></td></tr></table></figure>
<ul>
<li>undefined 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(abc), abc);</span><br><span class="line">    <span class="keyword">var</span> abc = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(abc), abc);</span><br></pre></td></tr></table></figure>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul>
<li>function 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fn), fn);</span><br></pre></td></tr></table></figure>
<ul>
<li>object 类型（类字典方式来使用）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'egon'</span>,</span><br><span class="line">        age: <span class="number">78</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(obj), obj);</span><br><span class="line">    <span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure>
<h3 id="其他形式对象"><a href="#其他形式对象" class="headerlink" title="其他形式对象"></a>其他形式对象</h3><ul>
<li>null 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xyz = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(xyz), xyz);  <span class="comment">// object null</span></span><br><span class="line">    <span class="built_in">console</span>.log(xyz <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// false =&gt; Null类型</span></span><br></pre></td></tr></table></figure>
<h3 id="具体的对象类型"><a href="#具体的对象类型" class="headerlink" title="具体的对象类型"></a>具体的对象类型</h3><ul>
<li>Array 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="comment">// 判断方式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a == <span class="string">'object'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Date 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="comment">// 判断方式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a == <span class="string">'object'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Date</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>RegExp 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'a'</span>);</span><br><span class="line">    a = <span class="regexp">/[abc]/</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="comment">// 判断方式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a == <span class="string">'object'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用正则</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>.match(a))</span><br></pre></td></tr></table></figure>
<h2 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h2><ul>
<li>number 与 boolean 类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// boolean类型的true就是数字1, false就是数字0</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="literal">true</span> + <span class="literal">true</span>) * <span class="number">10</span> * <span class="literal">false</span>)</span><br><span class="line">    <span class="comment">// number 中 0, NaN 可以直接当false来使用, 其他的都可以当true来使用</span></span><br></pre></td></tr></table></figure>
<ul>
<li>string,boolean 转换为 number</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'10'</span>; <span class="comment">// =&gt; 10</span></span><br><span class="line">    a = <span class="string">'3.14'</span>;  <span class="comment">// =&gt; 3.14</span></span><br><span class="line">    a = <span class="string">'3.14.15'</span>;  <span class="comment">// =&gt; NaN</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n1 = <span class="built_in">Number</span>(a);</span><br><span class="line">    <span class="built_in">console</span>.log(n1)</span><br><span class="line">    <span class="keyword">var</span> n2 = <span class="built_in">Number</span>(b);</span><br><span class="line">    <span class="built_in">console</span>.log(n2)</span><br><span class="line"></span><br><span class="line">    a = <span class="string">'3.14.15'</span>;  <span class="comment">// 3.14</span></span><br><span class="line">    a = <span class="string">'a3.14'</span>;  <span class="comment">// NaN</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(a));</span><br><span class="line"></span><br><span class="line">    a = <span class="string">'3.94.15'</span>;  <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(a));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 体现弱语言类型</span></span><br><span class="line">    a = <span class="string">'10'</span>;</span><br><span class="line">    <span class="keyword">var</span> res = +a; <span class="comment">// number 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(res), res)</span><br></pre></td></tr></table></figure>
<ul>
<li>number,string 转换为 boolean</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在分支或循环判断中, 系统会将数字与字符串类型自动转换为布尔类型</span></span><br><span class="line">    <span class="comment">// 不在判断中, 如何转换</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"1"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">-100</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>number,boolean 转换为 string</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a.toString());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123.</span>.toString());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3.14</span>.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">123</span> + <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> c, c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用例</span></span><br><span class="line">    <span class="keyword">var</span> z1 = <span class="number">2</span> + +<span class="string">"5"</span>;  <span class="comment">// 7</span></span><br><span class="line">    z1 = <span class="number">2</span> + <span class="string">"5"</span>; <span class="comment">// "25"</span></span><br><span class="line">    <span class="comment">// z1 = 2 ++"5";  // 语法错误 ++连在一起是 ++语法(了解)</span></span><br><span class="line">    <span class="keyword">var</span> z2 = <span class="string">"5"</span> - <span class="number">2</span>;  <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(z1, z2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 补充</span></span><br><span class="line">    <span class="comment">// NaN与NaN不相等</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="一-JS三个组成部分"><a href="#一-JS三个组成部分" class="headerlink" title="一.JS三个组成部分"></a>一.JS三个组成部分</h2><ul>
<li>ES: ECMAScript语法</li>
<li>DOM: document对象模型 =&gt; 通过js代码与页面文档(出现在body中的所有可视化标签)进行交互</li>
<li>BOM: borwser对象模型 =&gt; 通过js代码与浏览器自带功能进行交互</li>
</ul>
<h2 id="二-引入方式"><a href="#二-引入方式" class="headerlink" title="二.引入方式"></a>二.引入方式</h2><ul>
<li>行间式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出现在标签中的全局事件属性中</span><br><span class="line">this代表该标签, 可以访问全局属性, 再访问具体操作对象(eg: this.style.color = &quot;red&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>内联式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出现在script脚本标签中</span><br><span class="line">可以通过标签的id唯一标识,在js代码块中操作页面标签</span><br><span class="line">js采用的是小驼峰命名规范, 属于解释性语言(由上至下依次解释执行)</span><br></pre></td></tr></table></figure>
<ul>
<li>外联式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过script标签的src属性链接外部js文件, 链接后, script标签本身内部的js代码块将会被屏蔽</span><br><span class="line">在任何位置都可以使用this对象,当this对象不指向任意一个标签时,代表的是window对象</span><br></pre></td></tr></table></figure>
<ul>
<li>js具体出现的位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head标签的底部: 依赖性js库</span><br><span class="line">body标签的底部(body与html结束标签的之间): 功能性js脚本</span><br></pre></td></tr></table></figure>
<h2 id="三-变量的定义"><a href="#三-变量的定义" class="headerlink" title="三.变量的定义"></a>三.变量的定义</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">四种定义变量的方式</span><br><span class="line">语法: 关键词 变量名 = 变量值</span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span>; <span class="comment">// 省略关键词, 定义的为全局变量, 在任何位置定义, 在任何位置都可以访问, 但不建议使用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// var关键词, 无块级作用域, 定义在块级作用域中的变量, 外界也可以访问</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>; <span class="comment">// let关键词, 有块级作用域, 定义在块级作用域中的变量, 外界无法访问</span></span><br><span class="line"><span class="keyword">const</span> NUM = <span class="number">30</span>; <span class="comment">// const关键词,有块级作用域, 定义在块级作用域中的变量, 外界无法访问, 且变量的值不能再被二次修改, 所以为常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 产生块级作用域的方式</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    直接书写</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if语句可以产生</span></span><br><span class="line"><span class="comment">while语句可以产生</span></span><br><span class="line"><span class="comment">for语句也可以产生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以产生局部作用域, 除了定义在局部作用域中的全局变量(没有关键字的变量声明), 外界可以访问, 其他定义方式, 外界都不可以访问</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 | ES6</span></span><br><span class="line"><span class="comment">// 是ECMAScript两个语法版本, ES6是ES5之后的一个版本, 但是对ES5向下兼容, ES6中支持ES5语法</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名规范</span></span><br><span class="line"><span class="comment">// 变量命名规范</span></span><br><span class="line"><span class="comment">// 可以由哪些组成: 字母, 数字, _, $, 中文(一般不考虑)</span></span><br><span class="line"><span class="comment">// 可以以什么开头: 字母, _, $, 中文</span></span><br><span class="line"><span class="comment">// 不能出现什么: 关键字, 保留字</span></span><br><span class="line"><span class="comment">// 提倡什么书写规范: 小驼峰, 支持_连接语法</span></span><br><span class="line">好的 = <span class="string">"真好"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(好的);</span><br></pre></td></tr></table></figure>
<h2 id="四-三种弹出框"><a href="#四-三种弹出框" class="headerlink" title="四.三种弹出框"></a>四.三种弹出框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通弹出框</span></span><br><span class="line"><span class="comment">// alert("你丫真帅!!!");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入框: 以字符串形式接收用户输入内容</span></span><br><span class="line"><span class="comment">// var info = prompt("请输入内容:");</span></span><br><span class="line"><span class="comment">// console.log(info)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确认框: 根据用户选择确认或取消, 得到 true | false 两个布尔结果</span></span><br><span class="line"><span class="comment">// var res = confirm("你是猪吗?");</span></span><br><span class="line"><span class="comment">// console.log(res)</span></span><br></pre></td></tr></table></figure>
<h2 id="五-数据类型"><a href="#五-数据类型" class="headerlink" title="五.数据类型"></a>五.数据类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  <span class="comment">// Number 10</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span>;  <span class="comment">// String abc</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;  <span class="comment">// Boolean true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>  <span class="comment">// undefined undefined</span></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// function f()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;  <span class="comment">// Object &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>  <span class="comment">// Null null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他Object具体体现</span></span><br><span class="line"><span class="built_in">Array</span> | <span class="built_in">Date</span> | <span class="built_in">RegExp</span></span><br></pre></td></tr></table></figure>
<h2 id="六-值类型的类型转换"><a href="#六-值类型的类型转换" class="headerlink" title="六.值类型的类型转换"></a>六.值类型的类型转换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.通过类型声明转换</span></span><br><span class="line"><span class="built_in">Number</span>() | <span class="built_in">String</span>() | <span class="built_in">Boolean</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.方法(函数)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>) | <span class="built_in">parseFloat</span>(<span class="string">'3.14'</span>)</span><br><span class="line"><span class="number">123.</span>.toString()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.隐式转换</span></span><br><span class="line">+<span class="string">'10'</span> =&gt; <span class="number">10</span></span><br><span class="line"><span class="string">''</span> + <span class="number">10</span> =&gt; <span class="string">'10'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（二）</title>
    <url>/2018/12/18/JavaScript%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JS常用类"><a href="#JS常用类" class="headerlink" title="JS常用类"></a>JS常用类</h1><h2 id="一、Number"><a href="#一、Number" class="headerlink" title="一、Number"></a>一、Number</h2><h4 id="1、常用数字"><a href="#1、常用数字" class="headerlink" title="1、常用数字"></a>1、常用数字</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">整数：<span class="number">10</span></span><br><span class="line">小数：<span class="number">3.14</span></span><br><span class="line">科学计数法：<span class="number">1e5</span> | <span class="number">1e-5</span></span><br><span class="line">正负无穷：<span class="literal">Infinity</span> | -<span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>
<h4 id="2、常用进制"><a href="#2、常用进制" class="headerlink" title="2、常用进制"></a>2、常用进制</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">二进制：<span class="number">0b1010</span></span><br><span class="line">八进制：<span class="number">012</span></span><br><span class="line">十进制：<span class="number">10</span></span><br><span class="line">十六进制：<span class="number">0xA</span></span><br></pre></td></tr></table></figure>
<h4 id="3、NaN"><a href="#3、NaN" class="headerlink" title="3、NaN"></a>3、NaN</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">非数字类型，通过<span class="built_in">isNaN</span>()进行判断</span><br></pre></td></tr></table></figure>
<h4 id="4、常用常量"><a href="#4、常用常量" class="headerlink" title="4、常用常量"></a>4、常用常量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">最大值：MAX_VALUE(<span class="number">1.7976931348623157e+308</span>)</span><br><span class="line">最小值：MIN_VALUE(<span class="number">5e-324</span>)</span><br><span class="line">正负无穷：NEGATIVE_INFINITY | POSITIVE_INFINITY(<span class="literal">Infinity</span> | -<span class="literal">Infinity</span>)</span><br></pre></td></tr></table></figure>
<h4 id="5、常用实例方法"><a href="#5、常用实例方法" class="headerlink" title="5、常用实例方法"></a>5、常用实例方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toExponential(n) =&gt; <span class="number">3.14</span>.toExponential(<span class="number">1</span>) =&gt; <span class="number">1.3e+1</span> (先科学记数，再确定精度，n为小数精度)</span><br><span class="line">toFixed(n) =&gt; <span class="number">3.14</span>.toFixed(<span class="number">1</span>) =&gt; <span class="number">3.1</span> (先确定精度，再普通记数，n为小数精度)</span><br><span class="line">toPrecision(n) =&gt; <span class="number">13.14</span>.toPrecision(<span class="number">1</span>|<span class="number">2</span>) =&gt; <span class="number">1e+1</span>|<span class="number">13</span> (先确定精度，再记数，n为位数进度)</span><br><span class="line">toString() =&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-hint：经典bug数字13-145"><a href="#v-hint：经典bug数字13-145" class="headerlink" title="v-hint：经典bug数字13.145"></a>v-hint：经典bug数字13.145</h6><h2 id="二、时间"><a href="#二、时间" class="headerlink" title="二、时间"></a>二、时间</h2><h4 id="1、创建并获取时间"><a href="#1、创建并获取时间" class="headerlink" title="1、创建并获取时间"></a>1、创建并获取时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>
<h4 id="2、时间戳"><a href="#2、时间戳" class="headerlink" title="2、时间戳"></a>2、时间戳</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">date.getTime();</span><br></pre></td></tr></table></figure>
<h4 id="3、获取时间"><a href="#3、获取时间" class="headerlink" title="3、获取时间"></a>3、获取时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">年：date.getFullYear()</span><br><span class="line">月：date.getMonth() + <span class="number">1</span></span><br><span class="line">日：date.getDate()</span><br><span class="line">星期：date.getDay()</span><br><span class="line">小时：date.getHours()</span><br><span class="line">分钟：date.getMinutes()</span><br><span class="line">秒：date.getSeconds()</span><br><span class="line">毫秒：date.getMilliseconds()</span><br></pre></td></tr></table></figure>
<h4 id="4、常见格式时间"><a href="#4、常见格式时间" class="headerlink" title="4、常见格式时间"></a>4、常见格式时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getUTCFullYear()</span><br><span class="line">getUTCDate()</span><br><span class="line">getUTCHours()</span><br></pre></td></tr></table></figure>
<h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><h4 id="1、常用字符串"><a href="#1、常用字符串" class="headerlink" title="1、常用字符串"></a>1、常用字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'string'</span> | <span class="string">"string"</span> | <span class="string">'my name is "zero"'</span> | <span class="string">"I'm boy"</span> | <span class="string">"I \"love\" you"</span></span><br></pre></td></tr></table></figure>
<h4 id="2、常用属性"><a href="#2、常用属性" class="headerlink" title="2、常用属性"></a>2、常用属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">length：字符串长度</span><br></pre></td></tr></table></figure>
<h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chartAt(n)：指定索引字符，同[n]</span><br><span class="line">concat(str)：将目标字符串拼接到指定字符串之后</span><br><span class="line">indexOf(str)：指定字符串第一次出现的位置</span><br><span class="line">lastIndexOf(str)：指定字符串最一次出现的位置</span><br><span class="line">replace(re, str)：将正则匹配到的字符串替换为指定字符串</span><br><span class="line">substr(n, m)：从索引n开始，截取m个字符长度(m省略代表截取到最后)</span><br><span class="line">substring(n, m)：从索引n开始，截取到索引m(m省略代表截取到最后)</span><br><span class="line">slice(n, m)：同substring(n, m)</span><br><span class="line">split(re)：以指定正则将字符串拆分为数组</span><br><span class="line">toUpperCase()：转换为大写</span><br><span class="line">toLowerCase()：转换为小写</span><br><span class="line">trim()：去除首尾空白字符</span><br></pre></td></tr></table></figure>
<h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h4 id="1、常见数组"><a href="#1、常见数组" class="headerlink" title="1、常见数组"></a>1、常见数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] | [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>] | [<span class="number">1</span>, <span class="string">'2'</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure>
<h4 id="2、常用属性-1"><a href="#2、常用属性-1" class="headerlink" title="2、常用属性"></a>2、常用属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">length：数组元素个数</span><br></pre></td></tr></table></figure>
<h4 id="3、常用基础方法"><a href="#3、常用基础方法" class="headerlink" title="3、常用基础方法"></a>3、常用基础方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">concat(arr)：将目标数组拼接到指定数组之后</span><br><span class="line">indexOf(ele)：指定元素第一次出现的位置</span><br><span class="line">lastIndexOf(ele)：指定元素最一次出现的位置</span><br><span class="line">reverse()：反转数组</span><br><span class="line">includes(ele, n)：从索引n开始往后，元素ele是否在数组中，做全等匹配，索引从头开始n可以省略(<span class="keyword">in</span>只做值匹配)</span><br><span class="line">fill(ele)：以指定元素填充整个数组</span><br><span class="line">slice(n, m)：从索引n开始，截取到索引m(m省略代表截取到最后)</span><br><span class="line">join(str)：以指定字符串连接成字符串</span><br></pre></td></tr></table></figure>
<h4 id="4、增删改方法"><a href="#4、增删改方法" class="headerlink" title="4、增删改方法"></a>4、增删改方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">push(ele)：从尾加</span><br><span class="line">unshift(ele)：从头加</span><br><span class="line"></span><br><span class="line">pop()：从尾删</span><br><span class="line">shift()：从头删</span><br><span class="line"></span><br><span class="line">splice(begin, length, ...eles)：完成增删改</span><br><span class="line"><span class="comment">// begin开始索引</span></span><br><span class="line"><span class="comment">// length长度</span></span><br><span class="line"><span class="comment">// 新元素们(可以省略)</span></span><br></pre></td></tr></table></figure>
<h4 id="5、回调函数方法"><a href="#5、回调函数方法" class="headerlink" title="5、回调函数方法"></a>5、回调函数方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span> | <span class="literal">false</span>&#125;)：过滤器</span><br><span class="line">every(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123; <span class="keyword">return</span> 条件表达式; &#125;)：全部满足条件</span><br><span class="line">some(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123; <span class="keyword">return</span> 条件表达式; &#125;)：部分满足条件</span><br><span class="line">reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,value,index</span>)</span>&#123; <span class="keyword">return</span> prev * value; &#125;)：累积</span><br><span class="line">sort(<span class="function"><span class="keyword">function</span>(<span class="params">o, n</span>)</span>&#123; <span class="keyword">return</span> o &gt; n &#125;)：正逆向排序</span><br></pre></td></tr></table></figure>
<h2 id="五、Math"><a href="#五、Math" class="headerlink" title="五、Math"></a>五、Math</h2><h4 id="1、常用常量"><a href="#1、常用常量" class="headerlink" title="1、常用常量"></a>1、常用常量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">E：返回算术常量 e，即自然对数的底数（约等于<span class="number">2.718</span>）</span><br><span class="line">LN2：返回 <span class="number">2</span> 的自然对数（约等于<span class="number">0.693</span>）</span><br><span class="line">LN10：返回 <span class="number">10</span> 的自然对数（约等于<span class="number">2.302</span>）</span><br><span class="line">LOG2E：返回以 <span class="number">2</span> 为底的 e 的对数（约等于 <span class="number">1.4426950408889634</span>）</span><br><span class="line">LOG10E：返回以 <span class="number">10</span> 为底的 e 的对数（约等于<span class="number">0.434</span>）</span><br><span class="line">PI：返回圆周率（约等于<span class="number">3.14159</span>）</span><br></pre></td></tr></table></figure>
<h4 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abs(x)：返回 x 的绝对值</span><br><span class="line">ceil(x)：向上取整</span><br><span class="line">floor(x)：向下取整</span><br><span class="line">max(...n)：求最大值</span><br><span class="line">min(...n)：求最小值</span><br><span class="line">pow(x,y)：返回 x 的 y 次幂</span><br><span class="line">random()：返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数</span><br><span class="line">round(x)：四舍五入</span><br></pre></td></tr></table></figure>
<h2 id="六、正则"><a href="#六、正则" class="headerlink" title="六、正则"></a>六、正则</h2><h4 id="1、正则对象"><a href="#1、正则对象" class="headerlink" title="1、正则对象"></a>1、正则对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^\\w'</span>, <span class="string">'igm'</span>);</span><br><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^\w/igm</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2、修饰符"><a href="#2、修饰符" class="headerlink" title="2、修饰符"></a>2、修饰符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i：不区分大小写</span><br><span class="line">g：全文匹配</span><br><span class="line">m：多行匹配</span><br></pre></td></tr></table></figure>
<h4 id="3、正则方法"><a href="#3、正则方法" class="headerlink" title="3、正则方法"></a>3、正则方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test()：匹配目标字符串，结果为<span class="literal">true</span>|<span class="literal">false</span></span><br><span class="line">exec()：匹配目标字符串，结果为第一条结果所有信息的数组</span><br></pre></td></tr></table></figure>
<h4 id="4、字符串方法"><a href="#4、字符串方法" class="headerlink" title="4、字符串方法"></a>4、字符串方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">match(re)：匹配指定正则，结果为数组(可全文匹配)</span><br><span class="line">search(re)：匹配指定正则，结果为匹配的索引，反之<span class="number">-1</span></span><br><span class="line">replace(re, newStr)：匹配指定正则，替换匹配的结果(可全文匹配)</span><br><span class="line">split(re, n)：按正则进行拆分，n的值可以决定结果的数组长度(可选参数)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（七）</title>
    <url>/2018/12/30/JavaScript%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客（七）"><a href="#JavaScript-系列博客（七）" class="headerlink" title="JavaScript 系列博客（七）"></a>JavaScript 系列博客（七）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 js 操作高级，通过 js 获取标签的全局属性、设置标签的全局属性，以及事件的绑定与取消、js 盒模型与 js 动画。</p>
<h2 id="对象使用的高级"><a href="#对象使用的高级" class="headerlink" title="对象使用的高级"></a>对象使用的高级</h2><ul>
<li>对象的key为字符串类型, value为任意类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"name"</span>,</span><br><span class="line">    <span class="string">"person-age"</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">obj.name | obj[<span class="string">"name"</span>]</span><br><span class="line">obj[<span class="string">"person-age"</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>对象的属性可以任意添加与删除</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   	name: <span class="string">"obj"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">obj.age = <span class="number">18</span>  <span class="comment">// 如果age的key已存在就是修改值, 不存在就是添加键值对, 添加的key任意</span></span><br><span class="line"><span class="comment">// 注: 获取的页面元素(标签对象)也可以任意添加/删除属性</span></span><br></pre></td></tr></table></figure>
<h2 id="页面标签全局属性操作"><a href="#页面标签全局属性操作" class="headerlink" title="页面标签全局属性操作"></a>页面标签全局属性操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.getAttribute(<span class="string">"alert"</span>);</span><br><span class="line"><span class="comment">// 获取页面标签ele的alert全局属性的值, 如果没有该全局属性值为null</span></span><br><span class="line"></span><br><span class="line">ele.setAttribute(<span class="string">"attr_key"</span>, <span class="string">"attr_value"</span>);</span><br><span class="line"><span class="comment">// 页面标签ele已有该全局属性,就是修改值, 没有就是添加该全局属性并赋相应值</span></span><br><span class="line"><span class="comment">// 注: 一般应用场景, 结合css的属性选择器完成样式修改</span></span><br></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>事件的绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 只能绑定一个实现体, 如果有多次绑定, 保留最后一次</span></span><br><span class="line"><span class="comment">// box.onclick = null来取消事件的绑定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>, fn)</span><br><span class="line"><span class="comment">// 能绑定多个实现体, 如果有多次绑定, 按顺序依次执行</span></span><br><span class="line"><span class="comment">// box.removerEventListener('click', fn)来取消事件的绑定</span></span><br><span class="line"><span class="comment">// 了解: 第三个参数决定冒泡顺序(子父级谁先相应事件)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>事件对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统回调事件函数时, 传递了一个 事件(event) 实参</span></span><br><span class="line"><span class="comment">// 如果要使用传递来的实参 事件(event), 定义接收的 形参 即可</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用事件对象</span></span><br><span class="line">    <span class="comment">// 特殊按键 eg: ev.altKey: true | false</span></span><br><span class="line">    <span class="comment">// 鼠标触发点: ev.clientX | ev.clientY</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消冒泡</span></span><br><span class="line">    ev.cancelBubber = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消默认事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件总结"><a href="#事件总结" class="headerlink" title="事件总结"></a>事件总结</h2><ul>
<li>鼠标事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"><span class="comment">// 1. 点击事件</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"单击"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2. 双击事件(应用场景不广)</span></span><br><span class="line">box.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"双击"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 鼠标右键</span></span><br><span class="line">box.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"右键了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4. 鼠标悬浮 | 移动 | 按下 | 抬起 | 离开</span></span><br><span class="line">box.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"悬浮"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"移动"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按下"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"抬起"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"离开"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// over | out   VS   enter | leave</span></span><br><span class="line"><span class="comment">// 总结:</span></span><br><span class="line"><span class="comment">// 1. 将子级与父级分开考虑, 大家都有各自的悬浮离开事件, 采用 over | out 组合</span></span><br><span class="line"><span class="comment">// 2. 将子级纳入父级考虑范围, 也就是只有父级去相应悬浮离开事件, 采用 enter | leave 组合</span></span><br><span class="line"><span class="comment">// 3. 单独考虑一个盒子的悬浮离开事件, 两套均可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性</span></span><br><span class="line"><span class="comment">// 从父级移至子级, 会触发out事件, 紧接着触发子级的over事件, 并可以冒泡给父级</span></span><br><span class="line"><span class="comment">// 从父级移至子级, leave事件并不会触发, 它认为子级是属于父级的一部分, enter事件, 也不会再次触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 悬浮子级:</span></span><br><span class="line"><span class="comment">// sub over =&gt; sup over  支持冒泡</span></span><br><span class="line"><span class="comment">// sup enter =&gt; sub enter  不支持冒泡</span></span><br></pre></td></tr></table></figure>
<ul>
<li>键盘事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// onkeydown: 键盘按下会触发, 长按会持续触发</span></span><br><span class="line"><span class="comment">// onkeyup: 键盘抬起会触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ev.keyCode: 按下的键盘键的标号</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// window.onload: 页面加载完毕触发</span></span><br><span class="line"><span class="comment">// window.onscroll | document.onscroll =&gt; window.scrollY(页面下滚距离): 页面滚动触发</span></span><br></pre></td></tr></table></figure>
<h2 id="js盒模型"><a href="#js盒模型" class="headerlink" title="js盒模型"></a>js盒模型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// content: 通过计算后样式获取</span></span><br><span class="line"><span class="comment">// padding + content: box.clientWidth | box.clientHeight</span></span><br><span class="line"><span class="comment">// border + padding + content: box.offsetWidth | box.offsetHeight</span></span><br><span class="line"><span class="comment">// 绝对定位top|left: box.offsetTop | box.offsetLeft</span></span><br></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li>定时器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一次性定时器</span></span><br><span class="line"><span class="keyword">var</span> timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;&#125;, <span class="number">1000</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续性定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;&#125;, <span class="number">1000</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="comment">// clearTimeout | clearInterval</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结论:</span></span><br><span class="line"><span class="comment">// 1. 定时器不会立即执行</span></span><br><span class="line"><span class="comment">// 2. 一次性定时器只执行一次, 持续性定时器不做清除的话会一直执行</span></span><br><span class="line"><span class="comment">// 3. 声明定时器第一个参数为逻辑函数地址, 第二个参数为事件间隔, 第三个为逻辑函数所需参数(可以为多个,一般省略)</span></span><br><span class="line"><span class="comment">// 4. 清除定时器可以混用, 本质就是清除创建定时器时的数字标号, 该编号就是创建定时器时的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小技巧: 如果页面中有n个定时器</span></span><br><span class="line"><span class="keyword">var</span> n = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    clearInterval(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（五）</title>
    <url>/2018/12/21/JavaScript%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客之（五）"><a href="#JavaScript-系列博客之（五）" class="headerlink" title="JavaScript 系列博客之（五）"></a>JavaScript 系列博客之（五）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇介绍 JavaScript 中的对象。在第一篇博客中已经说到 JavaScript 是一种‘’对象模型‘’语言。所以可以这样说，对象是 JavaScript 语言的核心概念，也是最重要的数据类型。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h3><p>在 JavaScript 中声称对象相当方便，直接定义一个空字典就 ok。想要添加属性或者方法的话可以在定义结束之后动态添加。注意：对象时无序的复合数据集合。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fyfcvs0449j30va0h4423.jpg" alt></p>
<p>上面代码中，大括号就可以直接定义一个对象，被赋值给变量 a，所以 a 就指向一个对象。该对象为一个空对象，但是会有一些默认的方法，像 constructor 是构造方法，想要动态的添加属性和方法就是这个方法的功劳。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyfd3zdllbj30vk06wgm4.jpg" alt></p>
<p>在这里添加了一个属性为name，那么 name 是键名（成员名称），字符串 musibii 是键值（成员的值）。键名与键值之间用冒号分隔。如果再添加一个属性，那么属性之间使用逗号分隔。</p>
<h3 id="具体生成方法"><a href="#具体生成方法" class="headerlink" title="具体生成方法"></a>具体生成方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.单一对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    name: <span class="string">'Zero'</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    teach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"教学"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.name | obj.teach()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;  <span class="comment">// 类似于python中的类一样来使用</span></span><br><span class="line">   	<span class="comment">// this代表Person构造函数实例化出的所有具体对象中的某一个</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;  </span><br><span class="line">    <span class="keyword">this</span>.teach = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"正在教学"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ①通过构造函数实例化出具体对象</span></span><br><span class="line"><span class="comment">// ②通过对象.语法调用属性与方法</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>); </span><br><span class="line">p1.name  <span class="comment">// 张三, this指向p1对象</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>); </span><br><span class="line">p2.teach  <span class="comment">// 李四正在教学, this指向p2对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.ES6类语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要构造器(构造函数)来完成对象的声明与初始化</span></span><br><span class="line">    <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">        <span class="comment">// 属性在构造器中声明并完成初始化</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类中规定普通方法</span></span><br><span class="line">    study () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"正在学习"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="keyword">static</span> fn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是类方法"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类中的普通方法由类的具体实例化对象来调用</span></span><br><span class="line"><span class="comment">// 类中的类方法由类直接来调用(这类型的方法大多是功能性方法,不需要对象的存在)</span></span><br></pre></td></tr></table></figure>
<h3 id="键名"><a href="#键名" class="headerlink" title="键名"></a>键名</h3><p>对象的所有键名都是字符串（ES6又引入了 Symbol 值也可以作为键名：还没了解过），所以加不加引号都可以。如果键名是数值，会被自动转为字符串。如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>
<p>对象的每一个键名又称为‘’属性‘’，它的键值可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为方法，调用方法和函数一样。</p>
<p>特别的如果属性的值指向的还是一个对象，那么就行成了链式引用。对象的属性之间用逗号分隔，最后一个属性后面可以加逗号，也可以不加。</p>
<h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有的引用。和 JavaScript 中的基本数据类型不一样，复合数据类型是传址传递。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyfdjga2xdj30vm0e8q4l.jpg" alt></p>
<p>a 和 b指向同一个对象，因此为其中任何一个变量添加属性，另一个变脸都可以读写该属性。如果取消某一个对象的引用，不会影响到其他变量。</p>
<p>这种引用只局限于对象，在之前的博客也提到，两个变量指向同一个原始类型（基本数据类型）的值，那么变量只是对值得拷贝（传值传递）。</p>
<h2 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h2><h3 id="属性的读取"><a href="#属性的读取" class="headerlink" title="属性的读取"></a>属性的读取</h3><p>读取对象的属性，有两种方法，一种是使用点运算符；另一种是使用方括号运算符。（在 python 中，字典只能通过方括号取值；对象只可以通过点运算符取值。不过可以通过自定义字典类改写 getattr 魔术方法改变。）</p>
<p>注意：如果使用方括号运算符，键名必须放在引号里面，否则会被当做变量处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo <span class="comment">// 1</span></span><br><span class="line">obj[foo]<span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，引用对象obj 的 foo 属性时，如果使用点运算符，foo 就是字符串；如果使用方括号运算符，但是不使用引号，那么 foo 就是一个变量，指向字符串 bar。</p>
<p>方括号运算符内部还可以使用表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">'hello'</span> + <span class="string">'world'</span>]</span><br><span class="line">obj[<span class="number">3</span> + <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>数字键可以不加引号，因为会自动转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="number">0.7</span>: <span class="string">'hello world'</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="string">'0.7'</span>] <span class="comment">// 'Hello World'</span></span><br><span class="line">obj[<span class="number">0.7</span>] <span class="comment">// 'Hello World'</span></span><br></pre></td></tr></table></figure>
<p> 上面代码对象的数字键0.7加不加引号都可以，因为会自动转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="number">123</span>: <span class="string">'Hello musibii'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj<span class="number">.123</span> <span class="comment">// 报错</span></span><br><span class="line">obj[<span class="number">123</span>] <span class="comment">// 'Hello musibii'</span></span><br></pre></td></tr></table></figure>
<p>如果对数值键名123使用点运算符，会报错，使用方括号运算符才是正确的方式。</p>
<h3 id="属性的赋值"><a href="#属性的赋值" class="headerlink" title="属性的赋值"></a>属性的赋值</h3><p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。</p>
<p>JavaScript 允许属性的后绑定，也就是说可以在任意时刻新增属性，没必要在定义对象的时候就把属性全都定义好。</p>
<h3 id="属性的查看"><a href="#属性的查看" class="headerlink" title="属性的查看"></a>属性的查看</h3><p>查看一个对象的所有属性使用 Object.keys 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    key1: <span class="number">1</span>,</span><br><span class="line">    key2: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// [key1, key2]</span></span><br></pre></td></tr></table></figure>
<h3 id="属性的删除"><a href="#属性的删除" class="headerlink" title="属性的删除"></a>属性的删除</h3><p>delete 命令用于删除对象的属性，删除成功后返回 true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    p: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.p; <span class="comment">// true</span></span><br><span class="line">obj.p <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，delete 命令删除对象 obj 的 p 属性。删除后，再读取 p 属性就会返回 undefined，而且 Object.keys 方法的返回值也不再包括该属性。</p>
<p>注意：删除一个不存在的属性，delete 不会报错而是返回 true。因此不能根据 delete 命令的结果认为某个属性的存在。（那么到底哪种方式才可以证明某个属性的存在与否）</p>
<p>如果删除属性时返回 false那就说明该属性存在，但是不可以删除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'p'</span>, &#123;</span><br><span class="line">    value: <span class="string">'musibii'</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.p <span class="comment">// 'musibii'</span></span><br><span class="line"><span class="keyword">delete</span> obj.p <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，通过 Object 的defineProperty方法给对象 obj创建了一个属性，属性的configurable（可配置） 的值为 false，这样的一个属性就是不可以删除的。</p>
<p>另外需要注意的是，delete 命令只能删除对象本身的属性，无法删除继承的属性。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyfl6k5uovj30u00wiq9q.jpg" alt></p>
<p>可以看出虽然 delete 命令返回 true，但是删除的属性依然存在。但是如果通过 proto 删除的话就可以删除。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyfl7y0fj7j30vq0gaq6f.jpg" alt></p>
<h3 id="判断属性的存在"><a href="#判断属性的存在" class="headerlink" title="判断属性的存在"></a>判断属性的存在</h3><p>in 运算符用于检出对象是否包含某个属性（注意，检查的是键名，不是键值）。如果包含就返回 true，否则就返回 false。它的左边是一个字符串，表示属性名，右边则是一个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">p</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="string">'p'</span> <span class="keyword">in</span> obj <span class="comment">//true</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>拿上面删除的 constructor 来说：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyflaz87z3j30vo040dg2.jpg" alt></p>
<p>in 运算符的一个问题是，它不能识别哪些属性时对象自身的，哪些属性是继承的。就像上面，对象 obj 本身并没有 toString 属性，但是 in 运算符会返回 true，因为这个属性是继承的。</p>
<p>这时可以通过对象的 hasOwnProperty 方法判断，是否为对象自身属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'toString'</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// fasle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性遍历"><a href="#属性遍历" class="headerlink" title="属性遍历"></a>属性遍历</h3><p>for…in 循环用来遍历一个对象的所有属性。</p>
<p>for…in 循环有两个注意点;</p>
<ul>
<li>它遍历的是对象所有<strong>可遍历</strong>的属性，会跳过不可遍历的属性；</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>
<p>如果继承的属性是可遍历的，那么就会被 for…in 循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用 for…in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'老张'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="keyword">if</span> (person.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// name</span></span><br></pre></td></tr></table></figure>
<h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>with 语句的格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (对象) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>
<p>注意：如果 with 区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    p1 = <span class="number">4</span>,</span><br><span class="line">    p2 = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.p1 <span class="comment">// undefined</span></span><br><span class="line">p1 <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，对象 obj 并没有 p1属性，对 p1赋值等于创造了一个全局变量 p1.正确的写法应该是，先定义对象 obj 的属性 p1，然后在 with 区块内操作它。</p>
<p>这是因为 with 区块没有改变作用域，它的内部依然是当前作用域。这造成了with 语句的一个很大的弊病，就是绑定对象不明确。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单纯从上面的代码块，根本无法判断 x 到底是全局变量，还是对象 obj 的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用 with 语句，可以考虑用一个临时变量代替 with。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (obj1.obj2.obj3) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p1 + p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以写为</span></span><br><span class="line"><span class="keyword">var</span> temp = obj1.obj2.obj3;</span><br><span class="line"><span class="built_in">console</span>.log(temp.p1 + temp.p2);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript（八）</title>
    <url>/2018/12/30/JavaScript%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客（八）"><a href="#JavaScript-系列博客（八）" class="headerlink" title="JavaScript 系列博客（八）"></a>JavaScript 系列博客（八）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍页面节点概念、文档结构以及如何使用 js 操作文档节点还有事件 target 以及 BOM 操作。</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ul>
<li>dom与dom属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM: 文档对象模型 =&gt; 提高给用户操作document obj的标准接口</span></span><br><span class="line"><span class="comment">// DOM树: 以document为根, 树状展开所有子节点</span></span><br></pre></td></tr></table></figure>
<ul>
<li>节点分类</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点分类: 6个</span></span><br><span class="line"><span class="comment">// document | doctype | element | text | attr | comment</span></span><br></pre></td></tr></table></figure>
<ul>
<li>节点常规操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info_node = <span class="built_in">document</span>.createAttribute(<span class="string">"info"</span>); <span class="comment">// 创建</span></span><br><span class="line"><span class="built_in">console</span>.log(info_node.nodeName);</span><br><span class="line"><span class="built_in">console</span>.log(info_node.nodeType);</span><br><span class="line">info_node.value = <span class="string">'123'</span>; <span class="comment">// 设置</span></span><br><span class="line"><span class="built_in">console</span>.log(info_node.nodeValue);</span><br><span class="line">sup1.setAttributeNode(info_node); <span class="comment">// 添加</span></span><br></pre></td></tr></table></figure>
<h2 id="文档结构-element元素范围"><a href="#文档结构-element元素范围" class="headerlink" title="文档结构(element元素范围)"></a>文档结构(element元素范围)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父级</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.parentElement)</span><br><span class="line"><span class="comment">// 子级们</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.children);</span><br><span class="line"><span class="comment">// 第一个子级</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.firstElementChild);</span><br><span class="line"><span class="comment">// 最后一个子级</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.lastElementChild);</span><br><span class="line"><span class="comment">// 上兄弟</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.previousElementSibling);</span><br><span class="line"><span class="comment">// 下兄弟</span></span><br><span class="line"><span class="built_in">console</span>.log(sup.nextElementSibling);</span><br><span class="line"><span class="comment">// 注: 文档结构操作是可以采用连.语法</span></span><br><span class="line"><span class="comment">// sup.children[0].parentElement  // 自己</span></span><br></pre></td></tr></table></figure>
<h2 id="文档元素节点操作"><a href="#文档元素节点操作" class="headerlink" title="文档元素节点操作"></a>文档元素节点操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作步骤</span></span><br><span class="line"><span class="comment">// 1. 创建div(元素节点)</span></span><br><span class="line"><span class="comment">// 2. 设置div属性(单一css | css类名 | 文本 | 子标签 | 事件 | ...)</span></span><br><span class="line"><span class="comment">// 3. 添加到(文档结构中)指定位置</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建:只能由document调用</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="comment">// 在body元素的最后追加一个子元素</span></span><br><span class="line">body.appendChild(box);</span><br><span class="line"><span class="comment">// 在body元素oldEle之前插入一个子元素</span></span><br><span class="line">body.insertBefore(box, oldEle);</span><br><span class="line"><span class="comment">// 从body中删除box元素,可以接受返回值,就是删除的元素</span></span><br><span class="line"><span class="keyword">var</span> res = body.removeChild(div);</span><br><span class="line"><span class="comment">// 将body中oldEle元素替换为box,可以接受返回值,就是被替换的元素</span></span><br><span class="line">res = bodyreplaceChild(box, oldEle);</span><br><span class="line"><span class="comment">// true深拷贝,拷贝自身与内容, false浅拷贝,只拷贝自身标签</span></span><br><span class="line">box.cloneNode()</span><br></pre></td></tr></table></figure>
<h2 id="事件对象target属性"><a href="#事件对象target属性" class="headerlink" title="事件对象target属性"></a>事件对象target属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ev.target通过父级的事件对象,获取具体相应区域位置的子级元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用场景</span></span><br><span class="line"><span class="comment">// 1. 父级的子元素类型不同一,采用循环绑定不方便</span></span><br><span class="line"><span class="comment">// 2. 父级子元素较多或不确定</span></span><br></pre></td></tr></table></figure>
<h2 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BOM: Browser Object Model, 提供用户与浏览器交互的标准接口</span></span><br><span class="line"><span class="comment">// BOM的顶级对象为window对象, 页面中出现的其实所有对象都是window的子对象</span></span><br><span class="line"><span class="comment">// 重要的子对象</span></span><br><span class="line"><span class="comment">// document | history | location | navigator | screen</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// location =&gt; url信息</span></span><br><span class="line"><span class="built_in">console</span>.log(location);</span><br><span class="line"><span class="comment">// 域名:端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host);</span><br><span class="line"><span class="comment">// 域名</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hostname);</span><br><span class="line"><span class="comment">// 端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(location.port);</span><br><span class="line"><span class="comment">// 查询信息</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// history</span></span><br><span class="line">history.back() | history.forward() | history.go(-num | num)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// navigator</span></span><br><span class="line"><span class="built_in">console</span>.log(navigator.userAgent)</span><br><span class="line"><span class="comment">// Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaStript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（三）</title>
    <url>/2018/12/18/JavaScript%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客（三）"><a href="#JavaScript-系列博客（三）" class="headerlink" title="JavaScript 系列博客（三）"></a>JavaScript 系列博客（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 js 中的运算符、条件语句、循环语句以及数组。</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>算术运算符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// + | - | * | / | % | ++ | --</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span> / <span class="number">2</span>);  <span class="comment">// 2.5</span></span><br><span class="line">    <span class="comment">// 取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%d'</span>, <span class="number">5</span> / <span class="number">2</span>); <span class="comment">// "2"</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="number">5</span> / <span class="number">2</span>);  <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取模(求余)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span> % <span class="number">2</span>);  <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 任何一个自然数对 n 取余, 结果为 [0, n-1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自增|自减 ++|--</span></span><br><span class="line">    <span class="comment">// ++就是自增1, --就是自减1</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num++);  <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(++num);  <span class="comment">// 12</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);  <span class="comment">// 12</span></span><br><span class="line">    <span class="comment">// ++在变量后(num++), 先将变量的值拿去使用,再自身自增1</span></span><br><span class="line">    <span class="comment">// ++再变量前(++num), 先将变量自身自增1, 再将结果拿去使用</span></span><br><span class="line">    <span class="comment">// 总结: 不管++在前在后,运算结束后,变量自身值一定自增1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res = ++num  &lt;==&gt;  num++; res = num</span></span><br><span class="line">    <span class="comment">// res = num++  &lt;==&gt;  res = num; ++num</span></span><br></pre></td></tr></table></figure>
<ul>
<li>赋值运算符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// = | += | -= | *= | /= | %=</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span>;  <span class="comment">// 将10的值赋值给变量x</span></span><br><span class="line">    y = x;  <span class="comment">// 将变量x的值传递给变量y</span></span><br><span class="line">    <span class="built_in">console</span>.log(y);  <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    x += <span class="number">10</span>;  <span class="comment">// x = x + 10, 运算方式由右至左, 将x+10的结果重新复制给x</span></span><br><span class="line">    <span class="built_in">console</span>.log(y);  <span class="comment">// 10, y的值虽然来源于x, 但y值只由自身控制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// x /= 10  == x = x / 10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>比较运算符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较运算符, 结果为Boolean类型</span></span><br><span class="line">    <span class="comment">// == | ===</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span> == <span class="number">5</span>);  <span class="comment">// true, 只做值比较</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span> === <span class="number">5</span>);  <span class="comment">// false, 比较值及类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// != | !==</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span> != <span class="number">5</span>);  <span class="comment">// false, 只做值比较</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span> !== <span class="number">5</span>);  <span class="comment">// true, 比较值及类型</span></span><br></pre></td></tr></table></figure>
<ul>
<li>逻辑运算符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 总结&amp;&amp;: 全真为真, 有假则假</span></span><br><span class="line">    <span class="comment">// 总结||: 全假则假, 有真则真</span></span><br><span class="line">    <span class="comment">// 总结!: 真则假, 假则真</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑运算符的结果本质上为表达式值</span></span><br><span class="line">    <span class="comment">// 表达式: 由数字,变量,运算符组成的合法式子</span></span><br><span class="line">    res = a &lt; b &amp;&amp; c;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    res = (a = <span class="number">1</span> || b == c);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对 &amp;&amp; | ||</span></span><br><span class="line">    <span class="comment">// 疑问: 逻辑运算符结果可能为逻辑运算符之前表达式的值,也可能是之后表达式的值</span></span><br></pre></td></tr></table></figure>
<p><strong>针对逻辑运算符，会出现短路现象。当运算符为&amp;&amp;时，如果第一个表达式的结果为假，那么第二个表达式就不会执行；同理，||当第一个表达式的结果为真时，第二个表达式就不会执行（python 在逻辑判断也会出现短路现象）</strong></p>
<ul>
<li>三目运算符（等同于 python 中的三元表达式）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法:  条件表达式 ? 表达式1 : 表达式2</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> res = a &lt; b ? a : b;  <span class="comment">// 取小值</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    res = a &lt; b ? b : a;  <span class="comment">// 取大值</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似于if...esle...</span></span><br><span class="line">    a &lt; b ? <span class="built_in">console</span>.log(<span class="string">"表达式结果为true"</span>) : <span class="built_in">console</span>.log(<span class="string">"表达式结果为false"</span>)</span><br></pre></td></tr></table></figure>
<p>三目表达式可以看做 if…else 的简写形式。</p>
<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p>根据执行方式程序可以分为三大结构：顺序结构、分支结构、循环结构。其实只有一种结构就是顺序结构，像分支结构本质还是顺序执行的，只不过选择多了；而循环结构也是一样的道理。</p>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h4><p><strong>if</strong>结构首先判断后面表达式的布尔值，然后决定是否执行后面的代码。布尔值只有两个，true 为真，false 为假。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">	语句; &#125;;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;语句&#125;;</span><br></pre></td></tr></table></figure>
<p>上面是 if 结构的基本形式。需要注意的是，‘’布尔值‘’往往是由一个条件表达式产生的，必须放在圆括号中，表达对该表达式求值。如果表达式的结果为 true，就执行后面的代码语句；如果为 false，则跳过后面的语句。</p>
<h3 id="if…else-结构"><a href="#if…else-结构" class="headerlink" title="if…else 结构"></a>if…else 结构</h3><p>跟 python 一样，if 后面也可以跟 else 代码块，表示不满足条件时，要执行的代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//表达式结构为真时，执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 表达是结构为假时，执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要对于一个表达式进行多次判断时，多个 if…else 语句可以连到一起。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">4</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;表达式<span class="number">5</span>&#125; &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;表达式<span class="number">6</span>&#125; &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// 注意：else 代码块总是与离自己最近的那个 if 语句配对</span></span><br></pre></td></tr></table></figure>
<h4 id="switch-分支"><a href="#switch-分支" class="headerlink" title="switch 分支"></a>switch 分支</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">switch</span> (结果为整数|字符串的表达式) &#123;</span><br><span class="line">            <span class="keyword">case</span> 值<span class="number">1</span>(值需要和表达式进行类型统一): 代码块; <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">case</span> 值n: 代码块; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: 代码块;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 需要注意的是，switch 语句后面的表达是，与 case 语句后面的表达是比较运行结果时，采用的是严格相等运算符(===)，而不是相等运算符(==)，这意味着比较时不会发生类型转换。</span></span><br><span class="line"><span class="comment">// break作用是结束分支结构(结束所属switch语句)，可以省略。</span></span><br></pre></td></tr></table></figure>
<h4 id="default-分支"><a href="#default-分支" class="headerlink" title="default 分支"></a>default 分支</h4><p>default分支，出现在所有case之下，当所有case没有匹配上，走该分支,该分支也可以省略，代表没有未匹配到的动作。</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句用于重复执行某个操作，直到条件不满足跳出循环。</p>
<h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>while 循环包括一个循环条件和一段代码块，只要条件为真，就会不断执行代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while语句的循环条件为一个条件表达式，必须放在圆括号中，表示需要先计算表达式的结果才能进行是否进行循环。代码块部分，如果只有一条语句，可以省略大括号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i 为：'</span> + i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会循环100次，直到i 等于100。</p>
<h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for 循环是循环结构的另一种形式，可以指定循环的起点、终点和终止条件。格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (循环变量定义并初始化①; 循环变量条件表达式②; 循环变量增量③) &#123;</span></span><br><span class="line"><span class="comment">        代码块④;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    执行顺序 ① ②④③ ... ②④③ ②, ②④③个数就是循环次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我最棒, 我最帅, 我是天下第一!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上段代码圆括号里面有三个表达式：</p>
<ul>
<li>表达式①（initialize）：确定循环变量的初始值，只在循环开始时执行一次。</li>
<li>表达式②（test）：每轮循环开始时，都需要执行判断，只有判断为真时，才会继续循环。</li>
<li>表达式③（increment）：每轮循环的最后一个操作，通常用来递增循环变量。</li>
</ul>
<p><strong>所有 for 循环，都可以用 while 循环实现。</strong></p>
<p>for 循环里面的三个表达式可以省略其中任何一个，也可以全部省略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ; ; ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello MUSIBII!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码省略了 for 表达式的三个部分，结果就导致了一个无限循环。</p>
<h4 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h4><p>do…while 循环和 for 循环类似，唯一区别就是 do 循环不管条件满不满足都会执行一次循环，之后进行第二次循环才会进行判断条件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">while</span> (条件表达式);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    代码</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>
<p>不管条件是否为真，do…while 循环至少需要运行一次，这是和while 循环的本质区别。另外 while 语句后面的分号不要省略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    y++;</span><br><span class="line">&#125; <span class="keyword">while</span>(y &lt; x);</span><br></pre></td></tr></table></figure>
<h4 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h4><p>只要有循环就少不了 break 和 continue，这两个关键词都具有跳转作用，可以控制代码的执行顺序。</p>
<ul>
<li>break 语句用于跳出循环体</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i 为：'</span> +i);</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 i 等于10时，if 表达式判断为真，执行 break 跳出循环体</p>
<ul>
<li>continue 语句用于立即终止本轮循环，进入下次循环。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i 为：'</span> +i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码只有 i 为奇数时，才会输出 i 的值。如果 i 为偶数，则直接进入下一轮循环。如果存在多重循环，不带参数的 break 语句和 continue 语句都只针对本层循环。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>数组（Array）是按照次序排列的一组值。每个值得索引从0开始，数组使用中括号表示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>这样，array 就构成一个数组，两端的方括号是数组的标志。’a’ 是0号位置，3是5号位置。</p>
<p>除了在定义时赋值，数组也可以先定义后赋值。（通过构造函数（constructor））</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line">array[<span class="number">0</span>] = <span class="string">'hello'</span>;</span><br><span class="line">array[<span class="number">1</span>] = <span class="string">'world'</span>;</span><br></pre></td></tr></table></figure>
<p>任何类型的数据，都可以放入数组（类比 python 的列表）。</p>
<p>特别的，如果数组的元素还是数组，则形成了多维数组。</p>
<h3 id="数组的本质"><a href="#数组的本质" class="headerlink" title="数组的本质"></a>数组的本质</h3><p>本质上，数组是对象类型的一种，typeof 运算符会返回数组的类型为 object。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]) <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<p>这表明，数组类型为对象。数组的特殊性体现在，它的键名是按次序排列的一组整数（从0开始）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(array) <span class="comment">// ['0', '1', '2']</span></span><br></pre></td></tr></table></figure>
<p>通过 Object 的 keys 方法可以返回指定数组的所有键名。</p>
<p>由于数组成员的键名是固定的，因此数组不用为每个元素指定键名，而对象的每个成员都必须指定键名。JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值取值，是因为非字符串的键名会被转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">array[<span class="number">0</span>]; <span class="comment">// 'a'</span></span><br><span class="line">array[<span class="string">'0'</span>]; <span class="comment">// 'a'</span></span><br></pre></td></tr></table></figure>
<p>这点在赋值时也会成立（js 的数据类型转换需要注意），一个值总是先转成字符串，再进行赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a[<span class="number">1.00</span>] = <span class="string">'c'</span>;</span><br><span class="line">a[<span class="number">1</span>]; <span class="comment">// 'c'</span></span><br></pre></td></tr></table></figure>
<p>赋值时，先把1.00转为字符串1，赋值结束后可以通过数字键1取值。</p>
<h3 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h3><p>数组的 length 属性返回数组的成员数量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.length <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 使用一个32位整数，保存数组的元素个数。这意味着，数组成员最多只用（2^32 - 1）个，也就是说 length 属性的最大值就是4294967295。</p>
<p>只要是数组就一定有 length 属性。该属性是一个动态的值（因为可以动态赋值）。数组的数字键不需要连续，length 属性的值总是比最大的那个整数键大1.另外，数组是一种动态的数据结构，可以随时增减数组成员。</p>
<p>注意：length 属性是可写的。如果认为的设置一个小于当前成员个数的值，该数组的成员会自动减少到 length 设置的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">array.length; <span class="comment">// 3</span></span><br><span class="line">array.length = <span class="number">2</span>;</span><br><span class="line">array <span class="comment">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>
<p>这表明当数组的 length 属性值设为2，那么整数键2就会被删除。这样清空一个数组就可以直接把 length 属性值设为0就 ok 了。</p>
<p>如果人为设置 length 值大于当前数组元素个数，那么数组的成员数量会增加到这个值，新增的位置都是空（undefined）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">a.length = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">1</span>]; <span class="comment">// undedined</span></span><br></pre></td></tr></table></figure>
<p>当 length 属性值设为大于数组个数时，读取新增的位置都会返回 undefined。如果设置的不合法，比如设置一个非整数的值时，JavaScript 会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line">array.length = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// RangeError: Invalid array length</span></span><br><span class="line"></span><br><span class="line">array.length = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">// RangeError: Invalid array length</span></span><br><span class="line"></span><br><span class="line">array.length = <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">// RangeError: Invalid array length</span></span><br></pre></td></tr></table></figure>
<p>因为数组的本质是一种对象，所以可以为数组添加属性，但是这不会影响数组的 length 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>];</span><br><span class="line">array[<span class="string">'name'</span>] = <span class="string">'musibii'</span>;</span><br><span class="line"></span><br><span class="line">array.length; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>注意：如果数组添加的键名超过范围的数值，该键名会自动转化为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line">array[<span class="number">-1</span>] = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">array[<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>)] = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">array.length <span class="comment">//0</span></span><br><span class="line">array[<span class="number">-1</span>]; <span class="comment">// 'a'</span></span><br><span class="line">array[<span class="number">4294967296</span>]; <span class="comment">// 'b'</span></span><br></pre></td></tr></table></figure>
<p>上面为数组添加了两个不合法的数字键，并不会影响到 length 的值。这些数字键都变成了字符串键名。最后两行会取到值是因为会把数字转为字符串。</p>
<h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>检查某个键名是否存在于数组中，使用 in 运算符，这个适用于对象，自然也适用于数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> array; <span class="comment">// true</span></span><br><span class="line"><span class="string">'2'</span> <span class="keyword">in</span> array; <span class="comment">// true</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">in</span> array; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>数组存在键名为2的键，由于键名都为字符串，所以数值2会自动转成字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line">array[<span class="number">100</span>] = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">array.length; <span class="comment">// 101</span></span><br><span class="line">array[<span class="number">1</span>]; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> array; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>数组 array 只有一个成员，虽然 length 为101，但是其他位置的键名都会返回 false。</p>
<h3 id="for…in-循环和数组的遍历"><a href="#for…in-循环和数组的遍历" class="headerlink" title="for…in 循环和数组的遍历"></a>for…in 循环和数组的遍历</h3><p>for…in 循环不仅可以遍历对象，也可以遍历数组。因为数组是对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a', 'b', 'c' 换行打印</span></span><br></pre></td></tr></table></figure>
<p>for…in 不仅会遍历数组所有的数字键，也会遍历非数字键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">array.name = <span class="string">'musibii'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a', 'b', 'c', 'musibii'</span></span><br></pre></td></tr></table></figure>
<p>在遍历数组时，也会遍历非整数键name，所以不建议使用for…in 遍历数组。可以使用 for 循环或者 while 循环。（这样只会遍历出整数的键名）</p>
<h3 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h3><p>当数组的某个位置是空元素，即两个逗号之间没有任何值，那么称该数组存在空位。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">''</span>, <span class="string">'c'</span>];</span><br><span class="line">array.length; <span class="comment">// 3</span></span><br><span class="line">array[<span class="number">1</span>]; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>这表名数组的空位不影响 length 属性的值。 并且空位是可以被读取的，只不过值为 undefined。</p>
<p>使用 delete 命令可以删除数组中的某个成员，这样会形成空位，和上面一样不会影响数组的 length 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">delete</span> array[<span class="number">1</span>];</span><br><span class="line">a[<span class="number">1</span>]; <span class="comment">//undefined</span></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>使用 delete 删除了数组中的元素，不会影响数组的 length 属性值，这样如果使用 length 对一个数组进行遍历时需要谨慎（这好奇怪啊。。。。）</p>
<p><strong>数组的某个位置是空位，与某个位置是 undefined，是不一样的。如果是空位，使用数组的 forEach 方法、for…in 结构以及 Object.keys 方法进行遍历时，空位会被跳过。</strong></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fycbyy5whaj30vg086wff.jpg" alt></p>
<p>不得不说，真的奇怪。这个设计思想也太灵活了8。。。</p>
<p>空位表示数组没有这个元素，所以不会被遍历到，而 undefined 表示数组有这个元素，值为 undefined，这样遍历就不会跳过。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 发行版更换源</title>
    <url>/2019/05/03/Linux-%E5%8F%91%E8%A1%8C%E7%89%88%E6%9B%B4%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<h1 id="debian更换"><a href="#debian更换" class="headerlink" title="debian更换"></a>debian更换</h1><h2 id="更换apt源"><a href="#更换apt源" class="headerlink" title="更换apt源"></a>更换apt源</h2><ol>
<li>更换配置文件 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://mirrors.163.com/debian/ stretch main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb-src http://mirrors.163.com/debian/ stretch main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib'</span> &gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>更新源 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h1 id="redhat-更换"><a href="#redhat-更换" class="headerlink" title="redhat 更换"></a>redhat 更换</h1><h2 id="配置-salt-官方阿里云-yum-仓库"><a href="#配置-salt-官方阿里云-yum-仓库" class="headerlink" title="配置 salt 官方阿里云 yum 仓库"></a>配置 salt 官方阿里云 yum 仓库</h2><ol>
<li>下载 repo 文件 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum install -y https://mirrors.aliyun.com/saltstack/yum/redhat/salt-repo-latest-2.el7.noarch.rpm</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>替换源地址 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sed -i </span><br><span class="line"></span><br><span class="line"><span class="string">"s/repo.saltstack.com/mirrors.aliyun.com/saltstack/g"</span> /etc/yum.repos.d/salt-latest.repo</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新缓存 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h1 id="更换-python-源"><a href="#更换-python-源" class="headerlink" title="更换 python 源"></a>更换 python 源</h1><h2 id="更换-pip-源"><a href="#更换-pip-源" class="headerlink" title="更换 pip 源"></a>更换 pip 源</h2><ol>
<li>临时更换 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>永久更换 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p><strong>持续更新</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（六）</title>
    <url>/2018/12/22/JavaScript%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客（六）"><a href="#JavaScript-系列博客（六）" class="headerlink" title="JavaScript 系列博客（六）"></a>JavaScript 系列博客（六）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客学习 js 选择器来控制 css 和 html、使用事件（钩子函数）来处理事件完成后完成指定功能以及js 事件控制页面内容。</p>
<h2 id="js-选择器"><a href="#js-选择器" class="headerlink" title="js 选择器"></a>js 选择器</h2><p>在学习 js 选择器前需要了解几个概念。</p>
<ul>
<li>节点（一）：在文档（document）中出现的所有内容都是 document 中的节点。</li>
<li>节点（二）：标签节点（元素 element） | 注释节点 | 文本节点 | &lt;!doctype&gt;节点。</li>
</ul>
<p>js 选择器是将 js 与 html 建立起连接的桥梁，就好比 css 选择器是 css 与 html 的桥梁，不过js 中将 html 标签称为元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #d &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"bd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d"</span> <span class="attr">class</span>=<span class="string">"dd"</span>&gt;</span>我是ddd111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d"</span> <span class="attr">class</span>=<span class="string">"dd"</span>&gt;</span>我是ddd222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过-id-名进行匹配"><a href="#通过-id-名进行匹配" class="headerlink" title="通过 id 名进行匹配"></a>通过 id 名进行匹配</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(d); <span class="comment">// 两个都可以匹配到</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过-getElement"><a href="#通过-getElement" class="headerlink" title="通过 getElement"></a>通过 getElement</h3><p>所有显示在页面中的内容都是属于文档（document）对象的内容，存放在文档中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>)</span><br><span class="line"><span class="comment">// id 获取</span></span><br><span class="line">getElementById(<span class="string">'id 名'</span>); <span class="comment">// 只能由 document 来调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 获取</span></span><br><span class="line">getElementByClassName(<span class="string">'class 名'</span>); <span class="comment">// 可以由 document 以及所有父级调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag 获取</span></span><br><span class="line">getElementByTagName(<span class="string">'标签名'</span>); <span class="comment">// 可以由 document 以及所属父级调用</span></span><br></pre></td></tr></table></figure>
<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取第一个满足要求的目标</span></span><br><span class="line">querySelector()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有满足要求的目标</span></span><br><span class="line">querySelectorAll()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 参数：采用的为 css 选择器语法</span></span><br><span class="line"><span class="comment">// 2. 可以由 document 以及父级来调用</span></span><br><span class="line"><span class="comment">// 3. 对 id 检索不严谨，慎用 id 选择器</span></span><br></pre></td></tr></table></figure>
<h2 id="js-操作页面内容"><a href="#js-操作页面内容" class="headerlink" title="js 操作页面内容"></a>js 操作页面内容</h2><ul>
<li>文本内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.innerText</span><br><span class="line"><span class="comment">// 可以设置，也可以直接获取值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>标签内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.innerHTML</span><br><span class="line"><span class="comment">// 可以设置，也可以获取值，能解析 html 语法代码</span></span><br><span class="line"></span><br><span class="line">box.outerHTML</span><br><span class="line"><span class="comment">// 获取包含自身标签信息的所有子内容信息</span></span><br></pre></td></tr></table></figure>
<ul>
<li>样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/ box.style.样式名  ==&gt; 可以设值,也可以获取,但操作的只能是行间式</span><br><span class="line"></span><br><span class="line"><span class="comment">// getComputedStyle(box, null).样式名 ==&gt; 只能获取值,不能设值, 能获取所有方式设置的值(行间式 与 计算后样式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注: 获取计算后样式,需要关注值的格式</span></span><br></pre></td></tr></table></figure>
<ul>
<li>页面标签全局属性操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.getAttribute(<span class="string">"alert"</span>);</span><br><span class="line"><span class="comment">// 获取页面标签ele的alert全局属性的值, 如果没有该全局属性值为null</span></span><br><span class="line"></span><br><span class="line">ele.setAttribute(<span class="string">"attr_key"</span>, <span class="string">"attr_value"</span>);</span><br><span class="line"><span class="comment">// 页面标签ele已有该全局属性,就是修改值, 没有就是添加该全局属性并赋相应值</span></span><br><span class="line"><span class="comment">// 注: 一般应用场景, 结合css的属性选择器完成样式修改</span></span><br></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js事件: 页面标签在满足某种条件下可以完成指定功能的这种过程, 成之为事件</span></span><br><span class="line"><span class="comment">// 某种条件: 如鼠标点击标签: 点击事件 | 鼠标双击标签: 双击事件 | 键盘按下: 键盘按下事件</span></span><br><span class="line"><span class="comment">// 指定功能: 就是开发者根据实际需求完整相应的功能实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 钩子函数: 就是满足某种条件被系统回调的函数(完成指定功能)</span></span><br><span class="line"><span class="comment">// 点击事件: 明确激活钩子的条件 = 激活钩子后改处理什么逻辑, 完成指定功能(函数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取页面标签是前提</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'.div'</span>);</span><br><span class="line"><span class="comment">// 钩子条件: 双击 = 指定功能(自身背景颜色变红)</span></span><br><span class="line">div.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 只能绑定一个实现体, 如果有多次绑定, 保留最后一次</span></span><br><span class="line"><span class="comment">// box.onclick = null来取消事件的绑定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>, fn)</span><br><span class="line"><span class="comment">// 能绑定多个实现体, 如果有多次绑定, 按顺序依次执行</span></span><br><span class="line"><span class="comment">// box.removerEventListener('click', fn)来取消事件的绑定</span></span><br><span class="line"><span class="comment">// 了解: 第三个参数决定冒泡顺序(子父级谁先相应事件)</span></span><br></pre></td></tr></table></figure>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统回调事件函数时, 传递了一个 事件(event) 实参</span></span><br><span class="line"><span class="comment">// 如果要使用传递来的实参 事件(event), 定义接收的 形参 即可</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用事件对象</span></span><br><span class="line">    <span class="comment">// 特殊按键 eg: ev.altKey: true | false</span></span><br><span class="line">    <span class="comment">// 鼠标触发点: ev.clientX | ev.clientY</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消冒泡</span></span><br><span class="line">    ev.cancelBubber = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消默认事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 基础优化及安全归纳总结</title>
    <url>/2019/05/03/Linux-%E5%9F%BA%E7%A1%80%E4%BC%98%E5%8C%96%E5%8F%8A%E5%AE%89%E5%85%A8%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="CentOS6"><a href="#CentOS6" class="headerlink" title="CentOS6"></a>CentOS6</h1><ol>
<li>Linux 的管理尽量不用 root 用户，利用 sudo 命令来控制普通用户对系统的管理。新建一个用户，使用 sudo 命令添加权限，详细步骤如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 添加新的用户：useradd username</span><br><span class="line">2. 检查是否已经添加成功：id username</span><br><span class="line">3. 设置该用户的密码：<span class="built_in">echo</span> 123321 | passwd --stdin username</span><br><span class="line">4. 备份之前的权限文件：cp /etc/sudoers(,.back&#125;</span><br><span class="line">5. 将新用户添加管理员权限：<span class="built_in">echo</span> <span class="string">'username ALL=(ALL) NOPASSWD: ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line">6. 检查是否成功添加：tail -1 /etc/sudoers</span><br><span class="line">7. 配置生效：visudo -c</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>更改默认的远程连接 SSH 服务端口</li>
</ol>
<p>1) 修改配置文件 <code>/etc/ssh/sshd_config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Port 22，改为Port 52113（范围0——65535）；<span class="comment">##默认端口为22</span></span><br><span class="line">ListenAddress 0.0.0.0，改为ListenAddress 内网IP地址；<span class="comment">##监听内网ip地址</span></span><br><span class="line">PermitRootLogion yes，改为PermitRootLogion no；<span class="comment">##root用户远程连接）</span></span><br></pre></td></tr></table></figure>
<p>2) 重启 ssh 服务生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/sshd reload</span><br></pre></td></tr></table></figure>
<p>3) 查看端口状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lntup | grep sshd</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>定时自动更新服务器时间</li>
</ol>
<p>1) 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'#time sync by username ad 2019-04-01'</span> &gt;&gt; /var/spool/cron/root</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/5 /usr/sbin/ntpdate ntp1.aliyun.com &gt; /dev/null 2&gt;&amp;1'</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>
<p>2) 查看是否已更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p>3) 备份定时任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /var/spool/cron/root&#123;,.back&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>配置 yum 源</li>
</ol>
<p>1) 创建备份文件存放目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/yum.repos.d/&#123;default,back&#125;</span><br></pre></td></tr></table></figure>
<p>2) 备份所有默认的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/repo /etc/yum.repos.d/default</span><br></pre></td></tr></table></figure>
<p>3) 更换阿里 yum 源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>
<p>4) 备份 yum 源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/default</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>关闭 selinux 和 iptables</li>
</ol>
<p>1) 关闭 iptables：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/iptables stop</span><br></pre></td></tr></table></figure>
<p>2) 检查是否已关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure>
<p>3) 设置开机不自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>
<p>4) 确认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list iptables</span><br></pre></td></tr></table></figure>
<p>5) 关闭 selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s#SELINUX=enforcing#SELINUX=disables#g'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>
<p>6) 查看并确认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/selinux/config</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>调整文件描述符的数量</li>
</ol>
<p>1) 查看默认文件描述符数量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure></p>
<p>2) 修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'* - nofile 65535'</span> &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>3) 查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -1 /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><p>定时自动清理邮件目录垃圾文件</p>
</li>
<li><p>精简并保留必要的开机自启服务</p>
</li>
</ol>
<p>1) 只保留重要的基础服务，其余全部关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list | egrep -v <span class="string">"sysstat|crond|sshd|network|rsyslog"</span> | awk <span class="string">'&#123;print "chkconfig "$1, "off"&#125;'</span> | bash</span><br></pre></td></tr></table></figure>
<p>2) 确认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep 3:on</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>优化内核参数</li>
</ol>
<p>1) 修改配置文件<code>/etc/sysctl.conf</code>，添加如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</span><br><span class="line">net.ipv4.tcp_fin_timeout = 2</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line">net.ipv4.ip_local_port_range = 4000 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 16384</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 36000</span><br><span class="line">net.ipv4.route.gc_timeout = 100</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.core.somaxconn = 16384</span><br><span class="line">net.core.netdev_max_backlog = 16384</span><br><span class="line">net.ipv4.tcp_max_orphans = 16384</span><br></pre></td></tr></table></figure>
<p>2) 配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -P</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>配置字符集</li>
</ol>
<p>1) 查看配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure>
<p>2) 备份配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/sysconfig/i18n&#123;,.back&#125;</span><br></pre></td></tr></table></figure>
<p>3) 修改配置文件<br>下面是修改字符集为中文的，英文同理<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'LANG="zn_CN.UTF-8"'</span> &gt; /etc/sysconfig/i18n</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'SYSFONT="latarcyrheb-sun16"'</span> &gt;&gt; /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure></p>
<p>4) 配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure>
<p>5) 确认配置是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>锁定关键性系统文件，防止被篡改</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr +i /etc/&#123;passwd,shadow,group,gshadow&#125;</span><br><span class="line">lsattr -a /etc/&#123;passwd,shadow,group,gshadow&#125;</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>禁止系统被 ping</li>
</ol>
<p>1) 配置命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.icmp_echo_ignore_all=1"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>2) 配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -P</span><br></pre></td></tr></table></figure>
<ol start="12">
<li>升级漏洞软件</li>
</ol>
<p>1) 查看相关软件的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa openssl openssh bash</span><br></pre></td></tr></table></figure>
<p>2) 执行升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install openssl openssh bash</span><br></pre></td></tr></table></figure>
<ol start="13">
<li>优化 ssh 远程连接</li>
</ol>
<p>1) 备份配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/ssh/sshd_config&#123;,.back&#125;</span><br></pre></td></tr></table></figure>
<p>2) 编辑 ssh 服务配置文件<code>/etc/ssh/sshd_config</code>，在 12 行下面添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Port 52113                 <span class="comment">#使用大于10000的端口号</span></span><br><span class="line">PermitRootLogin no          <span class="comment">#禁止root远程登录</span></span><br><span class="line">PermitEmptyPasswords no     <span class="comment">#禁止空密码登录</span></span><br><span class="line">UseDNS no                 <span class="comment">#不使用dns解析</span></span><br><span class="line">GSSAPIAuthentication no      <span class="comment">#连接慢的解决配置</span></span><br></pre></td></tr></table></figure>
<p>3) 确认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -A 5 -i <span class="string">'Start by username'</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>4) 重启 ssh 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>
<p>5) 查看是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lntup | grep ssh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令之ls</title>
    <url>/2018/11/29/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bls/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道从什么时候开始，对Linux系统一直很着迷，就单纯觉得使用 Linux 系统（特别是命令行）是一件很酷的事情，所以很早就开始学习一些 linux 知识了，推荐鸟哥的 linux 私房菜，哈哈，不用我推荐这本书已经是鼎鼎大名了（所以这个系列博客主要参考鸟哥的 linux 并且我会在 linux18.04上面测试）。所以现在想从最基础的命令开始，系统的了解 linux 系统，所以这也会是个系列博客，尽量做到每天写一个 linux 命令，这也是件自我激励的事情，开始我的 linux 之旅吧！！！</p>
<h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1>]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript（四）</title>
    <url>/2018/12/19/JavaScript%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-系列博客之（四）"><a href="#JavaScript-系列博客之（四）" class="headerlink" title="JavaScript 系列博客之（四）"></a>JavaScript 系列博客之（四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇介绍 JavaScript 中的函数知识。</p>
<h2 id="函数的三种声明方法"><a href="#函数的三种声明方法" class="headerlink" title="函数的三种声明方法"></a>函数的三种声明方法</h2><h3 id="function-命令"><a href="#function-命令" class="headerlink" title="function 命令"></a>function 命令</h3><p>可以类比为 python 中的 def 关键词。</p>
<p>function 命令声明的代码区块，就是一个函数。命令后面是函数名，函数名后面的圆括号里面是要传入的形参名。函数体放在大括号里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 function 命名了一个 fn 函数，以后可以通过调用 fn 来运行该函数。这叫做函数的声明（Function Declaration）。</p>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>除了使用 function 命令声明函数外，可以采用变量赋值的写法。（匿名函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称之为函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。</p>
<p>采用函数表达式声明函数时，function 命令后面不带有函数名。如果加上函数名，该函数名只能在函数体内访问，在函数体外部无效。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);</span><br><span class="line">&#125;;</span><br><span class="line">x</span><br><span class="line"><span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line">fn();</span><br><span class="line"><span class="comment">// function</span></span><br></pre></td></tr></table></figure>
<p>声明函数时，在函数表达式后加了函数名 x，这个 x 只可以在函数内部使用，指代函数表达式本身。这种写法有两个用处：一可以在函数体内部调用自身；二方便debug（debug 显示函数调用栈时，会显示函数名）。需要注意的是，函数表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。</p>
<h3 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function 构造函数"></a>Function 构造函数</h3><p>第三种声明函数的方法是通过构造函数，可以理解为 python 中的函数类，通过传入参数并且返回结果就可以创建一个函数。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fydfaigvzzj30v8062t9b.jpg" alt></p>
<p>构造函数接收三个参数，最后一个为 add函数的‘’函数体‘’，其他参数为add 函数的参数。可以为构造函数传递任意数量的参数，不过只有最后一个参数被当做函数体，如果只有一个参数，该参数就是函数体。</p>
<p>Function 构造函数也可以不用 new 命令，结果一样。这种声明函数的方式不直观，使用概率很少。</p>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p>和 python 一样，调用一个函数通过圆括号，圆括号中是要传入的实参。</p>
<p>函数体内部的 return 语句，表示返回。JavaScript 引擎遇到 return 时，就直接返回 return 后面表达式的值（和 python 一样），所以 return 后面的代码是无意义的，如果没有 return 那么就会返回 undefined（python 中返回 None）。</p>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><h3 id="作用域的定义"><a href="#作用域的定义" class="headerlink" title="作用域的定义"></a>作用域的定义</h3><p>作用域指的是变量存在的范围。在 ES5中，JavaScript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，任意位置可以访问到；另一种是函数作用域，也称之为局部作用域，变量只有在函数内部才能访问到。ES6新增了块级作用域，等价于局部作用域一样，就是新增了一种产生局部作用域的方式。通过大括号产生块级作用域。</p>
<p>在函数外部声明的变量就是全局变量，可以在任意位置读取。</p>
<p>在函数内部定义的变量，外部无法读取，只有在函数内部可以访问到。并且函数内部定义的同名变量，会在函数内覆盖全局变量。</p>
<p><strong>注意：对于 var 命令来说，局部变量只可以在函数内部声明，在其他区块中声明，一律都是全局变量。ES6中声明变量的命令改为 let，在区块中声明变量产生块级作用域。</strong></p>
<h3 id="函数内部的变量提升"><a href="#函数内部的变量提升" class="headerlink" title="函数内部的变量提升"></a>函数内部的变量提升</h3><p>与全局作用域一样，函数作用域也会产生‘’变量提升‘’现象。var 命令生命的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        tmp = x - <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数本身的作用域"><a href="#函数本身的作用域" class="headerlink" title="函数本身的作用域"></a>函数本身的作用域</h3><p>函数和其他值（数值、字符串、布尔值等）地位相同。凡是可以使用值得地方，就可以使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当做参数传入其他函数，或者作为函数的结果返回。函数是一个可以执行的值，此外没有特殊之处。</p>
<p>函数也有自己的作用域，函数的作用域称为局部作用域。与变量一样，就是其生命时所在的作用域，与其运行时所在的作用域无关（闭包、装饰器）。通俗地讲就是在定义函数的时候，作用域已经就确定好了，那么在访问变量的时候就开始从本作用域开始查找，而与函数的调用位置无关。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    x();</span><br><span class="line">&#125;</span><br><span class="line">y(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fydgf1ttxoj30uw0e23zv.jpg" alt></p>
<p>函数 x 是在函数 f 的外部生命的，所以它的作用域绑定外层，内部变量 a 不会到函数 f 体内取值，所以输出1，而不是2。</p>
<p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>调用函数时，有时候需要外部传入的实参，传入不同的实参会得到不同的结果，这种外部数据就叫参数。</p>
<h3 id="参数的省略"><a href="#参数的省略" class="headerlink" title="参数的省略"></a>参数的省略</h3><p>在 JavaScript 中函数参数不是必需的，就算传入的参数和形参的个数不相等也不会报错。调用时无论提供多少个参数（或者不提供参数），JavaScript 都不会报错。省略的参数的值变为 undefined。需要注意的是，函数的 length 属性值与实际传入的参数个数无关，只反映函数<strong>预期</strong>传入的参数个数。</p>
<p>但是，JavaScript 中的参数都是位置参数，所以没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显示的传入 undefined。</p>
<h3 id="传递方式"><a href="#传递方式" class="headerlink" title="传递方式"></a>传递方式</h3><p>函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（pass by value）。这意味着，在函数体内修改参数值，不会影响到函数外部（局部变量的修改不会影响到全局变量：对于基本数据类型）。</p>
<p>但是，如果函数参数是复合类型的值（数组、对象、其他函数），因为传值方式为地址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。</p>
<p><strong>注意：如果函数内部修改的不是参数对象的某个属性，而是直接替换掉整个参数，这时不会影响到原始值。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    o = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">f(obj);</span><br><span class="line"></span><br><span class="line">obj <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>上面代码，在函数 f 内部，参数对象 obj 被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（o）的值实际上是参数 obj 的地址，重新对o 赋值导致 o 指向另一个地址，保存在原地址上的数据不会被改变。</p>
<h3 id="同名参数"><a href="#同名参数" class="headerlink" title="同名参数"></a>同名参数</h3><p>如果有同名的参数，则取最后出现的那个值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数 f 有两个参数，且参数名都是 a。取值的时候，以后面的 a 为准，即使后面的a 没有值或被省略，也是以其为准。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>调用函数 f 时，没有提供第二个参数，a 的取值就变成了 undefined。这时，如果要获得第一个 a 的值，可以使用 arguments 对象（类比linux 中的arg）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h3 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是 arguments 对象的由来。</p>
<p>arguments 对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，以此类推。<strong>注意：该对象只有在函数体内部才可以使用。</strong></p>
<p>正常模式下，arguments 对象可以在运行时修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，调用 f 时传入的参数，在函数体内被修改了，那么结果也会修改。</p>
<p>严格模式下，arguments 对象是一个只读对象，修改它是无效的，但不会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>; <span class="comment">// 开启严格模式</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">3</span>; <span class="comment">// 无效</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">// 无效</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>开启严格模式后，虽然修改参数不报错，但是是无效的。</p>
<p>通过 arguments 对象的 length 属性，可以判断函数调用时到底带几个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h4 id="与数组的关系"><a href="#与数组的关系" class="headerlink" title="与数组的关系"></a>与数组的关系</h4><p>需要注意的是，虽然 arguments 很像数组，但它是一个对象。数组专有的方法（比如 slice 和 forEach），不能再 arguments 对象上直接使用。</p>
<p>如果要让 arguments 对象使用数组方法，真正的解决方法是将 arguments 转为真正的数组。下面是两种常用的转换方法：slice 方法和逐一填入新数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var args = [];</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="callee-属性"><a href="#callee-属性" class="headerlink" title="callee 属性"></a>callee 属性</h4><p>arguments 对象带有一个 callee 属性，返回它所对应的原函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === f); </span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>可以通过 arguments.callee，达到调用自身的目的。这个属性在严格模式里面是禁用的，不建议使用。</p>
<h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><p>闭包是所有编程语言的难点，在 python 中闭包的多应用于装饰器中。在 JavaScript 中闭包多用于创建作用域，或者解决变量污染的问题。</p>
<p>理解闭包，首先需要理解变量作用域。在 ES5中，JavaScript 只有两种作用域：全局作用于和函数作用域。函数内部可以直接读取全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line">f1(); <span class="comment">// 999,n是全局变量，可以被访问到</span></span><br></pre></td></tr></table></figure>
<p>但是函数外部无法读物函数内部声明的变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: n is not defined</span></span><br></pre></td></tr></table></figure>
<p> 因为变量作用域的关系，在外部需要访问到局部变量在正常情况下是做不到的，这就可以通过闭包来实现。下来来看一个经典例子：循环绑定事件产生的变量污染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    0000001</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    0000002</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    0000003</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">".box"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 存在污染的写法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; divs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        divs.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'xxx'</span>, i)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 运行结果显示4</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>会产生变量污染的原因是作用域，因为 var 并不产生作用域，所以在 for循环中的变量就是全局变量，只要 for循环结束那么 i 的值就确定了，除非在极限情况下，你的手速比 cpu 还要快，那么可能会看到小于4的值。这样的问题可以通过函数的闭包来解决。产生新的作用域用来保存 i 的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = i;</span><br><span class="line">        divs[index].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'xxx'</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一种版本</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        divs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'yyy'</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 利用闭包原理产生新的作用域用来保存变量 i 的值，这样就解决了变量污染的问题，还有利用ES6的声明变量关键词 let，也会产生新的作用域（块级作用域）也可以解决变量污染的问题。</p>
<p>在 JavaScript 中，嵌套函数中的子函数中可以访问到外部函数中的局部变量，但是外部函数访问不到子函数中的局部变量，这是 JavaScript 中特有的‘’链式作用域‘’结构（python 也一样），子对象会一级一级的向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。可以简单地把闭包理解为‘’定义在一个函数内部的函数‘’，闭包最大的特点就是它可以‘’记住‘’诞生的环境，在本质上闭包就是将函数内部和函数外连接起来的一座桥梁。</p>
<p>必报的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生的环境一直存在。下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrementor</span>(<span class="params">start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start++;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inc = createIncrementor(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">inc(); <span class="comment">// 5</span></span><br><span class="line">inc(); <span class="comment">// 6</span></span><br><span class="line">inc(): <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，start 是函数 createIncrementor 的内部变量。通过闭包，start 的状态被保存，每一次调用都是在上一次调用的基础上进行计算。从中可以看出，闭包 inc 使得函数 createIncrementor 的内部环境一直存在。所以闭包可以看做是函数内部作用域的一个接口。为什么会这样呢？原因就在于 inc 始终在内存中，而 inc 的存在依赖于 createIncrementor，因此也一直存在于内存中，不会再外层函数调用结束后 start 变量被垃圾回收机制回收。</p>
<p>闭包的另外一个用处是封装对象的私有属性和私有方法。（这部分还不太懂，还需要琢磨）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _age;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setAge</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    _age = n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    getAge: getAge,</span><br><span class="line">    setAge: setAge</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = Person(<span class="string">'张三'</span>);</span><br><span class="line">p1.setAge(<span class="number">25</span>);</span><br><span class="line">p1.getAge() <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数 Person 的内部变量_age，通过闭包 getAge 和 setAge，变成了返回对象p1的私有变量。</p>
<p>注意：外城函数每次运行，都会产生一个新的闭包，而这个闭包又会保留外城函数的内部变量，所以内存消耗很大。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Python 中的缓存</title>
    <url>/2019/02/26/Python-%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux命令案例</title>
    <url>/2019/05/03/Linux%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="查看套接字"><a href="#查看套接字" class="headerlink" title="查看套接字"></a>查看套接字</h1><p>ss -lntp 列出当前开启服务 </p>
<h1 id="检查网络连接"><a href="#检查网络连接" class="headerlink" title="检查网络连接"></a>检查网络连接</h1><p>ping baidu.com 朝百度发送数据包 </p>
<p>telnet 10.0.0.100 TELNET协议的用户界面用来检查网络 </p>
<h1 id="系统控制相关"><a href="#系统控制相关" class="headerlink" title="系统控制相关"></a>系统控制相关</h1><p>systemctl stop NetworkManager 停用网络管理守护进程 </p>
<p>systemctl disable NetworkManager 禁用网络管理守护进程 </p>
<h1 id="网卡设置相关"><a href="#网卡设置相关" class="headerlink" title="网卡设置相关"></a>网卡设置相关</h1><p>vim /etc/sysconfig/network-scripts/ifcfg-eth0 </p>
<h1 id="yum源配置"><a href="#yum源配置" class="headerlink" title="yum源配置"></a>yum源配置</h1><p>cd /etc/yum.repos.d/ </p>
<p>rm -f ./* </p>
<p>curl -o /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/epel-7.repo</a> </p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a> </p>
<h1 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h1><p>yun install -y net-tools bash-completion vim lszrz nc nmap ntpdate tree htop glances telnet unzip iftop iotop rsync </p>
<h1 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h1><p>yum repolist 列出仓库可用包 </p>
<h1 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h1><p>systemctl stop firewalld.service 关闭防火墙服务 </p>
<p>systemctl disable firewalld.service 禁用防火墙服务 </p>
<p>vim /etc/selinux/config 配置 selinux </p>
<p>SELINUX=disabled </p>
<h1 id="关机相关"><a href="#关机相关" class="headerlink" title="关机相关"></a>关机相关</h1><p>shutdown -h now 立即关机 </p>
<p>shutdown -h 10 10分钟后关机 </p>
<p>shutdown -c 取消关机或重启计划 </p>
<p>poweroff 关机 </p>
<p>init 0 0运行级别，关机 </p>
<h1 id="重启相关"><a href="#重启相关" class="headerlink" title="重启相关"></a>重启相关</h1><p>shutdown -r 10 十分钟后重启 </p>
<p>reboot 立刻重启 </p>
<p>halt 立刻停止系统，需要人工关闭电源，是 reboot 的链接文件 </p>
<p>init 6 切换运行级别到6，6表示重启 </p>
<h1 id="注销相关"><a href="#注销相关" class="headerlink" title="注销相关"></a>注销相关</h1><p>logout 注销并退出当前用户窗口 </p>
<p>exit 注销并退出当前用户窗口 </p>
<h1 id="更改网卡默认命名规则"><a href="#更改网卡默认命名规则" class="headerlink" title="更改网卡默认命名规则"></a>更改网卡默认命名规则</h1><p>vim /etc/sysconfig/grub </p>
<p>GRUB_CMDLINT_LINUX=’rhgb net.ifnames=0 biosdevname=0 quiet’ </p>
<h1 id="网络服务相关"><a href="#网络服务相关" class="headerlink" title="网络服务相关"></a>网络服务相关</h1><p>systemctl restart network 重启网络 </p>
<h1 id="ip-相关"><a href="#ip-相关" class="headerlink" title="ip 相关"></a>ip 相关</h1><p>ip -a 查看所有 ip </p>
<p>ifconfig 查看所有 ip </p>
<p>ip a s eth0 查看第一张网卡 </p>
<p>ip address show eth0 查看第一张网卡 </p>
<p>ifconfig eth0 查看第一张网卡 </p>
<h1 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h1><p>hostname 查看主机名 </p>
<p>hostnamectl set-hostname hostname 修改主机名 </p>
<p>whoami 查看主机名 </p>
<p>uname -m 查看主机名 </p>
<h1 id="内核相关"><a href="#内核相关" class="headerlink" title="内核相关"></a>内核相关</h1><p>cat /etc/redhat-release 查看内核版本 </p>
<p>uname -a 查看内核信息 </p>
<p>uname -r 查看 Linux 内核版本 </p>
<h1 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h1><p>ctrl + c cancel 取消当前操作 </p>
<p>ctrl + l 清空当前屏幕 </p>
<p>ctrl + d 退出当前用户 </p>
<p>ctrl + r 查找历史命令 history| grep </p>
<p>ctrl + a 光标移到行首 </p>
<p>ctrl + e 光标移到行尾 </p>
<p>ctrl + u 把光标到行首的内容删除/剪切 </p>
<p>ctrl + y 粘贴 </p>
<p>ctrl + k 把光标到行尾的内容删除/剪切 </p>
<p>ctrl + → 向右移动一个单词 </p>
<p>ctrl + ← 向左移动一个单词 </p>
<p>ctrl + s 锁屏 </p>
<p>ctrl + q 解锁 </p>
<p>ctrl + w 删除当前位置至上一个空格的字符 </p>
<h1 id="cd-相关"><a href="#cd-相关" class="headerlink" title="cd 相关"></a>cd 相关</h1><p>cd ~ 切换到当前目录的家目录 </p>
<p>cd - 切换到上一次所在位置的目录下 </p>
<p>cd / 切换到根目录 </p>
<h1 id="tree-相关"><a href="#tree-相关" class="headerlink" title="tree 相关"></a>tree 相关</h1><p>-d 只显示目录 </p>
<p>-L 遍历目录的最大层数，后面加大于0的正整数 </p>
<p>-F 在条幕后加上文件类型的指示符号{*,/,=,@,|,其中一个} </p>
<p>tree -L 1 -F /boot/ 使用-F 参数会在目录后添加’/‘方便区分目录 </p>
<h1 id="mkdir-相关"><a href="#mkdir-相关" class="headerlink" title="mkdir 相关"></a>mkdir 相关</h1><p>mkdir test -v 穿件目录时打印相关信息 </p>
<p>mkdir linux/test -p 父目录不存在时一起创建，递归创建目录 </p>
<p>mkdir {oldboy,oldgirl,oldman} 花括号里面的同时创建 </p>
<p>mkdir oldboy{a..z} 创建 oldboya-oldboyz的目录，创建不连续的目录时用逗号隔开 </p>
<h1 id="touch-相关"><a href="#touch-相关" class="headerlink" title="touch 相关"></a>touch 相关</h1><p>{} 生成序列 </p>
<p>{1..10} </p>
<p>{01..10} </p>
<p>{a..z} </p>
<h1 id="ls-相关"><a href="#ls-相关" class="headerlink" title="ls 相关"></a>ls 相关</h1><p>-a 显示指定目录下的所有子目录与文件，包括隐藏文件 </p>
<p>-l 以列表方式显示文件的详细信息 ls -l=ll </p>
<p>-h 配合 -l 以人性化显示文件大小 </p>
<p>-t 根据最后修改时间排序，默认是以文件名排序，通常与-l 连用 </p>
<p>-F 在条目后面加上文件类型的指示符号 </p>
<p>-d 显示目录本身的信息，而不是显示目录的内容 </p>
<p>-r 逆序，倒序排序 </p>
<p>ls -lt 按照时间进行排序 </p>
<p>ls -lrt 找出最新的文件 </p>
<p>-i 显示索引节点信息 </p>
<h1 id="cp-相关"><a href="#cp-相关" class="headerlink" title="cp 相关"></a>cp 相关</h1><p>-r 递归复制目录 </p>
<p>-p 复制的时候保持属性不变 </p>
<p>-d 复制的时候保持软链接 </p>
<p>-a == -pdr </p>
<p>-t 将所有源参数复制到目录中 </p>
<h1 id="vim-相关"><a href="#vim-相关" class="headerlink" title="vim 相关"></a>vim 相关</h1><h2 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h2><p>:wq 保存并退出 </p>
<p>:x 保存退出 </p>
<p>:q 退出 </p>
<p>:q! 强制退出不保存 </p>
<p>:set nu 显示行号 </p>
<p>:set nonu 取消显示行号 </p>
<p>:set list 给每行的最后一个字符加上标记 </p>
<p>:set nolist 取消标记 </p>
<p>:noh 取消高亮显示 </p>
<p>:%s###g 替换内容 </p>
<h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>a 在光标之后开始插入数据 </p>
<p>i 在光标之前开始插入数据 </p>
<p>A 在光标所在行末尾开始插入数据 </p>
<p>I 在光标所在行首开始插入数据 </p>
<p>o 在当期行下面插入一行并进入编辑魔术 </p>
<p>O 在当前行上面插入一行并进入编辑模式 </p>
<p>C 删除光标所在位置到行尾的内容并进入编辑模式 </p>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>批量删除：ctrl+v 选择 d 删除 </p>
<p>批量增加：ctrl+v 选择 shift+i编辑 ESC </p>
<p>删除多行：shift+v 选择 d </p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>gg 移到文件第一行 </p>
<p>G 移到文件最后一行 </p>
<p>100gg 移到文件第100行 </p>
<p>^ 把光标移到行首 </p>
<p>$ 把光标移到行尾 </p>
<p>D 删除光标所在位置到行尾的内容 </p>
<p>ZZ 快速保存并退出 </p>
<p>yy 复制光标所在行 </p>
<p>nyy 复制多行 </p>
<p>p 粘贴 </p>
<p>np 多次粘贴 </p>
<p>dd 删除/剪切一行 </p>
<p>ndd 删除/剪切多行 </p>
<p>dG 删除当前行到文件的末尾 </p>
<p>u 撤销(命令行模式下) </p>
<p>r 替换光标所在字符 </p>
<p>x 删除光标所在字符 </p>
<h1 id="cat-相关"><a href="#cat-相关" class="headerlink" title="cat 相关"></a>cat 相关</h1><p>-b 显示行编号（忽略空行） </p>
<p>-n 显示所有行编号（包括空格） </p>
<p>-A 在每行的最后一个字符加上字符 </p>
<blockquote>
<p>文件名 清空文件内容 </p>
</blockquote>
<p>cat &gt;文件&lt;&lt;EOF 以 EOF 开头以 EOF 结尾 </p>
<p>EOF 可以是任何字母或数字 </p>
<p>cat&gt;&gt;文件&lt;&lt;EOF </p>
<blockquote>
<p>表示写入新内容，即使之前有内容也会覆盖 </p>
</blockquote>
<blockquote>
<blockquote>
<p>表示在文件的末尾追加新内容，之前的内容不覆盖 </p>
</blockquote>
</blockquote>
<h1 id="head-相关"><a href="#head-相关" class="headerlink" title="head 相关"></a>head 相关</h1><p>head显示文件的前几行（默认显示10行） </p>
<p>-n5 显示前5行 </p>
<h1 id="tail-相关"><a href="#tail-相关" class="headerlink" title="tail 相关"></a>tail 相关</h1><p>显示文件的最后几行 </p>
<p>-n5 显示文件最后5行 </p>
<p>-f –follow 显示文件实时更新（查看日志） </p>
<p>-F –follow –retry 如果文件不存在会不断进行重试 </p>
<h1 id="网络测试相关"><a href="#网络测试相关" class="headerlink" title="网络测试相关"></a>网络测试相关</h1><p>ping 探测指定 ip 或域名的网络情况 </p>
<p>telnet 远程管理与端口探测命令 </p>
<p>traceroute 路由跟踪命令 </p>
<p>wget 下载命令 </p>
<p>tcpdump -i eth0 -nnx port 21 </p>
<p>-i 指定网卡接口 </p>
<p>-nn 将数据包中的域名与服务转为 ip 和端口 </p>
<p>-X 以十六进制和 ASCII 码显示数据包内容 </p>
<p>port 指定监听的端口 </p>
<h1 id="find-相关"><a href="#find-相关" class="headerlink" title="find 相关"></a>find 相关</h1><p>find / -type f -name ‘*yum’ 查找文件类型为文件以 yum 结尾的文件 </p>
<p>find / -maxdepth 2 -type f -iname ‘*.txt’ | xargs ls -l 查找最大深度为2文件类型为文件以 txt 结尾且忽略大小写的文件 </p>
<p>find / -maxdepth 4 -type f -iname ‘*.txt’ | xargs ls -l 查找最大深度为4普通文件忽略大小写以txt结尾的文件 </p>
<p>find ./ -type f -name ‘*.txt’ |xargs cp -t /tmp 在当前文件夹下查找普通文件以 txt 结尾的文件并拷贝到 tmp 目录下 </p>
<p>find ./ -type f -namd ‘*.txt’ |xargs -i cp {} /tmp/a 在当前目录下查找以 txt 结尾的普通文件并拷贝到/tmp/a目录下 </p>
<p>cp $(find ./ -type f -name ‘*.txt’) /tmp/a 先执行括号里面的之后拷贝 </p>
<p>find ./ -type f -name ‘*.txt’ -exec cp {} /tmp/c ; </p>
<p>find / -type f -size +100k -mtime -7 -name “*.txt” |xargs ls -lh 在根目录下查找文件大小100k 以上以 txt 结尾的且在7天之内修改的普通文件 </p>
<p>find / -type f -size +100k -mtime +7 -name “*.txt” |xargs ls -lh </p>
<p>find ./ -type f -name “*.sh” |xargs sed “s#oldgirl#python#g” 在当前目录下找到以 sh 结尾的普通文件并把文件里的 oldgirl 替换为 python </p>
<p>find ./ -type f -name ‘*.sh’ | xargs sed -i ‘s#oldgirl#python#g’ </p>
<h1 id="标准输入输出错误"><a href="#标准输入输出错误" class="headerlink" title="标准输入输出错误"></a>标准输入输出错误</h1><p>标准输入：代码为0，使用&lt;或&lt;&lt; </p>
<p>标准输出：代码为1，使用&gt;或&gt;&gt; </p>
<p>标准错误输出：代码为2，使用2&gt;或2&gt;&gt; </p>
<p>2&gt;&amp;1 错误信息和正确信息放在一起 </p>
<h1 id="将标准输入转换为命令行参数"><a href="#将标准输入转换为命令行参数" class="headerlink" title="将标准输入转换为命令行参数"></a>将标准输入转换为命令行参数</h1><p>seq 10 &gt; ett.txt </p>
<p>xargs -n5 &lt; ett.txt </p>
<p>-n 分组，主要配合 find 命令使用 </p>
<h1 id="tar-相关"><a href="#tar-相关" class="headerlink" title="tar 相关"></a>tar 相关</h1><p>tar zcvf etc.tar.gz /etc 将/etc打包为etc.tar.gz </p>
<p>tar tf etc.tar.gz 不解压列出压缩包内容 </p>
<p>tar zcf etc1.tar.gz –exclude=/etc/sysconfig /etc 除了 sysconfig 文件其他打包 </p>
<p>tar xf etc.tar.gz 解压 </p>
<p>tar xf etc.tar.gz -C /opt/ 指定解压路径为/opt/ </p>
<h1 id="zip-相关"><a href="#zip-相关" class="headerlink" title="zip 相关"></a>zip 相关</h1><h1 id="同步网络时间"><a href="#同步网络时间" class="headerlink" title="同步网络时间"></a>同步网络时间</h1><p>ntpdate ntp1.aliyun.com </p>
<h1 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h1><p>date +%F 2019-04-10 </p>
<p>date +%Y-%m-%d 2019-04-10 </p>
<p>date +%y-%m-%d 19-04-10 </p>
<p>date +%T 16:33:37 </p>
<p>date +%H:%M:%S 16:34:05 </p>
<p>date +%w 3(周三) </p>
<p>date -d “-1 day” +%F 2019-04-11 </p>
<p>date +%F-%T 2019-05-12-11:00:05 </p>
<h1 id="tr-相关"><a href="#tr-相关" class="headerlink" title="tr 相关"></a>tr 相关</h1><p>替换或删除字符 </p>
<p>tr 与 &lt; 连用 </p>
<p>-d 删除字符 </p>
<p>tr ‘a-z’ ‘A-Z’ &lt; 文件名 把文件里面的 a-z字母替换成大写字母 </p>
<h1 id="字符集相关"><a href="#字符集相关" class="headerlink" title="字符集相关"></a>字符集相关</h1><p>localectl set-locale LANG=zh_CN.UTF-8 设置字符集为中文 </p>
<p>source /etc/locale.conf </p>
<p>echo $LANG 查看字符集 </p>
<h1 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h1><p>echo $UID 查看当前登录用户 uid </p>
<p>cat /etc/passwd 查看所有用户信息 </p>
<p>cat /etc/group 查看组信息 </p>
<p>tail /etc/passwd 查看最后十行用户信息 </p>
<p>cat /etc/shadow 查看用户密码（加密） </p>
<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><p>useradd -u 666 web 指定 uid 创建用户 </p>
<p>groupadd -g 888 test 指定 gid 创建组 </p>
<p>useradd -u 777 -g 888 test 指定 uid 和 gid 创建用户 </p>
<p>useraddd -u 456 -g 888 -s /sbin/nologin -M xuni 指定 uid 和 gid 指定登陆 shell 以及不创建家目录创建用户 -s 和-M 需搭配使用 </p>
<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><p>passwd 修改当前登录用户密码 </p>
<p>passwd username 修改用户密码 </p>
<p>echo ‘1’ | passwd –stdin username 免交互方式改变密码 </p>
<p>whoami 显示当前登录用户名 </p>
<p>CTRL+d 登出当前用户 </p>
<p>id username 查看用户 uid、gid、groups </p>
<h1 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h1><p>usermod -u 999 username 修改已有用户 uid </p>
<p>usermod - g 999 username 修改已有用户 gid </p>
<p>usermod -s /sbin/nologin username 修改已有用户不能登陆 </p>
<p>groupdel test 删除用户组 </p>
<h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><p>userdel -r username 删除用户及用户家目录 </p>
<p>groupdel groupname 删除用户组 </p>
<h1 id="时间相关-1"><a href="#时间相关-1" class="headerlink" title="时间相关"></a>时间相关</h1><p>stat filename 查看文件详细属性 </p>
<h1 id="索引节点"><a href="#索引节点" class="headerlink" title="索引节点"></a>索引节点</h1><p>df -h 查看分区信息 </p>
<p>df -i 查看分区 inode 数量使用情况 </p>
<p>ll -i 显示 inode 号 </p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>ln (source file) (destination file) 创建硬链接 类比超市入口 </p>
<p>ln -s (source file) (destination file) 创建软连接，相当于一个快捷方式 </p>
<h1 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h1><p>dd if=/dev/zero of=/data/test/test.txt bs=10M count=1000 创建一个10000M 的文件 </p>
<p>du -sh /*|grep G 查看根目录下的文件大小 </p>
<h1 id="寻找占用-inode-大的文件夹"><a href="#寻找占用-inode-大的文件夹" class="headerlink" title="寻找占用 inode 大的文件夹"></a>寻找占用 inode 大的文件夹</h1><p>find / -type d -size +1M 查找根目录下面大小1M 以上的目录 </p>
<p>find / -type d -size 1M |xargs ls -ldh 寻找占用小文件过多的目录 </p>
<p>ll | wc -l 统计当前目录下面的文件数量 </p>
<h1 id="批量删除文件"><a href="#批量删除文件" class="headerlink" title="批量删除文件"></a>批量删除文件</h1><p>find ./ -type f -name “*.txt” | xargs rm -f 批量删除以 txt 结尾的文件 </p>
<p>rm -rf ./odldboy0? 删除当前目录下结尾为任意一个字符的文件 </p>
<p>mkdir odldboy{00..10} 批量创建目录 </p>
<p>rm -rf ./oldboy0[12]test []表示或，删除 </p>
<p>rm -rf ./oldboy[!3]test !表示非，删除除3之外的目录 </p>
<h1 id="生成随机字符"><a href="#生成随机字符" class="headerlink" title="生成随机字符"></a>生成随机字符</h1><p>tr -cd ‘a-z0-9’ &lt; /dev/urandom | head -c 20 生成20位随机字符 </p>
<h1 id="echo-相关"><a href="#echo-相关" class="headerlink" title="echo 相关"></a>echo 相关</h1><p>echo <code>$PATH</code> 先执行反引号里面的，之后打印出来 </p>
<p>echo $PATH; date 命令分隔符，执行两条命令换行打印 </p>
<p>echo -n $PATH; echo oldboy 一行输出 </p>
<p>echo 1234567 | sed -r ‘s#(3)(4)#<1><2> #g’ 替换为12<3><4> 567 </4></3></2></1></p>
<h1 id="wc-相关"><a href="#wc-相关" class="headerlink" title="wc 相关"></a>wc 相关</h1><p>ll | wc -l 计算当前目录下面的文件数量 </p>
<h1 id="sed-相关"><a href="#sed-相关" class="headerlink" title="sed 相关"></a>sed 相关</h1><p>ifconfig eth0 | sed -nr ‘2s#(.<em>)t (.</em>) n(.*)#2#gp’ 过滤出 ip 地址 </p>
<p>ip a s eth0 |sed -nr ‘3s#(.<em>)t (.</em>)/(.*)$#2#gp’ 过滤出 ip 地址 </p>
<h1 id="grep-相关"><a href="#grep-相关" class="headerlink" title="grep 相关"></a>grep 相关</h1><p>grep -o ‘[a-Z]’ oldboy.log |sort |uniq -c |sort -nr 查找文件中的字母并进行倒叙排序 </p>
<h1 id="添加克隆机后网卡设置"><a href="#添加克隆机后网卡设置" class="headerlink" title="添加克隆机后网卡设置"></a>添加克隆机后网卡设置</h1><p>hostnamectl set-hostname 主机名 </p>
<p>sed -i ‘s#100#8#g’ /etc/sysconfig/netword-scripts/ifcfg-eth[01] 设置内网 ip 和外网 ip </p>
<p>systemctl restart netword 重启网络服务 </p>
<p>bash 重新登录 bash </p>
<h1 id="关闭邮件通知"><a href="#关闭邮件通知" class="headerlink" title="关闭邮件通知"></a>关闭邮件通知</h1><p>echo “unset MAILCHECK” &gt;&gt; /etc/profile </p>
<p>source /etc/profile </p>
<h1 id="scp-相关"><a href="#scp-相关" class="headerlink" title="scp 相关"></a>scp 相关</h1><p>scp -r -P 520 ~/.vimrc <a href="mailto:root@192.168.11.171" target="_blank" rel="noopener">root@192.168.11.171</a>:/home/ 本地局域网传输文件到其他局域网里的虚拟机 </p>
<p>scp -P 522 docker_python3.6.tar.gz <a href="mailto:root@10.0.0.11" target="_blank" rel="noopener">root@10.0.0.11</a>:/home 从本机传到本机虚拟机上 </p>
<p><strong>持续更新</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>mac下配置github个人博客</title>
    <url>/2018/09/29/Mac%E4%BD%BF%E7%94%A8Hexo%E9%85%8D%E7%BD%AEGItHub%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h1><p>本来一直用博客园写博客的，奈何博客园界面惨不忍睹，而且自带的markdown编辑器更是烂的可以，于是在室友makeupstories的建议下开始尝试搭建自己的github博客，真是一路心酸啊！不过成就感也是大大滴。</p>
<h1 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二 准备工作"></a>二 准备工作</h1><h2 id="创建Github域名和放博客的库"><a href="#创建Github域名和放博客的库" class="headerlink" title="创建Github域名和放博客的库"></a>创建Github域名和放博客的库</h2><ol>
<li>首先需要注册一个<a href="https://github.com" target="_blank" rel="noopener">Github</a>账号。</li>
<li>注册之后需要新建一个库(repository)来存储网站，点击首页任意位置出现的New repository按钮创建仓库，注意这个仓库名不能随便写。例如我的Github账号为musibii，那么库名为musibii.github.io。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fvqopgrrbjj31340xwgqn.jpg" alt></li>
</ol>
<h2 id="安装Git、Nodejs和Hexo"><a href="#安装Git、Nodejs和Hexo" class="headerlink" title="安装Git、Nodejs和Hexo"></a>安装Git、Nodejs和Hexo</h2><p>Hexo可以说是最流行的博客框架了，基于Nodejs，想要搭建好，需要安装Git、Nodejs和Hexo。</p>
<ol>
<li>安装Git<br>可以直接在命令行使用brew来安装Git<br><code>$ brew install git</code><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fvqoq10wgij316y0mk12k.jpg" alt></li>
</ol>
<p>因为我之前已经安装了Git，所以这次给我安装了两个扩展包。</p>
<ol start="2">
<li><p>安装Nodejs<br>为了便于管理Nodejs版本，首先安装nvm，这是Nodejs版本管理器，可以实现Nodejs多版本切换。<br><code>$ curl -o-  [https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh](https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh)  | bash</code><br>安装完成后，重启终端并执行下列命令即可安装Node.js<br><code>$ nvm install \d</code><br>后面跟的是Node.js的版本，今天就是被这个给坑了，应该安装较新的版本，之前安装的为 4，然后一直报错。<br><code>$ nvm install 8</code><br>安装后在终端输入<br><code>$ nvm use node</code><br>就会使用最新的nodejs版本了。</p>
</li>
<li><p>安装Hexo<br><code>$ sudo npm install hexo-cli -g</code><br>注意需要sudo权限，不然会出错</p>
</li>
</ol>
<h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h1><p>接下来需要使用Hexo来初始化一个博客，然后根据自己的需求更改一些自定义配置，比如字体、动画效果、主题等等。</p>
<ol>
<li><p>创建博客<br>为自己的博客创建一个文件夹，然后cd 文件夹，并执行下面的代码。<br><code>$ hexo init username.github.io</code></p>
</li>
<li><p>更改主题<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fvqoqk8yvnj315m034myo.jpg" alt></p>
</li>
<li><p>基础配置<br>然后需要的就是在_config.yml里面修改个人信息，比如博客的主题、作者还有语言以及修改的主题名，最重要的是要和你的github仓库关联起来。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fvqoqw0o4tj30n8094my7.jpg" alt><br>其他的可以根据自己的需求酌情更改，比如我就增加了页面的动画效果<br><a href="https://theme-next.iissnan.com/theme-settings.html#use-motion" target="_blank" rel="noopener">Next主题动画效果</a></p>
</li>
</ol>
<h1 id="你的第一篇博客"><a href="#你的第一篇博客" class="headerlink" title="你的第一篇博客"></a>你的第一篇博客</h1><ol>
<li><p><code>$ hexo new &#39;你的博客名字&#39;</code><br>执行完后会在<br>‘username.github.io/source/_posts/‘目录下出现你的博客名字</p>
</li>
<li><p>博客使用markdown格式，编写完后执行<br><code>$ hexo server</code><br>如果出现下面的页面<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fvqor5lg9vj30rw07qq62.jpg" alt></p>
</li>
<li><p>在浏览器页面输入<br><code>http://localhost:4000</code><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fvqorcgdofj313k0sqwgx.jpg" alt><br>我的界面会和你们的不一样，出现了 Hello就说明成功了。</p>
</li>
<li><p>安装hexo-deployer-git –save自动部署发布工具<br><code>$ npm install hexo-deployer-git --save</code></p>
</li>
<li><p>发布博客<br><code>$ hexo deploy</code><br>结束后进入博客就可以看见了！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python模块之sys与os</title>
    <url>/2018/10/17/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%8Bsys%E4%B8%8Eos/</url>
    <content><![CDATA[<p><strong>python常用模块系列（二）：sys模块与os模块</strong></p>
<p>sys模块是python解释器和环境有关的一个模块；</p>
<p>os是python用来和操作系统进行交互的一个模块。</p>
<h1 id="一-sys"><a href="#一-sys" class="headerlink" title="一 sys"></a>一 sys</h1><ol>
<li>查看当前环境变量</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwb8v0z9nyj312g0r80vy.jpg" alt></p>
<ol start="2">
<li>查看已经加载的模块</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwb8y1ib7fj31kw0ql45b.jpg" alt></p>
<p>可以看出sys.modules是一个字典，key为加载模块的名字，values为加载模块的路径。</p>
<ol start="3">
<li>获取终端调用时的参数</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwb936i1inj315s0k4mz4.jpg" alt></p>
<p>终端输入的参数为argv[1]，默认当前文件名为第一个参数。</p>
<ol start="4">
<li>获取解释器的版本信息</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwb96w50gvj30yo0hwad3.jpg" alt></p>
<ol start="5">
<li>获取当前运行平台名称（windows为nt，macOS为darwin）</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwb98j1xnvj30t00h4412.jpg" alt></p>
<ol start="6">
<li>退出信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.exit(<span class="number">0</span>) <span class="comment"># 正常退出</span></span><br><span class="line">sys.exit(<span class="number">1</span>) <span class="comment"># 错误退出</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>接口版本</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.api_version)</span><br><span class="line"><span class="comment"># 运行结果 1013</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>了解</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.maxsize)</span><br><span class="line">print(sys.maxunicode)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="comment"># 9223372036854775807</span></span><br><span class="line"><span class="comment"># 1114111</span></span><br></pre></td></tr></table></figure>
<h1 id="二-os"><a href="#二-os" class="headerlink" title="二 os"></a>二 os</h1><ol>
<li>获取当前的工作目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.getcwd())</span><br><span class="line"><span class="comment"># 运行结果 /Users/jingxing/PycharmProjects/python全栈/day20/代码</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>切换工作目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.chdir(<span class="string">'/Users/jingxing/PycharmProjects/python全栈'</span>))</span><br><span class="line">print(os.getcwd())</span><br><span class="line"><span class="comment"># 运行结果 /Users/jingxing/PycharmProjects/python全栈</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取当前目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.curdir)</span><br><span class="line"><span class="comment"># 运行结果 .</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>获取上级目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">print(os.pardir)</span><br><span class="line"><span class="comment"># 运行结果 ..</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>获取系统的环境变量</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.environ)</span><br><span class="line"><span class="comment"># environ(&#123;'PATH': '/Users/jingxing/.nvm/versions/node/v4.9.1/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/python_study/mongodb/bin://Volumes/python_study/mongodb/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/python_study/Applications/mongodb-osx-x86_64-3.6.3/bin::/usr/local/mysql/bin', 'COMMAND_MODE': 'unix2003', 'VERSIONER_PYTHON_VERSION': '2.7', 'LS_OPTIONS': '--color=auto', 'LOGNAME': 'jingxing', 'XPC_SERVICE_NAME': 'com.apple.xpc.launchd.oneshot.0x10000004.pycharm', 'PWD': '/Users/jingxing/PycharmProjects/python全栈/day20/代码', 'PYCHARM_HOSTED': '1', 'NODE_PATH': '/Users/jingxing/.nvm/versions/node/v4.9.1/lib/node_modules', 'PYCHARM_MATPLOTLIB_PORT': '49379', 'PYTHONPATH': '/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend:/Users/jingxing/PycharmProjects/python全栈', 'NVM_CD_FLAGS': '', 'NVM_DIR': '/Users/jingxing/.nvm', 'SHELL': '/bin/bash', 'LSCOLORS': 'CxfxcxdxbxegedabagGxGx', 'PYTHONIOENCODING': 'UTF-8', 'SECURITYSESSIONID': '186a7', 'VERSIONER_PYTHON_PREFER_32_BIT': 'no', 'USER': 'jingxing', 'CLICOLOR': 'Yes', 'TMPDIR': '/var/folders/yl/3drd7wf93f90sfkgpc2zg9cr0000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.bIB1b2eyOD/Listeners', 'XPC_FLAGS': '0x0', 'PYTHONUNBUFFERED': '1', '__CF_USER_TEXT_ENCODING': '0x1F5:0x19:0x34', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.bHuC64fYdd/Render', 'LC_CTYPE': 'zh_CN.UTF-8', 'NVM_BIN': '/Users/jingxing/.nvm/versions/node/v4.9.1/bin', 'HOME': '/Users/jingxing', '__PYVENV_LAUNCHER__': '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3'&#125;)</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>创建多级目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'a/b/c'</span>)</span><br><span class="line"><span class="comment"># 会在当前文件路径创建多级目录</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>创建一个目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">'aa'</span>)</span><br><span class="line"><span class="comment"># 能且仅能创建一个目录</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>递归删除</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.removedirs(<span class="string">'a/b/c'</span>)</span><br><span class="line"><span class="comment"># 递归删除，只能删除空目录</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>删除一个目录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">'aa'</span>)</span><br><span class="line"><span class="comment"># 删除一个目录</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>删除文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈'</span>)</span><br><span class="line"><span class="comment"># 删除文件</span></span><br></pre></td></tr></table></figure>
<ol start="11">
<li>列出当前目录所有的文件及文件夹</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.listdir(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈'</span>))</span><br></pre></td></tr></table></figure>
<ol start="12">
<li>获取当前平台路径分隔符</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.seq)</span><br><span class="line"><span class="comment"># 运行结果 /</span></span><br></pre></td></tr></table></figure>
<ol start="13">
<li>获取当前平台换行符</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.lineseq, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>
<h1 id="三-os下的path模块"><a href="#三-os下的path模块" class="headerlink" title="三 os下的path模块"></a>三 os下的path模块</h1><ol>
<li>返回绝对路径</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.abspath(<span class="string">'a/b/c'</span>))</span><br><span class="line"><span class="comment"># 运行结果 /Users/jingxing/PycharmProjects/python全栈/day20/代码/a/b/c</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>将路径拆分为文件夹路径和文件名（返回元祖）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.split(<span class="string">'/Users/jingxing/PycharmProjects/python全栈/day20/代码/5.os下path模块.py'</span>))</span><br><span class="line"><span class="comment"># 运行结果 ('/Users/jingxing/PycharmProjects/python全栈/day20/代码', '5.os下path模块.py')</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取路径中的上一级</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.dirname(__file__))</span><br><span class="line"><span class="comment"># 运行结果 /Users/jingxing/PycharmProjects/python全栈/day20/代码</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>获取路径的最后一级名称</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.basename(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈/day20/代码/5.os下path模块.py'</span>))</span><br><span class="line"><span class="comment"># 运行结果 5.os下path模块.py</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>判断路径是否存在（返回布尔值）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">print</span> path.exists(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈/day20/代码/5.os下path模块.py'</span>)</span><br><span class="line"><span class="comment"># 运行结果 True</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>判断是否为绝对路径（返回布尔值）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.isabs(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈/day20/代码/5.os下path模块.py'</span>))</span><br><span class="line"><span class="comment"># 运行结果 True</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>路径拼接</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.join(<span class="string">'/Users/jingxing/PycharmProjects/'</span>, <span class="string">'day20'</span>))</span><br><span class="line"><span class="comment"># 运行结果 /Users/jingxing/PycharmProjects/day20</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>获取文件的大小</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.getsize(<span class="string">r'/Users/jingxing/PycharmProjects/python全栈'</span>))</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>大写变小写，斜杠根据当前平台修改</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.normcase(<span class="string">r'a/\b/\c'</span>))</span><br><span class="line"><span class="comment"># 运行结果 a/\b/\c</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>斜杠会修改为当前平台的分隔符，执行..来返回上一级</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">print(path.normpath(<span class="string">'a/b/c/../c'</span>))</span><br><span class="line"><span class="comment"># 运行结果 a/b/c</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模块之time与datetime</title>
    <url>/2018/10/16/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%8Btime%E4%B8%8Edatetime/</url>
    <content><![CDATA[<p><strong>python常用模块系列（一）：time模块与datetime</strong></p>
<p>time模块是python内置查看当前时间戳的一个模块；</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwa4yic9hqj31g401mq36.jpg" alt></p>
<p>datetime模块是用来对日期和时间进行操作的一个模块。</p>
<h1 id="一-time"><a href="#一-time" class="headerlink" title="一 time"></a>一 time</h1><h3 id="1-获得时间戳"><a href="#1-获得时间戳" class="headerlink" title="1 获得时间戳"></a>1 获得时间戳</h3><p>时间戳：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行‘’type(time.time())‘’，返回的是<strong>float</strong>类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.time())</span><br><span class="line"><span class="comment"># 运行结果 1539678307.779871</span></span><br></pre></td></tr></table></figure>
<h3 id="2-结构化时间字符串"><a href="#2-结构化时间字符串" class="headerlink" title="2 结构化时间字符串"></a>2 结构化时间字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime()) <span class="comment"># 返回一个元祖对象，里面是每个时间的值(东八区)</span></span><br><span class="line"><span class="comment"># 运行结果 time.struct_time(tm_year=2018, tm_mon=10, tm_mday=16, tm_hour=16, tm_min=48, tm_sec=4, tm_wday=1, tm_yday=289, tm_isdst=0)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime().tm_year) <span class="comment"># 单独获取某个时间属性</span></span><br><span class="line"><span class="comment"># 运行结果 2018</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.gmtime()) <span class="comment"># 世界统一时间，比北京时间晚8小时</span></span><br><span class="line"><span class="comment"># 运行结果 time.struct_time(tm_year=2018, tm_mon=10, tm_mday=16, tm_hour=8, tm_min=51, tm_sec=16, tm_wday=1, tm_yday=289, tm_isdst=0)</span></span><br></pre></td></tr></table></figure>
<h3 id="3-格式化的字符串时间"><a href="#3-格式化的字符串时间" class="headerlink" title="3 格式化的字符串时间"></a>3 格式化的字符串时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line">print(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>))</span><br><span class="line">print(time.strftime(<span class="string">'%Y-%m-%d %X %p'</span>))</span><br><span class="line"><span class="comment"># 运行结果 </span></span><br><span class="line"><span class="comment"># 2018-10-16 16:54:56 PM</span></span><br><span class="line"><span class="comment"># 2018-10-16 16:54:56 PM</span></span><br></pre></td></tr></table></figure>
<h3 id="4-三种格式之间的相互转换"><a href="#4-三种格式之间的相互转换" class="headerlink" title="4 三种格式之间的相互转换"></a>4 三种格式之间的相互转换</h3><ol>
<li>时间戳转为结构化</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime(time.time()))</span><br><span class="line"><span class="comment"># 运行结果 time.struct_time(tm_year=2018, tm_mon=10, tm_mday=16, tm_hour=16, tm_min=57, tm_sec=18, tm_wday=1, tm_yday=289, tm_isdst=0)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>结构化转字符串</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d"</span>,time.localtime(time.time())))</span><br><span class="line"><span class="comment"># 运行结果 2018-10-16</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>字符串转结构化</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">'2018-10-16'</span>, <span class="string">'%Y-%m-%d'</span>))</span><br><span class="line"><span class="comment"># 运行结果 time.struct_time(tm_year=2018, tm_mon=10, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=288, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>结构化转时间戳</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.mktime(time.strptime(<span class="string">'2018-10-15'</span>, <span class="string">'%Y-%m-%d'</span>)))</span><br><span class="line"><span class="comment"># 运行结果 1539532800.0</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>格林威治时间</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.asctime(time.localtime()))</span><br><span class="line">print(time.ctime())</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="comment"># Tue Oct 16 17:12:34 2018</span></span><br><span class="line"><span class="comment"># Fri Jan  2 08:00:00 1970</span></span><br></pre></td></tr></table></figure>
<h1 id="二-datetime"><a href="#二-datetime" class="headerlink" title="二 datetime"></a>二 datetime</h1><p>datetime是一个包，里面包含对时间的处理和日期的处理</p>
<ol>
<li>获取当前详细时间</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.datetime.now())</span><br><span class="line"><span class="comment"># 运行结果 2018-10-16 17:25:16.186114</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>获取时间的某一部分</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.datetime.now().hour) <span class="comment"># 分钟、年份等同理</span></span><br><span class="line"><span class="comment"># 运行结果 17</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>替换时间的某一部分</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">t1 = date.datetime.now()</span><br><span class="line">t1 = t1.replace(year=<span class="number">2019</span>)</span><br><span class="line">print(t1)</span><br><span class="line"><span class="comment"># 运行结果 2019-10-16 18:36:42.166986</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>时间差对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">t2 = datetime.timedelta(weeks=<span class="number">1</span>)</span><br><span class="line">t3 = datetime.datetime.now()</span><br><span class="line">print(t2 + t3)</span><br><span class="line"><span class="comment"># 运行结果 2018-10-23 18:40:10.481854</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>内置模块</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful 规范</title>
    <url>/2019/02/21/RESTful-%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="RESTful-规范"><a href="#RESTful-规范" class="headerlink" title="RESTful 规范"></a>RESTful 规范</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>rest 是一种软件架构风格，如果使用的是 rest 接口，那么就可以说你的接口是 restful。</p>
<p>rest接口是围绕‘’资源‘’展开的，利用 HTTP 的协议，其实 rest 可以和 HTTP 五段，但是大家普遍使用 rest 的都依托于HTTP 协议。而 HTTP 的 url 全称为（Uniform Resource Locator）中文翻译为统一资源定位符，在互联中中 HTTP 的 url 即资源。</p>
<h2 id="通用的-url-语法"><a href="#通用的-url-语法" class="headerlink" title="通用的 url 语法"></a>通用的 url 语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL = scheme&apos;://&apos;authority &apos;/&apos; path [&apos;?&apos; query][&apos;#&apos; fragmentn]</span><br></pre></td></tr></table></figure>
<ul>
<li>schme：指底层用的协议，如 HTTP、HTTPS、ftp 等</li>
<li>host： 服务器的 IP 地址或者域名</li>
<li>port： 端口，http 中默认为80</li>
<li>path：访问资源的路径，就是咱们各种 web 框架中定义的 route 路由</li>
<li>query：为发送给服务器的参数</li>
<li>fragment：锚点，定位到页面的资源，锚点为资源 id</li>
</ul>
<h2 id="什么是-RESTful"><a href="#什么是-RESTful" class="headerlink" title="什么是 RESTful"></a>什么是 RESTful</h2><ul>
<li>REST 与技术无关，代表的是一种软件架构风格，REST 是 Representational State Transfer 的简称，中文翻译为‘’表征状态转移‘’</li>
<li>REST 从资源的角度来审视整个网络，它将分布在网络中某个节点的资源通过 URL 进行标识，客户端应用通过 URL 来获取资源的表征，获得这些表征使这些应用转变状态</li>
<li>REST 与技术无关，代表的是一种软件架构风格，REST 是 Representational State Transfer 的简称，中文翻译为‘’表征状态转移‘’</li>
<li>所以的数据，不过是通过网络获取的还是操作（增删查改）的数据，都是自愿，将一切数据视为自愿是 REST 区别与其他架构风格的最本质属性</li>
<li>对于 REST 这种面向资源的架构风格，有人提出一种全新的结构理念，即：面向资源架构（ROA：Resource Oriented Architecture）</li>
</ul>
<h2 id="RESTful-API-设计规范"><a href="#RESTful-API-设计规范" class="headerlink" title="RESTful API 设计规范"></a>RESTful API 设计规范</h2><p>RESTful API 设计规范总共有十条，对于这十条规范，更多的是建议使用，而不是强制使用。</p>
<ol>
<li><p>API 与用户的通信协议，总是使用 HTTPS 协议</p>
</li>
<li><p>域名</p>
<ol>
<li><a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>        尽量将 API 部署在专用域名（存在跨域问题）</li>
<li><a href="https://example.org/api" target="_blank" rel="noopener">https://example.org/api</a>                 API很简单</li>
</ol>
</li>
<li><p>版本</p>
<ol>
<li>URL，如<a href="https://api.example.com/v1" target="_blank" rel="noopener">https://api.example.com/v1</a></li>
<li>请求头                                               跨域时，引发发送多次请求</li>
</ol>
</li>
<li><p>路径，视网络上任何东西都是自愿，均使用名词表示（可复数）</p>
<ol>
<li><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></li>
<li><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></li>
<li><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></li>
</ol>
</li>
<li><p>method</p>
<ol>
<li>GET：从服务器获取资源（一项或多项）</li>
<li>POST： 在服务器新建一个资源</li>
<li>PUT： 在服务器更新资源（客户端提供改变后的完整资源）</li>
<li>PATCH：在服务器更新资源（客户端提供改变的属性）</li>
<li>DELETE： 从服务器删除资源</li>
</ol>
</li>
<li><p>过滤，通过在 url 上传参的形式传递搜索条件</p>
<ol>
<li><a href="https://api.example.com/v1/zoos?limit=10：指定返回记录的数量" target="_blank" rel="noopener">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li>
<li><a href="https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置" target="_blank" rel="noopener">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li>
<li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数" target="_blank" rel="noopener">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li>
<li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序" target="_blank" rel="noopener">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li>
<li><a href="https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件" target="_blank" rel="noopener">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li>
</ol>
</li>
<li><p>状态码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">Forbidden - [*] 表示用户得到授权（与<span class="number">401</span>错误相对），但是访问是被禁止的。</span><br><span class="line">NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br><span class="line"></span><br><span class="line">更多看这里：http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误处理，应该返回错误信息，将 error 当做 key</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"error"</span>: <span class="string">"错误信息"</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /collection：返回资源对象的列表（数组）</span><br><span class="line">GET /collection/resource：返回单个资源对象</span><br><span class="line">POST /collection：返回新生成的资源对象</span><br><span class="line">PUT /collection/resource：返回完整的资源对象</span><br><span class="line">PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">DELETE /collection/resource：返回一个空文档</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hypermedia API，RESTful API 最好做到 Hypermedia，机返回结果中提供链接，联向其他 API 方法，使得用户不查文档，也知道下一步应该做什么</p>
</li>
</ol>
<h2 id="基于-Django-实现-RESTful-规范"><a href="#基于-Django-实现-RESTful-规范" class="headerlink" title="基于 Django 实现 RESTful 规范"></a>基于 Django 实现 RESTful 规范</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url(r'^books/', views.Books.as_view()),</span></span><br><span class="line">    url(<span class="string">r'^book/(?P&lt;id&gt;\d+)/'</span>, views.Book.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">        book_list = models.Book.objects.all()</span><br><span class="line">        book_ser = BookSerib(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'book_ser.data'</span>, book_ser.data)</span><br><span class="line">        response[<span class="string">'books'</span>] = book_ser.data</span><br><span class="line">        print(<span class="string">'response'</span>, response)</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>restful规范</category>
      </categories>
  </entry>
  <entry>
    <title>Sorting HOW TO</title>
    <url>/2020/07/08/Sorting-HOW-TO/</url>
    <content><![CDATA[<p>作者：Andrew Dalke and Raymond Hettinger<br>版本：0.1</p>
<p>python 列表有内置函数<code>list.sort()</code>方法可以原地修改列表。也有内置函数<code>sorted()</code>方法从一个可迭代对象创建一个新的排序列表。</p>
<p>在该文档中，我们使用 python 来探索排序数据中的各种技术。</p>
<h2 id="Sorting-Basics"><a href="#Sorting-Basics" class="headerlink" title="Sorting Basics"></a>Sorting Basics</h2><p>一个简单的升序是非常简单的：只需要调用<code>sorted()</code>函数。这会返回一个新的排序列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>你也可以使用<code>list.sort()</code>方法。这会原地修改列表（并且返回<code>None</code>为了避免迷惑）。通常这没有<code>sorted()</code>便利-但如果你不需要原始列表，这样效率会更高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>另一个不一样的地方是<code>list.sort()</code>方法仅仅只为列表定义。相反的是，<code>sorted()</code>函数接受任意迭代类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(&#123;<span class="number">1</span>: <span class="string">'D'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'B'</span>, <span class="number">4</span>: <span class="string">'E'</span>, <span class="number">5</span>: <span class="string">'A'</span>&#125;)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Key-Functions"><a href="#Key-Functions" class="headerlink" title="Key Functions"></a>Key Functions</h2><p><code>list.sort()</code> 和 <code>sorted()</code> 都有一个 <code>key</code> 参数来指定在每一个列表元素事先作比较时调用的函数。</p>
<p>举个例子，下面是不区分大小写的字符串比较：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(<span class="string">"This is a test string from Andrew"</span>.split(), key=str.lower)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'Andrew'</span>, <span class="string">'from'</span>, <span class="string">'is'</span>, <span class="string">'string'</span>, <span class="string">'test'</span>, <span class="string">'This'</span>]</span><br></pre></td></tr></table></figure>
<p><code>key</code>参数的值应该是一个接受一个参数并且返回用来排序目的的 key 的函数。这种技术很快因为对每一个输入记录来说只会调用一次关键字函数。</p>
<p>一种常见的模式是使用某些对象的索引作为键来对复杂的对象进行排序。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student_tuples = [</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line">...]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_tuples, key=<span class="keyword">lambda</span> student[<span class="number">2</span>])  <span class="comment"># sort by age</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<p>具有命名属性的对象也使用相同的技术。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, grade, age)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.grade = grade</span><br><span class="line"><span class="meta">... </span>        self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> repr((self.name, self.grade, self.age))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student_objects = [</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'hane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects, key=<span class="keyword">lambda</span> studnet: student.age)  <span class="comment"># sort by age</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="Operator-Module-Functions"><a href="#Operator-Module-Functions" class="headerlink" title="Operator Module Functions"></a>Operator Module Functions</h2><p>上面显示的按键功能模式很常见，所以 python 提供更便捷的函数使访问器功能更轻松，更快捷。<code>operator</code> 模块有<code>itemgetter()</code>，<code>attrgetter()</code> 和一个 <code>methodcaller()</code> 函数。</p>
<p>使用这种函数，上面的例子会变得更简单更快速：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted(student_tuples, key=itemgetter(<span class="number">2</span>))</span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects, key=attrgetter(<span class="string">'age'</span>))</span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<p><code>operator</code> 模块函数允许多种等级的排序。例如，先通过<code>grade</code>然后通过<code>age</code>排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_tuples, key=itemgetter(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">[(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects, key=attrgetter(<span class="string">'grade'</span>, <span class="string">'age'</span>))</span><br><span class="line">[(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="Asecnding-and-Descending"><a href="#Asecnding-and-Descending" class="headerlink" title="Asecnding and Descending"></a>Asecnding and Descending</h2><p><code>list.sort()</code>和<code>sorted()</code>接收一个倒叙参数通过布尔值。这常被用来标记降序排序。例如：使用年龄倒叙排序获取学生的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_tuples, key=itemgetter(<span class="number">2</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">[(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects, key=attrgetter(<span class="string">'age'</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">[(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="Sort-Stability-and-Complex-Sorts"><a href="#Sort-Stability-and-Complex-Sorts" class="headerlink" title="Sort Stability and Complex Sorts"></a>Sort Stability and Complex Sorts</h2><p>排序保证是稳定的。这意味着多个记录有相同的键，他们的原始排序是保存完好的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">1</span>), (<span class="string">'red'</span>, <span class="number">2</span>), (<span class="string">'blue'</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(data, key=itemgetter(<span class="number">0</span>))</span><br><span class="line">[(<span class="string">'blue'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'red'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<p>请注意，蓝色的两个记录如何保持其原始顺序，从而确保（’blue’，1）在（’blue’，2）前面。</p>
<p>这个奇妙的属性让你可以通过一系列的排序步骤来构建复杂的排序。例如，先通过班级降序然后通过年龄升序来排序学生数据，首先对年龄进行排序，然后使用等级再次进行排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = sorted(student_objects, key=attrgetter(<span class="string">'age'</span>))  <span class="comment"># sort on secondary key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(s, key=attrgetter(<span class="string">'grade'</span>), reverse=<span class="literal">True</span>)  <span class="comment"># now sort on primary key, descending</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<p>可以将其抽象到包装函数中，该包装函数可以获取字段的列表和元祖，并可以对它们进行多次排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">multisort</span><span class="params">(xs, specs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> key, reverse <span class="keyword">in</span> reversed(specs):</span><br><span class="line"><span class="meta">... </span>        xs.sort(key=attrgetter(key), reverse=reverse)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> xs</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multisort(list(student_objects), ((<span class="string">'grade'</span>, <span class="literal">True</span>), (<span class="string">'age'</span>, <span class="string">'False'</span>)))</span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<p>python 中使用的<code>Timsort</code>算法可以高效的执行多种排序，因为它可以利用数据集中已经存在的任何排序。</p>
<h2 id="The-Old-Way-Using-Decorate-Sort-Undecorate"><a href="#The-Old-Way-Using-Decorate-Sort-Undecorate" class="headerlink" title="The Old Way Using Decorate-Sort-Undecorate"></a>The Old Way Using Decorate-Sort-Undecorate</h2><p>经过三个步骤，这个习惯用法被称为<code>Decorate-Sort-Undecorate</code>。</p>
<ul>
<li>首先，初始列表用控制排序顺序的新增修饰。</li>
<li>第二，装饰列表已排序。</li>
<li>最后，装饰将被删除，从而创建一个仅包含新顺序中的初识值的列表。</li>
</ul>
<p>例如，通过使用 DSU 方法按年级对学生数据进行排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>decorated = [(student.grade, i, student) <span class="keyword">for</span> i, student <span class="keyword">in</span> enumerate(student_objects)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decorated.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[student <span class="keyword">for</span> grade, i, student <span class="keyword">in</span> decorated]               <span class="comment"># undecorate</span></span><br><span class="line">[(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
<p>这种之所以有用，是因为在字典上比较了元祖；比较第一项；如果它们相同，则比较第二个项目，以此类推。</p>
<p>并非在所有情况下都严格要求在装饰列表中包括索引i，但包括索引i有两个好处：</p>
<ul>
<li>排序是稳定的–如果两个项目具有相同的键，则它们的顺序将保留在排序列表中。</li>
<li>原始项目不必具有可比性，因为装饰后的元组的顺序最多由前两个项目决定。 因此，例如原始列表可能包含无法直接排序的复数。</li>
</ul>
<p>这个习惯用语的另一个名字是Schwartzian变换，它是在Randal L. Schwartz（在Perl程序员中广受欢迎）之后实现的。</p>
<p>既然Python排序提供了关键功能，那么就不再需要这种技术了。</p>
<h2 id="The-Old-Way-Using-the-cmp-Parameter"><a href="#The-Old-Way-Using-the-cmp-Parameter" class="headerlink" title="The Old Way Using the cmp Parameter"></a>The Old Way Using the cmp Parameter</h2><p>本HOWTO中提供的许多构造都假定使用Python 2.4或更高版本。 在此之前，没有内置的sorted（）并且list.sort（）没有关键字参数。 相反，所有Py2.x版本都支持cmp参数来处理用户指定的比较功能。</p>
<p>在Py3.0中，完全删除了cmp参数（这是简化和统一语言的较大工作的一部分，从而消除了丰富的比较与<strong>cmp</strong>()魔术方法之间的冲突）。</p>
<p>在Py2.x中，sort允许一个可选函数，可以进行比较。 该函数应该接受两个参数进行比较，然后返回小于等于的负值，如果相等则返回零，或者大于等于返回正值。 例如，我们可以这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">numeric_compare</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x - y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], cmp=numeric_compare)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>或者，您可以使用以下方法反转比较顺序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reverse_numeric</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> y - x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], cmp=reverse_numeric)</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>当将代码从Python 2.x移植到3.x时，当您让用户提供比较功能并且需要将其转换为键功能时，可能会出现这种情况。 以下包装器使操作变得简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_to_key</span><span class="params">(mycmp)</span>:</span></span><br><span class="line">    <span class="string">'Convert a cmp= function into a key= function'</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">K</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj, *args)</span>:</span></span><br><span class="line">            self.obj = obj</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) == <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt;= <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt;= <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) != <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> K</span><br></pre></td></tr></table></figure>
<p>要转换为键函数，只需包装旧的比较函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], key=cmp_to_key(reverse_numeric))</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>在Python 3.2中，functools.cmp_to_key()函数已添加到标准库的functools模块中。</p>
<h2 id="Odd-and-Ends"><a href="#Odd-and-Ends" class="headerlink" title="Odd and Ends"></a>Odd and Ends</h2><ul>
<li>对于支持区域设置的排序，请将locale.strxfrm（）用于键函数，将locale.strcoll（）用于比较函数。</li>
<li>反向参数仍保持排序稳定性（以便具有相同键的记录保持原始顺序）。 有趣的是，可以使用两次内置的reversed（）函数在没有参数的情况下模拟这种效果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">1</span>), (<span class="string">'red'</span>, <span class="number">2</span>), (<span class="string">'blue'</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>standard_way = sorted(data, key=itemgetter(<span class="number">0</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>double_reversed = list(reversed(sorted(reversed(data), key=itemgetter(<span class="number">0</span>))))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> standard_way == double_reversed</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>standard_way</span><br><span class="line">[(<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'red'</span>, <span class="number">2</span>), (<span class="string">'blue'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<ul>
<li>在两个对象之间进行比较时，保证排序例程使用<strong>lt</strong>()。 因此，通过定义<strong>lt</strong>()方法很容易将标准排序顺序添加到类中：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__lt__ = <span class="keyword">lambda</span> self, other: self.age &lt; other.age</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects)</span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<ul>
<li>关键功能不必直接取决于要排序的对象。 关键功能也可以访问外部资源。 例如，如果学生成绩存储在字典中，则可以将其用于对学生姓名的单独列表进行排序：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>students = [<span class="string">'dave'</span>, <span class="string">'john'</span>, <span class="string">'jane'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newgrades = &#123;<span class="string">'john'</span>: <span class="string">'F'</span>, <span class="string">'jane'</span>:<span class="string">'A'</span>, <span class="string">'dave'</span>: <span class="string">'C'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(students, key=newgrades.__getitem__)</span><br><span class="line">[<span class="string">'jane'</span>, <span class="string">'dave'</span>, <span class="string">'john'</span>]</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Vue（二）</title>
    <url>/2019/02/18/Vue%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-系列博客（二）"><a href="#Vue-系列博客（二）" class="headerlink" title="Vue 系列博客（二）"></a>Vue 系列博客（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客介绍 Vue 中的组件相关知识。</p>
<h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><ol>
<li>每一个组件都是 Vue 实例；</li>
<li>每个组件均具有自身的模板 template，根组件的模板就是挂载点；</li>
<li>每个组件模板只能拥有一个根标签；</li>
<li>子组件的数据具有作用域，以达到组件的复用。</li>
</ol>
<h3 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// 通过 new Vue 创建的实例就是根组件(实例与组件一一对应，一个实例就是一个组件)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 每个组件均拥有模板 template</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'根组件'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 模板: 由""包裹的 html 代码块，出现在组件的内部，赋值给组建的$template变量</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 显式书写模块，就会替换挂载点，但根组件必须拥有挂载点</span></span></span><br><span class="line"><span class="xml">        template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>显式模块<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local-tag</span>&gt;</span><span class="tag">&lt;/<span class="name">local-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local-tag</span>&gt;</span><span class="tag">&lt;/<span class="name">local-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> localTag = &#123;</span></span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnAction"</span>&gt;</span>局部&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnAction () &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.count ++</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">'local-tag'</span>: localTag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global-tag</span>&gt;</span><span class="tag">&lt;/<span class="name">global-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global-tag</span>&gt;</span><span class="tag">&lt;/<span class="name">global-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	Vue.component(<span class="string">'global-tag'</span>, &#123;</span></span><br><span class="line">		data () &#123;</span><br><span class="line"><span class="javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line">				count: 0</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"><span class="xml">		template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnAction"</span>&gt;</span>全局&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line">		methods: &#123;</span><br><span class="line">			btnAction () &#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.count ++</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="父子组件通信（通过绑定属性的方式进行数据传递）"><a href="#父子组件通信（通过绑定属性的方式进行数据传递）" class="headerlink" title="父子组件通信（通过绑定属性的方式进行数据传递）"></a>父子组件通信（通过绑定属性的方式进行数据传递）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global-tag</span> <span class="attr">:sup_data1</span>=<span class="string">'sup_data1'</span> <span class="attr">:supData2</span>=<span class="string">'sup_data2'</span>&gt;</span><span class="tag">&lt;/<span class="name">global-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	Vue.component(<span class="string">'global-tag'</span>, &#123;</span></span><br><span class="line"><span class="javascript">		props:[<span class="string">'sup_data1'</span>, <span class="string">'supdata2'</span>],</span></span><br><span class="line"><span class="xml">		template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; sup_data1 &#125;&#125; &#123;&#123; supdata2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="javascript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		el: <span class="string">'#app'</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="javascript">			sup_data1: <span class="string">'数据1'</span>,</span></span><br><span class="line"><span class="javascript">			sup_data2: <span class="string">'数据2'</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="子父组件通信（通过发送事件请求的方式进行数据传递）"><a href="#子父组件通信（通过发送事件请求的方式进行数据传递）" class="headerlink" title="子父组件通信（通过发送事件请求的方式进行数据传递）"></a>子父组件通信（通过发送事件请求的方式进行数据传递）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>子父通信<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">balance</span>&gt;</span><span class="tag">&lt;/<span class="name">balance</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;show&gt;&lt;/show&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/Vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'balance'</span>, &#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">show</span> @<span class="attr">show-balance</span>=<span class="string">"show_balance"</span>&gt;</span><span class="tag">&lt;/<span class="name">show</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span></span></span><br><span class="line">            您的余额：￥好多钱</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        `,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            show_balance: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data'</span>, data);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.show = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'show'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"on_click()"</span>&gt;</span>显示余额<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            on_click() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'show-balance'</span>, &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue（一）</title>
    <url>/2019/02/15/Vue%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue系列博客（一）"><a href="#Vue系列博客（一）" class="headerlink" title="Vue系列博客（一）"></a>Vue系列博客（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博客开介绍 Vue框架，Vue.js是一个用于创建用户界面的开源 JavaScript 框架，也是一个创建单页面应用的 Web 应用框架。Vue.js是一款流行的 JavaScript 前端框架，旨在更好地组织与简化Web 开发。Vue 所关注的核心是 MVC 模式中的视图层，同时，它也能方便的回去数据更新，并通过组件内部特定的方法实现视图与模型的交互。</p>
<h3 id="什么是-Vue？"><a href="#什么是-Vue？" class="headerlink" title="什么是 Vue？"></a>什么是 Vue？</h3><p>Vue.js是一个渐进式的 JavaScript 框架。</p>
<p>渐进式：Vue 小到控制页面中的一个变量到页面一块内容到整个页面，最终大到控制整个项目，都可以用 Vue 框架来实现。</p>
<h3 id="Vue-可以做什么？"><a href="#Vue-可以做什么？" class="headerlink" title="Vue 可以做什么？"></a>Vue 可以做什么？</h3><p>可以将数据渲染到指定区域（数据可以由后台获取，也可以由前台自己产生），可以与页面完成基于数据的交互。</p>
<h2 id="在页面中使用-Vue"><a href="#在页面中使用-Vue" class="headerlink" title="在页面中使用 Vue"></a>在页面中使用 Vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&#123;&#123; &#125;&#125; 会被vue解析为数据的渲染的指定语法--&gt;</span></span><br><span class="line">        &#123;&#123; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        &#123;&#123; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如何使用jq框架 &lt;= 拿到jq框架的对象 $ | jQuery</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 类比：如何使用vue框架 &lt;= 拿到vue框架的对象 new Vue()</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// vue对象需要手动创建， 原因，一个vue对象可以只控制页面中的某一部分， 如果一个页面有多个部分都需要被控制，那么就需要创建多个vue对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue对象如何与控制的页面进行关联（绑定），采用的是vue对象中的挂载点(挂载点可以唯一标识页面中的某一个区域)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#box1"</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 挂在在id为box1的div上，那么该div下的所有内容都由该vue对象来控制</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'.box2'</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 挂在在class为box2的div上，那么该div下的所有内容都由该vue对象来控制（尽量使用id，唯一标识）</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-的挂载点（Vue-实例）"><a href="#Vue-的挂载点（Vue-实例）" class="headerlink" title="Vue 的挂载点（Vue 实例）"></a>Vue 的挂载点（Vue 实例）</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue实例会根据数据产生虚拟DOM,最终替换掉挂载点的真实DOM(不要挂在到body上)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">"今晚嘿嘿"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果需要使用vue对象(实例), 那么久可以接受Vue创建的结果, 反之就不需要接收</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.$attrs); <span class="comment">// vue实例的变量都是以$开头</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.$data.msg);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.msg);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// app对象 = new Vue()实例 = 标签div#app组件</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-的基础指令"><a href="#Vue-的基础指令" class="headerlink" title="Vue 的基础指令"></a>Vue 的基础指令</h2><h3 id="文本指令"><a href="#文本指令" class="headerlink" title="文本指令"></a>文本指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-text 为vue的文本指令 ="info" , info为vue实例data中的一个变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"res"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            info: <span class="string">"插值表达式"</span>,</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">"文本指令"</span>,</span></span><br><span class="line"><span class="xml">            res: "<span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗的文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="斗篷指令"><a href="#斗篷指令" class="headerlink" title="斗篷指令"></a>斗篷指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    [v-cloak] &#123; display: none; &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="javascript">			msg: <span class="string">"message"</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免页面闪烁--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind:属性 = "变量" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果abc自定义属性被v-bind:指令绑定了,后面的值也会成为vue变量, 如果就想是普通字符串, 再用''包裹 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- : 就是 v-bind: 的简写方式 (1.常用 2.一定且只操作属性)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:abc</span>=<span class="string">"'abc'"</span> <span class="attr">v-bind:title</span>=<span class="string">"h_info"</span> <span class="attr">:def</span>=<span class="string">"hehe"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--最常用的两个属性 class | style--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--class--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 单类名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[a, b]"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 多类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;c: d&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 了解: c为类名,是否起作用取决于d值为true|false 开关类名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--style--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- s1为一套样式 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[s1, s2, &#123;textAlign: ta&#125;]"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 了解: s1,s2均为一套样式, ta是一个变量,专门赋值给textAlign("text-align") --&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            h_info: <span class="string">"悬浮提示"</span>,</span></span><br><span class="line"><span class="javascript">            hehe: <span class="string">"呵呵"</span>,</span></span><br><span class="line"><span class="javascript">            a: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="javascript">            b: <span class="string">'rule'</span>,</span></span><br><span class="line"><span class="javascript">            d: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            s1: &#123; <span class="comment">// 样式1: 值1, ..., 样式n: 值n</span></span></span><br><span class="line"><span class="javascript">                width: <span class="string">'200px'</span>,</span></span><br><span class="line"><span class="javascript">                height: <span class="string">'200px'</span>,</span></span><br><span class="line"><span class="javascript">                background: <span class="string">'red'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            s2: &#123;</span><br><span class="line"><span class="javascript">                borderRadius: <span class="string">'50%'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            ta: <span class="string">'center'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="事件指令"><a href="#事件指令" class="headerlink" title="事件指令"></a>事件指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on:事件 = "变量 简写 @ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件绑定的变量可以在data中赋值,但建议在methods中赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click</span>=<span class="string">"fn1"</span>&gt;</span>11111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"fn2"</span>&gt;</span>22222222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue事件的绑定可以传自定义参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"fn3(333)"</span>&gt;</span>3333333333333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue事件的绑定不传自定义参数, 默认将事件对象传过去了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"fn4"</span>&gt;</span>4444444444444444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue事件的绑定传自定义参数, 还要将事件对象传过去了, 要明确传$event--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"fn5(555, $event)"</span>&gt;</span>5555555555555555<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 事件在data中提供一个函数地址,可以实现事件</span></span></span><br><span class="line"><span class="javascript">            fn1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"11111111111111"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 事件尽量(要求)都放在vue实例的methods中</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            fn2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"22222222222222"</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            fn3 (arg) &#123;  <span class="comment">// ES6语法</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            fn4: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(ev)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            fn5: <span class="function"><span class="keyword">function</span> (<span class="params">arg, ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(ev)</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单指令"><a href="#表单指令" class="headerlink" title="表单指令"></a>表单指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model = "变量" 本质操作的就是表单元素的value --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-model就是完成数据的双向绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"info"</span>&gt;</span> <span class="comment">&lt;!-- info变量就是代表输入框的value --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; info &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-once只会被赋值一次,就不再改变,并且要结合插值表达式使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>=<span class="string">"info"</span>&gt;</span>&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript"><span class="comment">//            info: "初始value",</span></span></span><br><span class="line"><span class="javascript">            info: <span class="string">""</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>显隐切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-if --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box r"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box o"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.条件渲染的值为true|false --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.true代表标签显示方式渲染 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.false v-if不渲染到页面,v-show以display:none渲染到页面,但也不会显示 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-if v-else-if v-else 案例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeWrap(0)"</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeWrap(1)"</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeWrap(2)"</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- red页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap red"</span> <span class="attr">v-if</span>=<span class="string">"tag == 0"</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- green页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap green"</span> <span class="attr">v-else-if</span>=<span class="string">"tag == 1"</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- blue页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap blue"</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-if相关分支操作,在未显示情况下,是不会被渲染到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过key全局属性操作后,渲染过的分支会建立key对应的缓存,提高下一次渲染速度 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-show 案例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeMain(0)"</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeMain(1)"</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseover</span>=<span class="string">"changeMain(2)"</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- red页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main red"</span> <span class="attr">v-show</span>=<span class="string">"whoShow(0)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- green页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main green"</span> <span class="attr">v-show</span>=<span class="string">"whoShow(1)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- blue页面逻辑结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main blue"</span> <span class="attr">v-show</span>=<span class="string">"whoShow(2)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="javascript">			isShow: <span class="literal">false</span>,</span></span><br><span class="line">			tag: 0,</span><br><span class="line">			flag: 0</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			toggle () &#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			changeWrap (num) &#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.tag = num;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			changeMain (num) &#123;</span><br><span class="line"><span class="javascript">				<span class="comment">// this.flag num</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.flag = num;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			whoShow (num) &#123;</span><br><span class="line"><span class="javascript">				<span class="comment">// this.flag num</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="keyword">this</span>.flag == num;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-for="item in items" --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历的对象: 数组[] 对象(字典)&#123;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list[0] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list[1] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list[2] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list[3] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list[4] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- n为遍历的元素值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in list"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 一般列表渲染需要建立缓存 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表渲染是循环,需要赋值变量给key,使用key需要v-bind:处理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-for变量数组[]时,接收两个值时,第一个为元素值,第二个为元素索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(n, i) in list"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span>value:&#123;&#123; n &#125;&#125; | index: &#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dic['name'] &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dic.age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dic.gender &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-for变量对象&#123;&#125;时,接收三个值时,第一个为元素值,第二个为元素键,第三个为元素索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(v, k, i) in dic"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span>value:&#123;&#123; v &#125;&#125; | key:&#123;&#123; k &#125;&#125; | index: &#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 遍历的嵌套 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(person, index) in persons"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">style</span>=<span class="string">"height: 21px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(v, k) in person"</span> <span class="attr">:key</span>=<span class="string">"k"</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span>&#123;&#123; k &#125;&#125; : &#123;&#123; v &#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="javascript">			msg: <span class="string">"列表渲染"</span>,</span></span><br><span class="line">			list: [1, 2, 3, 4, 5],</span><br><span class="line">			dic: &#123;</span><br><span class="line"><span class="javascript">				name: <span class="string">'zero'</span>,</span></span><br><span class="line">				age: 88888,</span><br><span class="line"><span class="javascript">				gender: <span class="string">'god'</span></span></span><br><span class="line">			&#125;,</span><br><span class="line">			persons: [</span><br><span class="line"><span class="javascript">				&#123;<span class="attr">name</span>: <span class="string">"zero"</span>, <span class="attr">age</span>: <span class="number">8</span>&#125;,</span></span><br><span class="line"><span class="javascript">				&#123;<span class="attr">name</span>: <span class="string">"egon"</span>, <span class="attr">age</span>: <span class="number">78</span>&#125;,</span></span><br><span class="line"><span class="javascript">				&#123;<span class="attr">name</span>: <span class="string">"liuXX"</span>, <span class="attr">age</span>: <span class="number">77</span>&#125;,</span></span><br><span class="line"><span class="javascript">				&#123;<span class="attr">name</span>: <span class="string">"yXX"</span>, <span class="attr">age</span>: <span class="number">38</span>&#125;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="todolist-案例"><a href="#todolist-案例" class="headerlink" title="todolist 案例"></a>todolist 案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"val"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"submitMsg"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(v, i) in list"</span> <span class="attr">:key</span>=<span class="string">"i"</span> @<span class="attr">click</span>=<span class="string">"removeMsg(i)"</span>&gt;</span>&#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123; list &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="javascript">			val: <span class="string">""</span>,</span></span><br><span class="line">			list: []</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			submitMsg () &#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">if</span> (<span class="keyword">this</span>.val) &#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">this</span>.list.push(<span class="keyword">this</span>.val);</span></span><br><span class="line"><span class="javascript">					<span class="keyword">this</span>.val = <span class="string">""</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			removeMsg(index) &#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.list.splice(index, <span class="number">1</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-的实例成员"><a href="#Vue-的实例成员" class="headerlink" title="Vue 的实例成员"></a>Vue 的实例成员</h2><h3 id="el：实例"><a href="#el：实例" class="headerlink" title="el：实例"></a>el：实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">'#app'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例与页面挂载点一一对应</span></span><br><span class="line"><span class="comment">// 一个页面中可以出现多个实例对应多个挂载点</span></span><br><span class="line"><span class="comment">// 实例只操作挂载点内部内容</span></span><br></pre></td></tr></table></figure>
<h3 id="data：数据"><a href="#data：数据" class="headerlink" title="data：数据"></a>data：数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'数据'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.$data.msg); <span class="comment">// 作为属性取值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.msg); <span class="comment">// 作为组件获取值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- data 为插值表达式中的变量提供数据 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- data 中的数据可以通过 Vue 实例直接或间接访问 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="methods：方法"><a href="#methods：方法" class="headerlink" title="methods：方法"></a>methods：方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .box &#123;</span><br><span class="line">        background-color: orange</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">classs</span>=<span class="string">"box"</span> <span class="attr">v-on:click</span>=<span class="string">"pClick"</span>&gt;</span></span><br><span class="line">        测试</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-on:mouseover</span>=<span class="string">"pOver"</span>&gt;</span></span><br><span class="line">        测试</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            pClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 点击测试</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            pOver: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 悬浮测试</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 了解 v-on: 为事件绑定的指令 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- methods 为事件提供实现体 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="computed-计算"><a href="#computed-计算" class="headerlink" title="computed: 计算"></a>computed: 计算</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; c &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// 一个变量依赖于多个变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            a: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">            b: <span class="string">""</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this代表该vue实例</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="watch-监听"><a href="#watch-监听" class="headerlink" title="watch: 监听"></a>watch: 监听</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"ab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; a &#125;&#125;</span><br><span class="line">        &#123;&#123; b &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// 多个变量依赖于一个变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            ab: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">            a: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">            b: <span class="string">""</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            ab: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 逻辑根据需求而定</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.a = <span class="keyword">this</span>.ab[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.b = <span class="keyword">this</span>.ab[<span class="number">1</span>];</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="delimiters-分隔符"><a href="#delimiters-分隔符" class="headerlink" title="delimiters: 分隔符"></a>delimiters: 分隔符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    $&#123; msg &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    	el: <span class="string">'#app'</span>,</span></span><br><span class="line">    	data: &#123;</span><br><span class="line"><span class="javascript">    		msg: <span class="string">'message'</span></span></span><br><span class="line">    	&#125;,</span><br><span class="line"><span class="javascript">        delimiters: [<span class="string">'$&#123;'</span>, <span class="string">'&#125;'</span>]</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Web身份验证、会话管理和访问控制</title>
    <url>/2019/05/07/Web%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E3%80%81%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%E5%92%8C%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p><strong>本文翻译自</strong>：<a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Session_Management_Cheat_Sheet.md#introduction" target="_blank" rel="noopener">Web身份验证、会话管理和访问控制</a></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Web身份验证、会话管理和访问控制:</p>
<p>一个网站会话是用户的一系列的网络 http 请求和响应事务关联。现代而复杂的web应用程序要求每个用户的信息和状态固定在多请求的持续期间。因此，会话提供建立变量的能力 - 像访问权限和本地化设置 - 适用于用户在网站会话持续期间应用用户的每次交互。</p>
<p>网站应用程序会创建会话并且在每个用户的第一次请求之后保持对匿名用户的追踪。一个例子就是会保持用户的语言设置。另外，网站应用程序在用户通过认证后建立和会话的关联关系。这确保了在用户的任何子请求中也会应用安全访问控制提供认证的能力，授权访问用户的私有数据，而且会提高网站程序的可用性。因此，目前的网站应用程序在上一个认证和下一个认证可以提供会话功能。</p>
<p>一旦认证会话建立成功，会话 ID(或者叫 token)等同于应用程序提供的最强认证方法，像用户名和密码，密码短语，一次性密码(OTP)，基于客户端的数字证书，智能卡，或者生物识别技术(如指纹或眼睛视网膜)。参考<a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md" target="_blank" rel="noopener">OWASP Authentication Cheat Sheet</a></p>
<p><img src="https://github.com/musibii/image/blob/master/Session_Management_Cheat_Sheet_Diagram.png" alt></p>
<p>会话 ID 或者 token 通过网站应用程序强制绑定用户认证证书(以用户会话的形式)通过 HTTP 流量和执行适当的访问控制。在现代网站应用程序这三个组件(认证、会话管理、访问控制)的复杂性，此外，实现和绑定也存在于网站开发人员手中(向开发框架并不提供这些组件之间强制的关系)，实现安全会话管理模块非常具有挑战性。</p>
<p>会话 ID 的泄露、捕获、预测、暴力或者不变会导致会话被劫持，攻击者可以在网站应用程序中完全的模仿受害者。攻击者可以执行两种类型的会话劫持攻击，针对性和一般性。在针对性的攻击中，攻击者的目标是模仿特定(或私密)的网站应用程序受害者。一般性的攻击，攻击者的目标是模仿(或获取访问)网站应用程序中任意有效或合法的用户。</p>
<h1 id="会话-ID-属性"><a href="#会话-ID-属性" class="headerlink" title="会话 ID 属性"></a>会话 ID 属性</h1><p>为了保持认证状态和追踪网站应用程序中用户的访问进度，应用程序为用户提供了会话识别码(会话 ID 或 token)在会话创建时，而且在会话持续期间可以通过用户和网站应用程序分享和修改(在每次 HTTP 请求中都会发送)。会话 ID 就是键值对。</p>
<p>为了实现安全会话 ID 的目标，生成的识别码(ID 或 token)必须满足下面的属性。</p>
<h2 id="会话-ID-名称指纹识别"><a href="#会话-ID-名称指纹识别" class="headerlink" title="会话 ID 名称指纹识别"></a>会话 ID 名称指纹识别</h2><p>会话 ID 使用的键名不应该具有描述性，也不应该提供不必要的细节和 ID 相关的目的和意图。</p>
<p>最常见的网站应用程序开发框架使用的会话 ID 很容易被识别，向<code>PHPSESSID</code>(PHP)，<code>JSESSIONID</code>(J2EE)，<code>CFID</code>&amp;<code>CFTOKEN</code>(ColdFusion)，<code>ASP.NET_SessionId</code>(ASP.NET)，等等。因此，会话 ID 键名可以透露技术和网站使用的语言。</p>
<p>推荐改变网站开发框架使用的默认会话 ID 名，像 id。</p>
<h2 id="会话-ID-的长度"><a href="#会话-ID-的长度" class="headerlink" title="会话 ID 的长度"></a>会话 ID 的长度</h2><p>会话 ID 为了防止暴力攻击必须足够长，攻击者可以遍历整个 ID 值范围并验证是否存在有效会话。</p>
<p>会话 ID 长至少 128 位(16 字节)。</p>
<p><strong>注意</strong>：</p>
<ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
  </entry>
  <entry>
    <title>Vue（三）</title>
    <url>/2019/02/26/Vue%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue系列博客（三）"><a href="#Vue系列博客（三）" class="headerlink" title="Vue系列博客（三）"></a>Vue系列博客（三）</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>本篇博客介绍 vue项目的搭建</p>
<h2 id="二-Vue-CLI项目搭建"><a href="#二-Vue-CLI项目搭建" class="headerlink" title="二 Vue-CLI项目搭建"></a>二 Vue-CLI项目搭建</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><ul>
<li>安装 node</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网下载安装包，傻瓜式安装：https://nodejs.org/zh-cn/</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 cnpm</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npma install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ul>
<li>安装脚手架</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<ul>
<li>清空缓存处理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>
<h3 id="2-项目的创建"><a href="#2-项目的创建" class="headerlink" title="2. 项目的创建"></a>2. 项目的创建</h3><ul>
<li>创建项目</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vue creat 项目名</span><br><span class="line">// 要提前进入目标目录(项目应该创建在哪个目录下)</span><br><span class="line">// 选择自定义方式创建项目，选取Router, Vuex插件</span><br></pre></td></tr></table></figure>
<ul>
<li>启动/停止项目</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm run serve / ctrl+c</span><br><span class="line">// 要提前进入项目根目录</span><br></pre></td></tr></table></figure>
<ul>
<li>打包项目</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">// 要在项目根目录下进行打包操作</span><br></pre></td></tr></table></figure>
<h3 id="3-认识项目"><a href="#3-认识项目" class="headerlink" title="3. 认识项目"></a>3. 认识项目</h3><ul>
<li>项目目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dist: 打包的项目目录(打包后会生成)</span><br><span class="line">node_modules: 项目依赖</span><br><span class="line">public: 共用资源</span><br><span class="line">src: 项目目标,书写代码的地方</span><br><span class="line">	-- assets:资源</span><br><span class="line">	-- components:组件</span><br><span class="line">	-- views:视图组件</span><br><span class="line">	-- App.vue:根组件</span><br><span class="line">	-- main.js: 入口js</span><br><span class="line">	-- router.js: 路由文件</span><br><span class="line">	-- store.js: 状态库文件</span><br><span class="line">vue.config.js: 项目配置文件(没有可以自己新建)</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件：vue.config.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		port: <span class="number">8888</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改端口</span></span><br></pre></td></tr></table></figure>
<ul>
<li>main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">"#app"</span>,</span><br><span class="line">	router: router,</span><br><span class="line">	store: store,</span><br><span class="line">	render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> h(App)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>.vue文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 逻辑代码区域</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 该语法和script绑定出现</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    /* 样式区域 */</span><br><span class="line">    /* scoped表示这里的样式只适用于组件内部, scoped与style绑定出现 */</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-项目功能"><a href="#4-项目功能" class="headerlink" title="4. 项目功能"></a>4. 项目功能</h3><ul>
<li>vue-router</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    <span class="comment">// 路由的重定向</span></span><br><span class="line">    redirect: <span class="string">'/home'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 一级路由, 在根组件中被渲染, 替换根组件的&lt;router-view/&gt;标签</span></span><br><span class="line">    path: <span class="string">'/one-view'</span>,</span><br><span class="line">    name: <span class="string">'one'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./views/OneView.vue'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 多级路由, 在根组件中被渲染, 替换根组件的&lt;router-view/&gt;标签</span></span><br><span class="line">    path: <span class="string">'/one-view/one-detail'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./views/OneDetail.vue'</span>),</span><br><span class="line">    <span class="comment">// 子路由, 在所属路由指向的组件中被渲染, 替换该组件(OneDetail)的&lt;router-view/&gt;标签</span></span><br><span class="line">    children: [&#123;</span><br><span class="line">        path: <span class="string">'show'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/OneShow.vue'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- router-link渲染为a标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'one'&#125;"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 为路由渲染的组件占位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.router-link-exact-active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#42b983</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router的逻辑转跳</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/one-view'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// router采用history方式访问上一级</span></span><br><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>vuex</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在任何一个组件中,均可以通过this.$store.state.msg访问msg的数据</span></span><br><span class="line"><span class="comment">// state永远只能拥有一种状态值</span></span><br><span class="line">state: &#123;</span><br><span class="line">    msg: <span class="string">"状态管理器"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 让state拥有多个状态值</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">    <span class="comment">// 在一个一个组件中,均可以通过this.$store.commit('setMsg', new_msg)来修改state中的msg</span></span><br><span class="line">    setMsg(state, new_msg) &#123;</span><br><span class="line">        state.msg = new_msg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 让mutations拥有多个状态值</span></span><br><span class="line">actions: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Vue-cookie</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装cookie的命令</span></span><br><span class="line"><span class="comment">// npm install vue-cookie --save</span></span><br><span class="line"><span class="comment">// 为项目配置全局vue-cookie</span></span><br><span class="line"><span class="keyword">import</span> VueCookie <span class="keyword">from</span> <span class="string">'vue-cookie'</span></span><br><span class="line"><span class="comment">// 将插件设置给Vue原型,作为全局的属性,在任何地方都可以通过this.$cookie进行访问</span></span><br><span class="line">Vue.prototype.$cookie = VueCookie</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 持久化存储val的值到cookie中</span></span><br><span class="line"><span class="keyword">this</span>.$cookie.set(<span class="string">'val'</span>, <span class="keyword">this</span>.val)</span><br><span class="line"><span class="comment">// 获取cookie中val字段值</span></span><br><span class="line"><span class="keyword">this</span>.$cookie.get(<span class="string">'val'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>axios</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装 axios(ajax)的命令</span></span><br><span class="line"><span class="comment">// npm install axios--save</span></span><br><span class="line"><span class="comment">// 为项目配置全局axios</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.$ajax = Axios</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">this</span>.$ajax(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'http://127.0.0.1:5000/loginAction'</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        usr: <span class="keyword">this</span>.usr,</span><br><span class="line">        ps: <span class="keyword">this</span>.ps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this代表的是回调then这个方法的调用者(axios插件),也就是发生了this的重指向</span></span><br><span class="line">    <span class="comment">// 要更新页面的title变量,title属于vue实例</span></span><br><span class="line">    <span class="comment">// res为回调的对象,该对象的data属性就是后台返回的数据</span></span><br><span class="line">    _this.title = res.data</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用pycharm启动该文件模拟后台</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;h1&gt;主页&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/loginAction', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_action</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(request.args)</span></span><br><span class="line">    <span class="comment"># print(request.form)</span></span><br><span class="line">    <span class="comment"># print(request.values)</span></span><br><span class="line">    usr = request.args[<span class="string">'usr'</span>]</span><br><span class="line">    ps = request.args[<span class="string">'ps'</span>]</span><br><span class="line">    <span class="keyword">if</span> usr != <span class="string">'abc'</span> <span class="keyword">or</span> ps != <span class="string">'123'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'login failed'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>ssh免钥登陆github</title>
    <url>/2018/10/01/git-ssh%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li>设置Git的user name和emai：（如果是第一次的话）<br><code>$ git config --global user.name &#39;musibii&#39;</code><br><code>$ git config --global user.email &#39;shaozuanzuan@gmail.com&#39;</code></li>
<li>生成秘钥<br><code>$ ssh-keygen -t rsa -C &#39;shaozuanzuan@gmail.com&#39;</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvsg9c0eibj314c0lamzt.jpg" alt><br>从图上可以看到生成秘钥保存的地址，通常都会默认保存在家目录下面的.ssh下，前面加点表示是个隐藏目录。</li>
<li>添加秘钥到ssh-agent<br>ssh-agent是一个帮助程序，用于跟踪用户的身份密钥及其密码。 然后，代理可以使用密钥登录其他服务器，而无需用户再次键入密码或密码.<br>运行ssh-agent之后，使用ssh-agent将私钥交给ssh-agent保管，其他程序需要身份验证的时候就可以将验证申请交给ssh-agent来完成整个认证过程。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fvsgkkst45j30ny030mxd.jpg" alt><br>添加生成的ssh key到ssh-agent<br><code>$ ssh-add ~/.ssh/id_rsa</code><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fvsgmtru7oj313c02qdg4.jpg" alt></li>
<li>登录github，添加ssh秘钥<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvsgqoi5uqj30xy0eqjuq.jpg" alt><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvsgpri7mcj313a0jktbj.jpg" alt><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvsgrel0ioj319s0iqtc9.jpg" alt><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvsgszqwoyj31740ladjv.jpg" alt><br>可以看到我有两个密钥，一个是macOS的，一个是Ubuntu的。</li>
<li>测试是否成功<br><code>$ ssh -T git@github.com</code><br>万万没想到，报错了。。。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fvsgwk9c85j315001udg2.jpg" alt><br>报错原因居然是没联网。。。靠北！！！<br>重新联网成功了。。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fvsh0ejr7wj310001utb1.jpg" alt></li>
</ol>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
  </entry>
  <entry>
    <title>celery 进行异步任务及定时任务</title>
    <url>/2019/04/03/celery-%E8%BF%9B%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%8F%8A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h1><h2 id="1-什么是Clelery"><a href="#1-什么是Clelery" class="headerlink" title="1.什么是Clelery"></a>1.什么是Clelery</h2><p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统</p>
<p>专注于实时处理的异步任务队列</p>
<p>同时也支持任务调度</p>
<h3 id="Celery架构"><a href="#Celery架构" class="headerlink" title="Celery架构"></a>Celery架构</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1pfro60mdj30l20dsgmw.jpg" alt></p>
<p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p>
<h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p>
<h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p>
<h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p>
<h3 id="版本支持情况"><a href="#版本支持情况" class="headerlink" title="版本支持情况"></a>版本支持情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Celery version 4.0 runs on</span><br><span class="line">        Python ❨2.7, 3.4, 3.5❩</span><br><span class="line">        PyPy ❨5.4, 5.5❩</span><br><span class="line">    This is the last version to support Python 2.7, and from the next version (Celery 5.x) Python 3.5 or newer is required.</span><br><span class="line"></span><br><span class="line">    If you’re running an older version of Python, you need to be running an older version of Celery:</span><br><span class="line"></span><br><span class="line">        Python 2.6: Celery series 3.1 or earlier.</span><br><span class="line">        Python 2.5: Celery series 3.0 or earlier.</span><br><span class="line">        Python 2.4 was Celery series 2.2 or earlier.</span><br><span class="line"></span><br><span class="line">    Celery is a project with minimal funding, so we don’t support Microsoft Windows. Please don’t open any issues related to that platform.</span><br></pre></td></tr></table></figure>
<h2 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h2><p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p>
<p>定时任务：定时执行某件事情，比如每天数据统计</p>
<h2 id="3-Celery的安装配置"><a href="#3-Celery的安装配置" class="headerlink" title="3.Celery的安装配置"></a>3.Celery的安装配置</h2><p>pip install celery</p>
<p>消息中间件：RabbitMQ/Redis</p>
<p>app=Celery(‘任务名’，backend=’xxx’,broker=’xxx’)</p>
<h2 id="4-Celery执行异步任务"><a href="#4-Celery执行异步任务" class="headerlink" title="4.Celery执行异步任务"></a>4.Celery执行异步任务</h2><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>创建项目celerytest</p>
<p>创建py文件：celery_app_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># broker='redis://127.0.0.1:6379/2' 不加密码</span></span><br><span class="line">backend=<span class="string">'redis://:123456@127.0.0.1:6379/1'</span></span><br><span class="line">broker=<span class="string">'redis://:123456@127.0.0.1:6379/2'</span></span><br><span class="line">cel=celery.Celery(<span class="string">'test'</span>,backend=backend,broker=broker)</span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure>
<p>创建py文件：add_task.py,添加任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line">result = add.delay(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
<p>创建py文件：run.py，执行任务，或者使用命令执行：celery worker -A celery_app_task -l info</p>
<p>注：windows下：celery worker -A celery_app_task -l info -P eventlet</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cel.worker_main()</span><br><span class="line">    <span class="comment"># cel.worker_main(argv=['--loglevel=info')</span></span><br></pre></td></tr></table></figure>
<p>创建py文件：result.py，查看任务执行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">"e919d97d-2938-4d0f-9265-fd8237dc2aa3"</span>, app=cel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.get()</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="comment"># result.forget() # 将结果删除</span></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待中被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始被执行'</span>)</span><br></pre></td></tr></table></figure>
<p>执行 add_task.py，添加任务，并获取任务ID</p>
<p>执行 run.py ，或者执行命令：celery worker -A celery_app_task -l info</p>
<p>执行 result.py,检查任务状态并获取结果</p>
<h4 id="多任务结构"><a href="#多任务结构" class="headerlink" title="多任务结构"></a>多任务结构</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pro_cel</span><br><span class="line">    ├── celery_task<span class="comment"># celery相关文件夹</span></span><br><span class="line">    │   ├── celery.py   <span class="comment"># celery连接和配置相关文件,必须叫这个名字</span></span><br><span class="line">    │   └── tasks1.py    <span class="comment">#  所有任务函数</span></span><br><span class="line">    │	└── tasks2.py    <span class="comment">#  所有任务函数</span></span><br><span class="line">    ├── check_result.py <span class="comment"># 检查结果</span></span><br><span class="line">    └── send_task.py    <span class="comment"># 触发任务</span></span><br></pre></td></tr></table></figure>
<p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">'celery_demo'</span>,</span><br><span class="line">             broker=<span class="string">'redis://127.0.0.1:6379/1'</span>,</span><br><span class="line">             backend=<span class="string">'redis://127.0.0.1:6379/2'</span>,</span><br><span class="line">             <span class="comment"># 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类</span></span><br><span class="line">             include=[<span class="string">'celery_task.tasks1'</span>,</span><br><span class="line">                      <span class="string">'celery_task.tasks2'</span></span><br><span class="line">                      ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">cel.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>tasks1.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_celery</span><span class="params">(res)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test_celery任务结果:%s"</span>%res</span><br></pre></td></tr></table></figure>
<p>tasks2.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> cel</span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_celery2</span><span class="params">(res)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test_celery2任务结果:%s"</span>%res</span><br></pre></td></tr></table></figure>
<p>check_result.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">"08eb2778-24e1-44e4-a54b-56990b3519ef"</span>, app=cel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.get()</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="comment"># result.forget() # 将结果删除,执行完成，结果不会自动删除</span></span><br><span class="line">    <span class="comment"># async.revoke(terminate=True)  # 无论现在是什么时候，都要终止</span></span><br><span class="line">    <span class="comment"># async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。</span></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待中被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始被执行'</span>)</span><br></pre></td></tr></table></figure>
<p>send_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.tasks1 <span class="keyword">import</span> test_celery</span><br><span class="line"><span class="keyword">from</span> celery_task.tasks2 <span class="keyword">import</span> test_celery2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即告知celery去执行test_celery任务，并传入一个参数</span></span><br><span class="line">result = test_celery.delay(<span class="string">'第一个的执行'</span>)</span><br><span class="line">print(result.id)</span><br><span class="line">result = test_celery2.delay(<span class="string">'第二个的执行'</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
<p>添加任务（执行send_task.py），开启work：celery worker -A celery_task -l info  -P  eventlet，检查任务执行结果（执行check_result.py）</p>
<h2 id="5-Celery执行定时任务"><a href="#5-Celery执行定时任务" class="headerlink" title="5.Celery执行定时任务"></a>5.Celery执行定时任务</h2><h4 id="设定时间让celery执行一个任务"><a href="#设定时间让celery执行一个任务" class="headerlink" title="设定时间让celery执行一个任务"></a>设定时间让celery执行一个任务</h4><p>add_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="comment"># v1 = datetime(2019, 2, 13, 18, 19, 56)</span></span><br><span class="line"><span class="comment"># print(v1)</span></span><br><span class="line"><span class="comment"># v2 = datetime.utcfromtimestamp(v1.timestamp())</span></span><br><span class="line"><span class="comment"># print(v2)</span></span><br><span class="line"><span class="comment"># result = add.apply_async(args=[1, 3], eta=v2)</span></span><br><span class="line"><span class="comment"># print(result.id)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">ctime = datetime.now()</span><br><span class="line"><span class="comment"># 默认用utc时间</span></span><br><span class="line">utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">time_delay = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">task_time = utc_ctime + time_delay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply_async并设定时间</span></span><br><span class="line">result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
<h4 id="类似于contab的定时任务"><a href="#类似于contab的定时任务" class="headerlink" title="类似于contab的定时任务"></a>类似于contab的定时任务</h4><p>多任务结构中celery.py修改如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://127.0.0.1:6379/1'</span>, backend=<span class="string">'redis://127.0.0.1:6379/2'</span>, include=[</span><br><span class="line">    <span class="string">'celery_task.tasks1'</span>,</span><br><span class="line">    <span class="string">'celery_task.tasks2'</span>,</span><br><span class="line">])</span><br><span class="line">cel.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">cel.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="comment"># 名字随意命名</span></span><br><span class="line">    <span class="string">'add-every-10-seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 执行tasks1下的test_celery函数</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'celery_task.tasks1.test_celery'</span>,</span><br><span class="line">        <span class="comment"># 每隔2秒执行一次</span></span><br><span class="line">        <span class="comment"># 'schedule': 1.0,</span></span><br><span class="line">        <span class="comment"># 'schedule': crontab(minute="*/1"),</span></span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 传递参数</span></span><br><span class="line">        <span class="string">'args'</span>: (<span class="string">'test'</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 'add-every-12-seconds': &#123;</span></span><br><span class="line">    <span class="comment">#     'task': 'celery_task.tasks1.test_celery',</span></span><br><span class="line">    <span class="comment">#     每年4月11号，8点42分执行</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'args': (16, 16)</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动一个beat：celery beat -A celery_task -l info</p>
<p>启动work执行：celery worker -A celery_task -l info -P  eventlet</p>
<h2 id="6-Django中使用Celery"><a href="#6-Django中使用Celery" class="headerlink" title="6.Django中使用Celery"></a>6.Django中使用Celery</h2><p>在项目目录下创建celeryconfig.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line">CELERY_IMPORTS=(</span><br><span class="line">    <span class="string">'app01.tasks'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment">#有些情况可以防止死锁</span></span><br><span class="line">CELERYD_FORCE_EXECV=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置并发worker数量</span></span><br><span class="line">CELERYD_CONCURRENCY=<span class="number">4</span></span><br><span class="line"><span class="comment">#允许重试</span></span><br><span class="line">CELERY_ACKS_LATE=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 每个worker最多执行100个任务被销毁，可以防止内存泄漏</span></span><br><span class="line">CELERYD_MAX_TASKS_PER_CHILD=<span class="number">100</span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line">CELERYD_TASK_TIME_LIMIT=<span class="number">12</span>*<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>在app01目录下创建tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'a.text'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'a'</span>)</span><br><span class="line">    print(a+b)</span><br></pre></td></tr></table></figure>
<p>视图函数views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01.tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># result=add.delay(2,3)</span></span><br><span class="line">    ctime = datetime.now()</span><br><span class="line">    <span class="comment"># 默认用utc时间</span></span><br><span class="line">    utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">    time_delay = timedelta(seconds=<span class="number">5</span>)</span><br><span class="line">    task_time = utc_ctime + time_delay</span><br><span class="line">    result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br><span class="line">    print(result.id)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<p>settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'djcelery'</span>,</span><br><span class="line">    <span class="string">'app01'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> djagocele <span class="keyword">import</span> celeryconfig</span><br><span class="line">BROKER_BACKEND=<span class="string">'redis'</span></span><br><span class="line">BOOKER_URL=<span class="string">'redis://127.0.0.1:6379/1'</span></span><br><span class="line">CELERY_RESULT_BACKEND=<span class="string">'redis://127.0.0.1:6379/2'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>celery</category>
      </categories>
  </entry>
  <entry>
    <title>django-restframework之版本控制</title>
    <url>/2019/02/27/django-restframework%E4%B9%8B%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="django-restframework之版本控制"><a href="#django-restframework之版本控制" class="headerlink" title="django-restframework之版本控制"></a>django-restframework之版本控制</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>在进行版本迭代的时候，是慢慢进行迁移的，所以可能会有多版本共存，这就需要使用版本控制。</p>
<h2 id="二-内置的版本控制类"><a href="#二-内置的版本控制类" class="headerlink" title="二 内置的版本控制类"></a>二 内置的版本控制类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning,AcceptHeaderVersioning,NamespaceVersioning,URLPathVersioning</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于url的get传参方式：QueryParameterVersioning------&gt;如：/users?version=v1</span></span><br><span class="line"><span class="comment">#基于url的正则方式：URLPathVersioning------&gt;/v1/users/</span></span><br><span class="line"><span class="comment">#基于 accept 请求头方式：AcceptHeaderVersioning------&gt;Accept: application/json; version=1.0</span></span><br><span class="line"><span class="comment">#基于主机名方法：HostNameVersioning------&gt;v1.example.com</span></span><br><span class="line"><span class="comment">#基于django路由系统的namespace：NamespaceVersioning------&gt;example.com/v1/users/</span></span><br></pre></td></tr></table></figure>
<h2 id="三-局部使用"><a href="#三-局部使用" class="headerlink" title="三 局部使用"></a>三 局部使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 views 中加入</span></span><br><span class="line">versioning_class = URLPathVersioning</span><br></pre></td></tr></table></figure>
<h2 id="四-全局使用"><a href="#四-全局使用" class="headerlink" title="四 全局使用"></a>四 全局使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>:<span class="string">'rest_framework.versioning.QueryParameterVersioning'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_VERSION'</span>: <span class="string">'v1'</span>,            <span class="comment"># 默认版本(从request对象里取不到，显示的默认值)</span></span><br><span class="line">    <span class="string">'ALLOWED_VERSIONS'</span>: [<span class="string">'v1'</span>, <span class="string">'v2'</span>],   <span class="comment"># 允许的版本</span></span><br><span class="line">    <span class="string">'VERSION_PARAM'</span>: <span class="string">'version'</span>          <span class="comment"># URL中获取值的key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五-示例"><a href="#五-示例" class="headerlink" title="五 示例"></a>五 示例</h2><p>基于正则的方式：</p>
<p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^(?P&lt;version&gt;[v1|v2]+)/test/'</span>, TestView.as_view(), name=<span class="string">'test'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    versioning_class = URLPathVersioning</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取版本</span></span><br><span class="line">        print(request.version)</span><br><span class="line">        <span class="comment"># 获取版本管理的类</span></span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向生成URL</span></span><br><span class="line">        reverse_url = request.versioning_scheme.reverse(<span class="string">'test'</span>, request=request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'GET请求，响应内容'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="六-源码分析"><a href="#六-源码分析" class="headerlink" title="六 源码分析"></a>六 源码分析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行determine_version，返回两个值，放到request对象里</span></span><br><span class="line">version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#当配置上版本类之后，就会实例化</span></span><br><span class="line">        <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        scheme = self.versioning_class()</span><br><span class="line">        <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django-restframework</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Hello,my name is musibii!</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>flask 源码阅读</title>
    <url>/2019/05/07/flask-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="启动-py-文件"><a href="#启动-py-文件" class="headerlink" title="启动 py 文件"></a>启动 py 文件</h1><ol>
<li>导入 request 或 session </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure>
<p>执行 flask 文件，生成 <code>request</code>对象，这是个全局的<code>request</code>对象，请求来的数据，元数据都在这个<code>request</code>里面。 </p>
<ol start="2">
<li>生成 request 对象其实是<code>LocalProxy</code>类的实例 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">'request'</span>))</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>执行 init方法 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span> </span><br><span class="line"></span><br><span class="line">object.__setattr__(self, <span class="string">'_LocalProxy__local'</span>, local) </span><br><span class="line"></span><br><span class="line">object.__setattr__(self, <span class="string">'__name__'</span>, name) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> callable(local) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(local, <span class="string">'__release_local__'</span>): </span><br><span class="line"></span><br><span class="line"><span class="comment"># "local" is a callable that is not an instance of Local or </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LocalManager: mark it as a wrapped function. </span></span><br><span class="line"></span><br><span class="line">object.__setattr__(self, <span class="string">'__wrapped__'</span>, local)</span><br></pre></td></tr></table></figure>
<p>其中<code>partial(_lookup_req_obj, &#39;request)</code>当做参数传给<code>init</code>里面的<code>local</code>变量。 </p>
<p><strong>partial 函数</strong>：偏函数，当我们要执行一个函数时，会遇到参数不齐，选择偏函数先将部分参数传进去，经过偏函数会生成一个<code>functools.partial</code>对象，是要执行函数的内存地址，不过参数已经传进去了。 </p>
<ol start="4">
<li>执行<code>__setattr__</code>设值。 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">object.__setattr__(self, <span class="string">'_LocalProxy__local'</span>, local)</span><br></pre></td></tr></table></figure>
<p>为什么不直接使用<code>self._Local__local = local</code>这种设置属性的方法呢？ </p>
<p>第一点是因为，如果使用<code>self</code>设置值的话会调用类的<code>setattr</code>方法，而<code>setattr</code>方法被重写，用来获取当前<code>__local()</code>对象中的属性值了，这样会产生冲突，而这里只需要简单的给<code>self</code>设置一个值，所以采用父类的<code>setattr</code>来设置值，那么为什么不是<code>object.__setattr__(self, &#39;__local&#39;, local)</code>这种方式呢？因为<code>__local</code>是类私有属性，想要使用的话需要按照这个方式来。 </p>
<p>经过这一步，将<code>local</code>，也就是传进来的偏函数内存地址赋值给<code>__local</code>属性了。 </p>
<h1 id="执行-app-run-做的事"><a href="#执行-app-run-做的事" class="headerlink" title="执行 app.run()做的事"></a>执行 app.run()做的事</h1><p>源代码如下： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, host=None, port=None, debug=None, load_dotenv=True, **options)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.environ.get(<span class="string">'FLASK_RUN_FROM_CLI'</span>) == <span class="string">'true'</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .debughelpers <span class="keyword">import</span> explain_ignored_app_run </span><br><span class="line"></span><br><span class="line">explain_ignored_app_run() </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> get_load_dotenv(load_dotenv): </span><br><span class="line"></span><br><span class="line">cli.load_dotenv() </span><br><span class="line"></span><br><span class="line"><span class="comment"># if set, let env vars override previous values </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'FLASK_ENV'</span> <span class="keyword">in</span> os.environ: </span><br><span class="line"></span><br><span class="line">self.env = get_env() </span><br><span class="line"></span><br><span class="line">self.debug = get_debug_flag() </span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="string">'FLASK_DEBUG'</span> <span class="keyword">in</span> os.environ: </span><br><span class="line"></span><br><span class="line">self.debug = get_debug_flag() </span><br><span class="line"></span><br><span class="line"><span class="comment"># debug passed to method overrides all other sources </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">self.debug = bool(debug) </span><br><span class="line"></span><br><span class="line">_host = <span class="string">'127.0.0.1'</span> </span><br><span class="line"></span><br><span class="line">_port = <span class="number">5000</span> </span><br><span class="line"></span><br><span class="line">server_name = self.config.get(<span class="string">'SERVER_NAME'</span>) </span><br><span class="line"></span><br><span class="line">sn_host, sn_port = <span class="literal">None</span>, <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> server_name: </span><br><span class="line"></span><br><span class="line">sn_host, _, sn_port = server_name.partition(<span class="string">':'</span>) </span><br><span class="line"></span><br><span class="line">host = host <span class="keyword">or</span> sn_host <span class="keyword">or</span> _host </span><br><span class="line"></span><br><span class="line">port = int(port <span class="keyword">or</span> sn_port <span class="keyword">or</span> _port) </span><br><span class="line"></span><br><span class="line">options.setdefault(<span class="string">'use_reloader'</span>, self.debug) </span><br><span class="line"></span><br><span class="line">options.setdefault(<span class="string">'use_debugger'</span>, self.debug) </span><br><span class="line"></span><br><span class="line">options.setdefault(<span class="string">'threaded'</span>, <span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">cli.show_server_banner(self.env, self.debug, self.name, <span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">run_simple(host, port, self, **options) </span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"></span><br><span class="line"><span class="comment"># reset the first request information if the development server </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reset normally. This makes it possible to restart the server </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># without reloader and that stuff from an interactive shell. </span></span><br><span class="line"></span><br><span class="line">self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<ol>
<li>启动 web 服务 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">run_simple(host, port, self, **options</span><br></pre></td></tr></table></figure>
<p>其中<code>self</code>是<code>Flask</code>类的一个实例。 </p>
<p>执行函数内的<code>inner</code>函数，执行<code>make_server</code>函数 </p>
<ol start="2">
<li>执行 make_server 函数 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_server</span><span class="params">(host=None, port=None, app=None, threaded=False, processes=<span class="number">1</span>, </span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">request_handler=None, passthrough_errors=False, </span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">ssl_context=None, fd=None)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Create a new server instance that is either threaded, or forks </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">or just processes one request after another. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> threaded <span class="keyword">and</span> processes &gt; <span class="number">1</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">"cannot have a multithreaded and "</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"multi process server."</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> threaded: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ThreadedWSGIServer(host, port, app, request_handler, </span><br><span class="line"></span><br><span class="line">passthrough_errors, ssl_context, fd=fd) </span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> processes &gt; <span class="number">1</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ForkingWSGIServer(host, port, app, processes, request_handler, </span><br><span class="line"></span><br><span class="line">passthrough_errors, ssl_context, fd=fd) </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> BaseWSGIServer(host, port, app, request_handler, </span><br><span class="line"></span><br><span class="line">passthrough_errors, ssl_context, fd=fd)</span><br></pre></td></tr></table></figure>
<h1 id="启动套接字"><a href="#启动套接字" class="headerlink" title="启动套接字"></a>启动套接字</h1><ol>
<li>执行 BaseWSGIServer </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, app, handler=None, </span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">passthrough_errors=False, ssl_context=None, fd=None)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> handler <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">handler = WSGIRequestHandler </span><br><span class="line"></span><br><span class="line">self.address_family = select_ip_version(host, port) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fd <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">real_sock = socket.fromfd(fd, self.address_family, </span><br><span class="line"></span><br><span class="line">socket.SOCK_STREAM) </span><br><span class="line"></span><br><span class="line">port = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">HTTPServer.__init__(self, get_sockaddr(host, int(port), </span><br><span class="line"></span><br><span class="line">self.address_family), handler) </span><br><span class="line"></span><br><span class="line">self.app = app </span><br><span class="line"></span><br><span class="line">self.passthrough_errors = passthrough_errors </span><br><span class="line"></span><br><span class="line">self.shutdown_signal = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">self.host = host </span><br><span class="line"></span><br><span class="line">self.port = self.socket.getsockname()[<span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Patch in the original socket. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fd <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">self.socket.close() </span><br><span class="line"></span><br><span class="line">self.socket = real_sock </span><br><span class="line"></span><br><span class="line">self.server_address = self.socket.getsockname() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ssl_context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isinstance(ssl_context, tuple): </span><br><span class="line"></span><br><span class="line">ssl_context = load_ssl_context(*ssl_context) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ssl_context == <span class="string">'adhoc'</span>: </span><br><span class="line"></span><br><span class="line">ssl_context = generate_adhoc_ssl_context() </span><br><span class="line"></span><br><span class="line"><span class="comment"># If we are on Python 2 the return value from socket.fromfd </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is an internal socket object but what we need for ssl wrap </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is the wrapper around it :( </span></span><br><span class="line"></span><br><span class="line">sock = self.socket </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> PY2 <span class="keyword">and</span> <span class="keyword">not</span> isinstance(sock, socket.socket): </span><br><span class="line"></span><br><span class="line">sock = socket.socket(sock.family, sock.type, sock.proto, sock) </span><br><span class="line"></span><br><span class="line">self.socket = ssl_context.wrap_socket(sock, server_side=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">self.ssl_context = ssl_context </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line">self.ssl_context = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>在执行 init 方法时，会执行<code>HTTPServer.__init__</code>，因为HTTPServer 没有初始化方法，所以执行父类<code>TcpServer</code>的<code>init</code>，源码如下： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass, bind_and_activate=True)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Constructor. May be extended, do not override."""</span> </span><br><span class="line"></span><br><span class="line">BaseServer.__init__(self, server_address, RequestHandlerClass) </span><br><span class="line"></span><br><span class="line">self.socket = socket.socket(self.address_family, </span><br><span class="line"></span><br><span class="line">self.socket_type) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bind_and_activate: </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">self.server_bind() </span><br><span class="line"></span><br><span class="line">self.server_activate() </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>: </span><br><span class="line"></span><br><span class="line">self.server_close() </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span></span><br></pre></td></tr></table></figure>
<p>在这里就会绑定 ip 和端口并进行监听请求。 </p>
<ol start="2">
<li>监听请求，执行<code>TcpServer.server_activate()</code> </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_activate</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Called by constructor to activate the server. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">May be overridden. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line">self.socket.listen(self.request_queue_size)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>执行 <code>self.socket.listen</code> </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(self, backlog=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__ </span></span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">listen([backlog]) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enable a server to accept connections. If backlog is specified, it must be </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">at least 0 (if it is lower, it is set to 0); it specifies the number of </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unaccepted connections that the system will allow before refusing new </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">connections. If not specified, a default reasonable value is chosen. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>查看 cpython 的源码关于 socket 的，发现是用 c 写的，目前看不懂，记录如下： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject * </span><br><span class="line"></span><br><span class="line">sock_listen(PySocketSockObject *s, PyObject *args) </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* We try to choose a default backlog high enough to avoid connection drops </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* for common workloads, yet not too high to limit resource usage. */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> backlog = Py_MIN(SOMAXCONN, <span class="number">128</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">"|i:listen"</span>, &amp;backlog)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line">Py_BEGIN_ALLOW_THREADS </span><br><span class="line"></span><br><span class="line"><span class="comment">/* To avoid problems on systems that don't allow a negative backlog </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* (which doesn't make sense anyway) we force a minimum value of 0. */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (backlog &lt; <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">backlog = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">res = listen(s-&gt;sock_fd, backlog); </span><br><span class="line"></span><br><span class="line">Py_END_ALLOW_THREADS </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res &lt; <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s-&gt;errorhandler(); </span><br><span class="line"></span><br><span class="line">Py_RETURN_NONE; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="serve-forever"><a href="#serve-forever" class="headerlink" title="serve_forever"></a>serve_forever</h1><p>返回 <code>BaseServer</code>类对象给<code>srv</code>，执行该对象的<code>serve_forever</code>方法 </p>
<ol>
<li>执行serve_forever 方法 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.shutdown_signal = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">HTTPServer.serve_forever(self) </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt: </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"></span><br><span class="line">self.server_close()</span><br></pre></td></tr></table></figure>
<p>这里，已经把 flask 实例传进去了，在 <code>srv.app</code>就是 flask 实例，在<code>serve_foerever</code>里面是 self.app </p>
<ol start="2">
<li>执行 HTTPServer.serve_forever </li>
</ol>
<p>经过 <code>mro</code>查询， </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">graph TD </span><br><span class="line"></span><br><span class="line">A[HTTPServer] --&gt;|serve_forever| B(socketserver.TCPServer) </span><br><span class="line"></span><br><span class="line">B --&gt; C(BaseServer) </span><br><span class="line"></span><br><span class="line">C --&gt;D[BaseServer.serve_forever]</span><br></pre></td></tr></table></figure>
<p>最终执行的是<code>BaseServer.serve_forever</code>方法。 </p>
<ol start="3">
<li>执行 BaseServer.serve_forever </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, poll_interval=<span class="number">0.5</span>)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Handle one request at a time until shutdown. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Polls for shutdown every poll_interval seconds. Ignores </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self.timeout. If you need to do periodic tasks, do them in </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">another thread. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line">self.__is_shut_down.clear() </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">XXX:</span> Consider using another file descriptor or connecting to the </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socket to wake this up instead of polling. Polling reduces our </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># responsiveness to a shutdown request and wastes cpu at all other </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># times. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> _ServerSelector() <span class="keyword">as</span> selector: </span><br><span class="line"></span><br><span class="line">selector.register(self, selectors.EVENT_READ) </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> self.__shutdown_request: </span><br><span class="line"></span><br><span class="line">ready = selector.select(poll_interval) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ready: </span><br><span class="line"></span><br><span class="line">self._handle_request_noblock() </span><br><span class="line"></span><br><span class="line">self.service_actions() </span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"></span><br><span class="line">self.__shutdown_request = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">self.__is_shut_down.set()</span><br></pre></td></tr></table></figure>
<p>在调用该方法时，<code>HTTPSErver.serve_forever(self)</code>，这里的<code>self</code>是<code>BaseWSGIServer</code>对象，这个对象里面封装了<code>Flask</code>实例，也就是<code>self.app</code> </p>
<ol start="4">
<li>执行 self._handle_request_noblock() </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_request_noblock</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Handle one request, without blocking. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I assume that selector.select() has returned that the socket is </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readable before this function was called, so there should be no risk of </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">blocking in get_request(). </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">request, client_address = self.get_request() </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> OSError: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.verify_request(request, client_address): </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">self.process_request(request, client_address) </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception: </span><br><span class="line"></span><br><span class="line">self.handle_error(request, client_address) </span><br><span class="line"></span><br><span class="line">self.shutdown_request(request) </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>: </span><br><span class="line"></span><br><span class="line">self.shutdown_request(request) </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line">self.shutdown_request(request)</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>执行 self.get_request() </li>
</ol>
<p>根据 mro 查询，发现执行的是<code>BaseWSGIServer</code>的方法<code>get_reqeust</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">con, info = self.socket.accept() </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> con, info</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>执行 self.socket.accept </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""accept() -&gt; (socket object, address info) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Wait for an incoming connection. Return a new socket </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">representing the connection, and the address of the client. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For IP sockets, the address info is a pair (hostaddr, port). </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line">fd, addr = self._accept() </span><br><span class="line"></span><br><span class="line"><span class="comment"># If our type has the SOCK_NONBLOCK flag, we shouldn't pass it onto the </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new socket. We do not currently allow passing SOCK_NONBLOCK to </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># accept4, so the returned socket is always blocking. </span></span><br><span class="line"></span><br><span class="line">type = self.type &amp; ~globals().get(<span class="string">"SOCK_NONBLOCK"</span>, <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">sock = socket(self.family, type, self.proto, fileno=fd) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Issue #7995: if no default timeout is set and the listening </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socket had a (non-zero) timeout, force the new socket in blocking </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mode to override platform-specific socket flags inheritance. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> getdefaulttimeout() <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> self.gettimeout(): </span><br><span class="line"></span><br><span class="line">sock.setblocking(<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sock, addr</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>执行 self._accept </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown </span></span><br><span class="line"></span><br><span class="line"><span class="string">""" Return getattr(self, name). """</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h1 id="请求来时"><a href="#请求来时" class="headerlink" title="请求来时"></a>请求来时</h1><p>当一个请求来到 BaseWSGIServer服务器时，由<code>_accept</code>接收请求调用self.app，因为<code>Flask</code>里面定义了<code>__call__</code>方法，所以会执行该方法 </p>
<ol>
<li>执行<code>__call__</code> </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""The WSGI server calls the Flask application object as the </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WSGI application. This calls :meth:`wsgi_app` which can be </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wrapped to applying middleware."""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>执行 self.wsgi_app </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line"></span><br><span class="line">ctx = self.request_context(environ) </span><br><span class="line"></span><br><span class="line">error = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">ctx.push() </span><br><span class="line"></span><br><span class="line">response = self.full_dispatch_request() </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line"></span><br><span class="line">error = e </span><br><span class="line"></span><br><span class="line">response = self.handle_exception(e) </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>: </span><br><span class="line"></span><br><span class="line">error = sys.exc_info()[<span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response(environ, start_response) </span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.should_ignore_error(error): </span><br><span class="line"></span><br><span class="line">error = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">ctx.auto_pop(error)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>执行 self.request_contest </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RequestContext(self, environ)</span><br></pre></td></tr></table></figure>
<p>该处的 <code>self</code>是<code>Flask</code>实例 </p>
<ol start="4">
<li>实例化 RequestContext 对象 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.app = app </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">request = app.request_class(environ) </span><br><span class="line"></span><br><span class="line">self.request = request </span><br><span class="line"></span><br><span class="line">self.url_adapter = app.create_url_adapter(self.request) </span><br><span class="line"></span><br><span class="line">self.flashes = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">self.session = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Request contexts can be pushed multiple times and interleaved with </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># other request contexts. Now only if the last level is popped we </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get rid of them. Additionally if an application context is missing </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one is created implicitly so for each level we add this information </span></span><br><span class="line"></span><br><span class="line">self._implicit_app_ctx_stack = [] </span><br><span class="line"></span><br><span class="line"><span class="comment"># indicator if the context was preserved. Next time another context </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is pushed the preserved context is popped. </span></span><br><span class="line"></span><br><span class="line">self.preserved = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># remembers the exception for pop if there is one in case the context </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># preservation kicks in. </span></span><br><span class="line"></span><br><span class="line">self._preserved_exc = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions that should be executed after the request on the response </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># object. These will be called before the regular "after_request" </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># functions. </span></span><br><span class="line"></span><br><span class="line">self._after_request_functions = [] </span><br><span class="line"></span><br><span class="line">self.match_request()</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>实例化 app.request_class(environ) </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, populate_request=True, shallow=False)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.environ = environ </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> populate_request <span class="keyword">and</span> <span class="keyword">not</span> shallow: </span><br><span class="line"></span><br><span class="line">self.environ[<span class="string">'werkzeug.request'</span>] = self </span><br><span class="line"></span><br><span class="line">self.shallow = shallow</span><br></pre></td></tr></table></figure>
<p>实例化父类BaseRequest的<code>init</code>方法 </p>
<ol start="6">
<li>执行 ctx.push </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">top = _request_ctx_stack.top </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved: </span><br><span class="line"></span><br><span class="line">top.pop(top._preserved_exc) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Before we push the request context we have to ensure that there </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is an application context. </span></span><br><span class="line"></span><br><span class="line">app_ctx = _app_ctx_stack.top </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app: </span><br><span class="line"></span><br><span class="line">app_ctx = self.app.app_context() </span><br><span class="line"></span><br><span class="line">app_ctx.push() </span><br><span class="line"></span><br><span class="line">self._implicit_app_ctx_stack.append(app_ctx) </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line">self._implicit_app_ctx_stack.append(<span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(sys, <span class="string">'exc_clear'</span>): </span><br><span class="line"></span><br><span class="line">sys.exc_clear() </span><br><span class="line"></span><br><span class="line">_request_ctx_stack.push(self) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">session_interface = self.app.session_interface </span><br><span class="line"></span><br><span class="line">self.session = session_interface.open_session( </span><br><span class="line"></span><br><span class="line">self.app, self.request </span><br><span class="line"></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">self.session = session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure>
<p>执行_app_ctx_stack.top </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@property </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""The topmost item on the stack. If the stack is empty, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`None` is returned. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self._local.stack[<span class="number">-1</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (AttributeError, IndexError): </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>执行 _request_ctx_stack.push(self) </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Pushes a new item to the stack"""</span> </span><br><span class="line"></span><br><span class="line">rv = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">self._local.stack = rv = [] </span><br><span class="line"></span><br><span class="line">rv.append(obj) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>
<p>这一步将 RequestContext 对象放到_local 里面，对对象赋值调用对象的<code>setattr</code>方法 </p>
<ol start="8">
<li>执行 Local 的 setattr </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span> </span><br><span class="line"></span><br><span class="line">ident = self.__ident_func__() </span><br><span class="line"></span><br><span class="line">storage = self.__storage__ </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">storage[ident][name] = value </span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyError: </span><br><span class="line"></span><br><span class="line">storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure>
<p><code>self.__storage__</code>是一个字典，类似于下面 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">storage = &#123; </span><br><span class="line"></span><br><span class="line">线程 id: &#123;<span class="string">'stack'</span>: []&#125;, </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>执行 RequestContext的 auto_pop 方法 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_pop</span><span class="params">(self, exc)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.request.environ.get(<span class="string">'flask._preserve_context'</span>) <span class="keyword">or</span>  </span><br><span class="line"></span><br><span class="line">(exc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.app.preserve_context_on_exception): </span><br><span class="line"></span><br><span class="line">self.preserved = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">self._preserved_exc = exc </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line">self.pop(exc)</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>执行是RequestContext 的 pop 方法 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Pops the request context and unbinds it by doing that. This will </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">also trigger the execution of functions registered by the </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:meth:`~flask.Flask.teardown_request` decorator. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.. versionchanged:: 0.9 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Added the `exc` argument. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line">app_ctx = self._implicit_app_ctx_stack.pop() </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line">clear_request = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self._implicit_app_ctx_stack: </span><br><span class="line"></span><br><span class="line">self.preserved = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">self._preserved_exc = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel: </span><br><span class="line"></span><br><span class="line">exc = sys.exc_info()[<span class="number">1</span>] </span><br><span class="line"></span><br><span class="line">self.app.do_teardown_request(exc) </span><br><span class="line"></span><br><span class="line"><span class="comment"># If this interpreter supports clearing the exception information </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we do that now. This will only go into effect on Python 2.x, </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># on 3.x it disappears automatically at the end of the exception </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stack. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(sys, <span class="string">'exc_clear'</span>): </span><br><span class="line"></span><br><span class="line">sys.exc_clear() </span><br><span class="line"></span><br><span class="line">request_close = getattr(self.request, <span class="string">'close'</span>, <span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> request_close <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">request_close() </span><br><span class="line"></span><br><span class="line">clear_request = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"></span><br><span class="line">rv = _request_ctx_stack.pop() </span><br><span class="line"></span><br><span class="line"><span class="comment"># get rid of circular dependencies at the end of the request </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># so that we don't require the GC to be active. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> clear_request: </span><br><span class="line"></span><br><span class="line">rv.request.environ[<span class="string">'werkzeug.request'</span>] = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Get rid of the app as well if necessary. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line">app_ctx.pop(exc) </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">'Popped wrong request context. '</span>  </span><br><span class="line"></span><br><span class="line"><span class="string">'(%r instead of %r)'</span> % (rv, self)</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>执行 <code>_request_ctx_stack.pop()</code> </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""Removes the topmost item from the stack, will return the </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">old value or `None` if the stack was already empty. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line">stack = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> len(stack) == <span class="number">1</span>: </span><br><span class="line"></span><br><span class="line">release_local(self._local) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stack[<span class="number">-1</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stack.pop()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flask</category>
      </categories>
  </entry>
  <entry>
    <title>importlib模块的使用</title>
    <url>/2019/02/25/importlib%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>git 与 github 的使用</title>
    <url>/2019/01/12/git-%E4%B8%8E-github-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git init <span class="comment"># 初始化一个本地 github 仓库</span></span><br><span class="line">git add <span class="comment"># 将本地文键添加到暂存区</span></span><br><span class="line">git diff <span class="comment"># 查看两个文件的具体修改内容</span></span><br><span class="line">git status <span class="comment"># 查看暂存区状态、文件状态</span></span><br><span class="line">git commit <span class="comment"># 将文件提交到本地仓库</span></span><br><span class="line">git push <span class="comment"># 将文件推送到远程仓库</span></span><br><span class="line"></span><br><span class="line">git pull request <span class="comment"># 拉取一个分支到本地仓库</span></span><br><span class="line">git clone <span class="comment"># 克隆一个远程仓库到本地</span></span><br><span class="line">git merge <span class="comment"># 合并分支</span></span><br><span class="line">git log <span class="comment"># 查看历史记录(日志系统)</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>git init</code>：将文件夹变成 git 可以管理的仓库</li>
<li><code>vim README.md</code>：编辑一个文件</li>
<li><code>git add README.md</code>：将文件添加到暂存区</li>
<li><code>git commit -m &#39;第一次提交&#39;</code>：将文件提交到本地仓库</li>
<li><code>git status</code>：查看暂存区状态；</li>
</ol>
<ol>
<li><code>ssh-keygen -t rsa -C &#39;youremail@example.com&#39;</code>：创建 ssh 秘钥</li>
<li>将公钥添加到 github 上</li>
<li>在 github 上创建一个仓库</li>
<li><p><code>git remote add origin https://github.com.example</code>：添加远程仓库</p>
</li>
<li><p><code>git push -u origin master</code>：推送到远程仓库</p>
</li>
</ol>
<ol>
<li><code>git config --global user.name &#39;yourusername&#39;</code>：配置用户名</li>
<li><code>git config --global user.email &#39;youremail&#39;</code>：配置邮箱</li>
<li><code>ssh-keygen -t rsa -C &#39;youremail&#39;</code>：创建 ssh 秘钥</li>
<li>在 github 上创建一个仓库</li>
<li><code>git remote add origin 远程仓库地址</code>：关联远程仓库</li>
<li><code>git push -u origin master</code>：推送到远程仓库</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>haystack全文检索的使用</title>
    <url>/2019/04/03/haystack%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Haystack全文检索的使用"><a href="#Haystack全文检索的使用" class="headerlink" title="Haystack全文检索的使用"></a>Haystack全文检索的使用</h1><h2 id="1-什么是Haystack"><a href="#1-什么是Haystack" class="headerlink" title="1.什么是Haystack"></a>1.什么是Haystack</h2><p>Haystack是django的开源全文搜索框架(全文检索不同于特定字段的模糊查询，使用全文检索的效率更高 )，该框架支持<strong>Solr</strong>,<strong>Elasticsearch</strong>,<strong>Whoosh</strong>, <em>**Xapian</em>搜索引擎它是一个可插拔的后端（很像Django的数据库层），所以几乎你所有写的代码都可以在不同搜索引擎之间便捷切换</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-haystack</span><br></pre></td></tr></table></figure>
<h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><h3 id="添加Haystack到INSTALLED-APPS"><a href="#添加Haystack到INSTALLED-APPS" class="headerlink" title="添加Haystack到INSTALLED_APPS"></a>添加Haystack到<code>INSTALLED_APPS</code></h3><p>跟大多数Django的应用一样，你应该在你的设置文件(通常是<code>settings.py</code>)添加Haystack到<code>INSTALLED_APPS</code>.  示例： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加</span></span><br><span class="line">    <span class="string">'haystack'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 你的app</span></span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改<code>settings.py</code></h3><p>在你的<code>settings.py</code>中，你需要添加一个设置来指示站点配置文件正在使用的后端，以及其它的后端设置。  <code>HAYSTACK——CONNECTIONS</code>是必需的设置，并且应该至少是以下的一种： </p>
<h4 id="Solr示例"><a href="#Solr示例" class="headerlink" title="Solr示例"></a>Solr示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.solr_backend.SolrEngine'</span>,</span><br><span class="line">        <span class="string">'URL'</span>: <span class="string">'http://127.0.0.1:8983/solr'</span></span><br><span class="line">        <span class="comment"># ...or for multicore...</span></span><br><span class="line">        <span class="comment"># 'URL': 'http://127.0.0.1:8983/solr/mysite',</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Elasticsearch示例"><a href="#Elasticsearch示例" class="headerlink" title="Elasticsearch示例"></a>Elasticsearch示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'</span>,</span><br><span class="line">        <span class="string">'URL'</span>: <span class="string">'http://127.0.0.1:9200/'</span>,</span><br><span class="line">        <span class="string">'INDEX_NAME'</span>: <span class="string">'haystack'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Whoosh示例"><a href="#Whoosh示例" class="headerlink" title="Whoosh示例"></a>Whoosh示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要设置PATH到你的Whoosh索引的文件系统位置</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.whoosh_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="string">'PATH'</span>: os.path.join(os.path.dirname(__file__), <span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Xapian示例"><a href="#Xapian示例" class="headerlink" title="Xapian示例"></a>Xapian示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先安装Xapian后端（http://github.com/notanumber/xapian-haystack/tree/master）</span></span><br><span class="line"><span class="comment">#需要设置PATH到你的Xapian索引的文件系统位置。</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'xapian_backend.XapianEngine'</span>,</span><br><span class="line">        <span class="string">'PATH'</span>: os.path.join(os.path.dirname(__file__), <span class="string">'xapian_index'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-处理数据"><a href="#4-处理数据" class="headerlink" title="4.处理数据"></a>4.处理数据</h2><h3 id="创建SearchIndexes"><a href="#创建SearchIndexes" class="headerlink" title="创建SearchIndexes"></a>创建<code>SearchIndexes</code></h3><p><code>SearchIndexes</code>对象是Haystack决定那些数据应该放入索引和处理流数据的方式。你可以把它们看作是Django的<code>Models</code>或<code>Forms</code>，它们是基于字段和数据操作/存储的。</p>
<p>你通常为你期望索引的每一个<code>Model</code>都创建一个唯一的<code>SearchIndex</code>。虽然你可以在不同的model中重复使用相同的<code>SearchIndex</code>，只要你小心的做并且字段名很规范。</p>
<p>为了建立<code>SearchIndex</code>，所有的都是<code>indexes.SearchIndex</code>和<code>indexe.Indexable</code>的子类。定义要存储数据的字段，定义<code>get_model</code>方法。</p>
<p>我们会在下面创建和<code>Note</code>模型对应的<code>NoteIndex</code>。这个代码通常在<code>search_indexes.py</code>中。尽管这不是必须的。这使得Haystack能自动的检测到它。<code>NoteIndex</code>应该看起来像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Note</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line">    author = indexes.CharField(model_attr=<span class="string">'user'</span>)</span><br><span class="line">    pub_date = indexes.DateTimeField(model_attr=<span class="string">'pub_date'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Note</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="string">"""Used when the entire index for model is updated."""</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.filter(pub_date__lte=datetime.datetime.now())</span><br></pre></td></tr></table></figure>
<p>每个<code>SerachIndex</code>需要有一个（仅有一个）一个字段<code>document=True</code>.这个指示着Haystack和搜索引擎把那个字段作为主要的检索。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当你选择document=<span class="literal">True</span>字段时，它应该在你的SearchIndex类里面始终如一，以避免后端的混淆。一个便捷的命名是text。</span><br><span class="line">在所有的样例中这个text字段名并没有什么特殊。它也可以是其他任何命名，你可以叫它pink_polka_dot也是没有关系的。只是简单便利的交做text。</span><br></pre></td></tr></table></figure>
<p>另外，我们在<code>text</code>字段上提供了<code>use_template=True</code>。这允许我们使用一个数据模板（而不是容易出错的级联）来构建文档搜索引擎索引。你应该在模板目录下建立新的模板<code>search/indexes/myapp/note_text.txt</code>，并将下面内容放在里面。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; object.title &#125;&#125;</span><br><span class="line">&#123;&#123; object.user.get_full_name &#125;&#125;</span><br><span class="line">&#123;&#123; object.body &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>此外，我们增加了其他字段（<code>author</code>和<code>pub_date</code>）。当我们提供额外的过滤选项的时候这是很有用的。来至Haystack的多个<code>SearchField</code>类能处理大多数的数据。</p>
<p>一个常见的主题是允许管理员用户在未来添加内容，而不马上在网站展示，直到未来某个时间点。我们特别自定义了<code>index_queryset</code>方法来防止未来的这些项添加到索引。</p>
<h2 id="5-设置视图"><a href="#5-设置视图" class="headerlink" title="5.设置视图"></a>5.设置视图</h2><h3 id="添加SearchView到你的URLconf"><a href="#添加SearchView到你的URLconf" class="headerlink" title="添加SearchView到你的URLconf"></a>添加<code>SearchView</code>到你的<code>URLconf</code></h3><p>在你的<code>URLconf</code>中添加下面一行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">r'^search/'</span>, include(<span class="string">'haystack.urls'</span>)),</span><br></pre></td></tr></table></figure>
<p>这会拉取Haystack的默认URLconf，它由单独指向<code>SearchView</code>实例的URLconf组成。你可以通过传递几个关键参数或者完全重新它来改变这个类的行为。</p>
<h3 id="搜索模板"><a href="#搜索模板" class="headerlink" title="搜索模板"></a>搜索模板</h3><p>你的搜索模板(默认在<code>search/search.html</code>)将可能非常简单。下面的足够让你的搜索运行(你的<code>template/block</code>应该会不同)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">'base.html'</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h2&gt;Search&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form method=<span class="string">"get"</span> action=<span class="string">"."</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &#123;&#123; form.as_table &#125;&#125;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Search"</span>&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &#123;% <span class="keyword">if</span> query %&#125;</span><br><span class="line">            &lt;h3&gt;Results&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% <span class="keyword">for</span> result <span class="keyword">in</span> page.object_list %&#125;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;a href="&#123;&#123; result.object.get_absolute_url &#125;&#125;"&gt;&#123;&#123; result.object.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">                &lt;p&gt;No results found.&lt;/p&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% <span class="keyword">if</span> page.has_previous <span class="keyword">or</span> page.has_next %&#125;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;% if page.has_previous %&#125;&lt;a href="?q=&#123;&#123; query &#125;&#125;&amp;amp;page=&#123;&#123; page.previous_page_number &#125;&#125;"&gt;&#123;% endif %&#125;&amp;laquo; Previous&#123;% if page.has_previous %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class="line">                    |</span><br><span class="line">                    &#123;% if page.has_next %&#125;&lt;a href="?q=&#123;&#123; query &#125;&#125;&amp;amp;page=&#123;&#123; page.next_page_number &#125;&#125;"&gt;&#123;% endif %&#125;Next &amp;raquo;&#123;% if page.has_next %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &#123;<span class="comment"># Show some example queries to run, maybe query syntax, something else? #&#125;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是<code>page.object_list</code>实际上是<code>SearchResult</code>对象的列表。这些对象返回索引的所有数据。它们可以通过<code></code>来访问。所以<code></code>实际使用的是数据库中<code>Note</code>对象来访问<code>title</code>字段的。 </p>
<h3 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h3><p>这是最后一步，现在你已经配置好了所有的事情，是时候把数据库中的数据放入索引了。Haystack附带的一个命令行管理工具使它变得很容易。</p>
<p>简单的运行<code>./manage.py rebuild_index</code>。你会得到有多少模型进行了处理并放进索引的统计。</p>
]]></content>
      <categories>
        <category>haystack</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery（一）</title>
    <url>/2018/12/30/jQuery%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="jQuery-系列博客（一）"><a href="#jQuery-系列博客（一）" class="headerlink" title="jQuery 系列博客（一）"></a>jQuery 系列博客（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>mro列表是什么东西</title>
    <url>/2019/02/24/mro%E5%88%97%E8%A1%A8%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python 中的深浅复制</title>
    <url>/2018/12/26/python-%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%B5%85%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="python-中的深浅复制"><a href="#python-中的深浅复制" class="headerlink" title="python 中的深浅复制"></a>python 中的深浅复制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想起来写这篇博客是因为这段时间学习 js 的时候涉及到了变量的深浅复制问题，然后想先把 python 中的深浅复制理解的更深入一些，再写 js 中的深浅复制，因为 python 对我来说已经很熟悉了。</p>
<p>在 python 中，标识一个对象的唯一身份有三个状态：对象的 id（内存地址），对象类型，对象值。</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul>
<li>赋值是将一个对象的地址赋值给一个变量，使得变量指向该内存地址；</li>
<li>修改不可变对象时（str、tuple、int）需要开辟新的内存空间；</li>
<li>修改可变对象时（list、dict、set）不需要开辟新的内存空间。</li>
</ul>
<p><strong>赋值是将 id 重新赋值给了一个新的变量，引用计数加1。</strong></p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝只是拷贝父对象，而对于父对象中的子对象并不会进行拷贝。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">a[<span class="string">'name'</span>] = <span class="string">'musibii'</span></span><br><span class="line">a <span class="comment"># &#123;1: [1, 2, 3], 'name': 'musibii'&#125;</span></span><br><span class="line">b <span class="comment"># &#123;1: [1, 2, 3]&#125;</span></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">4</span>)</span><br><span class="line">a <span class="comment"># &#123;1: [1, 2, 3, 4], 'name': 'musibii'&#125;</span></span><br><span class="line">b <span class="comment"># &#123;1: [1, 2, 3, 4]&#125;</span></span><br></pre></td></tr></table></figure>
<p>也就是说浅拷贝将a的值复制到一个新的内存空间，并将内存地址赋值给 b，所以对 a 对象添加新的属性，b 并不会改变；但是因为浅拷贝只是拷贝了一层，对于子对象的内存空间是原对象的内存引用，所以修改 a 相应的 b 中也会改变。</p>
<p><strong>浅拷贝只拷贝父对象，不会拷贝对象内部的子对象。</strong></p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝完全赋值被复制对象的元素，不是复制内存地址，是开辟新的内存空间将被复制对象的值放在了新的内存空降中，并将新的内存地址指向了新的变量，这样的话，修改原对象不会对新的对象产生影响。</p>
<p>深拷贝是在另一块地址中创建一个新的变量，同时容器内的元素的地址也是新开辟的，仅仅是值相同而已，是完全的副本。</p>
<p>在Python 中深拷贝需要引入 copy 模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">c = copy.deepcopy(a)</span><br><span class="line">c <span class="comment"># &#123;1: [1, 2, 3], 'name': 'musibii'&#125;</span></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">4</span>)</span><br><span class="line">a <span class="comment"># &#123;1: [1, 2, 3, 4], 'name': 'musibii'&#125;</span></span><br><span class="line">c <span class="comment"># &#123;1: [1, 2, 3], 'name': 'musibii'&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol>
<li>b = a：赋值引用，a 和 b 都指向同一个对象</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fylbbsvc16j309u06uaa9.jpg" alt></p>
<ol start="2">
<li>b = a.copy()：浅拷贝，a 和 b 是一个独立的对象，但他们的子对象还是指向同一个对象（引用）。</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fylbdfzszej30ac078aad.jpg" alt></p>
<ol start="3">
<li>b = copy.deepcopy(a)：深拷贝，a 和 b 完全拷贝了父对象及其子对象，两者完全独立。</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fylbeprqf6j30b307e74o.jpg" alt></p>
<h2 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)            <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"> </span><br><span class="line">print( <span class="string">'a = '</span>, a )</span><br><span class="line">print( <span class="string">'b = '</span>, b )</span><br><span class="line">print( <span class="string">'c = '</span>, c )</span><br><span class="line">print( <span class="string">'d = '</span>, d )</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">'a = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>])</span><br><span class="line">(<span class="string">'b = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>])</span><br><span class="line">(<span class="string">'c = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]])</span><br><span class="line">(<span class="string">'d = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]])</span><br></pre></td></tr></table></figure>
<h3 id="以上部分参考"><a href="#以上部分参考" class="headerlink" title="以上部分参考"></a>以上部分参考</h3><p><a href="http://www.runoob.com/w3cnote/python-understanding-dict-copy-shallow-or-deep.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python 调试器之 pdb</title>
    <url>/2019/12/10/python-%E8%B0%83%E8%AF%95%E5%99%A8%E4%B9%8B-pdb/</url>
    <content><![CDATA[<h1 id="python-调试器-pdb"><a href="#python-调试器-pdb" class="headerlink" title="python 调试器 pdb"></a>python 调试器 pdb</h1><p>使用 pdb 来进行代码调试</p>
<h2 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h2><ol>
<li>h：（help）帮助</li>
<li>w：（where）打印当前执行堆栈</li>
<li>d：（down）执行跳转到在当前堆栈的深一层</li>
<li>u：（up）执行跳转到当前堆栈的上一层</li>
<li>b：（break）添加断点<ol>
<li>b：列出当前所有断点和断点执行的统计次数</li>
<li>b line_no：当前脚本的 line_no 行添加断点</li>
<li>b filename:line_no：脚本 filename 的 line_no 行添加断点</li>
<li>b function：在函数 function 的第一条可执行语句处添加断点</li>
</ol>
</li>
<li>tbreak：（temporary break）临时断点<ol>
<li>在第一次执行到这个断点之后，就自动删除这个断点，用法和 b 一样</li>
</ol>
</li>
<li>cl：（clear）清除<ol>
<li>cl：清除所有断点</li>
<li>cl bpnumber1 bpnumber2… 清除断点号为 bpnumber1，bpnumber2…的断点</li>
<li>cl lineno 清除当前脚本 lineno 行的断点</li>
<li>cl filename:line_no 清除脚本 filename 的 line_no 行的断点</li>
</ol>
</li>
<li>disable：停用断点，参数为 bpnumber，和 cl 的区别是断点依然存在只是不启用</li>
<li>enable：激活断点，参数为 bpnumber</li>
<li>s：（step）执行下一条命令<ol>
<li>如果本句是函数调用，则 s 会执行到函数的第一句</li>
</ol>
</li>
<li>n：（next）执行下一条语句<ol>
<li>如果本句是函数调用，则执行函数，接着执行当前执行语句的下一条</li>
</ol>
</li>
<li>r：（return）执行当前运行函数到结束</li>
<li>c：（continue）继续执行，直到遇到下一条断点</li>
<li>l：（list）列出源码<ol>
<li>l：列出当前执行语句周围 11 条代码</li>
<li>l first：列出 first 行周围 11 条代码</li>
<li>l first second：列出 first–second 范围的代码，如果 second &lt; first，second 将被解析为行数</li>
</ol>
</li>
<li>a：（args）列出当前执行函数的函数</li>
<li>p expression：（print）输出 expression 的值</li>
<li>pp expression：好看一点的 p expression 的值</li>
<li>run：重新启动 debug，相当于 restart</li>
<li>q：（quit）退出 debug</li>
<li>j line_no：（jump）设置下条执行的语句函数<ol>
<li>只能在堆栈的最底层跳转，向后重新执行，向前可直接执行到行号</li>
</ol>
</li>
<li>unt：（until）执行到下一行（跳出循环），或者当前堆栈结束</li>
<li>condition bpnumber condition，给断点设置条件，当参数 condition 返回 True 的时候 bpnumber 断点有效，否则 bpnumber 断点无效</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>直接输入 Enter，会执行上一条命令；</li>
<li>输入 PDB 不认识的命令，PDB 会把它当做 python 语句在当前环境下执行</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>python 中的双下划线方法系列</title>
    <url>/2019/02/25/python-%E4%B8%AD%E7%9A%84%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E6%96%B9%E6%B3%95%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="str"><a href="#str" class="headerlink" title="str"></a><strong>str</strong></h2><p>改变对象的字符串显示。可以理解为使用 print 函数打印一个对象时，会自动调用对象的<strong>str</strong>方法 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对象的字符串表示 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.name </span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'张三'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line">print(s1) <span class="comment"># 会调用s1的__str__方法</span></span><br></pre></td></tr></table></figure>
<h2 id="repr"><a href="#repr" class="headerlink" title="repr"></a><strong>repr</strong></h2><p>在 python 解释器环境下，会默认显示对象的 repr 表示 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span>self.name = name </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span>self.age = age </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> self.name </span><br><span class="line"></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = Student(<span class="string">'张三'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 </span><br><span class="line"></span><br><span class="line">张三</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>： </p>
<p>str 函数或者 print 函数调用的是 obj.<strong>str</strong>() </p>
<p>repr 函数或者交互式解释器调用的是 obj.<strong>repr</strong>() </p>
<p><strong>注意</strong>： </p>
<p>如果<strong>str</strong>没有被定义，那么就会使用<strong>repr</strong>来代替输出。 </p>
<p><strong>str</strong>和<strong>repr</strong>方法的返回值必须是字符串。 </p>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a><strong>format</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line">__format_dict = &#123; </span><br><span class="line"></span><br><span class="line"><span class="string">'n-a'</span>: <span class="string">'名字是：&#123;obj.name&#125;-年龄是：&#123;obj.age&#125;'</span>, <span class="comment"># 名字是：lqz-年龄是：18 </span></span><br><span class="line"></span><br><span class="line"><span class="string">'n:a'</span>: <span class="string">'名字是：&#123;obj.name&#125;：年龄是：&#123;obj.age&#125;'</span>, <span class="comment"># 名字是：lqz：年龄是：18 </span></span><br><span class="line"></span><br><span class="line"><span class="string">'n/a'</span>: <span class="string">'名字是：&#123;obj.name&#125;/年龄是：&#123;obj.age&#125;'</span>, <span class="comment"># 名字是：/年龄是：18 </span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, format_spec)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> format_spec <span class="keyword">or</span> format_spec <span class="keyword">not</span> <span class="keyword">in</span> self.__format_dict: </span><br><span class="line"></span><br><span class="line">format_spec = <span class="string">'n-a'</span> </span><br><span class="line"></span><br><span class="line">fmt = self.__format_dict[format_spec] </span><br><span class="line"></span><br><span class="line">print(fmt) <span class="comment">#&#123;obj.name&#125;:&#123;obj.age&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fmt.format(obj=self) </span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'lqz'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line">ret = format(s1, <span class="string">'n/a'</span>) </span><br><span class="line"></span><br><span class="line">print(ret) <span class="comment"># lqz/24</span></span><br></pre></td></tr></table></figure>
<h2 id="del"><a href="#del" class="headerlink" title="del"></a><strong>del</strong></h2><p>析构方法，当对象在内存中被释放时，自动触发执行。此方法一般无须定义，因为 python 是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给 python 解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'删除了...'</span>) </span><br><span class="line"></span><br><span class="line">a = A() </span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &lt;__main__.A object at 0x10164fb00&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a <span class="comment"># 删除了... </span></span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># NameError: name 'a' is not defined</span></span><br></pre></td></tr></table></figure>
<h2 id="dict和slots"><a href="#dict和slots" class="headerlink" title="dict和slots"></a><strong>dict</strong>和<strong>slots</strong></h2><p>python 中的类，都会从 object 里继承一个<strong>dict</strong>属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个<strong>dict</strong>属性。但是二者不相同。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line">some = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.num = num </span><br><span class="line"></span><br><span class="line">a = A(<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line">print(a.__dict__) <span class="comment"># &#123;'num': 10&#125; </span></span><br><span class="line"></span><br><span class="line">a.age = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line">print(a.__dict__) <span class="comment"># &#123;'num': 10, 'age': 10&#125;</span></span><br></pre></td></tr></table></figure>
<p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有<strong>dict</strong>属性，所以类和实例可以在运行过程动态添加属性和方法。 </p>
<p>但是由于每实例化一个类都要分配一个<strong>dict</strong>变量，容易浪费内存。因此在Python中有一个内置的<strong>slots</strong>属性。当一个类设置了<strong>slots</strong>属性后，这个类的<strong>dict</strong>属性就不存在了（同理，该类的实例也不存在<strong>dict</strong>属性），如此一来，设置了<strong>slots</strong>属性的类的属性，只能是预先设定好的。 </p>
<p>当你定义<strong>slots</strong>后，<strong>slots</strong>就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个<strong>dict</strong>字典，在<strong>slots</strong>中列出的属性名在内部被映射到这个数组的特定索引上。使用<strong>slots</strong>带来的副作用是我们没有办法给实例添加任何新的属性了。 </p>
<p>注意：尽管<strong>slots</strong>看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了<strong>slots</strong>属性的类就不支持多继承。<strong>slots</strong>通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line">__slots__ = [<span class="string">'name'</span>, <span class="string">'age'</span>] </span><br><span class="line"></span><br><span class="line">a1 = A() </span><br><span class="line"></span><br><span class="line"><span class="comment"># print(a1.__dict__) # AttributeError: 'A' object has no attribute '__dict__' </span></span><br><span class="line"></span><br><span class="line">a1.name = <span class="string">'张三'</span> </span><br><span class="line"></span><br><span class="line">a1.age = <span class="number">24</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># a1.hobby = '泡妞' # AttributeError: 'A' object has no attribute 'hobby' </span></span><br><span class="line"></span><br><span class="line">print(a1.__slots__)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>： </p>
<p><strong>slots</strong>的很多特性都依赖于普通的基于字典的实现。 </p>
<p>另外，定义了<strong>slots</strong>后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义<strong>slots</strong>，比如在程序中需要创建某个类的几百万个实例对象 。 </p>
<p>关于<strong>slots</strong>的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用<strong>slots</strong>可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。 </p>
<h2 id="item"><a href="#item" class="headerlink" title="item"></a><strong>item</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(self.__dict__[item]) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'obj[key]=lqz赋值时，执行我'</span>) </span><br><span class="line"></span><br><span class="line">self.__dict__[key] = value </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'del obj[key]时，执行我'</span>) </span><br><span class="line"></span><br><span class="line">self.__dict__.pop(key) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, item)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'del obj.key时，执行我'</span>) </span><br><span class="line"></span><br><span class="line">self.__dict__.pop(item) </span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="string">'sb'</span>) </span><br><span class="line"></span><br><span class="line">print(f1.__dict__) </span><br><span class="line"></span><br><span class="line">f1[<span class="string">'age'</span>] = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">f1.hobby = <span class="string">'泡妞'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> f1.hobby </span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> f1[<span class="string">'age'</span>] </span><br><span class="line"></span><br><span class="line">f1[<span class="string">'name'</span>] = <span class="string">'lqz'</span> </span><br><span class="line"></span><br><span class="line">print(f1.__dict__)</span><br></pre></td></tr></table></figure>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;Person: &#123;&#125;(&#123;&#125;)&gt;'</span>.format(self.name, self.age) </span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'张三'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line">print(p1)</span><br></pre></td></tr></table></figure>
<p>上面是<strong>init</strong>最普通的用法了。但是<strong>init</strong>其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 <strong>new</strong> 方法。 </p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a><strong>new</strong></h2><p>其实<strong>init</strong>是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 <strong>new</strong>方法正是创建这个类实例的方法 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'调用__new__，创建类实例'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> super().__new__(Person) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'调用__init__，初始化实例'</span>) </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;Person: &#123;&#125;(&#123;&#125;)&gt;'</span>.format(self.name, self.age) </span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'张三'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line">print(p1) </span><br><span class="line"></span><br><span class="line">调用__new__，创建类实例 </span><br><span class="line"></span><br><span class="line">调用__init__，初始化实例 </span><br><span class="line"></span><br><span class="line">&lt;Person: 张三(<span class="number">24</span>)&gt;</span><br></pre></td></tr></table></figure>
<p><strong>new</strong>方法在类定义中不是必须写的，如果没定义的话默认会调用object.<strong>new</strong>去创建一个对象（因为创建类的时候默认继承的就是object）。 </p>
<p>如果我们在类中定义了<strong>new</strong>方法，就是重写了默认的<strong>new</strong>方法，我们可以借此自定义创建对象的行为。 </p>
<p>举个例子： </p>
<p>重写类的<strong>new</strong>方法来实现单例模式。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>): </span><br><span class="line"></span><br><span class="line">cls._instance = super().__new__(Singleton) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cls._instance </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line">s1 = Singleton(<span class="string">'张三'</span>, <span class="number">24</span>) </span><br><span class="line"></span><br><span class="line">s2 = Singleton(<span class="string">'李四'</span>, <span class="number">20</span>) </span><br><span class="line"></span><br><span class="line">print(s1, s2) <span class="comment"># 这两实例都一样 </span></span><br><span class="line"></span><br><span class="line">print(s1.name, s2.name)</span><br></pre></td></tr></table></figure>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.name = name </span><br><span class="line"></span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'调用对象的__call__方法'</span>) </span><br><span class="line"></span><br><span class="line">a = Person(<span class="string">'张三'</span>, <span class="number">24</span>) <span class="comment"># 类Person可调用 </span></span><br><span class="line"></span><br><span class="line">a() <span class="comment"># 对象a可以调用</span></span><br></pre></td></tr></table></figure>
<h2 id="doc"><a href="#doc" class="headerlink" title="doc"></a><strong>doc</strong></h2><p>定义类的描述信息。注意该信息无法被继承。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""我是A类的描述信息"""</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">print(A.__doc__)</span><br></pre></td></tr></table></figure>
<h2 id="iter和next"><a href="#iter和next" class="headerlink" title="iter和next"></a><strong>iter</strong>和<strong>next</strong></h2><p>如果一个对象拥有了<strong>iter</strong>，那这个对象就是可迭代对象；如果还拥有<strong>next</strong>那这个对象就是迭代器。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, stop=None)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> stop: </span><br><span class="line"></span><br><span class="line">start, stop = <span class="number">0</span>, start </span><br><span class="line"></span><br><span class="line">self.start = start </span><br><span class="line"></span><br><span class="line">self.stop = stop </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.start &gt;= self.stop: </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> StopIteration </span><br><span class="line"></span><br><span class="line">n = self.start </span><br><span class="line"></span><br><span class="line">self.start += <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n </span><br><span class="line"></span><br><span class="line">a = A(<span class="number">1</span>, <span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator </span><br><span class="line"></span><br><span class="line">print(isinstance(a, Iterator)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A(<span class="number">1</span>, <span class="number">5</span>): </span><br><span class="line"></span><br><span class="line">print(i) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A(<span class="number">5</span>): </span><br><span class="line"></span><br><span class="line">print(i) </span><br><span class="line"></span><br><span class="line">aaa=A(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">print(next(aaa)) </span><br><span class="line"></span><br><span class="line">print(next(aaa)) <span class="comment">#抛异常</span></span><br></pre></td></tr></table></figure>
<h2 id="enter和exit"><a href="#enter和exit" class="headerlink" title="enter和exit"></a><strong>enter</strong>和<strong>exit</strong></h2><p>一个对象如果实现了<strong>enter</strong>和<strong>_exit</strong>方法，那么这个对象就支持上下文管理协议，即with语句 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'oo'</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'退出with代码块时执行此方法'</span>) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'1'</span>, exc_type) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'2'</span>, exc_val) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'3'</span>, exc_tb) </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> f: </span><br><span class="line"></span><br><span class="line">print(<span class="string">'进入with语句块'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># with语句中代码块出现异常，则with后的代码都无法执行。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raise AttributeError('sb') </span></span><br><span class="line"></span><br><span class="line">print(f) <span class="comment">#f打印出oo </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'嘿嘿嘿'</span>)</span><br></pre></td></tr></table></figure>
<p>上下文管理协议适用于那些进入和退出之后自动执行一些代码的场景，比如文件、网络连接、数据库连接或使用锁的编码场景等。 </p>
<h2 id="len"><a href="#len" class="headerlink" title="len"></a><strong>len</strong></h2><p>拥有<strong>len</strong>方法的对象支持len(obj)操作。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.x = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">self.y = <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len(self.__dict__) </span><br><span class="line"></span><br><span class="line">a = A() </span><br><span class="line"></span><br><span class="line">print(len(a))</span><br></pre></td></tr></table></figure>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a><strong>hash</strong></h2><p>拥有<strong>hash</strong>方法的对象支持hash(obj)操作。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.x = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">self.x = <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hash(str(self.x) + str(self.x)) </span><br><span class="line"></span><br><span class="line">a = A() </span><br><span class="line"></span><br><span class="line">print(hash(a))</span><br></pre></td></tr></table></figure>
<h2 id="eq"><a href="#eq" class="headerlink" title="eq"></a><strong>eq</strong></h2><p>拥有<strong>eq</strong>方法的对象支持相等的比较操作 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span> </span><br><span class="line"></span><br><span class="line">self.x = x </span><br><span class="line"></span><br><span class="line">self.y = y </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,obj)</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出比较的第二个对象的x值 </span></span><br><span class="line"></span><br><span class="line">print(obj.x) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.x +self.y == obj.x+obj.y: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">a = A(<span class="number">1</span>,<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">b = A(<span class="number">2</span>,<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">print(a == b)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python模块之configparser模块</title>
    <url>/2018/10/18/python%E4%B9%8Bconfigparser%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="一-什么是configparser？"><a href="#一-什么是configparser？" class="headerlink" title="一 什么是configparser？"></a>一 什么是configparser？</h2><p>configparser是用于解析配置文件的模块。什么是配置文件呢？包含配置程序信息的文件就称为配置文件。什么样的数据应该作为配置信息呢？需要修改但是不经常改的信息就可以作为配置信息，比如数据文件的路径。</p>
<h2 id="二-什么是配置文件？"><a href="#二-什么是配置文件？" class="headerlink" title="二 什么是配置文件？"></a>二 什么是配置文件？</h2><p>配置文件中只有两种内容：</p>
<ol>
<li>section，分区</li>
<li>option，选项，是键值对的形式</li>
</ol>
<h2 id="三-configparser的使用"><a href="#三-configparser的使用" class="headerlink" title="三 configparser的使用"></a>三 configparser的使用</h2><figure class="highlight plain"><figcaption><span>wiki</span></figcaption><table><tr><td class="code"><pre><span class="line"># useinfo.cfg</span><br><span class="line">[user]</span><br><span class="line">name1 = musibii</span><br><span class="line">name2 = thales</span><br><span class="line">name3 = ddd</span><br><span class="line"></span><br><span class="line">[password]</span><br><span class="line">password1 = woshinibaba</span><br><span class="line">password2 = 123456</span><br><span class="line">password3 = 123</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="comment"># 创建一个解析器</span></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"><span class="comment"># 读取并解析cfg文件</span></span><br><span class="line">config.read(<span class="string">'useinfo.cfg'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 获取所有section</span></span><br><span class="line">print(config.sections())</span><br><span class="line"><span class="comment"># 获取某个分区下所有option</span></span><br><span class="line">print(config.options(<span class="string">'user'</span>))</span><br><span class="line"><span class="comment"># 获取某个选项具体的值</span></span><br><span class="line">print(config.get(<span class="string">'user'</span>, <span class="string">'name1'</span>))</span><br><span class="line"><span class="comment"># get返回的都是字符串类型，如果需要转换类型，直接使用get+对应的类型(bool，int，float)</span></span><br><span class="line">print(config.getint(<span class="string">'password'</span>, <span class="string">'password1'</span>))</span><br><span class="line"><span class="comment"># 是否有某个选项，返回布尔值</span></span><br><span class="line">config.has_option()</span><br><span class="line"><span class="comment"># 是否有某个分区</span></span><br><span class="line">config.has_section()</span><br><span class="line"><span class="comment"># 不常用的一些方法</span></span><br><span class="line"><span class="comment"># 添加分区(必须先添加分区才可以修改分区下面的值)</span></span><br><span class="line">config.add_section(<span class="string">'server'</span>)</span><br><span class="line">config.set(<span class="string">'server'</span>, <span class="string">'usr'</span>, <span class="string">'192.168.1.1'</span>)</span><br><span class="line"><span class="comment"># 删除选项</span></span><br><span class="line">config.remove_option(<span class="string">'user'</span>, <span class="string">'name1'</span>)</span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'useinfo.cfg'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'ust-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config.write(f)</span><br></pre></td></tr></table></figure>
<p>使用例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># admin.cfg</span><br><span class="line">[admin]</span><br><span class="line">name=maffia</span><br><span class="line">password=woshinibaba</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取账号和密码信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_admin</span><span class="params">()</span>:</span></span><br><span class="line">    admin_info = []</span><br><span class="line">    config.read(admin.cfg, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    sections = config.sections()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> sections:</span><br><span class="line">        user_dic = &#123;<span class="string">'name'</span>: config.get(item, <span class="string">'name'</span>),</span><br><span class="line">                   <span class="string">'password'</span>: config.get(item, <span class="string">'password'</span>)&#125;</span><br><span class="line">        admin_info.append(user_dic)</span><br><span class="line">    <span class="keyword">return</span> admin_info</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python 模块与包的导入问题</title>
    <url>/2018/10/27/python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85%E7%9A%84%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python数据类型与类的总结</title>
    <url>/2018/10/23/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之hashlib</title>
    <url>/2018/10/19/python%E6%A8%A1%E5%9D%97%E4%B9%8Bhashlib/</url>
    <content><![CDATA[<h1 id="一-什么是hashlib模块？"><a href="#一-什么是hashlib模块？" class="headerlink" title="一 什么是hashlib模块？"></a>一 什么是hashlib模块？</h1><p>hashlib模块是python用来加密的一个模块，hash是一种算法，可以提供SHA1、SHA224、SHA256、SHA384、SHA512、MD%算法，该算法接收传入的内容，经过运算得到一串hash值。</p>
<p>hash是一种算法，是将一个任意长度的数据，根据计算，得到一个固定长度的hash值。</p>
<p>经过hash算法会得到一串hash值，hash值得特点如下：</p>
<ol>
<li>只要传入的内容一样，得到的hash值必然一样 —》》要用明文传输密码文件完整性校验</li>
<li>按理来说不能有hash值返解回原内容，但是破解md5使用撞库原理也变得不安全起来</li>
<li>只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</li>
</ol>
<p>hash算法就像一座工厂，工厂接收你送来的原材料，（可以使用m.update()为工厂增加材料），经过加工返回的产品就是hash值。</p>
<h1 id="二-使用场景"><a href="#二-使用场景" class="headerlink" title="二 使用场景"></a>二 使用场景</h1><ol>
<li>密码验证</li>
<li>校验数据包</li>
<li>提升密码的复杂度</li>
</ol>
<h1 id="三-hashlib模块的使用"><a href="#三-hashlib模块的使用" class="headerlink" title="三 hashlib模块的使用"></a>三 hashlib模块的使用</h1><ol>
<li>md5使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5(<span class="string">'musibii'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(m.hexdigest())</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">02797</span>a3eebd7ef3054cd5c0e3a8c3199</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>其他几种加密</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">h1 = hashlib.sha512(<span class="string">"musibii"</span>.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">h2 = hashlib.sha3_512(<span class="string">"musibii"</span>.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(h.hexdigest()))</span></span><br><span class="line">print(h1.hexdigest())</span><br><span class="line">print(h2.hexdigest())</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">458</span>c46307cbe022bcd948462b2160c33f0821ea7c1d4ad0a9eb473a6448a850879c23075d6898f86f0093531ee33bde7565f0321ad516894071b73a5dc77626a</span><br><span class="line">bfb5d77e45e99c5280bc1167113fe1e3666e350c6eac9475e66edb91c247e56fb014475c92f8140e601c2238f165a5cc14d5192ae5147acee4185476b65f613e</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>加盐</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5(<span class="string">'musibii'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">m.update(<span class="string">'thales'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(m.hexdigest())</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">b2bb467965df30aaa14f677c3b3358d1</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>hmac加密</li>
</ol>
<p>和MD5等算法没什么区别,主要的区别是必须加盐.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">h = hmac.new(<span class="string">'musibii'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">h.update(<span class="string">'thales'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(h.hexdigest())</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">e26b77208fb858f7f8f78965f8ea4f47</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之pickle、shelve、json</title>
    <url>/2018/10/17/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="一-什么是序列化"><a href="#一-什么是序列化" class="headerlink" title="一 什么是序列化"></a>一 什么是序列化</h1><p>序列化指的是将内存中的数据结构转化为一种中间格式，并存储到硬盘上。</p>
<p>（反序列化：将硬盘上存储的中间格式数据再还原为内存中的数据结构）</p>
<h1 id="二-为什么要序列化"><a href="#二-为什么要序列化" class="headerlink" title="二 为什么要序列化"></a>二 为什么要序列化</h1><ol>
<li>持久保持状态</li>
</ol>
<p>需知一个软件/程序的运行就是处理一系列状态的变化，在编程语言中，‘状态‘会以各种有结构的数据类型(也可以称之为变量)的形式保存在内存中。</p>
<p>内存是无法永久保存数据的，当程序运行了一段时间，我们断电或者重启程序，内存中关于这个程序之前一段时间的数据都会被清空。</p>
<p>在断电或重启程序之前将程序当前运行的数据保存下来，便于下次程序执行能够从文件中载入之前的数据，然后继续执行，这就是序列化。</p>
<ol start="2">
<li>数据跨平台交互</li>
</ol>
<p>序列化数据之后，不仅可以把序列化后的内容写入硬盘，还可以通过网络传输到别的机器上，如果收发的双方约定都使用一种序列化的格式，那么便打破了平台和语言带来的限制，实现了跨平台交互。</p>
<p>反过来，把变量内从从序列化的对象重新读到内存里称之为反序列化，即unpicking。</p>
<h1 id="三-序列化数据的三个模块"><a href="#三-序列化数据的三个模块" class="headerlink" title="三 序列化数据的三个模块"></a>三 序列化数据的三个模块</h1><h3 id="一-pickle模块"><a href="#一-pickle模块" class="headerlink" title="一 pickle模块"></a>一 pickle模块</h3><p>pickle模块时python内置的用来序列化python数据格式的模块，支持序列化python中所有的数据类型，主要方法有四个；</p>
<ol>
<li>dumps</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">name = <span class="string">'musibii'</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">height = <span class="number">1.7</span></span><br><span class="line">user = &#123;<span class="string">'name'</span>: name, <span class="string">'age'</span>: age, <span class="string">'height'</span>: height&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'userinfo.pkl'</span>, <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    userbytes = pickle.dumps(user)</span><br><span class="line">    f.write(userbytes)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>loads</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'userinfo.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    userbytes = f.read()</span><br><span class="line">    user = pickle.loads(userbytes)</span><br><span class="line">    print(user)</span><br></pre></td></tr></table></figure>
<p>与dumps和loads对应的两个方法更简单。</p>
<ol start="3">
<li>dump</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'userinfo.pkl'</span>, <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(user, f)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>load</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'userinfo.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    user = pickle.load(f)</span><br><span class="line">    print(user)</span><br></pre></td></tr></table></figure>
<h3 id="二-shelve模块"><a href="#二-shelve模块" class="headerlink" title="二 shelve模块"></a>二 shelve模块</h3><p>shevlve模块也用于序列化，它和pickle模块不同的地方在于，不需要关心文件模式，直接把数据当成字典来看待。而且shelve模块可以直接对数据进行修改，而不用覆盖之前的数据，但pickle要想修改的话只能使用<strong>wb</strong>模式覆盖</p>
<p>shelve只有一个方法<strong>open</strong>，所以使用起来也很方便。同样的，shelve也支持python中所有的数据格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line">user = &#123;<span class="string">'name'</span>: <span class="string">'musibii'</span>&#125;</span><br><span class="line">s = shelve.open(<span class="string">'userdb.shv'</span>)</span><br><span class="line">s[<span class="string">'user'</span>] = user</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<h3 id="三-json模块"><a href="#三-json模块" class="headerlink" title="三 json模块"></a>三 json模块</h3><h4 id="1-json是什么"><a href="#1-json是什么" class="headerlink" title="1 json是什么"></a>1 json是什么</h4><p>JSON是Java script object notation的缩写，翻译过来就是js对象标识法。</p>
<p>对于开发者而言，json是一种通用的数据格式，任何语言都能解析，所以每种语言都会有处理json格式数据的需求。</p>
<ol>
<li><p>json语法</p>
<p> js 中的数据类型  python数据类型 的对应关系<br> {}              字典<br> []              list<br> string “”       str<br> int/float       int/float<br> true/false      True/False<br> null            None</p>
</li>
<li>json格式的语法规范</li>
</ol>
<p>最外层通常是一个字典或列表</p>
<p>{}or[]，如果想定义json格式的数据，那么最外层直接写{}，而且json中的字符串必须是双引号，json理论上可以嵌套任意多的层次。</p>
<h4 id="2-为什么用json"><a href="#2-为什么用json" class="headerlink" title="2 为什么用json"></a>2 为什么用json</h4><p>虽然之前的pickle和shelve都很强大，而且使用也非常方便，那么为什么还出来json呢？这是因为pickle和shevle序列化之后的数据只有python才能解析出来，而通常在实际生产开发中，都是需要数据可以跨平台使用的。</p>
<h4 id="3-json的使用"><a href="#3-json的使用" class="headerlink" title="3 json的使用"></a>3 json的使用</h4><p><strong>json模块的核心方法</strong></p>
<ul>
<li>dump</li>
<li>dumps</li>
<li>load</li>
<li>loads</li>
</ul>
<p>不带s的直接封装了write和read方法。</p>
<ol>
<li>dump</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">jsontext = <span class="string">"""&#123;</span></span><br><span class="line"><span class="string">	"users": [&#123;</span></span><br><span class="line"><span class="string">			"name": "musibii",</span></span><br><span class="line"><span class="string">			"age": 18</span></span><br><span class="line"><span class="string">		&#125;,</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			"name": "thales",</span></span><br><span class="line"><span class="string">			"age": 23</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	]</span></span><br><span class="line"><span class="string">&#125;"""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(jsontext, f)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>dumps</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">jsontext = <span class="string">"""&#123;</span></span><br><span class="line"><span class="string">	"users": [&#123;</span></span><br><span class="line"><span class="string">			"name": "musibii",</span></span><br><span class="line"><span class="string">			"age": 18</span></span><br><span class="line"><span class="string">		&#125;,</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			"name": "thales",</span></span><br><span class="line"><span class="string">			"age": 23</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	]</span></span><br><span class="line"><span class="string">&#125;"""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(jsontext))</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>load</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(json.load(f))</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>loads</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = json.loads(f.read())</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之random</title>
    <url>/2018/10/17/python%E6%A8%A1%E5%9D%97%E4%B9%8Brandom/</url>
    <content><![CDATA[<p>python的随机数模块为random模块，可以产生随机的整数或浮点数。但是这是伪随机数，python解释器会维护一些种子数，然后根据算法算出随机数。linux维护了一个熵池，这个熵池收集噪音的信息，更接近真随机数。</p>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><ol>
<li>随机产生0-1的浮点数，不包括1</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.random())</span><br><span class="line"><span class="comment"># 运行结果 0.8517652068795716</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>随机产生a-b的整数，包括a和b</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">print(random.randint(a, b))</span><br><span class="line"><span class="comment"># 运行结果 4</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>随机产生a-b，不包括a和b的整数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">print(random.randrange(a, b))</span><br><span class="line"><span class="comment"># 运行结果 7</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>指定一个范围并指定需要产生的随机个数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([<span class="string">'aa'</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 运行结果 [['a', 'b'], 5]</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>打乱列表的顺序（返回None）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">random.shuffle(ls)</span><br><span class="line">print(ls)</span><br><span class="line"><span class="comment"># 运行结果 [1, 9, 2, 5, 4, 11, 3]</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>从给定的序列中随机选一个</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="comment"># 运行结果 2</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>从给定的序列中随机选多个（包括1个，返回一个列表）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.choices((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>), k=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 运行结果 [6, 5, 5]</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>制作随机验证码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_verifycode</span><span class="params">(length)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        a = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">        b = chr(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">        c = chr(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        s = random.choice([a, b, c])</span><br><span class="line">        res += s</span><br><span class="line">     <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之shutil</title>
    <url>/2018/10/17/python%E6%A8%A1%E5%9D%97%E4%B9%8Bshutil/</url>
    <content><![CDATA[<p>shutil是一个用于简化文件操作的模块。</p>
<ol>
<li>复制文件（传入源文件对象和目标文件对象）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">f1 = open(<span class="string">r'/Users/jingxing/PycharmProjects/day20/test.py'</span>, <span class="string">'rb'</span>)</span><br><span class="line">f2 = open(<span class="string">r'/Users/jingxing/PycharmProjects/day20/test_test.py'</span>, <span class="string">'rb'</span>)</span><br><span class="line">shutil.copyfileobj(f1, f2)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>压缩文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.make_archive(<span class="string">'myzip'</span>, <span class="string">'zip'</span>, <span class="string">r'/Users/jingxing/PycharmProjects/day20'</span>)</span><br><span class="line">shutil.make_archive(<span class="string">'mytar'</span>, <span class="string">'tar'</span>, <span class="string">r'/Users/jingxing/PycharmProjects/day20'</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>解压文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.unpack_archive(<span class="string">r'/Users/jingxing/PycharmProjects/day20/myzip.zip'</span>)</span><br><span class="line">shutil.unpack_archive(<span class="string">r'/Users/jingxing/PycharmProjects/day20/mytar.tar'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>其他两个用于解压的模块</strong></p>
<h3 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h3><p>从名字可以看出来是解压zip压缩文件的模块。</p>
<ol>
<li>解压</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">z = zipfile.ZipFile(<span class="string">r'/Users/jingxing/PycharmProjects/day20/myzip.zip'</span>, <span class="string">'r'</span>)</span><br><span class="line">z.extractall(path=<span class="string">r'/Users/jingxing/PycharmProjects/day20'</span>)</span><br><span class="line">z.close()</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>往压缩包中添加文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">z = zipfile.ZipFile(<span class="string">r"/Users/jingxing/PycharmProjects/python全栈/day20/代码/my压缩.tar"</span>,<span class="string">"w"</span>)</span><br><span class="line">z.write(<span class="string">"1.昨日回顾"</span>)</span><br><span class="line">z.write(<span class="string">"2.今日内容"</span>)</span><br><span class="line">z.close()</span><br></pre></td></tr></table></figure>
<h3 id="tarfile"><a href="#tarfile" class="headerlink" title="tarfile"></a>tarfile</h3><ol>
<li>解压</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">t = tarfile.open(<span class="string">r"/Users/jingxing/PycharmProjects/python全栈/day20/代码/my压缩.tar"</span>,<span class="string">"w"</span>)</span><br><span class="line">t.extractall(<span class="string">r"/Users/jingxing/PycharmProjects/python全栈/day19"</span>)</span><br><span class="line">t.close()</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>往压缩包中添加文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">port tarfile</span><br><span class="line">t = tarfile.open(<span class="string">r"/Users/jingxing/PycharmProjects/python全栈/day20/代码/my压缩.tar"</span>,<span class="string">"w"</span>)</span><br><span class="line">t.add(<span class="string">"1.昨日回顾"</span>)</span><br><span class="line">t.add(<span class="string">"2.今日内容"</span>)</span><br><span class="line">t.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用redis</title>
    <url>/2019/02/28/python%E4%BD%BF%E7%94%A8redis/</url>
    <content><![CDATA[<h1 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h1><h2 id="一-reids简介及优势"><a href="#一-reids简介及优势" class="headerlink" title="一 reids简介及优势"></a>一 reids简介及优势</h2><p>redis 是一个 key-value 的存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string（字符串）、list（链表）、set（集合）、zset（有序集合）和 hash（哈希类型）。这些数据类型都支持 push/pop、add/remove及取交集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis 支持各种不同方式的排序。与 Memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新非数据写入磁盘或者把修改操作写入到追加的记录文件，并且在此基础上实现了 master-slave（主从）同步。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用Redis有哪些好处？</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 支持丰富数据类型，支持string，list，set，sorted set，hash</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> redis相比memcached有哪些优势？</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) redis的速度比memcached快很多</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) redis可以持久化其数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> redis常见性能问题和解决方案：</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) 尽量避免在压力很大的主库上增加从库</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3...</span><br><span class="line"></span><br><span class="line">这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> MySQL里有<span class="number">2000</span>w数据，redis中只存<span class="number">20</span>w的数据，如何保证redis中的数据都是热点数据</span><br><span class="line"></span><br><span class="line"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 <span class="number">6</span>种数据淘汰策略：</span><br><span class="line"></span><br><span class="line">voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">no-enviction（驱逐）：禁止驱逐数据</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> Memcache与Redis的区别都有哪些？</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>)、存储方式</span><br><span class="line"></span><br><span class="line">Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。</span><br><span class="line"></span><br><span class="line">Redis有部份存在硬盘上，这样能保证数据的持久性。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)、数据支持类型</span><br><span class="line"></span><br><span class="line">Memcache对数据类型支持相对简单。</span><br><span class="line"></span><br><span class="line">Redis有复杂的数据类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>），value大小</span><br><span class="line"></span><br><span class="line">redis最大可以达到<span class="number">1</span>GB，而memcache只有<span class="number">1</span>MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> Redis 常见的性能问题都有哪些？如何解决？</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1</span>).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>, redis 最适合的场景</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?</span><br><span class="line"></span><br><span class="line">       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</span><br><span class="line">、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</span><br><span class="line">、Redis支持数据的备份，即master-slave模式的数据备份。</span><br><span class="line">、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）、会话缓存（Session Cache）</span><br><span class="line"></span><br><span class="line">最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</span><br><span class="line"></span><br><span class="line">幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）、全页缓存（FPC）</span><br><span class="line"></span><br><span class="line">除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</span><br><span class="line"></span><br><span class="line">再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</span><br><span class="line"></span><br><span class="line">此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）、队列</span><br><span class="line"></span><br><span class="line">Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</span><br><span class="line"></span><br><span class="line">如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>），排行榜/计数器</span><br><span class="line"></span><br><span class="line">Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的<span class="number">10</span>个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</span><br><span class="line"></span><br><span class="line">当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</span><br><span class="line"></span><br><span class="line">ZRANGE user_scores <span class="number">0</span> <span class="number">10</span> WITHSCORES</span><br><span class="line"></span><br><span class="line">Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）、发布/订阅</span><br><span class="line"></span><br><span class="line">最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。</span><br><span class="line"></span><br><span class="line">Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</span><br><span class="line"></span><br><span class="line">优点：可以持久化，单线程、单进程对资源消耗小。</span><br></pre></td></tr></table></figure>
<h2 id="二-redis-的安装和使用"><a href="#二-redis-的安装和使用" class="headerlink" title="二 redis 的安装和使用"></a>二 redis 的安装和使用</h2><h3 id="一-linux-下安装"><a href="#一-linux-下安装" class="headerlink" title="一 linux 下安装"></a>一 linux 下安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis<span class="number">-3.0</span><span class="number">.6</span>.tar.gz</span><br><span class="line">tar xzf redis<span class="number">-3.0</span><span class="number">.6</span>.tar.gz</span><br><span class="line">cd redis<span class="number">-3.0</span><span class="number">.6</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h3 id="二-mac-下安装"><a href="#二-mac-下安装" class="headerlink" title="二 mac 下安装"></a>二 mac 下安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>
<h3 id="三-windows-下安装"><a href="#三-windows-下安装" class="headerlink" title="三 windows 下安装"></a>三 windows 下安装</h3><p>官网下载安装包，要加到环境变量</p>
<h3 id="四-各操作系统启动redis"><a href="#四-各操作系统启动redis" class="headerlink" title="四 各操作系统启动redis"></a>四 各操作系统启动redis</h3><ol>
<li>mac</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line">redis-serve</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端启动</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，要用两个终端</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>windows</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line">redis-serve.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端启动</span></span><br><span class="line">redis-cli.exe</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>linux</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line">src/redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端启动</span></span><br><span class="line">src/redis-cli</span><br></pre></td></tr></table></figure>
<h2 id="三-python-操作-redis"><a href="#三-python-操作-redis" class="headerlink" title="三 python 操作 redis"></a>三 python 操作 redis</h2><h3 id="一-普通连接"><a href="#一-普通连接" class="headerlink" title="一 普通连接"></a>一 普通连接</h3><p>redis-py 提供两个类 Redis 和 StrictRedis 用于实现 Redis 的命令，StrictRedis 用于实现大部分官方的命令，并使用官方的语法和命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</span><br><span class="line">r.set(<span class="string">'foo'</span>, <span class="string">'Bar'</span>)</span><br><span class="line">print(r.get(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="二-连接池"><a href="#二-连接池" class="headerlink" title="二 连接池"></a>二 连接池</h3><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(<span class="string">'foo'</span>, <span class="string">'Bar'</span>)</span><br><span class="line">print(r.get(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="四-redis-之-String-操作"><a href="#四-redis-之-String-操作" class="headerlink" title="四 redis 之 String 操作"></a>四 redis 之 String 操作</h2><p>redis 中的 String 在内存中按照一个那么与之对应的 value 来存储。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0mebts0unj30my0j8wf2.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set(name, value, ex=<span class="literal">None</span>, px=<span class="literal">None</span>, nx=<span class="literal">False</span>, xx=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Redis中设置值，默认，不存在则创建，存在则修改</span><br><span class="line">参数：</span><br><span class="line">     ex，过期时间（秒）</span><br><span class="line">     px，过期时间（毫秒）</span><br><span class="line">     nx，如果设置为<span class="literal">True</span>，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果</span><br><span class="line">     xx，如果设置为<span class="literal">True</span>，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</span><br></pre></td></tr></table></figure>
<ul>
<li>setnx(name, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</span><br></pre></td></tr></table></figure>
<ul>
<li>setex(name, time, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># time，过期时间（数字秒 或 timedelta对象）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>psetex(name, time_ms, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># time_ms，过期时间（数字毫秒 或 timedelta对象</span></span><br></pre></td></tr></table></figure>
<ul>
<li>mset(*args, **kwargs)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">批量设置值</span><br><span class="line">如：</span><br><span class="line">    mset(k1=<span class="string">'v1'</span>, k2=<span class="string">'v2'</span>)</span><br><span class="line">    或</span><br><span class="line">    mget(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>get(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取值</span><br></pre></td></tr></table></figure>
<ul>
<li>mget(keys, *args)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">批量获取</span><br><span class="line">如：</span><br><span class="line">    mget(<span class="string">'k1'</span>, <span class="string">'k2'</span>)</span><br><span class="line">    或</span><br><span class="line">    r.mget([<span class="string">'k3'</span>, <span class="string">'k4'</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>getset(name, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">设置新值并获取原来的值</span><br></pre></td></tr></table></figure>
<ul>
<li>getrange(key, start, end)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取子序列（根据字节获取，非字符）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，Redis 的 name</span></span><br><span class="line">    <span class="comment"># start，起始位置（字节）</span></span><br><span class="line">    <span class="comment"># end，结束位置（字节）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>setrange(name, offset, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># offset，字符串的索引，字节（一个汉字三个字节）</span></span><br><span class="line">    <span class="comment"># value，要设置的值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>setbit(name, offset, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对name对应值的二进制表示的位进行操作</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># offset，位的索引（将值变换成二进制后再进行索引）</span></span><br><span class="line">    <span class="comment"># value，值只能是 1 或 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：如果在Redis中有一个对应： n1 = "foo"，</span></span><br><span class="line">        那么字符串foo的二进制表示为：<span class="number">01100110</span> <span class="number">01101111</span> <span class="number">01101111</span></span><br><span class="line">    所以，如果执行 setbit(<span class="string">'n1'</span>, <span class="number">7</span>, <span class="number">1</span>)，则就会将第<span class="number">7</span>位设置为<span class="number">1</span>，</span><br><span class="line">        那么最终二进制则变成 <span class="number">01100111</span> <span class="number">01101111</span> <span class="number">01101111</span>，即：<span class="string">"goo"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>getbit(name, offset)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取 name 对应的值得二进制表示中的某位的值(<span class="number">0</span>或<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>bitcount(key, start=None, end=None)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取name对应的值的二进制表示中 1 的个数</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># key，Redis的name</span></span><br><span class="line">    <span class="comment"># start，位起始位置</span></span><br><span class="line">    <span class="comment"># end，位结束位置</span></span><br></pre></td></tr></table></figure>
<ul>
<li>bittop(operation, dest, *args)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）</span></span><br><span class="line">    <span class="comment"># dest, 新的Redis的name</span></span><br><span class="line">    <span class="comment"># *keys,要查找的Redis的name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    bitop(<span class="string">"AND"</span>, <span class="string">'new_name'</span>, <span class="string">'n1'</span>, <span class="string">'n2'</span>, <span class="string">'n3'</span>)</span><br><span class="line">    <span class="comment"># 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</span></span><br></pre></td></tr></table></figure>
<ul>
<li>strlen(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">返回 name 对应值得字节长度</span><br></pre></td></tr></table></figure>
<ul>
<li>incr(self, name, amount=1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自增数（必须是整数）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：同incrby</span></span><br></pre></td></tr></table></figure>
<ul>
<li>incrbyfloat(self, name, amount=1.0)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自增数（浮点型）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>decr(self, name, amount=1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自减数（整数）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>append(key, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在redis name对应的值后面追加内容</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    key, redis的name</span><br><span class="line">    value, 要追加的字符串</span><br></pre></td></tr></table></figure>
<h2 id="五-redis-之-Hash-操作"><a href="#五-redis-之-Hash-操作" class="headerlink" title="五 redis 之 Hash 操作"></a>五 redis 之 Hash 操作</h2><p>Hash 操作，redis 中 hash 在内存中的存储格式如下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0meb5vdhgj30we0lsjsq.jpg" alt></p>
<ul>
<li>hset(name, key, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># key，name对应的hash中的key</span></span><br><span class="line">    <span class="comment"># value，name对应的hash中的value</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line">    <span class="comment"># hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hmset(name, mapping)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的hash中批量设置键值对</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># mapping，字典，如：&#123;'k1':'v1', 'k2': 'v2'&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.hmset('xx', &#123;'k1':'v1', 'k2': 'v2'&#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hget(name, key)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在 name 对应的 hash 中根据 key 获取 value</span><br></pre></td></tr></table></figure>
<ul>
<li>hmget(name, keys, *args)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的hash中获取多个key的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，reids对应的name</span></span><br><span class="line">    <span class="comment"># keys，要获取key集合，如：['k1', 'k2', 'k3']</span></span><br><span class="line">    <span class="comment"># *args，要获取的key，如：k1,k2,k3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.mget('xx', ['k1', 'k2'])</span></span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    <span class="comment"># print r.hmget('xx', 'k1', 'k2')</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hgetall(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取 name 对应的 hash 的所有键值，不建议使用</span><br></pre></td></tr></table></figure>
<ul>
<li>hlen(name)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取 name 对应的 hash 中键值对的个数</span><br></pre></td></tr></table></figure>
<ul>
<li>hkeys(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取 name 对应的 hash 中所有的 key 的值</span><br></pre></td></tr></table></figure>
<ul>
<li>hvals(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取 name 对应的 hash 中所有的 value 的值</span><br></pre></td></tr></table></figure>
<ul>
<li>hexists(name, key)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">检查 name 对应的 hash 是否存在当前传入的 key</span><br></pre></td></tr></table></figure>
<ul>
<li>hdel(name, *keys)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将name对应的hash中指定key的键值对删除</span></span><br><span class="line">print(re.hdel(<span class="string">'xxx'</span>,<span class="string">'sex'</span>,<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>hincrby(name, key, amount=1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis中的name</span></span><br><span class="line">    <span class="comment"># key， hash对应的key</span></span><br><span class="line">    <span class="comment"># amount，自增数（整数）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hincrbyfloat(name, key, amount=1.0)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis中的name</span></span><br><span class="line">    <span class="comment"># key， hash对应的key</span></span><br><span class="line">    <span class="comment"># amount，自增数（浮点数）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hscan(name, cursor=0, match=None, count=None)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># cursor，游标（基于游标分批取获取数据）</span></span><br><span class="line">    <span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line">    <span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># 第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)</span></span><br><span class="line">    <span class="comment"># 第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hscan_iter(name, match=None, count=None)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用yield封装hscan创建生成器，实现分批去redis中获取数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line">    <span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># for item in r.hscan_iter('xx'):</span></span><br><span class="line">    <span class="comment">#     print item</span></span><br></pre></td></tr></table></figure>
<h2 id="六-redis-之-List-操作"><a href="#六-redis-之-List-操作" class="headerlink" title="六 redis 之 List 操作"></a>六 redis 之 List 操作</h2><p>List 操作，redis 中的 List 在内存中按照一个 name 对应一个 List 来存储，如图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0mekhbtw9j30q60git9p.jpg" alt></p>
<ul>
<li>lpush(name, values)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.lpush('oo', 11,22,33)</span></span><br><span class="line">    <span class="comment"># 保存顺序为: 33,22,11</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 扩展：</span></span><br><span class="line">    <span class="comment"># rpush(name, values) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>
<ul>
<li>lpushx(name, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># rpushx(name, value) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>
<ul>
<li>llen(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">计算 name 对应的 list 元素的个数</span><br></pre></td></tr></table></figure>
<ul>
<li>linsert(name, where, refvalue, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的列表的某一个值前或后插入一个新值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># where，BEFORE或AFTER(小写也可以)</span></span><br><span class="line">    <span class="comment"># refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）</span></span><br><span class="line">    <span class="comment"># value，要插入的数据</span></span><br></pre></td></tr></table></figure>
<ul>
<li>r.lset(name, index, value)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对name对应的list中的某一个索引位置重新赋值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># index，list的索引位置</span></span><br><span class="line">    <span class="comment"># value，要设置的值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>r.lrem(name, value, num)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的list中删除指定的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># value，要删除的值</span></span><br><span class="line">    <span class="comment"># num，  num=0，删除列表中所有的指定值；</span></span><br><span class="line">           <span class="comment"># num=2,从前到后，删除2个；</span></span><br><span class="line">           <span class="comment"># num=-2,从后向前，删除2个</span></span><br></pre></td></tr></table></figure>
<ul>
<li>lpop(name)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># rpop(name) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>
<ul>
<li>lindex(name, index)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在 name 对应的列表中根据索引获取列表元素</span><br></pre></td></tr></table></figure>
<ul>
<li>lrange(name, start, end)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的列表分片获取数据</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，索引的起始位置</span></span><br><span class="line">    <span class="comment"># end，索引结束位置  print(re.lrange('aa',0,re.llen('aa')))</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ltrim(name, start, end)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在name对应的列表中移除没有在start-end索引之间的值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，索引的起始位置</span></span><br><span class="line">    <span class="comment"># end，索引结束位置（大于列表长度，则代表不移除任何）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>rpoplpush(src, dst)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># src，要取数据的列表的name</span></span><br><span class="line">    <span class="comment"># dst，要添加数据的列表的name</span></span><br></pre></td></tr></table></figure>
<ul>
<li>blpop(keys, timeout)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将多个列表排列，按照从左到右去pop对应列表的元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># keys，redis的name的集合</span></span><br><span class="line">    <span class="comment"># timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># r.brpop(keys, timeout)，从右向左获取数据</span></span><br><span class="line">爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</span><br></pre></td></tr></table></figure>
<ul>
<li>brpoplpush(src, dst, timeout=0)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># src，取出并要移除元素的列表对应的name</span></span><br><span class="line">    <span class="comment"># dst，要插入元素的列表对应的name</span></span><br><span class="line">    <span class="comment"># timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义增量迭代</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span></span><br><span class="line">    <span class="comment"># 1、获取name对应的所有列表</span></span><br><span class="line">    <span class="comment"># 2、循环列表</span></span><br><span class="line"><span class="comment"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">conn=redis.Redis(host=<span class="string">'127.0.0.1'</span>,port=<span class="number">6379</span>)</span><br><span class="line"><span class="comment"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span></span><br><span class="line"><span class="comment"># conn.flushall()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_list</span><span class="params">(name,count=<span class="number">2</span>)</span>:</span></span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data_list=conn.lrange(name,index,count+index<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_list:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index+=count</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data_list:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">print(conn.lrange(<span class="string">'test'</span>,<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scan_list(<span class="string">'test'</span>,<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">'---'</span>)</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>
<h2 id="七-redis-之-Set-操作"><a href="#七-redis-之-Set-操作" class="headerlink" title="七 redis 之 Set 操作"></a>七 redis 之 Set 操作</h2><p>Set 操作，Set 集合是不允许重复的列表。</p>
<p><strong>sadd(name,values)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># name对应的集合中添加元素</span><br></pre></td></tr></table></figure>
<p><strong>scard(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取name对应的集合中元素个数</span><br></pre></td></tr></table></figure>
<p><strong>sdiff(keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在第一个name对应的集合中且不在其他name对应的集合的元素集合</span><br></pre></td></tr></table></figure>
<p><strong>sdiffstore(dest, keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</span><br></pre></td></tr></table></figure>
<p><strong>sinter(keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集</span><br></pre></td></tr></table></figure>
<p><strong>sinterstore(dest, keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</span><br></pre></td></tr></table></figure>
<p><strong>sismember(name, value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检查value是否是name对应的集合的成员</span><br></pre></td></tr></table></figure>
<p><strong>smembers(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取name对应的集合的所有成员</span><br></pre></td></tr></table></figure>
<p><strong>smove(src, dst, value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将某个成员从一个集合中移动到另外一个集合</span><br></pre></td></tr></table></figure>
<p><strong>spop(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从集合的右侧（尾部）移除一个成员，并将其返回</span><br></pre></td></tr></table></figure>
<p><strong>srandmember(name, numbers)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从name对应的集合中随机获取 numbers 个元素</span><br></pre></td></tr></table></figure>
<p><strong>srem(name, values)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在name对应的集合中删除某些值</span><br></pre></td></tr></table></figure>
<p><strong>sunion(keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集</span><br></pre></td></tr></table></figure>
<p><strong>sunionstore(dest,keys, *args)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</span><br></pre></td></tr></table></figure>
<p><strong>sscan(name, cursor=0, match=None, count=None)</strong><br><strong>sscan_iter(name, match=None, count=None)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</span><br></pre></td></tr></table></figure>
<p><strong>有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</strong></p>
<p> <strong>zadd(name, *args, \</strong>kwargs)**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在name对应的有序集合中添加元素</span><br><span class="line"># 如：</span><br><span class="line">     # zadd(&apos;zz&apos;, &apos;n1&apos;, 1, &apos;n2&apos;, 2)</span><br><span class="line">     # 或</span><br><span class="line">     # zadd(&apos;zz&apos;, n1=11, n2=22)</span><br></pre></td></tr></table></figure>
<p><strong>zcard(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取name对应的有序集合元素的数量</span><br></pre></td></tr></table></figure>
<p><strong>zcount(name, min, max)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取name对应的有序集合中分数 在 [min,max] 之间的个数</span><br></pre></td></tr></table></figure>
<p><strong>zincrby(name, value, amount)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自增name对应的有序集合的 name 对应的分数</span><br></pre></td></tr></table></figure>
<p><strong>r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照索引范围获取name对应的有序集合的元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，有序集合索引起始位置（非分数）</span></span><br><span class="line">    <span class="comment"># end，有序集合索引结束位置（非分数）</span></span><br><span class="line">    <span class="comment"># desc，排序规则，默认按照分数从小到大排序</span></span><br><span class="line">    <span class="comment"># withscores，是否获取元素的分数，默认只获取元素的值</span></span><br><span class="line">    <span class="comment"># score_cast_func，对分数进行数据转换的函数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrange(name, start, end, withscores=False, score_cast_func=float)</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 按照分数范围获取name对应的有序集合的元素</span></span><br><span class="line">    <span class="comment"># zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br></pre></td></tr></table></figure>
<p><strong>zrank(name, value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取某个值在 name对应的有序集合中的排行（从 0 开始）</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # zrevrank(name, value)，从大到小排序</span><br></pre></td></tr></table></figure>
<p><strong>zrangebylex(name, min, max, start=None, num=None)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员</span></span><br><span class="line"><span class="comment"># 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间</span></span><br><span class="line">    <span class="comment"># min，右区间（值）</span></span><br><span class="line">    <span class="comment"># start，对结果进行分片处理，索引位置</span></span><br><span class="line">    <span class="comment"># num，对结果进行分片处理，索引后面的num个元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga</span></span><br><span class="line">    <span class="comment"># r.zrangebylex('myzset', "-", "[ca") 结果为：['aa', 'ba', 'ca']</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrangebylex(name, max, min, start=None, num=None)</span></span><br></pre></td></tr></table></figure>
<p><strong>zrem(name, values)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除name对应的有序集合中值是values的成员</span><br><span class="line"> </span><br><span class="line"># 如：zrem(&apos;zz&apos;, [&apos;s1&apos;, &apos;s2&apos;])</span><br></pre></td></tr></table></figure>
<p><strong>zremrangebyrank(name, min, max)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据排行范围删除</span><br></pre></td></tr></table></figure>
<p><strong>zremrangebyscore(name, min, max)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据分数范围删除</span><br></pre></td></tr></table></figure>
<p><strong>zremrangebylex(name, min, max)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据值返回删除</span><br></pre></td></tr></table></figure>
<p><strong>zscore(name, value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取name对应有序集合中 value 对应的分数</span><br></pre></td></tr></table></figure>
<p><strong>zinterstore(dest, keys, aggregate=None)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure>
<p><strong>zunionstore(dest, keys, aggregate=None)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure>
<p><strong>zscan(name, cursor=0, match=None, count=None, score_cast_func=float)</strong><br><strong>zscan_iter(name, match=None, count=None,score_cast_func=float)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</span><br></pre></td></tr></table></figure>
<h2 id="八-其他操作"><a href="#八-其他操作" class="headerlink" title="八 其他操作"></a>八 其他操作</h2><p><strong>delete(*names)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据删除redis中的任意数据类型</span><br></pre></td></tr></table></figure>
<p><strong>exists(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检测redis的name是否存在</span><br></pre></td></tr></table></figure>
<p><strong>keys(pattern=’*‘)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据模型获取redis的name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># KEYS * 匹配数据库中所有 key 。</span></span><br><span class="line">    <span class="comment"># KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span></span><br><span class="line">    <span class="comment"># KEYS h*llo 匹配 hllo 和 heeeeello 等。</span></span><br><span class="line">    <span class="comment"># KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo</span></span><br></pre></td></tr></table></figure>
<p><strong>expire(name ,time)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 为某个redis的某个name设置超时时间</span><br></pre></td></tr></table></figure>
<p><strong>rename(src, dst)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对redis的name重命名为</span><br></pre></td></tr></table></figure>
<p><strong>move(name, db))</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将redis的某个值移动到指定的db下</span><br></pre></td></tr></table></figure>
<p><strong>randomkey()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 随机获取一个redis的name（不删除）</span><br></pre></td></tr></table></figure>
<p><strong>type(name)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取name对应值的类型</span><br></pre></td></tr></table></figure>
<p><strong>scan(cursor=0, match=None, count=None)</strong><br><strong>scan_iter(match=None, count=None)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 同字符串操作，用于增量迭代获取key</span><br></pre></td></tr></table></figure>
<h2 id="九-管道"><a href="#九-管道" class="headerlink" title="九 管道"></a>九 管道</h2><p>redis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'10.211.55.4'</span>, port=<span class="number">6379</span>)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># pipe = r.pipeline(transaction=False)</span></span><br><span class="line">pipe = r.pipeline(transaction=<span class="literal">True</span>)</span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.set(<span class="string">'name'</span>, <span class="string">'alex'</span>)</span><br><span class="line">pipe.set(<span class="string">'role'</span>, <span class="string">'sb'</span>)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure>
<h2 id="十-Django-中使用-redis"><a href="#十-Django-中使用-redis" class="headerlink" title="十 Django 中使用 redis"></a>十 Django 中使用 redis</h2><h3 id="一-建立-py-文件"><a href="#一-建立-py-文件" class="headerlink" title="一 建立 py 文件"></a>一 建立 py 文件</h3><p><strong>redis_pool.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单例</span></span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> utils.redis_pool <span class="keyword">import</span> POOL</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(<span class="string">'kkk'</span>,<span class="string">'age'</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'设置成功'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(request)</span>:</span></span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(<span class="string">'kkk'</span>,<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'获取成功'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="二-settings-中配置"><a href="#二-settings-中配置" class="headerlink" title="二 settings 中配置"></a>二 settings 中配置</h3><p>安装 django-redis 模块</p>
<p><strong>settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"CONNECTION_POOL_KWARGS"</span>: &#123;<span class="string">"max_connections"</span>: <span class="number">100</span>&#125;</span><br><span class="line">            <span class="comment"># "PASSWORD": "123",</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">print(conn.hgetall(<span class="string">'xxx'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="三-自定义-session-存储"><a href="#三-自定义-session-存储" class="headerlink" title="三 自定义 session 存储"></a>三 自定义 session 存储</h3><p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^book/(?P&lt;id&gt;\d+)'</span>, views.Book.as_view()),</span><br><span class="line">    url(<span class="string">r'^login/'</span>, views.Login.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>token_redis.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单例</span></span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</span><br></pre></td></tr></table></figure>
<p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> token_redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 随机token值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(id, salt=<span class="string">'123'</span>)</span>:</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(bytes(str(id), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    md.update(bytes(salt, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md.hexdigest() + <span class="string">'|'</span> + str(id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆模块，登陆成功在 redis 中存储 token，并将 token 返回</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def dispatch(self, request, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     return super(Login, self).dispatch(request, *args, **kwargs)</span></span><br><span class="line">    conn = redis.Redis(connection_pool=token_redis.POOL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        name = request.data.get(<span class="string">'name'</span>)</span><br><span class="line">        password = request.data.get(<span class="string">'password'</span>)</span><br><span class="line">        print(name, password)</span><br><span class="line">        user_obj = models.UserInfo.objects.filter(name=name, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> user_obj:</span><br><span class="line">            token = get_token(user_obj.pk)</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'登陆成功'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">100</span></span><br><span class="line">            response[<span class="string">'token'</span>] = token</span><br><span class="line">            self.conn.hset(user_obj.pk, <span class="string">'token'</span>, token)</span><br><span class="line">            response[<span class="string">'uid'</span>] = user_obj.pk</span><br><span class="line">            print(<span class="string">'111'</span>, token)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'用户名或密码错误'</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆成功才可以访问 book 路由</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [authticate_classes.BookAuth]</span><br><span class="line">    <span class="comment"># permission_classes = [permiss_classes.LoginPermission]</span></span><br><span class="line">    <span class="comment"># throttle_classes = [thrott_classes.BookThrottle]</span></span><br><span class="line">    <span class="comment"># throttle_classes = []</span></span><br><span class="line">    <span class="comment"># authentication_classes = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        print(request.user, <span class="string">'444'</span>)</span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        <span class="keyword">if</span> book_obj:</span><br><span class="line">            book_ser = myser.BookSer(book_obj, many=<span class="literal">False</span>)</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = <span class="string">'图书没有对象'</span></span><br><span class="line">            response[<span class="string">'status'</span>] = <span class="number">101</span></span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        response = &#123;<span class="string">'status'</span>: <span class="number">100</span>, <span class="string">'msg'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        book_obj = models.Book.objects.filter(pk=id).first()</span><br><span class="line">        book_ser = myser.BookSer(data=request.data, instance=book_obj)</span><br><span class="line">        <span class="comment"># 新方法，使用序列化组件保存，但是必须是继承自 ModelSerializer 的序列化类，这样才可以知道要保存的表模型</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            <span class="comment"># save既可以修改也可以新增</span></span><br><span class="line">            book_ser.save()</span><br><span class="line">            response[<span class="string">'book'</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">'msg'</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response)</span><br></pre></td></tr></table></figure>
<p><strong>authticate_classes.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> token_redis</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_token</span><span class="params">(token, id)</span>:</span></span><br><span class="line">    conn = redis.Redis(connection_pool=token_redis.POOL)</span><br><span class="line">    r_token = conn.hget(id, <span class="string">'token'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">'r_token'</span>, r_token)</span><br><span class="line">    <span class="keyword">if</span> token == r_token:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写的认证类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 认证需要发送的字段除了 token 还有用户 id</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        token = request.data.get(<span class="string">'token'</span>)</span><br><span class="line">        id = request.data.get(<span class="string">'uid'</span>)</span><br><span class="line">        print(<span class="string">'222'</span>, token)</span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            succ = check_token(token, id)</span><br><span class="line">            <span class="comment"># succ = models.UserToken.objects.filter()</span></span><br><span class="line">            <span class="keyword">if</span> succ:</span><br><span class="line">                <span class="comment"># id = request.data.get('uid')</span></span><br><span class="line">                user = models.UserInfo.objects.filter(pk=id).first()</span><br><span class="line">                <span class="keyword">if</span> user:</span><br><span class="line">                    <span class="comment"># request.user = user</span></span><br><span class="line">                    <span class="comment"># print(request.user, 'dfsdf')</span></span><br><span class="line">                    <span class="keyword">return</span> user, token</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> NotAuthenticated(<span class="string">'数据库错误'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> NotAuthenticated(<span class="string">'认证失败'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotAuthenticated(<span class="string">'请先登录'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>python模块之xml</title>
    <url>/2018/10/18/python%E6%A8%A1%E5%9D%97%E4%B9%8Bxml/</url>
    <content><![CDATA[<h1 id="xml模块"><a href="#xml模块" class="headerlink" title="xml模块"></a>xml模块</h1><ol>
<li>xml结构</li>
</ol>
<p>xml是种实现不同语言或程序之间进行数据交换的协议，跟json差不多，但没json使用简单。但是因为历史遗留问题，至今很多行业依然使用xml这种数据格式。</p>
<p>xml的格式如下，是通过&lt;&gt;节点来区别数据结构的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">friendsinfo</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">frd</span> <span class="attr">age</span>=<span class="string">"22"</span> <span class="attr">name</span>=<span class="string">"任盼晨"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">info</span> <span class="attr">qq</span>=<span class="string">"1114893928"</span> <span class="attr">wechat</span>=<span class="string">"Dmgwood"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">frd</span> <span class="attr">age</span>=<span class="string">"22"</span> <span class="attr">name</span>=<span class="string">"袁靖"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">info</span> <span class="attr">qq</span>=<span class="string">"2410152779"</span> <span class="attr">wechat</span>=<span class="string">"wxid_2vykc0sjoiie21"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">frd</span> <span class="attr">age</span>=<span class="string">"22"</span> <span class="attr">name</span>=<span class="string">"卫一帆"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">info</span> <span class="attr">qq</span>=<span class="string">"97280940"</span> <span class="attr">wechat</span>=<span class="string">"oOC"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">frd</span> <span class="attr">age</span>=<span class="string">"22"</span> <span class="attr">name</span>=<span class="string">"胡文涛"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">info</span> <span class="attr">qq</span>=<span class="string">"2522864970"</span> <span class="attr">wechat</span>=<span class="string">"hu2522864970"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">friendsinfo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>语法结构</li>
</ol>
<ul>
<li>任何的起始标签都必须有一个结束标签。 &lt;&gt; &lt;/&gt;</li>
<li>可以采用另一种简化语法，可以在一个标签中同时表示起始和结束标签。这种语法是在大于号之前紧跟一个斜杠(/)，例如，解析器会将其翻译成<python></python></li>
<li>标签必须按合适的顺序进行嵌套，所以结束标签必须按镜像顺序匹配起始标签。这好比将起始和结束标签看作是数学中的左右罗浩：在没有关闭所有的内部括号之前，是不能关闭外面括号的。</li>
<li>所有的特性都必须有值。</li>
<li>所有的特性都必须在值得周围加上双引号。</li>
<li>一个标签的组成部分包括：标签名、属性名以及属性值、还有文本内容（可以没有）</li>
</ul>
<p>双标签的写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tagename</span> '属性名称'=<span class="string">"属性值"</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">tagname</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>单标签的写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tagename</span> 属性名称=<span class="string">"属性值"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：xml也是一种中间格式，也属于序列化方式之一，与json比较，同样的数据json会更小，效率更高；xml需要根据文档结构手动解析，而json直接可以转为python数据对象。</p>
<ol start="3">
<li>xml模块用法</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># d.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">studentinfo</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">stu</span> <span class="attr">age</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"张三"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">girlfriend</span> <span class="attr">age</span>=<span class="string">"19"</span> <span class="attr">name</span>=<span class="string">"张三的女朋友"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stu</span> <span class="attr">age</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"李四"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">girlfriend</span> <span class="attr">age</span>=<span class="string">"19"</span> <span class="attr">name</span>=<span class="string">"李四的女朋友"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stu</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span> <span class="attr">num</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span> <span class="attr">num</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">age</span> <span class="attr">num</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">studentinfo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ElementTree</span><br><span class="line">tree = ElementTree.parse(<span class="string">'d.xml'</span>)</span><br><span class="line">rootTree = tree.getroot()</span><br><span class="line"><span class="comment"># 三种获取标签的方式</span></span><br><span class="line"><span class="comment"># 1. 获取所有人的年龄，iter用于在全文范围获取标签</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> rootTree.iter(<span class="string">'age'</span>):</span><br><span class="line">    <span class="comment"># 一个标签三个组成部分</span></span><br><span class="line">    print(item.tag) <span class="comment"># 标签名称</span></span><br><span class="line">    print(item.attrib) <span class="comment"># 标签的属性</span></span><br><span class="line">    print(item.text) <span class="comment"># 文本内容</span></span><br><span class="line"><span class="comment"># 2. 从当前标签的子标签中找到一个名称为age的标签，如果有多个，找到的是第一个</span></span><br><span class="line">print(rootTree.find(<span class="string">'age'</span>).attrib)</span><br><span class="line"><span class="comment"># 3. 从当前标签的子标签中找到所有名称为age的标签</span></span><br><span class="line">print(rootTree.findall(<span class="string">'age'</span>))</span><br><span class="line"><span class="comment"># 获取单个属性</span></span><br><span class="line">stu = rootTree.find(<span class="string">'stu'</span>)</span><br><span class="line">print(stu.get(<span class="string">"age"</span>))</span><br><span class="line">print(stu.get(<span class="string">"name"</span>))</span><br><span class="line"><span class="comment"># 删除子标签</span></span><br><span class="line">rootTree.remove(stu)</span><br><span class="line"><span class="comment"># 添加子标签</span></span><br><span class="line">newTag = ElementTree.Element(<span class="string">'这是新标签'</span>, &#123;<span class="string">'一个属性'</span>: <span class="string">'值'</span>&#125;)</span><br><span class="line">rootTree.append(newTag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">tree.write(<span class="string">'f.xml'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之re</title>
    <url>/2018/10/19/python%E6%A8%A1%E5%9D%97%E4%B9%8Bre/</url>
    <content><![CDATA[<h1 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h1><p>在 Python 中，我们可以使用内置的 re 模块来使用正则表达式。</p>
<p>有一点需要特别注意的是，正则表达式使用 <code>\</code> 对特殊字符进行转义，比如，为了匹配字符串 ‘python.org’，我们需要使用正则表达式 <code>&#39;python\.org&#39;</code>，而 Python 的字符串本身也用 <code>\</code> 转义，所以上面的正则表达式在 Python 中应该写成 <code>&#39;python\\.org&#39;</code>，这会很容易陷入 <code>\</code> 的困扰中，因此，我们建议使用 Python 的原始字符串，只需加一个 r 前缀，上面的正则表达式可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r&apos;python\.org&apos;</span><br></pre></td></tr></table></figure>
<p>re 模块提供了不少有用的函数，用以匹配字符串，比如：</p>
<ul>
<li>compile 函数</li>
<li>match 函数</li>
<li>search 函数</li>
<li>findall 函数</li>
<li>finditer 函数</li>
<li>split 函数</li>
<li>sub 函数</li>
<li>subn 函数</li>
</ul>
<p>re 模块的一般使用步骤如下：</p>
<ul>
<li>使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象</li>
<li>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）</li>
<li>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作</li>
</ul>
<h1 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile 函数"></a>compile 函数</h1><p><strong>compile 函数用于编译正则表达式，生成一个 Pattern 对象</strong>，它的一般使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.compile(pattern[, flag])</span><br></pre></td></tr></table></figure>
<p>其中，pattern 是一个字符串形式的正则表达式，flag 是一个可选参数，表示匹配模式，比如忽略大小写，多行模式等。</p>
<p>下面，让我们看看例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将正则表达式编译成 Pattern 对象 </span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br></pre></td></tr></table></figure>
<p>在上面，我们已将一个正则表达式编译成 Pattern 对象，接下来，我们就可以利用 pattern 的一系列方法对文本进行匹配查找了。Pattern 对象的一些常用方法主要有：</p>
<ul>
<li>match 方法</li>
<li>search 方法</li>
<li>findall 方法</li>
<li>finditer 方法</li>
<li>split 方法</li>
<li>sub 方法</li>
<li>subn 方法</li>
</ul>
<h2 id="match-方法"><a href="#match-方法" class="headerlink" title="match 方法"></a>match 方法</h2><p>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。它的一般使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">match(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>
<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。因此，<strong>当你不指定 pos 和 endpos 时，match 方法默认匹配字符串的头部</strong>。</p>
<p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p>
<p>看看例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'\d+'</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从'e'的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从'1'的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m                                         <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>
<ul>
<li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li>
<li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li>
<li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>
<li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li>
</ul>
<p>再看看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I)   <span class="comment"># re.I 表示忽略大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m                               <span class="comment"># 匹配成功，返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10bea83e8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)                            <span class="comment"># 返回匹配成功的整个子串</span></span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)                             <span class="comment"># 返回匹配成功的整个子串的索引</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)                            <span class="comment"># 返回第一个分组匹配成功的子串</span></span><br><span class="line"><span class="string">'Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">1</span>)                             <span class="comment"># 返回第一个分组匹配成功的子串的索引</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)                            <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line"><span class="string">'World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">2</span>)                             <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                            <span class="comment"># 等价于 (m.group(1), m.group(2), ...)</span></span><br><span class="line">(<span class="string">'Hello'</span>, <span class="string">'World'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">3</span>)                            <span class="comment"># 不存在第三个分组</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: no such group</span><br></pre></td></tr></table></figure>
<h2 id="search-方法"><a href="#search-方法" class="headerlink" title="search 方法"></a>search 方法</h2><p>search 方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>
<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p>
<p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p>
<p>让我们看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.search(<span class="string">'one12twothree34four'</span>)  <span class="comment"># 这里如果使用 match 方法则不匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10cc03ac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()</span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.search(<span class="string">'one12twothree34four'</span>, <span class="number">10</span>, <span class="number">30</span>)  <span class="comment"># 指定字符串区间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10cc03b28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()</span><br><span class="line"><span class="string">'34'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span()</span><br><span class="line">(<span class="number">13</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>再来看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将正则表达式编译成 Pattern 对象</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 search() 查找匹配的子串，不存在匹配的子串时将返回 None </span></span><br><span class="line"><span class="comment"># 这里使用 match() 无法成功匹配 </span></span><br><span class="line">m = pattern.search(<span class="string">'hello 123456 789'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m: </span><br><span class="line">    <span class="comment"># 使用 Match 获得分组信息 </span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>,m.group()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'position:'</span>,m.span()</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">matching string: 123456</span><br><span class="line">position: (6, 12)</span><br></pre></td></tr></table></figure>
<h2 id="findall-方法"><a href="#findall-方法" class="headerlink" title="findall 方法"></a>findall 方法</h2><p>上面的 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。</p>
<p>findall 方法的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>
<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p>
<p>findall 以列表形式返回全部能匹配的子串，如果没有匹配，则返回一个空列表。</p>
<p>看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">'hello 123456 789'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'one1two2three3four4'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> result1</span><br><span class="line"><span class="keyword">print</span> result2</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&apos;123456&apos;, &apos;789&apos;]</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;]</span><br></pre></td></tr></table></figure>
<h2 id="finditer-方法"><a href="#finditer-方法" class="headerlink" title="finditer 方法"></a>finditer 方法</h2><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。</p>
<p>看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"></span><br><span class="line">result_iter1 = pattern.finditer(<span class="string">'hello 123456 789'</span>)</span><br><span class="line">result_iter2 = pattern.finditer(<span class="string">'one1two2three3four4'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(result_iter1)</span><br><span class="line"><span class="keyword">print</span> type(result_iter2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'result1...'</span></span><br><span class="line"><span class="keyword">for</span> m1 <span class="keyword">in</span> result_iter1:   <span class="comment"># m1 是 Match 对象</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string: &#123;&#125;, position: &#123;&#125;'</span>.format(m1.group(), m1.span())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'result2...'</span></span><br><span class="line"><span class="keyword">for</span> m2 <span class="keyword">in</span> result_iter2:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string: &#123;&#125;, position: &#123;&#125;'</span>.format(m2.group(), m2.span())</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type &apos;callable-iterator&apos;&gt;</span><br><span class="line">&lt;type &apos;callable-iterator&apos;&gt;</span><br><span class="line">result1...</span><br><span class="line">matching string: 123456, position: (6, 12)</span><br><span class="line">matching string: 789, position: (13, 16)</span><br><span class="line">result2...</span><br><span class="line">matching string: 1, position: (3, 4)</span><br><span class="line">matching string: 2, position: (7, 8)</span><br></pre></td></tr></table></figure>
<h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split 方法"></a>split 方法</h2><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">split(string[, maxsplit])</span><br></pre></td></tr></table></figure>
<p>其中，maxsplit 用于指定最大分割次数，不指定将全部分割。</p>
<p>看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">p = re.compile(<span class="string">r'[\s\,\;]+'</span>)</span><br><span class="line"><span class="keyword">print</span> p.split(<span class="string">'a,b;; c   d'</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]</span><br></pre></td></tr></table></figure>
<h2 id="sub-方法"><a href="#sub-方法" class="headerlink" title="sub 方法"></a>sub 方法</h2><p>sub 方法用于替换。它的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sub(repl, string[, count])</span><br></pre></td></tr></table></figure>
<p>其中，repl 可以是字符串也可以是一个函数：</p>
<ul>
<li>如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 <code>\id</code> 的形式来引用分组，但不能使用编号 0；</li>
<li>如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</li>
</ul>
<p>count 用于指定最多替换次数，不指定时全部替换。</p>
<p>看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'hello 123, hello 456'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span> + <span class="string">' '</span> + m.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.sub(<span class="string">r'hello world'</span>, s)  <span class="comment"># 使用 'hello world' 替换 'hello 123' 和 'hello 456'</span></span><br><span class="line"><span class="keyword">print</span> p.sub(<span class="string">r'\2 \1'</span>, s)        <span class="comment"># 引用分组</span></span><br><span class="line"><span class="keyword">print</span> p.sub(func, s)</span><br><span class="line"><span class="keyword">print</span> p.sub(func, s, <span class="number">1</span>)         <span class="comment"># 最多替换一次</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world, hello world</span><br><span class="line">123 hello, 456 hello</span><br><span class="line">hi 123, hi 456</span><br><span class="line">hi 123, hello 456</span><br></pre></td></tr></table></figure>
<h2 id="subn-方法"><a href="#subn-方法" class="headerlink" title="subn 方法"></a>subn 方法</h2><p>subn 方法跟 sub 方法的行为类似，也用于替换。它的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subn(repl, string[, count])</span><br></pre></td></tr></table></figure>
<p>它返回一个元组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(sub(repl, string[, count]), 替换次数)</span><br></pre></td></tr></table></figure>
<p>元组有两个元素，第一个元素是使用 sub 方法的结果，第二个元素返回原字符串被替换的次数。</p>
<p>看看例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">p = re.compile(r&apos;(\w+) (\w+)&apos;)</span><br><span class="line">s = &apos;hello 123, hello 456&apos;</span><br><span class="line"></span><br><span class="line">def func(m):</span><br><span class="line">    return &apos;hi&apos; + &apos; &apos; + m.group(2)</span><br><span class="line"></span><br><span class="line">print p.subn(r&apos;hello world&apos;, s)</span><br><span class="line">print p.subn(r&apos;\2 \1&apos;, s)</span><br><span class="line">print p.subn(func, s)</span><br><span class="line">print p.subn(func, s, 1)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&apos;hello world, hello world&apos;, 2)</span><br><span class="line">(&apos;123 hello, 456 hello&apos;, 2)</span><br><span class="line">(&apos;hi 123, hi 456&apos;, 2)</span><br><span class="line">(&apos;hi 123, hello 456&apos;, 1)</span><br></pre></td></tr></table></figure>
<h1 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h1><p>事实上，使用 compile 函数生成的 Pattern 对象的一系列方法跟 re 模块的多数函数是对应的，但在使用上有细微差别。</p>
<h2 id="match-函数"><a href="#match-函数" class="headerlink" title="match 函数"></a>match 函数</h2><p>match 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string[, flags]):</span><br></pre></td></tr></table></figure>
<p>其中，pattern 是正则表达式的字符串形式，比如 <code>\d+</code>, <code>[a-z]+</code>。</p>
<p>而 Pattern 对象的 match 方法使用形式是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">match(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>
<p>可以看到，match 函数不能指定字符串的区间，它只能搜索头部，看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m1 = re.match(<span class="string">r'\d+'</span>, <span class="string">'One12twothree34four'</span>)</span><br><span class="line"><span class="keyword">if</span> m1:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>,m1.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'m1 is:'</span>,m1</span><br><span class="line"></span><br><span class="line">m2 = re.match(<span class="string">r'\d+'</span>, <span class="string">'12twothree34four'</span>)</span><br><span class="line"><span class="keyword">if</span> m2:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>, m2.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'m2 is:'</span>,m2</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m1 is: None</span><br><span class="line">matching string: 12</span><br></pre></td></tr></table></figure>
<h2 id="search-函数"><a href="#search-函数" class="headerlink" title="search 函数"></a>search 函数</h2><p>search 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string[, flags])</span><br></pre></td></tr></table></figure>
<p>search 函数不能指定字符串的搜索区间，用法跟 Pattern 对象的 search 方法类似。</p>
<h2 id="findall-函数"><a href="#findall-函数" class="headerlink" title="findall 函数"></a>findall 函数</h2><p>findall 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string[, flags])</span><br></pre></td></tr></table></figure>
<p>findall 函数不能指定字符串的搜索区间，用法跟 Pattern 对象的 findall 方法类似。</p>
<p>看看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, <span class="string">'hello 12345 789'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[<span class="string">'12345'</span>, <span class="string">'789'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="finditer-函数"><a href="#finditer-函数" class="headerlink" title="finditer 函数"></a>finditer 函数</h2><p>finditer 函数的使用方法跟 Pattern 的 finditer 方法类似，形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string[, flags])</span><br></pre></td></tr></table></figure>
<h2 id="split-函数"><a href="#split-函数" class="headerlink" title="split 函数"></a>split 函数</h2><p>split 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit])</span><br></pre></td></tr></table></figure>
<h2 id="sub-函数"><a href="#sub-函数" class="headerlink" title="sub 函数"></a>sub 函数</h2><p>sub 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string[, count])</span><br></pre></td></tr></table></figure>
<h2 id="subn-函数"><a href="#subn-函数" class="headerlink" title="subn 函数"></a>subn 函数</h2><p>subn 函数的使用形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.subn(pattern, repl, string[, count])</span><br></pre></td></tr></table></figure>
<h1 id="到底用哪种方式"><a href="#到底用哪种方式" class="headerlink" title="到底用哪种方式"></a>到底用哪种方式</h1><p>从上文可以看到，使用 re 模块有两种方式：</p>
<ul>
<li>使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找；</li>
<li>直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找；</li>
</ul>
<p>下面，我们用一个例子展示这两种方法。</p>
<p>先看第 1 种用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将正则表达式先编译成 Pattern 对象</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> pattern.match(<span class="string">'123, 123'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.search(<span class="string">'234, 234'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.findall(<span class="string">'345, 345'</span>)</span><br></pre></td></tr></table></figure>
<p>再看第 2 种用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> re.match(<span class="string">r'\d+'</span>, <span class="string">'123, 123'</span>)</span><br><span class="line"><span class="keyword">print</span> re.search(<span class="string">r'\d+'</span>, <span class="string">'234, 234'</span>)</span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, <span class="string">'345, 345'</span>)</span><br></pre></td></tr></table></figure>
<p>如果一个正则表达式需要用到多次（比如上面的 <code>\d+</code>），在多种场合经常需要被用到，出于效率的考虑，我们应该预先编译该正则表达式，生成一个 Pattern 对象，再使用该对象的一系列方法对需要匹配的文件进行匹配；而如果直接使用 re.match, re.search 等函数，每次传入一个正则表达式，它都会被编译一次，效率就会大打折扣。</p>
<p>因此，我们推荐使用第 1 种用法。</p>
<h1 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h1><p>在某些情况下，我们想匹配文本中的汉字，有一点需要注意的是，<a href="http://blog.oasisfeng.com/2006/10/19/full-cjk-unicode-range/" target="_blank" rel="noopener">中文的 unicode 编码范围</a> 主要在 <code>[\u4e00-\u9fa5]</code>，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。</p>
<p>假设现在想把字符串 <code>title = u&#39;你好，hello，世界&#39;</code> 中的中文提取出来，可以这么做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">title = <span class="string">u'你好，hello，世界'</span></span><br><span class="line">pattern = re.compile(<span class="string">ur'[\u4e00-\u9fa5]+'</span>)</span><br><span class="line">result = pattern.findall(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>
<p>注意到，我们在正则表达式前面加上了两个前缀 <code>ur</code>，其中 <code>r</code> 表示使用原始字符串，<code>u</code> 表示是 unicode 字符串。</p>
<p>执行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[u&apos;\u4f60\u597d&apos;, u&apos;\u4e16\u754c&apos;]</span><br></pre></td></tr></table></figure>
<h1 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h1><p>在 Python 中，正则匹配默认是<strong>贪婪匹配</strong>（在少数语言中可能是非贪婪），也就是<strong>匹配尽可能多的字符</strong>。</p>
<p>比如，我们想找出字符串中的所有 <code>div</code> 块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'</span></span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;div&gt;.*&lt;/div&gt;'</span>)</span><br><span class="line">result = pattern.findall(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&apos;&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;&apos;]</span><br></pre></td></tr></table></figure>
<p>由于正则匹配是贪婪匹配，也就是尽可能多的匹配，因此，在成功匹配到第一个 <code>&lt;/div&gt;</code> 时，它还会向右尝试匹配，查看是否还有更长的可以成功匹配的子串。</p>
<p>如果我们想非贪婪匹配，可以加一个 <code>?</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'</span></span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;div&gt;.*?&lt;/div&gt;'</span>)    <span class="comment"># 加上 ?</span></span><br><span class="line">result = pattern.findall(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&apos;&lt;div&gt;test1&lt;/div&gt;&apos;, &apos;&lt;div&gt;test2&lt;/div&gt;&apos;]</span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>re 模块的一般使用步骤如下：<ul>
<li>使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象；</li>
<li>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）；</li>
<li>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作；</li>
</ul>
</li>
<li>Python 的正则匹配默认是贪婪匹配。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://wiki.jikexueyuan.com/project/explore-python/Regular-Expressions/re.html" target="_blank" rel="noopener">re模块</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块之logging</title>
    <url>/2018/10/19/python%E6%A8%A1%E5%9D%97%E4%B9%8Blogging/</url>
    <content><![CDATA[<h1 id="一-日志记录的重要性"><a href="#一-日志记录的重要性" class="headerlink" title="一 日志记录的重要性"></a>一 日志记录的重要性</h1><p>​    在开发过程中，如果程序运行出现了问题，通常可以经过debug来检测到底是哪一步出现了问题，如果出现了问题的话，是比较容易排查出问题的。但是程序开发完成之后，部署到生产环境中去，这时候代码相当于是在一个黑盒环境下运行的，我们只能看到其运行的效果，是不能直接看到代码运行过程中的每一步状态的。在生产环境既不能通过debug来排查问题，更不能将生产环境下线来排查问题，所以这时候记录日志就很重要了。</p>
<p>​    如果我们现在只能得知当前问题的现象，而没有其他任何信息的话，如果想要解决掉这个问题的话，只能通过问题出现的形式来尝试重现bug，然后在一步一步的调试，这恐怕是难的，这样很大的概率是无法精准的复现这个问题的，而且debug的过程中也会耗费巨多的时间，这样如果在生产环境上出现了问题的话，修复bug就会变得非常棘手。但是如果有日志记录的话，不论是正常运行还是报错，都有相关的时间记录、状态记录、错误记录等，那么这样我们就可以方便的追踪到在当时的运行过程中出现了怎样的状况，从而可以快速的排查问题。</p>
<p>​    因此，作为开发者记录生产环境中代码运行的日志是很有必要的，因此学好怎么记录日志过程是一门必修课。</p>
<h1 id="二-日志记录的流程框架"><a href="#二-日志记录的流程框架" class="headerlink" title="二 日志记录的流程框架"></a>二 日志记录的流程框架</h1><p>在python中，怎样才能算做一个比较标准的日志记录呢？像我之前都是使用控制台查看结果或者debug查看运行状态的，对于一个小项目来说，debug已经足够了，但是对于一个大项目来说一步一步调试费时费力，而且得到的消息也不一定全面，如果自己可以定义输出的调试信息那么对于调试来讲是件很节省时间的事。</p>
<p>在python中专门有一个用来记录日志的模块logging，可以用它来进行标注的日志记录，利用它我们可以更方便的进行日志记录，同时还可以做更方便的级别区分以及一些额外的日志信息的记录，如时间、运行模块信息等。</p>
<p>那么完整的日志记录流程框架是什么样呢？</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwdrai0kmyj31581ds46e.jpg" alt></p>
<p>如图所示，整个日志记录的框架可以分为这么几个部分：</p>
<ol>
<li>Logger：即Logger Main Class，是我们进行日志记录是创建的对象，可以调用Logger的方法传入日志模板和信息，来生成一条条日志记录，称作Log Record。</li>
<li>Log Record：就代指生成的一条条日志记录。</li>
<li>Handler：即用来处理日志记录的类，它可以将Log Record输出到我们指定的日志位置和存储形式等，如我们可以指定输入到具体的文件、或者可以指定将日志通过FTP协议记录到远程的服务器上，Handler就会帮我们完成这些事情。</li>
<li>Formatter：实际上生成的Log Record也是一个个对象，那么我们想要把它们保存成一条条我们想要的日志文本的话，就需要有一个格式化的过程，那么这个过程就有Formatter来完成，返回的就是日志字符串，然后传回给Handler来处理。</li>
<li>Filter：另外保存日志的时候我们可能不需要全部保存，只需要保存我们想要的部分就可以了，所以在保存的时候需要进一步过滤，留下想要的日志信息，如只保存某个级别的日志，那么这个过滤过程就可以交给Filter来完成。</li>
<li>Parent Handler：Handler之间可以存在分层关系，以使得不同Handler之间共享想通功能的代码。</li>
</ol>
<p>这些就是整个logging模块的基本架构和对象功能。</p>
<h1 id="三-日志记录的相关用法"><a href="#三-日志记录的相关用法" class="headerlink" title="三 日志记录的相关用法"></a>三 日志记录的相关用法</h1><p>logging模块有如下几个优点：</p>
<ol>
<li>可以在logging模块中设置日志等级，在不同的版本（如开发环境、生产环境）上通过设置不同的输出等级来记录相应的日志。</li>
<li>logging模块不仅可以把输出信息输出到控制台，还可以设置输出到任意位置，如写入文件、写入远程服务器等。</li>
<li>logging模块具有灵活的配置和格式化功能，如配置输出当前模块信息、运行时间等，相比print的字符串格式化更加方便易用。</li>
</ol>
<h1 id="四-日志记录的相关用法"><a href="#四-日志记录的相关用法" class="headerlink" title="四 日志记录的相关用法"></a>四 日志记录的相关用法</h1><h3 id="一-日志级别"><a href="#一-日志级别" class="headerlink" title="一 日志级别"></a>一 日志级别</h3><p>日志级别分为五个级别：</p>
<table>
<thead>
<tr>
<th>等级</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>CRITICAL</td>
<td>50</td>
</tr>
<tr>
<td>FATAL</td>
<td>50</td>
</tr>
<tr>
<td>ERROR</td>
<td>40</td>
</tr>
<tr>
<td>WARNING</td>
<td>30</td>
</tr>
<tr>
<td>WARN</td>
<td>30</td>
</tr>
<tr>
<td>INFO</td>
<td>20</td>
</tr>
<tr>
<td>DEBUG</td>
<td>10</td>
</tr>
<tr>
<td>NOTSET</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>这里最高的等级是 CRITICAL 和 FATAL，两个对应的数值都是 50，另外对于 WARNING 还提供了简写形式 WARN，两个对应的数值都是 30。</p>
<p>我们设置了输出 level，系统便只会输出 level 数值大于或等于该 level 的的日志结果，例如我们设置了输出日志 level 为 INFO，那么输出级别大于等于 INFO 的日志，如 WARNING、ERROR 等，DEBUG 和 NOSET 级别的不会输出。</p>
<p>在logging模块中有对应的常量用来标识级别，默认情况下，默认的log级别是warning（30），默认输出到控制台。</p>
<h3 id="二-自定义日志的配置"><a href="#二-自定义日志的配置" class="headerlink" title="二 自定义日志的配置"></a>二 自定义日志的配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.info(<span class="string">'log info'</span>)</span><br><span class="line">logger.debug(<span class="string">'log debug'</span>)</span><br><span class="line">logger.warning(<span class="string">'log warning'</span>)</span><br><span class="line">logger.critical(<span class="string">'log critical'</span>)</span><br></pre></td></tr></table></figure>
<p>在这里首先导入logging模块，然后进行了一下基本的配置，通过basicConfig配置了level级别和format格式化信息，level配置为INFO级别，只输出大于等于INFO级别的信息，format格式的字符串，包括asctime、name、levelname、message四个内容，分别代表运行时间、模块名称、日志级别、日志内容，这样输出内容便为这四个内容的信息了，这就是logging全局配置。</p>
<p>接下来声明了一个Logger对象，是日志输出的主类，调用对象的info()方法可以输出INFO级别的日志信息，调用debug()方法就可以输出DEBUG级别的日志信息，其他级别的日志信息同理可以输出。初始化logger时传入了<strong>name</strong>来代替传入模块的名称，如果直接运行该脚本则值为<strong>main</strong>,如果作为模块被import的话，则就是被导入模块的名称为test.py，因为在不同的模块中该值不同，所以直接使用<strong>name</strong>代替，然后输出了四条日志信息，其中有一条INFO信息，一条DEBUG信息，一条WARNING信息，一条CRITICAL信息，因为设置的level为INFO，所以低于INFO的级别日志会被过滤，所以DEBUG日志信息会被过滤。</p>
<h3 id="三-basicConfig的具体参数"><a href="#三-basicConfig的具体参数" class="headerlink" title="三 basicConfig的具体参数"></a>三 basicConfig的具体参数</h3><p>basicConfig是用作全局的日志配置，basicConfig的参数有：</p>
<ol>
<li>filename：日志输出的文件名，如果指定了这个信息之后，不会使用默认的StreamHandler，会使用FileHandler来将日志信息输入到指定的文件中。</li>
<li>filemode：该参数为指定日志文件的写入方式，有两种形式，一种为w，一种为a，分别代表覆盖写入和追加写入。</li>
<li><p>format：指定日志信息的输出格式，即上文示例所示的参数，部分参数如下：</p>
<ol>
<li>%(levelno)s：打印日志级别的值；</li>
<li>%(levelname)s：打印日志级别的名称；</li>
<li>%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]；</li>
<li>%(filenam)s：打印当前执行程序名；</li>
<li>%(funcName)s：打印日志的当前函数；</li>
<li>%(lineno)s：打印日志的当前行号；</li>
<li>%(asctime)s：打印日志的时间；</li>
<li>%(thread)s：打印线程id；</li>
<li>%(threadName)s：打印线程名称；</li>
<li>%(process)s：打印进程id；</li>
<li>%(processName)s：打印进程名称；</li>
<li>%(module)s：打印模块名称；</li>
<li>%(message)s：打印日志信息。</li>
</ol>
</li>
<li><p>datefmt：指定时间的输出格式。</p>
</li>
<li>style：如果format参数制定了，这个参数就可以指定格式化时的占位符风格，如%、{、$等。</li>
<li>level：指定日志输出的类别，程序会输出大于等于此级别的信息。</li>
<li>stream：在没有指定filename的时候会默认使用StreamHandler，这时stream可以指定初始化的文件流。</li>
<li>handlers：可以指定日志处理时所使用的Handlers，必须是可迭代的。</li>
</ol>
<h3 id="四-Formatter配置"><a href="#四-Formatter配置" class="headerlink" title="四 Formatter配置"></a>四 Formatter配置</h3><p>在进行日志格式化输出的时候，我们可以不借助于basicConfig来全局配置格式化输出内容，可以借助Formatter来完成</p>
<p>Formatter用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(level=logging.WARN)</span><br><span class="line">formatter = logging.Formatter(fmt=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>, datefmt=<span class="string">'%Y/%m/%d %H:%M:%S'</span>)</span><br><span class="line">handler = logging.StreamHandler()</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment">#log</span></span><br><span class="line">logger.debug(<span class="string">'debug'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical'</span>)</span><br><span class="line">logger.error(<span class="string">'error'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning'</span>)</span><br><span class="line">logger.info(<span class="string">'info'</span>)</span><br></pre></td></tr></table></figure>
<p>在这里指定了一个Formatter，并传入fmt和datefmt参数，这样就指定了日志结果的输出格式和时间格式，然后Handler通过setFormatter()方法设置此Formatter对象即可，输出结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span>/<span class="number">10</span>/<span class="number">20</span> <span class="number">00</span>:<span class="number">26</span>:<span class="number">25</span> - __main__ - CRITICAL - critical</span><br><span class="line"><span class="number">2018</span>/<span class="number">10</span>/<span class="number">20</span> <span class="number">00</span>:<span class="number">26</span>:<span class="number">25</span> - __main__ - ERROR - error</span><br><span class="line"><span class="number">2018</span>/<span class="number">10</span>/<span class="number">20</span> <span class="number">00</span>:<span class="number">26</span>:<span class="number">25</span> - __main__ - WARNING - warning</span><br></pre></td></tr></table></figure>
<p>这样可以为每个Handler单独配置输出的格式。</p>
<h3 id="五-捕获Tracback异常信息"><a href="#五-捕获Tracback异常信息" class="headerlink" title="五 捕获Tracback异常信息"></a>五 捕获Tracback异常信息</h3><p>遇到错误的时候，希望报错时出现详细的Tracback信息，便于我们调试，利用logging模块可以非常方便的实现这种需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.serLevel(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line">stream_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'INFO'</span>)</span><br><span class="line">logger.warning(<span class="string">'WARNING'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    logger.error(<span class="string">'something wrong'</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">logger.info(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure>
<p>这里在error()方法中添加了一个参数，将exc_info设置为True，这样就可以输出执行过程中的信息了，即可以输出完整的Tracback信息。</p>
<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">38</span>,<span class="number">007</span> - __main__ - INFO - INFO</span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">38</span>,<span class="number">007</span> - __main__ - WARNING - WARNING</span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">38</span>,<span class="number">007</span> - __main__ - ERROR - something wrong</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/jingxing/PycharmProjects/python全栈/day22/log_test.py"</span>, line <span class="number">58</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">38</span>,<span class="number">007</span> - __main__ - INFO - end</span><br></pre></td></tr></table></figure>
<p>这样可以详细的记录报错的信息，一旦出现了错误，可以及时的定位到出现问题的代码。</p>
<h3 id="六-配置共享"><a href="#六-配置共享" class="headerlink" title="六 配置共享"></a>六 配置共享</h3><p>在写项目的时候，肯定会有许多的配置信息，如果每个文件都来配置logging的话非常麻烦，而且几乎很多地方的配置几乎差不多的，因为此原因，logging模块提供了父子模块共享配置的机制，会根据Logger的名称来自动加载父模块的配置。</p>
<p>定义一个main.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> core</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line">logger.setLevel(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">handler = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">handler.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - % (message)s'</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line">logging.info(<span class="string">'main info'</span>)</span><br><span class="line">logging.debug(<span class="string">'main debug'</span>)</span><br><span class="line">logging.error(<span class="string">'main error'</span>)</span><br><span class="line">core.run()</span><br></pre></td></tr></table></figure>
<p>在执行文件配置了日志的输出格式和文件路径，同时定义了Logger的名称为main，然后引入了另外一个模块core，最后调用了core的run()方法。</p>
<p>接下来定义core.py，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'main.core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    logger.info(<span class="string">'core info'</span>)</span><br><span class="line">    logger.debug(<span class="string">'core debug'</span>)</span><br><span class="line">    logger.error(<span class="string">'core error'</span>)</span><br></pre></td></tr></table></figure>
<p>在core.py文件里定义了Logger的名称为main.core，因为之前在main.py文件里定义的Logger名称为main，所以core.py里面的Logger就会复用main.py里面的Logger配置，而不用重新为core配置日志了。</p>
<p>运行之后test.log结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main - INFO </span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main - DEBUG </span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main - ERROR </span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main.core - INFO </span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main.core - DEBUG </span><br><span class="line"><span class="number">2018</span><span class="number">-10</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">37</span>,<span class="number">575</span> - main.core - ERROR</span><br></pre></td></tr></table></figure>
<p>可以看出main和core模块都是用了同样的输出配置。所以只要在入口文件里定义好logging模块的输出配置，子模块只需要在定义Logger对象时使用父模块的名称开头就可以共享配置，实际上直接使用父模块的名字就可以，但是为了增加辨识度，可以在父模块名字后加上后缀。</p>
<p>查看getLogger源码可得，后面的名字可以自定义，然后getLogger里面会自动帮你创建以该名字命名的日志生成器，具体解释如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取具有指定名称（通道名称）的记录器，如果它尚不存在则创建它。 此名称是以点分隔的分层名称，例如“a”，“a.b”，“a.b.c”或类似名称。如果指定名称存在PlaceHolder [即 loggerdid不存在，但它的子节点已经存在]，用createdlogger替换它，并修复指向占位符的父/子引用，现在指向记录器。</span><br></pre></td></tr></table></figure>
<h3 id="七-文件配置"><a href="#七-文件配置" class="headerlink" title="七 文件配置"></a>七 文件配置</h3><p>虽然可以再入口文件中定义好配置信息，然后子模块也可以使用很方便，但是因为配置文件大部分都是不需要更改的，只是某些需要更改，像这种信息可以把配置写入配置文件里，然后运行时读取配置文件里面的配置，这样更易维护和使用。</p>
<p>项目结构如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwehy6lo2yj30vk0km0u5.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bin/start.py</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line"><span class="keyword">import</span> core.shop</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"welcome to here"</span>)</span><br><span class="line">    core.shop.shopping()</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf/settings</span></span><br><span class="line">standard_format = <span class="string">"%(name)s %(asctime)s %(levelname)s %(module)s %(funcName)s %(lineno)s %(message)s"</span></span><br><span class="line">simple_format = <span class="string">"%(name)s %(asctime)s  %(module)s  %(message)s"</span></span><br><span class="line">complete_format = <span class="string">"%(asctime)s %(levelname)s %(funcName)s %(lineno)s %(thread)s %(process)s %(message)s"</span></span><br><span class="line">logfile_path = <span class="string">r"/Users/jingxing/PycharmProjects/python全栈/day23/log/d.log"</span></span><br><span class="line"></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'standard'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"complete"</span>:&#123;</span><br><span class="line">            <span class="string">"format"</span>: complete_format</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'filters'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: logfile_path,  <span class="comment">#</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志文件的最大大小为5M 超出后 换文件</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>, <span class="comment"># 最多留五个日志文件</span></span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="comment"># 在getLogger的时候  如果指定的名称 不存在 或者不给名称 用的就是默认的</span></span><br><span class="line">        <span class="comment"># 在这里如果key为空 它就是默认的</span></span><br><span class="line">        <span class="comment"># 你可以自己定义生成器的名称 并且他们还能使用相同的默认配置</span></span><br><span class="line">        <span class="string">''</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># core/shop.py</span></span><br><span class="line"><span class="keyword">import</span> lib.common</span><br><span class="line">logger = lib.common.get_logger()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"开始购物"</span>)</span><br><span class="line">    logger.debug(<span class="string">"购物成功"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lib/common.py</span></span><br><span class="line"><span class="keyword">import</span> conf.settings</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></span><br><span class="line">    logging.config.dictConfig(conf.settings.LOGGING_DIC)</span><br><span class="line">    <span class="keyword">return</span> logging.getLogger(<span class="string">"main"</span>)</span><br></pre></td></tr></table></figure>
<p>在代码运行后，在shop.py模块中导入了lib.common模块，在common.py模块中导入了conf.settings模块，来获取具体的日志配置，因为getLogger(‘main’)里面的main在settings里面没有，所以使用默认的日志配置，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="comment"># 在getLogger的时候  如果指定的名称 不存在 或者不给名称 用的就是默认的</span></span><br><span class="line">        <span class="comment"># 在这里如果key为空 它就是默认的</span></span><br><span class="line">        <span class="comment"># 你可以自己定义生成器的名称 并且他们还能使用相同的默认配置</span></span><br><span class="line">        <span class="string">''</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>然后首先进行level=’DEBUG’的过滤，因为shopping中的日志信息级别为debug，所以会通过进入handlers里面进行第二次过滤，在handlers里面有两个配置，一个为default配置，一个味console配置，在default配置中，具体配置如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: logfile_path,  <span class="comment">#</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志文件的最大大小为5M 超出后 换文件</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>, <span class="comment"># 最多留五个日志文件</span></span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>发现日志级别为DEBUG，所以仍然不会过滤，接下来就是格式化输出到指定文件了，formatter为standard模式，filename之前都已经定义好了，同理console同理输出到控制台。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>request中的 META</title>
    <url>/2019/02/26/request%E4%B8%AD%E7%9A%84-META/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>sdfsf</title>
    <url>/2019/04/28/sdfsf/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ubuntu 安装 Docker CE</title>
    <url>/2019/07/27/ubuntu-%E5%AE%89%E8%A3%85-Docker-CE/</url>
    <content><![CDATA[<h1 id="Ubuntu18-04-安装-Docker-CE"><a href="#Ubuntu18-04-安装-Docker-CE" class="headerlink" title="Ubuntu18.04 安装 Docker CE"></a>Ubuntu18.04 安装 Docker CE</h1><ol>
<li>添加使用 https 传输的软件包和 CA证书</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>添加软件源的 GPG 密钥</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>添加 docker 软件源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>安装 Docker CE</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>或者使用脚本自动安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>启动 docker</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>建立 docker 用户组</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>将当前用户加入 docker 组</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p>退出终端并重新登录或者重启 docker。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>测试使用不使用 sudo 能否执行 docker 命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>如果提示</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://<span class="comment">%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied</span></span><br></pre></td></tr></table></figure>
<p>则修改/var/run/docker.sock权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>python的名称空间</title>
    <url>/2018/10/23/python%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>最开始对名称空间的了解是在学习函数的时候,那时候知道了作用域的查找顺序,以及全局名称空间和局部名称空间,产生疑惑的时候为学递归的时候,那时候还没有名称空间这个概念,只知道递归有个最大深度,那时候以后递归产生的名称空间是一层套一层的,以及类里面的名称空间,所以产生了深究名称空间的想法,这才诞生了这篇博客,本篇博客借鉴了<a href="https://segmentfault.com/a/1190000004519811" target="_blank" rel="noopener">python的命名空间</a>的内容,本人对里面的例子都试验了并发现了一个错误,在类中定义的列表生成式产生的命名空间也可以访问到类属性.</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a.py</span></span><br><span class="line">lis = [<span class="string">'musibii'</span>, <span class="string">'thales'</span>]</span><br><span class="line">print(<span class="string">'lis1'</span>, id(name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> lis</span><br><span class="line">        lis.append(<span class="string">'maffia'</span>)</span><br><span class="line">        print(<span class="string">'lis'</span>, id(lis))</span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'lis2'</span>, lis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.py</span></span><br><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> A</span><br><span class="line">print(<span class="string">'b'</span>, A)</span><br></pre></td></tr></table></figure>
<p>执行 b 文件的结果为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis1 <span class="number">4421146632</span></span><br><span class="line">lis2 [<span class="string">'musibii'</span>, <span class="string">'thales'</span>]</span><br><span class="line">b &lt;<span class="class"><span class="keyword">class</span> '<span class="title">a</span>.<span class="title">A</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现,虽然 b 只是导入了 a 中的 class A, 但导入这个过程执行了整个 a 文件,那么是否能够在 b 中访问 a 中的全局变量 lis 呢?</p>
<p>使用 from a import A 的形式只是把 A 产生的名称空间复制了一份到 b 产生的名称空间中.</p>
<h1 id="Python的一些基本概念"><a href="#Python的一些基本概念" class="headerlink" title="Python的一些基本概念"></a>Python的一些基本概念</h1><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在Python 中一切皆对象,那么对象到底代表什么呢?我的理解是在执行 py 文件时产生的一切变量都称为对象,如果把内存比作一座超大的房子的话,那么对象就是这座房子里的租客,那么这个租客随身携带的东西就是这个对象的一切了,对象都具有唯一的 id( 内存地址),类型( python3中统一了类和类型的概念),以及对象的值,对象一旦建立, id 便不会改变, id 就是对象在内存中的地址.</p>
<p>用常见的对象来类比一下这三个概念:</p>
<ol>
<li>常量</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">NAME = <span class="string">'musibii'</span></span><br><span class="line">print(id(NAME))</span><br><span class="line">print(type(NAME))</span><br><span class="line">print(globals()) <span class="comment"># 查看全局名称空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">4374978776</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&#123;'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x104c45fd0&gt;, '__spec__': None, '__annotations__': &#123;&#125;, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__file__': '/Users/jingxing/PycharmProjects/python全栈/作业/day27/duixiang.py', '__cached__': None, 'NAME': 'musibii'&#125;</span><br></pre></td></tr></table></figure>
<p>出来的结果分别是 id,类型以及字典里面最后一个键值对对应的就是 NAME 的值.</p>
<ol start="2">
<li>函数</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'musibii'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        age = <span class="number">18</span></span><br><span class="line">        print(<span class="string">'age'</span>, age)</span><br><span class="line">    inner()</span><br><span class="line">    print(locals()) <span class="comment"># 想要查看函数里面的值,必须在函数内部查看,因为函数执行完成会释放内存资源</span></span><br><span class="line"></span><br><span class="line">print(id(func))</span><br><span class="line">print(type(func))</span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">4529634840</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">function</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">age</span> 18</span></span><br><span class="line">&#123;'inner': &lt;function func.&lt;locals&gt;.inner at 0x10e1cac80&gt;, 'name': 'musibii'&#125;</span><br></pre></td></tr></table></figure>
<p>id 和类型不必多说,函数对应的属性值里面不包括嵌套函数里面的属性(说明:名称空间是相互独立的)</p>
<ol start="3">
<li>类</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls</span>:</span></span><br><span class="line">    school = <span class="string">'hashangda'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s : %s'</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line">print(id(Cls))</span><br><span class="line">print(type(Cls))</span><br><span class="line">print(Cla.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">140390381504248</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></span><br><span class="line">&#123;'__module__': '__main__', 'school': 'hashangda', '__init__': &lt;function Cls.__init__ at 0x10648eae8&gt;, 'tell_info': &lt;function Cls.tell_info at 0x10648ebf8&gt;, '__dict__': &lt;attribute '__dict__' of 'Cls' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Cls' objects&gt;, '__doc__': None&#125;</span><br></pre></td></tr></table></figure>
<p>类的 id 为内存地址,类型为type类型,在 type 里面 type 就是类型的意思,所以说 python 里所有的类的类型都是类型,而类里面的属性就是类的值了.</p>
<p>python 里面所有的对象都具有的并且根确定身份有关的值为 id, 类型和值了.名称不是对象的属性,名称只是指向对象,因为可以多个名称指向同一个对象.</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在对象里把变量名叫为名称其实是不准确的,这些名称都有一个共同的名字: identifier(和 id 是两个意思),中文名为’标识符’.</p>
<p>标识符:在 Python中,各类对象的名称,比如函数名,方法名,类名,变量名.常量名都称为标识符.</p>
<p><strong>在 Python 中赋值并不会直接复制数据,而只是将名称绑定到对象</strong>,对象本身不需要知道和关心自己的标识符叫什么,一个对象甚至可以指向不同的标识符.真正管理这些标识符的事物是’名称空间’.</p>
<h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><p><strong>名称空间</strong>(NameSpace):名字(标识符)到对象的映射.</p>
<p>简单来说,名称空间可以理解为<strong>记录对象和对象名字对应关系的空间</strong>,在对象那里查看的对象的值就是名称空间,这是一个字典,一个命名空间就是名字到对象的映射,标识符是键,对象则是值.</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>与名称空间相对的一个概念就是’作用域’,作用域本质是一块文本区域, Python 通过该文本区域可以<strong>直接访问</strong>相应的名称空间.</p>
<p>Python 中不加 <strong>.</strong> 的访问为直接访问,反之为属性访问.</p>
<p>因此可以简单的将作用域理解为<strong>直接访问名称空间的一种实现</strong>,具体而言:</p>
<ol>
<li>作用域内相应的名称空间可以被直接访问;</li>
<li>只有作用域内的名称空间才可以被直接访问(因此并不是所有的名称空间都可以被直接访问).</li>
</ol>
<h1 id="LEGB"><a href="#LEGB" class="headerlink" title="LEGB"></a>LEGB</h1><h3 id="LEGB-名称空间"><a href="#LEGB-名称空间" class="headerlink" title="LEGB 名称空间"></a>LEGB 名称空间</h3><p>这四类名称空间可以简记为 LEGB:</p>
<ol>
<li>局部名称空间( local): 指的是一个函数或者一个类所定义的名称空间:包括函数的参数,局部变量,类的属性等;</li>
<li>闭包名称空间(enclosing function):闭包函数的名称空间( python3引入);</li>
<li>全局名称空间( global):读入一个模块(也即一个. py 文件)后产生的名称空间;</li>
<li>内建名称空间(builtin):Python 解释器启动时自动载入__builtin__ 模块后形成的名称空间;像 str/list/dict… 等内置对象的名称就处于这里.</li>
</ol>
<p>举例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line">v1 = <span class="string">'global var'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(v1)</span>:</span></span><br><span class="line">    v2 = <span class="string">'local var'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        v3 = v2 + v</span><br><span class="line">        <span class="keyword">return</span> v3</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
<p>内建的反正每次都一样,在这里的三个名称空间里面的名称为:</p>
<ol>
<li>‘v1’ 为全局变量 v1 的名字,其所处的名称空间为全局名称空间;需要注意的是全局名称空间包括 ‘func’ 但不包括 func 的参数和内部变量;</li>
<li>func 包括 ‘v’, ‘v2’, 和 ‘inner’名称的局部名称空间;</li>
<li>执行 func 后, func 的作用域释放,并返回绑定了 v 和 v2变量的闭包函数 inner, 此时闭包函数的名称空间即为闭包名称空间,因此局部名称空间和闭包名称空间是相对而言的,对于父函数 func 而言,两者具有产生时间上的差异.</li>
</ol>
<h3 id="LEGB-访问规则"><a href="#LEGB-访问规则" class="headerlink" title="LEGB 访问规则"></a>LEGB 访问规则</h3><p>通过上面的例子,发现 LEGB 四类名称空间本身具有明显的内外层级概念,而这种层级概念正是构建作用域的前提:作用域依据这种层级概念将不同类型的名称空间组织起来并划归到不同层级的作用域,然后定义好不同层级作用域之间的访问规则,从而实现名称空间的直接访问.</p>
<p>LEGB 的访问规则:**同样的标识符在各层名称空间可以被重复使用而不会发生冲突,但 Python 寻找一个标识符的过程总是从当前层开始逐层网上找,直到首次找到这个标识符为止.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line">v1 = <span class="number">1</span></span><br><span class="line">v2 = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    v1 = <span class="number">2</span></span><br><span class="line">    print(v1)</span><br><span class="line">    print(v2)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line">print(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>全局变量和函数 func 都定义了变量 v1,在函数内部会优先选择自己局部名称空间内的变量 v1,对于 func 中未定义的变量 v2,Python 会向上查找全局名称空间,读取全局变量后打印输出.</p>
<h3 id="global-和-nonlocal-语句"><a href="#global-和-nonlocal-语句" class="headerlink" title="global 和 nonlocal 语句"></a>global 和 nonlocal 语句</h3><h4 id="global-和-nonlocal-的作用"><a href="#global-和-nonlocal-的作用" class="headerlink" title="global 和 nonlocal 的作用"></a>global 和 nonlocal 的作用</h4><p>对于上层名称空间里的变量, python 允许直接读取,但是不可以在内层作用域直接改写上层变量,在这方面很明显的区别就是在闭包函数里.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># e.py</span></span><br><span class="line">gv = [<span class="string">'a'</span>, <span class="string">'global'</span>, <span class="string">'var'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(v)</span>:</span></span><br><span class="line">    gv = [<span class="string">'gv'</span>] + gv</span><br><span class="line">    lv = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        lv = lv + [v]</span><br><span class="line">        gv.insert(<span class="number">1</span>, lv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
<p>实际调用 func 函数后,上面两处对 gv 和 lv 进行赋值的操作都会发生<strong>UnboundLocalError</strong>:因为 python 在执行函数前,会首先生成各层名称空间和作用域,因此 python 会在执行赋值前将 func 内的 gv 和 lv 写入局部名称空间和闭包名称空间,当 python 执行赋值语句的时候,会发现在局部作用域,闭包作用域内发现局部名称空间和闭包名称空间内已经具有 <strong>gv</strong> 和 <strong>lv</strong> 标识符,但是这两个非全局标识符在赋值语句执行之前并没有被赋值,也即没有对象与标识符关联,因此无法参与赋值运算,从而触发<strong>在引用之前未赋值</strong>的错误;但这段程序的本意是为了让全局变量 gv 和局部变量 lv 参与运算,为了避免类似的情况发生,Python 引入了<strong>global</strong>和<strong>nonlocal</strong>语句来说明局部名称空间和闭包名称空间使用的标识符分别来自全局名称空间和局部名称空间,声明之后就可以在 func 和 inner 名称空间里直接改写上层名称空间内的<strong>gv</strong>和<strong>lv</strong>的值了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f.py</span></span><br><span class="line">gv = [<span class="string">'a'</span>, <span class="string">'global'</span>, <span class="string">'var'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gv</span><br><span class="line">    gv = [<span class="string">'gv'</span>] + gv</span><br><span class="line">    lv = []</span><br><span class="line">    print(id(lv))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> lv</span><br><span class="line">        lv = lv + [v]</span><br><span class="line">        print(id(lv))</span><br><span class="line">        gv.insert(<span class="number">1</span>, lv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
<p>这样就可以正常修改了.原博客说 lv 的 id 都是一样的,在 mac 上版本为3..6.6测试发现不是一样的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">4416600136</span></span><br><span class="line"><span class="number">4416615624</span></span><br><span class="line"><span class="comment"># 确实是使用了上层名称空间的变量,但是重新赋值后, gv 和上层的 gv 已经不是同一个了, lv 也一样,所以内存地址都发生变化了.</span></span><br></pre></td></tr></table></figure>
<h3 id="借壳"><a href="#借壳" class="headerlink" title="借壳"></a>借壳</h3><p>那么不用 global 和nonlocal 可以达到上面的目的吗?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># g.py</span></span><br><span class="line">gv = [<span class="string">'a'</span>, <span class="string">'global'</span>, <span class="string">'var'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(v)</span>:</span></span><br><span class="line">	gv.insert(<span class="number">0</span>, <span class="string">'gv'</span>)</span><br><span class="line">	lv = []</span><br><span class="line">	print(id(lv))</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        lv.append(v)</span><br><span class="line">        print(id(lv))</span><br><span class="line">        gv.insert(<span class="number">1</span>, lv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> gv</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
<p>看作者的这个解释为借壳,感觉很形象,这个原因应该用列表式可变类型来解释比较好, insert 和 append 的操作并没有对列表进行赋值操作,而是对列表这个容器里面的东西修改了并不是修改列表,我们都知道电脑内的内存永远都不会改变,他就是个超大的容器,用来装东西的,假如现在有个列表,它的容量和内存一样大,那么是不是好理解点,我们在和内存一样的列表里操作会改变这个列表吗?不会.</p>
<p><strong>在 global 和 nonlocal 的作用就是把上层有的标识符和对象复制一份到下层名称空间</strong></p>
<p>为什么在<strong>下层作用域</strong>可以使用<strong>读取</strong>上层作用域的值而不可以<strong>使用</strong>它的值呢?</p>
<p>这是因为 python 的两个概念不同的原因,作用域和名称空间的区别导致的.标识符的查找顺序是从当前层一层层向外查找的,这是根据作用域来查找的,那么名称空间呢?作用域和名称空间的在执行 py 文件就已经产生了,其实可以理解这是一个东西,其实里面保存的信息(除了某些可能有特殊含义的值不一样外)都一样,不一样的是作用于里面只保存了标识符,而名称空间里不仅保存了标识符还保存了标识符对应的对象.查找值的顺序是根据作用域来的,使用值就只能使用自己名称空间里的值,名称空间里保存的是标识符和标识符对应的对象,只有本层名称空间里有这个标识符和标识符对应的对象才可以使用(读,使用).</p>
<p>那么现在很明白为什么不能直接在下层名称空间直接使用上层名称空间里的名称了.</p>
<h3 id="global-和-nonlocal-语句对标识符创建的不同影响"><a href="#global-和-nonlocal-语句对标识符创建的不同影响" class="headerlink" title="global 和 nonlocal 语句对标识符创建的不同影响"></a>global 和 nonlocal 语句对标识符创建的不同影响</h3><p>需要注意的是: <strong>global</strong> 语句只是声明该标识符引用的变量来自于全局变量,但并不能直接在当前层创建该标识符;<strong>nonlocal</strong> 语句则会在子函数名称空间创建与父函数变量同名的标识符.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># j.py</span></span><br><span class="line">gv = [<span class="string">'a global var'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span></span><br><span class="line">    lv = <span class="string">'a local var'</span></span><br><span class="line">    print(locals())</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> lv</span><br><span class="line">        <span class="keyword">global</span> gv</span><br><span class="line">        print(locals())</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&#123;<span class="string">'lv'</span>: <span class="string">'a local var'</span>&#125;</span><br><span class="line">&#123;<span class="string">'lv'</span>: <span class="string">'a local var'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>运行 func 函数后 global 语句并未将 ‘ gv ‘变量引入局部名称空间,执行闭包函数后,’ local’语句将父函数变量’lv’引入闭包名称空间.</p>
<p>之所以 nonlocal 和 global 语句的处置不同,在于全局变量的作用域生存期很长,在模块内随时都可以访问,而父类函数的局部作用域在父函数执行完毕后便会直接释放,因此 nonlocal 语句必须将父函数变量的标识符写入闭包名称空间.</p>
<h1 id="名称空间的生命周期"><a href="#名称空间的生命周期" class="headerlink" title="名称空间的生命周期"></a>名称空间的生命周期</h1><h3 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h3><p>还有一个重要的问题没有解决:’标识符不是一开始就存在名称空间的,名称空间也不是平白无故产生的,那么名称空间是在什么时候被创建?又是什么时候被删除的呢?’</p>
<p>名称空间产生顺序:</p>
<ol>
<li>内建名称空间在 Python 解释器启动时创建,之后会一直存在;</li>
<li>模块的全局名称空间在模块定义时被读入创建,通常模块名称空间也会保持到解释器退出;</li>
<li>函数调用时产生新的局部名称空间,函数返回结果,抛出异常时释放名称空间,每一次递归都产生一个名称空间;</li>
<li>标识符产生地点决定标识符所处的名称空间.</li>
</ol>
<h3 id="类的名称空间"><a href="#类的名称空间" class="headerlink" title="类的名称空间"></a>类的名称空间</h3><p>首次,函数和类执行时都会产生局部名称空间,但类的执行机制不同于函数;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># i.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">2</span>)</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="number">3</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>如上,类就是一个可执行的代码块,只要该类被加载,就会被执行,这一点不同于函数.</p>
<p>类之所以这样设计的原因在于:类是创建其他实例(声称其他的类或者具体的对象)的对象,因此必须在实例之前被创建,而类又可能涉及到与其他类的继承,重载等一系列问题,故在代码加载时就被创建利于提高效率和降低逻辑复杂度.</p>
<p>其次,与函数不同的是,类的局部名称空间并非作用于;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = [a + i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<p> 执行上段代码,可以发现类 A 内列表推导式无法调取 a 的值,但函数可以.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = [a + i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">func()  <span class="comment">#[1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p> 因此, A 中的 a 不同于 func 中的 a 在局部名称空间可以被任意读取,之所以说是’不可以被任意’读取而不是’不可被读取’,原因在于在类 A 的局部名称空间内, a 其实在一定程度上可以被读取的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = a + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>而上例中 b 的赋值操作不能被执行,原因在于列表推导式会创建自己的局部名称空间,因此难以访问到 a???????</p>
<p><strong>为什么</strong>访问不到 a???</p>
<h3 id="编译与局部名称空间"><a href="#编译与局部名称空间" class="headerlink" title="编译与局部名称空间"></a>编译与局部名称空间</h3><p>Python 是动态语言,很多行为是动态发生的,但 Python 自身也在不断进步,比如为了提高效率,有些行为会在编译时候完成,局部变量的创建就是如此.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)  <span class="comment"># error</span></span><br><span class="line">        a = <span class="number">2</span>     <span class="comment"># error</span></span><br><span class="line">    inner()</span><br></pre></td></tr></table></figure>
<p>上段程序还未执行,就提示存在语法错误,原因在于 Python 解释器发现 inner 内存在自身的 a 变量,但在声明之前就被 print 了.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1、为什么 b.py 只是导入 a.py 中的 <code>class A</code>,却执行了整个 a.py 文件?<br>答：因为 Python 并不知道 <code>class A</code> 在 a.py 文档的何处，为了能够找到 <code>class A</code>，Python 需要执行整个文档。<br>2、为什么 b.py 的导入执行了整个 a.py 文档，却在 b 中难以调用 a 的全局变量 <code>va</code>？<br>答：Python 的全局变量指的是模块全局，因此不可以跨文档，因此 global 语句也是不可以跨文档的。另外， b 只是导入了 a 的 <code>class A</code>，因此并不会导入 a 中所有的标识符，所以 类似<code>a.va</code> 这样的调用也是不起作用的。</p>
<p>关于命名空间：<br>1、赋值、定义类和函数都会产生新的标识符；<br>2、全局变量的标识符不能跨文档；<br>3、各级命名空间相互独立互不影响；<br>4、Python 总是从当前层逐渐向上寻找标识符；<br>5、内层作用域若想直接修改上层变量，需要通过 <code>global</code> <code>nonlocal</code> 语句先声明；<br>6、单纯的 <code>global</code> 语句并不能为所在层级创建相应标识符，但 <code>nonlocal</code> 语句可以在闭包空间中创建相应标识符；<br>7、类的局部命名空间不是作用域。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>NameSpace</tag>
      </tags>
  </entry>
  <entry>
    <title>with 是什么</title>
    <url>/2019/02/25/with-%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>yum 命令详解</title>
    <url>/2019/05/03/yum-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="CentOS下yum命令详解"><a href="#CentOS下yum命令详解" class="headerlink" title="CentOS下yum命令详解"></a>CentOS下yum命令详解</h1><blockquote>
<p>Yum: 即Yellowdog Update Modifier,是一种基于rpm的包管理工具 </p>
</blockquote>
<p>yum命令使用示例 </p>
<h3 id="显示yum仓库"><a href="#显示yum仓库" class="headerlink" title="显示yum仓库"></a>显示yum仓库</h3><blockquote>
<p>显示所有仓库 </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# yum repolist all</span><br></pre></td></tr></table></figure>
<blockquote>
<p>显示可用的仓库 </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# yum repolist enabled</span><br></pre></td></tr></table></figure>
<blockquote>
<p>显示不可用的仓库 </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# repolist disabled</span><br></pre></td></tr></table></figure>
<h3 id="显示应用程序包"><a href="#显示应用程序包" class="headerlink" title="显示应用程序包"></a>显示应用程序包</h3><blockquote>
<p>显示所有的程序包 </p>
</blockquote>
<pre><code class="shell">
[root@db01 ~]# yum list 

或 

[root@db01 ~]# yum list all 

支持正则的查询 

[root@db01 ~]# yum list tre? 

</code></pre>
<blockquote>
<p>显示可安装的程序包 </p>
</blockquote>
<pre><code class="shell">
显示所有可安装的程序包 

[root@web ~]# yum list available 

[root@db01 ~]# yum list available php 

</code></pre>
<blockquote>
<p>显示可更新或已安装的程序包 </p>
</blockquote>
<pre><code class="shell">
更新 

[root@web ~]# yum list updates 

已安装的程序包 

[root@web ~]# yum list installed 

</code></pre>
<blockquote>
<p>显示仓库中最近增加的程序包 </p>
</blockquote>
<pre><code class="shell">
[root@web ~]# yum list recent 

</code></pre>
<h3 id="安装程序包"><a href="#安装程序包" class="headerlink" title="安装程序包"></a>安装程序包</h3><pre><code class="shell">
<span class="meta">#</span><span class="bash">安装 tree 程序 </span>

[root@web ~]# yum install tree 

</code></pre>
<h3 id="升级程序包"><a href="#升级程序包" class="headerlink" title="升级程序包"></a>升级程序包</h3><pre><code class="shell">
[root@web ~]# yum update tree 

</code></pre>
<h3 id="卸载程序包"><a href="#卸载程序包" class="headerlink" title="卸载程序包"></a>卸载程序包</h3><pre><code class="shell">
[root@web ~]# yum remove tree 

或 

[root@web ~]# yum erase tree 

</code></pre>
<h3 id="查看程序包信息"><a href="#查看程序包信息" class="headerlink" title="查看程序包信息"></a>查看程序包信息</h3><pre><code class="shell">
[root@web ~]# yum info tree 

</code></pre>
<h3 id="查看文件的来源"><a href="#查看文件的来源" class="headerlink" title="查看文件的来源"></a>查看文件的来源</h3><blockquote>
<p>查看某一文件来自于那个程序包 </p>
</blockquote>
<pre><code class="shell">
[root@db01 ~]# yum provides ping 

</code></pre>
<h3 id="清理本地缓存"><a href="#清理本地缓存" class="headerlink" title="清理本地缓存"></a>清理本地缓存</h3><pre><code class="shell">
[root@db01 ~]# yum clean all 

<span class="meta">#</span><span class="bash">清楚插件缓存 </span>

[root@db01 ~]# yum clean plugins 

</code></pre>
<h3 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h3><pre><code class="shell">
[root@db01 ~]# yum makecache 

</code></pre>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><pre><code class="shell">
[root@db01 ~]# yum search php 

</code></pre>
<h3 id="查看指定包所依赖的capabilities"><a href="#查看指定包所依赖的capabilities" class="headerlink" title="查看指定包所依赖的capabilities"></a>查看指定包所依赖的capabilities</h3><pre><code class="shell">
[root@db01 ~]# yum deplist php 

</code></pre>
<h3 id="查看yum事务历史"><a href="#查看yum事务历史" class="headerlink" title="查看yum事务历史"></a>查看yum事务历史</h3><pre><code class="shell">
[root@db01 ~]# yum history 

</code></pre>
<h3 id="包组相关的命令"><a href="#包组相关的命令" class="headerlink" title="包组相关的命令"></a>包组相关的命令</h3><pre><code class="shell">
[root@db01 ~]# yum groupinstall # 安装包组 

[root@db01 ~]# yum groupupdate #更新包组 

[root@db01 ~]# yum grouplist #显示包组 

[root@db01 ~]# yum groupremove #移除包组 

[root@db01 ~]# yum groupinfo #查看包组信息 

这些命令和上面的命令用法类似，只是针对于包组而言 

</code></pre>
]]></content>
      <categories>
        <category>yum</category>
      </categories>
  </entry>
  <entry>
    <title>rabbitmq高级消息队列</title>
    <url>/2019/04/03/rabbitmq%E9%AB%98%E7%BA%A7%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="rabbitmq使用"><a href="#rabbitmq使用" class="headerlink" title="rabbitmq使用"></a>rabbitmq使用</h1><h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以很复杂，可以包含嵌入对象。</p>
<p>消息队列是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中不用考虑哪个消费者来取数据，消息使用者只管从MQ 中取消息而不用管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p>
<h2 id="为何用消息队列"><a href="#为何用消息队列" class="headerlink" title="为何用消息队列"></a>为何用消息队列</h2><p>消息队列是一种应用间的异步协作机制，那么什么时候使用 MQ呢</p>
<p>一常见的订单系统为例，用户点击下单按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展出力这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发红包、发短信、邮件通知等。这种场景下可以用 MQ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完成，而由另外的单独线程拉取 MQ 的消息（或者由 MQ 推送消息），当发现 MQ中有发红包或其他的消息时，执行相应的业务逻辑。</p>
<h2 id="RabbitMQ-的特点"><a href="#RabbitMQ-的特点" class="headerlink" title="RabbitMQ 的特点"></a>RabbitMQ 的特点</h2><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p>
<p>AMQP：Advanced Message Queue Protocol，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p>
<p>RabbitMQ 最初起源于金融系统，用与在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现很好。具体特点如下：</p>
<ol>
<li><p>可靠性（Reliability）</p>
<p>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</p>
</li>
<li><p>灵活的路由（Flexible Routing）</p>
<p>在消息进入队列之前，通过 Exchange 来路由消息。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也可以通过插件实现自己的 Exchange。</p>
</li>
<li><p>消息集群（Clustering）</p>
<p>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker。</p>
</li>
<li><p>高可用（Highly Available Queues）</p>
<p>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍可以使用。</p>
</li>
<li><p>多种协议（Multi-Protocol）</p>
<p>RabbitMQ 支持多种消息队列协议，如 STOMP、MQTT 等。</p>
</li>
<li><p>多语言客户端（Many Clients）</p>
<p>RabbitMQ 几乎支持所有常用语言，比如 Python、Java、.NET等。</p>
</li>
<li><p>管理界面（Management UI）</p>
<p>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</p>
</li>
<li><p>跟踪机制（Tracing）</p>
<p>如消息异常，RabbitMQ 提供了消息追踪机制，使用者可以找出发生了什么。</p>
</li>
<li><p>插件机制（Plugin System）</p>
<p>RabbitMQ 提供了许多插件，可以扩展插件，也可以自己编写插件。</p>
</li>
</ol>
<h2 id="RabbitMQ-中的概念模型"><a href="#RabbitMQ-中的概念模型" class="headerlink" title="RabbitMQ 中的概念模型"></a>RabbitMQ 中的概念模型</h2><h3 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h3><p>所有 MQ 产品从模型抽象上来说都是一样的过程：</p>
<p>消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费之。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ph5fe7a7j30b503474c.jpg" alt></p>
<center><span style="border-bottom:2px dashed">消息流</span></center>

<h3 id="RabbitMQ-基本概念"><a href="#RabbitMQ-基本概念" class="headerlink" title="RabbitMQ 基本概念"></a>RabbitMQ 基本概念</h3><p>上面只是最简单抽象的描述，具体到 RabbitMQ 则有更详细的概念需要解释。上面介绍过 RabbitMQ 是 AMQP 协议的一个开源实现，所以其内部实际上也是 AMQP 中的基本概念：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1phblvttyj30fe04et94.jpg" alt></p>
<center><span style="border-bottom: 2px dashed">RabbitMQ 内部结构</span></center>

<ol>
<li><p>Message</p>
<p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括 routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。。</p>
</li>
<li><p>Publisher</p>
<p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p>
</li>
<li><p>Exchange</p>
<p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</p>
</li>
<li><p>Binding</p>
<p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p>
</li>
<li><p>Queue</p>
<p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>
</li>
<li><p>Connection</p>
<p>网络连接，比如一个 TCP 连接。</p>
</li>
<li><p>Channel</p>
<p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的 TCP 连接内的虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p>
</li>
<li><p>Consumer</p>
<p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p>
</li>
<li><p>Virtual Host</p>
<p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 是默认的 vhost。</p>
</li>
<li><p>Broker</p>
<p>表示消息队列服务器实体。</p>
</li>
</ol>
<h3 id="AMQP-中的消息路由"><a href="#AMQP-中的消息路由" class="headerlink" title="AMQP 中的消息路由"></a>AMQP 中的消息路由</h3><p>AMQP 中消息的路由过程增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接受，而 Binding 决定交换器的消息应该发送到哪个队列中。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1pi2428ktj30dg0augme.jpg" alt></p>
<center><span style="border-bottom:2px dashed">AMQP 的消息路由过程</span></center>

<h3 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h3><p>Exchange 分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers。headers 匹配 AMQP 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了。</p>
<ol>
<li>direct</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1pi65dgvmj30ap08amxo.jpg" alt></p>
<center><span style="border-bottom:2px dashed">direct 交换器</span></center>

<p>消息中的路由键（routing key）如果和 Binding 中的 bind key 一致，交换器就将消息发送到相应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为‘’dog‘’，则只转发 routing key 标记为‘’dog‘’的消息，不会转发‘’dog.puppy‘’等。这是完全匹配、单薄的模式。</p>
<ol start="2">
<li>fanout</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1pif6lf4pj30cv08tdge.jpg" alt></p>
<center><span style="border-bottom:2px dashed">fanout 交换器</span></center>

<p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单地将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得一份复制的消息。fanout 类型转发消息是最快的。</p>
<ol start="3">
<li>topic</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1piid209uj30fi06zq3v.jpg" alt></p>
<center><span style="border-bottom:2px dashed">topic 交换器</span></center>

<p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串分成单词，这些单词之间用点隔开。它同样会识别两个通配符：符号<code>#</code>和符号<code>*</code>。<code>#</code>匹配0个或多个单词，<code>*</code>匹配一个单词。</p>
<h2 id="RabbitMQ-运行和管理"><a href="#RabbitMQ-运行和管理" class="headerlink" title="RabbitMQ 运行和管理"></a>RabbitMQ 运行和管理</h2><ol>
<li>启动</li>
</ol>
<p>找到安装后的 RabbitMQ 所在目录下的 sbin 目录，可以看到该目录下有7个以 rabbitmq 开头的可执行文件，直接执行 rabbitmq-server 即可，下面</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1pisdpmmdj318w0eigs3.jpg" alt></p>
<p>启动会看到一些启动过程和最后的 completed with 6 plugins，这说明启动的时候默认加载了6个插件。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1pituoe48j318s0d6djc.jpg" alt></p>
<ol start="2">
<li><p>后台启动</p>
<p>如果想让RabbitMQ 以守护程序的方式在后台运行，可以在启动的时候加上-detached 参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询服务器状态</p>
<p>sbin 目录下有个很重要的文件叫 rabbitmqctl，它提供了 RabbitMQ 管理需要的几乎一站式解决方案，绝大部分的运维命令它都可以提供。</p>
<p>查询 RabbitMQ 服务器的状态信息可以用参数 status</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure>
<p>该命令将输出服务器很多信息，比如 RabbitMQ 和 Erlang的版本、os 名称、内存等信息。</p>
</li>
<li><p>关闭 RabbitMQ 节点</p>
<p>在 Erlang 中有两个概念：节点和应用程序。节点就是 Erlang 虚拟机的每个实例，而多个 Erlang 应用程序可以运行在同一个节点之上。节点之间可以进行本地通信（不管他们是不是运行在同一台服务器之上）。比如一个运行在节点 A 上的应用程序可以调用节点 B 上应用程序的方法，就好像调用本地函数一样。如果应用程序由于某些原因崩溃，Erlang 节点会自动尝试重启应用程序。</p>
<p>如果要关闭整个 RabbitMQ 节点可以使用参数 stop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure>
<p>它会和本地节点通信并指示其干净的关闭，也可以指定关闭不同的节点，包括远程节点，只需要传入产生参数-n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n rabbit@server.example.com stop</span><br></pre></td></tr></table></figure>
<p>-n node默认 node 名称是 rabbit@server，如果你的主机名是 server.example.com，那么 node 名称就是 <a href="mailto:rabbit@server.example.com" target="_blank" rel="noopener">rabbit@server.example.com</a>。</p>
</li>
<li><p>关闭 RabbitMQ 应用程序</p>
<p>如果只想关闭应用程序，同时保持 Erlang 节点运行则可以使用stop_app</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 RabbitMQ 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置RabbitMQ 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl reset</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看已声明的队列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看交换器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_exchanges</span><br></pre></td></tr></table></figure>
<p>该命令还可以附加参数，比如列出交换器的名称、类型、是否持久化、是否自动删除：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_exchanges name type durable auto_delete</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看绑定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="队列的作用"><a href="#队列的作用" class="headerlink" title="队列的作用"></a>队列的作用</h2><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>实际案例：在用户进行注册的时候需要进行邮件发送和验证码发送，在没有使用消息队列之前，这些操作是同步进行的，在用户量较少的情况下，是不会影响用户体验的，但是一旦用户量大了起来，还是使用同步的话会极大地影响用户体验，在这种情况下就可以使用消息队列。</p>
<p>当用户注册的时候先直接返回注册成功页面，之后将需要发送邮件和验证码的任务存在队列里面，之后由服务器来消费队列里面的任务已达到应用解耦的目的。</p>
<h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>在淘宝双十一或者春运时的12306的用户访问量是特别大的，这种情况下如果所有的请求直接打到服务器上，服务器会直接挂掉。在这种情况下，可以使用动态扩容服务器的数量来处理高并发，但是并不是所有时间都需要很多服务器进行处理，为了成本的考虑可以采用消息队列进行处理并发，就是所有的请求并不是直接请求服务器，而是先把用户的请求存储在消息队列里面，之后服务器在慢慢地进行处理请求。</p>
<h2 id="消息队列数据不丢失"><a href="#消息队列数据不丢失" class="headerlink" title="消息队列数据不丢失"></a>消息队列数据不丢失</h2><ol>
<li>在产生队列时，设置<code>durable=True</code>，代表队列持久化</li>
<li>在生产端，设置<code>properties=pika.BasicProperties(delivery_mode=2)</code></li>
<li>在消费端，设置<code>auto_ack=False, ch.basic_ack(delivery_tag=method.delivery_tag)</code></li>
</ol>
<h2 id="消息产生与消费"><a href="#消息产生与消费" class="headerlink" title="消息产生与消费"></a>消息产生与消费</h2><h3 id="简单消息发送"><a href="#简单消息发送" class="headerlink" title="简单消息发送"></a>简单消息发送</h3><h4 id="producer"><a href="#producer" class="headerlink" title="producer"></a>producer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : producer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 16:56</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">'test'</span>, durable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">channel.basic_publish(exchange=<span class="string">''</span>,</span><br><span class="line">                      routing_key=<span class="string">'test'</span>,</span><br><span class="line">                      body=<span class="string">'Hello World!'</span>,</span><br><span class="line">                      properties=pika.BasicProperties(</span><br><span class="line">                          delivery_mode=<span class="number">1</span>,  <span class="comment"># make message persistent</span></span><br><span class="line">                      ))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[x] sent "hello world!"'</span>)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<h4 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : consumer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 16:56</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.queue_declare(queue=<span class="string">'test'</span>, durable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param ch: 信道</span></span><br><span class="line"><span class="string">    :param method:</span></span><br><span class="line"><span class="string">    :param properties:</span></span><br><span class="line"><span class="string">    :param body: message</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(ch, method, properties, body)</span><br><span class="line"></span><br><span class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(</span><br><span class="line">    queue=<span class="string">'test'</span>, on_message_callback=callback, auto_ack=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="fanout-模式"><a href="#fanout-模式" class="headerlink" title="fanout 模式"></a>fanout 模式</h3><h4 id="producer-1"><a href="#producer-1" class="headerlink" title="producer"></a>producer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : producer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 18:36</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'logs'</span>,</span><br><span class="line">                         exchange_type=<span class="string">'fanout'</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="string">''</span>.join(sys.argv[<span class="number">1</span>:]) <span class="keyword">or</span> <span class="string">'info: hello world!'</span></span><br><span class="line"></span><br><span class="line">channel.basic_publish(exchange=<span class="string">'logs'</span>, routing_key=<span class="string">''</span>, body=message)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[x] sent %r'</span> % message)</span><br><span class="line"></span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<h4 id="consumer-1"><a href="#consumer-1" class="headerlink" title="consumer"></a>consumer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : consumer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 18:41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'logs'</span>, exchange_type=<span class="string">'fanout'</span>)</span><br><span class="line"></span><br><span class="line">result = channel.queue_declare(<span class="string">''</span>, exclusive=<span class="literal">True</span>)  <span class="comment"># exclusive 排他性，唯一性</span></span><br><span class="line"></span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"></span><br><span class="line">print(<span class="string">'queue_name:'</span>, queue_name)</span><br><span class="line"></span><br><span class="line">channel.queue_bind(exchange=<span class="string">'logs'</span>, queue=queue_name)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[*] waiting for logs. To exit press CTRL+c'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">'[x] %r'</span> % body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(</span><br><span class="line">    queue=queue_name, on_message_callback=callback, auto_ack=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="direct-模式"><a href="#direct-模式" class="headerlink" title="direct 模式"></a>direct 模式</h3><h3 id="producer-2"><a href="#producer-2" class="headerlink" title="producer"></a>producer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : producer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 18:49</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'direct_logs'</span>, exchange_type=<span class="string">'direct'</span>)</span><br><span class="line"></span><br><span class="line">log_levels = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'info'</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">' '</span>.join(sys.argv[<span class="number">2</span>:]) <span class="keyword">or</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line">channel.basic_publish(</span><br><span class="line">    exchange=<span class="string">'direct_logs'</span>,</span><br><span class="line">    routing_key=log_levels,</span><br><span class="line">    body=message</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[x] Sent %r:%r'</span> % (log_levels, message))</span><br><span class="line"></span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<h4 id="consumer-2"><a href="#consumer-2" class="headerlink" title="consumer"></a>consumer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : consumer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 18:53</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'direct_logs'</span>, exchange_type=<span class="string">'direct'</span>)</span><br><span class="line"></span><br><span class="line">result = channel.queue_declare(<span class="string">''</span>, exclusive=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"></span><br><span class="line">log_levels = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> log_levels:</span><br><span class="line">    sys.stderr.write(<span class="string">'Usage: %s [info] [warning] [error]\n'</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> severity <span class="keyword">in</span> log_levels:</span><br><span class="line">    channel.queue_bind(</span><br><span class="line">        exchange=<span class="string">'direct_logs'</span>,</span><br><span class="line">        queue=queue_name,</span><br><span class="line">        routing_key=severity</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[*] Waiting for logs. To exit press CTRL+c'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">'[x] %r:%r'</span> % (method.routing_key, body))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(</span><br><span class="line">    queue=queue_name,</span><br><span class="line">    on_message_callback=callback,</span><br><span class="line">    auto_ack=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="topic-模式"><a href="#topic-模式" class="headerlink" title="topic 模式"></a>topic 模式</h3><h4 id="producer-3"><a href="#producer-3" class="headerlink" title="producer"></a>producer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : producer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 19:07</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'topic_logs'</span>, exchange_type=<span class="string">'topic'</span>)</span><br><span class="line"></span><br><span class="line">routing_key = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="string">'anonymous.info'</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">' '</span>.join(sys.argv[<span class="number">2</span>:]) <span class="keyword">or</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line">channel.basic_publish(</span><br><span class="line">    exchange=<span class="string">'topic_logs'</span>,</span><br><span class="line">    routing_key=routing_key,</span><br><span class="line">    body=message</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[x] Sent %r:%r'</span> % (routing_key, message))</span><br><span class="line"></span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<h4 id="consumer-3"><a href="#consumer-3" class="headerlink" title="consumer"></a>consumer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__: MUSIBII</span></span><br><span class="line"><span class="comment"># __email__ : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># __file__  : consumer.py</span></span><br><span class="line"><span class="comment"># __time__  : 2019-04-03 19:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'localhost'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'topic_logs'</span>, exchange_type=<span class="string">'topic'</span>)</span><br><span class="line"></span><br><span class="line">result = channel.queue_declare(<span class="string">''</span>, exclusive=<span class="literal">True</span>)</span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"></span><br><span class="line">binding_keys = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> binding_keys:</span><br><span class="line">    sys.stderr.write(<span class="string">'Usage: %s [binding_key]...\n'</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> binding_key <span class="keyword">in</span> binding_keys:</span><br><span class="line">    channel.queue_bind(</span><br><span class="line">        exchange=<span class="string">'topic_logs'</span>,</span><br><span class="line">        queue=queue_name,</span><br><span class="line">        routing_key=binding_key</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">print(<span class="string">'[*] Waiting for logs. To exit press CTRL+c'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">'[x %r:%r'</span> % (method.routing_key, body))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(</span><br><span class="line">    queue=queue_name,</span><br><span class="line">    on_message_callback=callback,</span><br><span class="line">    auto_ack=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<p>进行消息传递的时候先启动 consumer，这样当生产者发送消息的时候能再消费者后端看到消息记录。接着运行 producer，发布一条消息，在 consumer 的控制台能看到接收的消息。</p>
<h2 id="RabbitMQ-集群"><a href="#RabbitMQ-集群" class="headerlink" title="RabbitMQ 集群"></a>RabbitMQ 集群</h2><p>RabbitMQ 最优秀的功能之一就是内建集群，这个功能设计的目的是允许消费者和生产者在节点崩溃的情况下继续运行，以及通过添加更多的节点来线性扩展消息通信吞吐量。RabbitMQ 内部利用 Erlang 提供的分布式通信框架 OTP 来满足上述需求，使客户端在失去一个 RabbitMQ 节点连接的情况下，依旧能够重新连接到集群中的任何其他节点继续生产、消费。</p>
<h3 id="RabbitMQ-集群中的一些概念"><a href="#RabbitMQ-集群中的一些概念" class="headerlink" title="RabbitMQ 集群中的一些概念"></a>RabbitMQ 集群中的一些概念</h3><p>RabbitMQ 会始终记录以下四种类型的内部元数据：</p>
<ol>
<li><p>队列元数据</p>
<p>包括队列名称和它们的属性，比如是否可持久化、是否自动删除</p>
</li>
<li><p>交换器元数据</p>
<p>交换器名称、类型、属性</p>
</li>
<li><p>绑定元数据</p>
<p>内部是一张表格记录如何将消息路由到队列</p>
</li>
<li><p>vhost 元数据</p>
<p>为 vhost 内部的队列、交换器、绑定提供命名空间和安全属性。</p>
</li>
</ol>
<p>在单一节点中，RabbitMQ 会将所有这些信息存储在内存中，同时将标记为可持久化的队列、交换器、绑定存储在硬盘上。存到硬盘上可以确保队列和交换器在节点重启后能够重建。而在集群模式下同样也提供两种选择：存到硬盘上（独立节点的默认设置），存到内存中。</p>
<p>如果在集群中创建队列，集群只会在单个节点而不是所有节点上创建完整的队列信息（元数据、状态、内容）。结果是只有队列的所有者节点知道有关队列的所有信息，因此当集群节点崩溃时，该节点的的队列和绑定就消失了，并且任何匹配该队列的绑定的新消息也会丢失。</p>
<p>RabbitMQ 集群中可以共享 user、vhost、exchange等，所有的数据和状态都是必须在所有节点上复制的，例外就是上面所说的消息队列。RabbitMQ 节点可以动态的加入到集群中。</p>
<p>当在集群中声明队列、交换器、绑定的时候，这些操作会直到所有集群节点都成功提交元数据变更后才返回。集群中有内存节点和磁盘节点两种类型，内存节点虽然不写入磁盘，但是它的执行比磁盘节点要好。内存节点可以提供出色的性能，磁盘节点能保障配置信息在节点重启后仍然可用，那集群中如何平衡这两者呢？</p>
<p>RabbitMQ 只要求集群中至少有一个磁盘节点，所有其他节点可以是内存节点，当节点加入火离开集群时，它们必须要将该变更通知到至少一个磁盘节点。如果只有一个磁盘节点，刚好又是该节点崩溃了，那么集群可以继续路由消息，但不能创建队列、创建交换器、创建绑定、添加用户、更改权限、添加或删除集群节点。换句话说集群中的唯一磁盘节点崩溃的话，集群仍然可以运行，但知道该节点恢复，否则无法更改任何东西。</p>
<h3 id="RabbitMQ-集群配置和启动"><a href="#RabbitMQ-集群配置和启动" class="headerlink" title="RabbitMQ 集群配置和启动"></a>RabbitMQ 集群配置和启动</h3><p>如果是在一台机器上同时启动多个 RabbitMQ 节点来组建集群的话，只用上面介绍的方式启动第二、第三个节点将会因为节点名称和端口冲突导致启动失败。所以在每次调用 rabbitmq-server 命令前，设置环境变量 RABBITMQ_NODENAME 和 RABBITMQ_NODE_PORT 来明确指定唯一的节点名称和端口。下面的例子端口号从5672开始，每个新启动的节点都加1，节点也分别命名为test_rabbit_1、test_rabbit_2、test_rabbit_3。</p>
<ol>
<li><p>启动第一个节点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RABBITMQ_NODENAME=test_rabbit_1 RABBITMQ_NODE_PORT=<span class="number">5672</span> ./sbin/rabbitmq-server -detached</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动第二个节点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RABBITMQ_NODENAME=test_rabbit_2 RABBITMQ_NODE_PORT=<span class="number">5673</span> ./sbin/rabbitmq-server -detached</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>启动第2个节点前建议将 RabbitMQ 默认激活的插件关掉，否则会存在使用了某个插件的端口号冲突，导致节点启动不成功。</p>
<p>现在第2个节点和第1个节点都是独立节点，它们并不知道其他节点的存在。集群中除第一个节点外后加入的节点需要获取集群中的元数据，所以要先停止 Erlang 节点上运行的 RabbitMQ 应用程序，并重置该节点元数据，再加入并且获取集群的元数据，最后重新启动 RabbitMQ 应用程序。</p>
<ol start="3">
<li><p>停止第二个节点的应用程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n test_rabbit_2 stop_app</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置第二个节点元数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n test_rabbit_2 reset</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二个节点加入到第一个节点组成的集群：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n test_rabbit_2 join_cluster test_rabbit_1@localhost</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动第二个节点的应用程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n test_rabbit_2 start_app</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三个节点的配置类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RABBITMQ_NODENAME=test_rabbit_3 RABBITMQ_NODE_PORT=<span class="number">5674</span> rabbitmq-server -detached</span><br><span class="line">rabbitmqctl -n test_rabbit_3 stop_app</span><br><span class="line">rabbitmqctl -n test_rabbit_3 reset</span><br><span class="line">rabbitmqctl -n test_rabbit_3 join_cluster test_rabbit_1@localhost</span><br><span class="line">rabbitmqctl -n test_rabbit_3 start_app</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="RabbitMQ-集群运维"><a href="#RabbitMQ-集群运维" class="headerlink" title="RabbitMQ 集群运维"></a>RabbitMQ 集群运维</h3><p>停止某个指定的节点，比如停止第二个节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RABBITMQ_NODENAME=test_rabbit_2 rabbitmqctl stop</span><br></pre></td></tr></table></figure>
<p>查看节点三的集群状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n test_rabbit_3 cluster_status</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
  </entry>
  <entry>
    <title>一首沉下来特别好听的歌</title>
    <url>/2018/10/19/%E4%B8%80%E9%A6%96%E6%B2%89%E4%B8%8B%E6%9D%A5%E7%89%B9%E5%88%AB%E5%A5%BD%E5%90%AC%E7%9A%84%E6%AD%8C/</url>
    <content><![CDATA[<p>最近一直在单曲循环 腰乐队的《一个短篇》</p>
<p>《一个短篇》</p>
<p>作词：刘弢</p>
<p>作曲：杨绍昆</p>
<p>旋转 跳跃喔</p>
<p>他感到每条路都在头痛</p>
<p>新鲜的帕特里克满脑子</p>
<p>都是开拓的自慰器</p>
<p>那些男人爱的男人爱市政</p>
<p>市政爱市民 市民爱流连</p>
<p>旋转 跳跃喔</p>
<p>他感到飞鸟们也在头痛</p>
<p>冒牌的帕特里克满脑子</p>
<p>都是稳妥的独角戏</p>
<p>那些男孩爱的男人爱机器</p>
<p>机器爱法律 法律是你</p>
<p>深夜里辛蒂蕾拉们倒下的地方</p>
<p>促成整片血红的高楼</p>
<p>在搞与不搞之间泛起淡淡的哀伤</p>
<p>他的来头已经腐朽</p>
<p>别担心没有哪一首歌能够</p>
<p>把这个现实唱到地狱去</p>
<p>当你还能享有这种静默我的老爷</p>
<p>这烂摊就不会收场</p>
<p>旋转 跳跃吧</p>
<p>他感到连晚风也在头痛</p>
<p>狗娘养的帕特里克满脑子</p>
<p>关于体态的滑翔机</p>
<p>他说过那些女人爱的男人爱萝莉</p>
<p>萝莉爱包包 包包爱货币</p>
<p>他在高级堡垒的方针里走出</p>
<p>带来大会的消息</p>
<p>在幼犬和地皮商的征程里</p>
<p>他是发达的肯定句</p>
<p>等他和他们 他们和所有人之间</p>
<p>都搞不来信任的时候</p>
<p>只要冬和她的姨妈</p>
<p>从没有熄灯的窗口 无声眺望</p>
<p>这夜派对 就要散场</p>
<p>这夜派对 就要散场</p>
<p>这夜派对 就要散场</p>
<p>这夜派对 就要散场</p>
<p>幽暗的最高频道还在</p>
<p>为全城遮盖下一百年的昂贵谜底</p>
<p>他倚靠在令人害羞的礼品堆里</p>
<p>冉冉睡去</p>
<p>幽暗的最高频道还在</p>
<p>为全城遮盖下一百年的昂贵谜底</p>
<p>他依靠在令人害羞的礼品堆里</p>
<p>冉冉睡去</p>
<p>幽暗的最高频道还在</p>
<p>为全城遮盖下一百年的昂贵谜底</p>
<p>他依靠在令人害羞的礼品堆里</p>
<p>冉冉睡去</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>呐喊</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket 初识</title>
    <url>/2018/12/22/websocket-%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h1 id="websocket-初识"><a href="#websocket-初识" class="headerlink" title="websocket 初识"></a>websocket 初识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实很早就知道了 websocket 这个概念了，像现在大火的直播等使用的就是 websocket。之前找爬虫工作，对面问我爬过 websocket 网站没，很汗颜，那时候还只是听说过。现在想了解一下，基于 JavaScript 语言。</p>
<h2 id="Websocket-是什么"><a href="#Websocket-是什么" class="headerlink" title="Websocket 是什么"></a>Websocket 是什么</h2><p>websocket 是一种网络通信协议，运行在 TCP 协议之上。</p>
<p>对于传统的 HTTP 协议来说，通信只能由客户端发起，然后服务端响应。HTTP 协议做不到服务器制动向客户端推送信息。HTTP 协议的这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。只能使用‘’轮询‘’：（非阻塞通信），每隔一段时候，就发出一个询问，了解服务器有没有新的消息。轮询的效率低，非常浪费资源。</p>
<p>websocket 协议在2008年诞生，它的最大特点就是服务器可以主动向客户端推送消息，客户端也可以主动向服务器发送消息，是真正的双向平等对话，属于服务器推送技术的一种。websocket 允许服务器端与客户端进行全双工通信。其特点如下：</p>
<ul>
<li>建立在 TCP 协议之上，服务端的实现比较容易；</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器；</li>
<li>数据个数比较轻量，性能开销小，通信高效；</li>
<li>可以发送文本，也可以发送二进制数据；</li>
<li>没有同源限制，客户端可以与任意服务器通信，完全可以取代 AJAX；</li>
<li>协议标识符是 ws（加密就是 wss），服务器网址为 URL。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws:<span class="comment">//example.com:80/some/path</span></span><br></pre></td></tr></table></figure>
<h2 id="websocket-握手"><a href="#websocket-握手" class="headerlink" title="websocket 握手"></a>websocket 握手</h2><p>浏览器发出的 websocket 握手请求类似于下面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Connection: Upgrade</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Host: example.com</span><br><span class="line">Origin: <span class="literal">null</span></span><br><span class="line">Sec-WebSocket-Key: ...</span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span></span><br></pre></td></tr></table></figure>
<p>这是数据头，HTTP1.1协议规定，Upgrade 字段表示将通信协议从 HTTP/1.1转向该字段指定的协议。Connection 字段表示浏览器通知服务器，如果可以的话就升级到 WebScoket 协议。Origin 字段用于提供请求发出的域名，供服务器验证是否许可的范围内（服务器可以不验证）。Sec-Websocket-Key 则是用于握手协议的密钥，是 Base64编码的16字节随机字符串（可以反解）。</p>
<p>服务器的 WebSocket 回应如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Sec-WebSocket-Accept: ...</span><br><span class="line">Sec-WebSocket-Origin: <span class="literal">null</span></span><br><span class="line">Sec-WebSocket-Location: ws:<span class="comment">//exammple.com/</span></span><br></pre></td></tr></table></figure>
<p>服务器同样用 Connection 字段通知浏览器，可以改变协议为 Websocket，Sec-WebSocket-Accept 字段是服务器在浏览器提供的 Sec-Webscoket-Key 字符串后面，添加 RFC6465（不了解）标准规定的‘’258EAFA5-E914-47DA-95CA-C5AB0DC85B11‘’字符串，然后再取 SHA-1的哈希值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了 Websocket 请求。Sec-WebSocket-Location 字段表示进行通信的 Websocket 网址。</p>
<p>完成握手以后，WebSocket 协议就在 TCP 协议之上，开始传送数据。</p>
<h2 id="客户端的示例"><a href="#客户端的示例" class="headerlink" title="客户端的示例"></a>客户端的示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://echo.websocket.org'</span>); <span class="comment">// 网址不可达</span></span><br><span class="line"></span><br><span class="line">ws.open = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection open...'</span>);</span><br><span class="line">    ws.send(<span class="string">'Hello WebSocket!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Recevied Message: '</span> + ev.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection closed.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h2><p>浏览器对 WebSocket 协议的处理，无非是三件事：</p>
<ul>
<li>建立连接和断开连接；</li>
<li>发送数据和接收数据；</li>
<li>处理错误。</li>
</ul>
<h3 id="构造函数-WebSocket"><a href="#构造函数-WebSocket" class="headerlink" title="构造函数 WebSocket"></a>构造函数 WebSocket</h3><p>WebSocket 对象作为一个构造函数，用于新建 WebSocket实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span><br></pre></td></tr></table></figure>
<p>执行上面语句后，客户端就会与服务器进行连接。</p>
<h3 id="WebSocket-readyState"><a href="#WebSocket-readyState" class="headerlink" title="WebSocket.readyState"></a>WebSocket.readyState</h3><p>跟 HTTP 协议一样，WebSocket 也有自己的状态码：</p>
<ul>
<li>CONNECTING：值为0，表示正在连接；</li>
<li>OPEN：值为1，表示连接成功，可以进行通信；</li>
<li>CLOSING：值为2，表示连接正在关闭；</li>
<li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li>
</ul>
<p>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ws.readyState) &#123;</span><br><span class="line">    <span class="keyword">case</span> WebSocket.CONNECTING:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WebSocket.OPEN:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WebSocket.CLOSING:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WebSocket.CLOSED:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// this never happend</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onopen"><a href="#webSocket-onopen" class="headerlink" title="webSocket.onopen"></a>webSocket.onopen</h3><p>实例对象的 onopen 属性，用于指定连接成功后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ws.send(<span class="string">'Hello MUSIBII'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要指定多个回调函数，可以使用 addEventListener 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.addEventListener(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ws.send(<span class="string">'Hello MUSIBII'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onclose"><a href="#webSocket-onclose" class="headerlink" title="webSocket.onclose"></a>webSocket.onclose</h3><p>实例对象的 onclose 属性，用于指定连接关闭后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = ev.code;</span><br><span class="line">    <span class="keyword">var</span> reason = ev.reason;</span><br><span class="line">    <span class="keyword">var</span> wasClean = ev.wasClean;</span><br><span class="line">    <span class="comment">// handle close event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.addEnentListener(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = ev.clde;</span><br><span class="line">    <span class="keyword">var</span> reason = ev.reason;</span><br><span class="line">    <span class="keyword">var</span> wasClean = ev.wasClean;</span><br><span class="line">    <span class="comment">// handle close event</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onmessage"><a href="#webSocket-onmessage" class="headerlink" title="webSocket.onmessage"></a>webSocket.onmessage</h3><p>实例对象的 onmessage 属性，用于指定收到服务器数据后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = ev.data;</span><br><span class="line">    <span class="comment">// handle data</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.addEvendListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = ev.data;</span><br><span class="line">    <span class="comment">// handle data</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意：服务器的数据可能是文本，也可能是二进制数据（blob 对象或 Arraybuffer 对象）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> ev.data === <span class="built_in">String</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Received data string'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ev.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = ev.data;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Received arraybuffer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了动态判断收到的数据类型，也可以使用 binaryType 属性，显式指定收到的二进制数据类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 收到的是 blob 数据</span></span><br><span class="line">ws.binaryType = <span class="string">'blob'</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.data.size);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到的是 ArrayBuffer 数据</span></span><br><span class="line">ws.binaryType = <span class="string">'arraybuffer'</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.data.byteLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-send"><a href="#webSocket-send" class="headerlink" title="webSocket.send()"></a>webSocket.send()</h3><p>实例对象的 send() 方法用于向服务器发送数据。</p>
<p>发送文本的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.send(<span class="string">'your message'</span>);</span><br></pre></td></tr></table></figure>
<p>发送 Blob 对象的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'input[type = "file"]'</span>).files[<span class="number">0</span>];</span><br><span class="line">ws.send(file);</span><br></pre></td></tr></table></figure>
<p>发送 ArrayBuffer 对象的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Senging canvas ImageData as ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(img.data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.length; i++) &#123;</span><br><span class="line">    binary[i] = img.data[i];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.seng(binary.buffer);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-bufferedAmout"><a href="#webSocket-bufferedAmout" class="headerlink" title="webSocket.bufferedAmout"></a>webSocket.bufferedAmout</h3><p>实例对象的 bufferedAmout 属性，表示还有多少字节的二级制数据没有发送出去。它可以用来判断发送是否结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">100000</span>);</span><br><span class="line">socket.send(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (socket.bufferedAmount === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送完毕</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 发送没有结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onerror"><a href="#webSocket-onerror" class="headerlink" title="webSocket.onerror"></a>webSocket.onerror</h3><p>实例对象的 onerror 属性，用于指定报错时的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle error event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle error enent</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>websocket</category>
      </categories>
  </entry>
  <entry>
    <title>分布式图片存储系统fastDFS在ubunt上的部署</title>
    <url>/2019/03/10/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FfastDFS%E5%9C%A8ubunt%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>wsgi 协议</title>
    <url>/2019/01/07/wsgi%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="wsgi-协议"><a href="#wsgi-协议" class="headerlink" title="wsgi 协议"></a>wsgi 协议</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来没打算这么早就学习 wsgi 的，因为想要学习python 是如何处理网络请求的绕不开 wsgi，所以只好先学习一下 wsgi。先对 wsgi 有个印象，到了学习 Django 运行方式以及如何处理网络请求数据的时候就会感觉很顺畅了。本文参考<a href="https://www.letiantian.me/2015-09-10-understand-python-wsgi/" target="_blank" rel="noopener"></a></p>
<h2 id="什么是-WSGI"><a href="#什么是-WSGI" class="headerlink" title="什么是 WSGI"></a>什么是 WSGI</h2><p>wsgi 的全称是Web Server Gateway Interface，这是一个规范，描述了 web server 如何与 web application 交互、web application 如何处理请求。该规范的具体描述在 PEP3333。WSGI 既要实现 web server，也要实现 web application。在 Django 中的 app 其实就是 web application，而 web server其实在使用命令行输入<code>python manage.py runserver</code>或者使用 pycharm 开启 Django 项目的时候就把<code>runserver</code>当做参数传给了 <code>manage.py</code>里面</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fyz6mjhkyfj31b30u0tr5.jpg" alt></p>
<p>经过判断然后执行<code>execute_from_command_line(sys.argv)</code>，sys.argv就是 runserver命令，进入该函数，发现执行了<code>utility.execute()</code>函数，进入函数查看源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given the command-line arguments, this figures out which subcommand is</span></span><br><span class="line"><span class="string">    being run, creates a parser appropriate to that command, and runs it.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subcommand = self.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        subcommand = <span class="string">'help'</span>  <span class="comment"># Display help if no arguments were given.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Preprocess options to extract --settings and --pythonpath.</span></span><br><span class="line">    <span class="comment"># These options could affect the commands that are available, so they</span></span><br><span class="line">    <span class="comment"># must be processed early.</span></span><br><span class="line">    parser = CommandParser(<span class="literal">None</span>, usage=<span class="string">"%(prog)s subcommand [options] [args]"</span>, add_help=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--settings'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--pythonpath'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'args'</span>, nargs=<span class="string">'*'</span>)  <span class="comment"># catch-all</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        options, args = parser.parse_known_args(self.argv[<span class="number">2</span>:])</span><br><span class="line">        handle_default_options(options)</span><br><span class="line">    <span class="keyword">except</span> CommandError:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># Ignore any option errors at this point.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        settings.INSTALLED_APPS</span><br><span class="line">    <span class="keyword">except</span> ImproperlyConfigured <span class="keyword">as</span> exc:</span><br><span class="line">        self.settings_exception = exc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> settings.configured:</span><br><span class="line">        <span class="comment"># Start the auto-reloading dev server even if the code is broken.</span></span><br><span class="line">        <span class="comment"># The hardcoded condition is a code smell but we can't rely on a</span></span><br><span class="line">        <span class="comment"># flag on the command class because we haven't located it yet.</span></span><br><span class="line">        <span class="keyword">if</span> subcommand == <span class="string">'runserver'</span> <span class="keyword">and</span> <span class="string">'--noreload'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.argv:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                autoreload.check_errors(django.setup)()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="comment"># The exception will be raised later in the child process</span></span><br><span class="line">                <span class="comment"># started by the autoreloader. Pretend it didn't happen by</span></span><br><span class="line">                <span class="comment"># loading an empty list of applications.</span></span><br><span class="line">                apps.all_models = defaultdict(OrderedDict)</span><br><span class="line">                apps.app_configs = OrderedDict()</span><br><span class="line">                apps.apps_ready = apps.models_ready = apps.ready = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Remove options not compatible with the built-in runserver</span></span><br><span class="line">                <span class="comment"># (e.g. options for the contrib.staticfiles' runserver).</span></span><br><span class="line">                <span class="comment"># Changes here require manually testing as described in</span></span><br><span class="line">                <span class="comment"># #27522.</span></span><br><span class="line">                _parser = self.fetch_command(<span class="string">'runserver'</span>).create_parser(<span class="string">'django'</span>, <span class="string">'runserver'</span>)</span><br><span class="line">                _options, _args = _parser.parse_known_args(self.argv[<span class="number">2</span>:])</span><br><span class="line">                <span class="keyword">for</span> _arg <span class="keyword">in</span> _args:</span><br><span class="line">                    self.argv.remove(_arg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># In all other cases, django.setup() is required to succeed.</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            django.setup()</span><br><span class="line"></span><br><span class="line">    self.autocomplete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> subcommand == <span class="string">'help'</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'--commands'</span> <span class="keyword">in</span> args:</span><br><span class="line">            sys.stdout.write(self.main_help_text(commands_only=<span class="literal">True</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(options.args) &lt; <span class="number">1</span>:</span><br><span class="line">            sys.stdout.write(self.main_help_text() + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.fetch_command(options.args[<span class="number">0</span>]).print_help(self.prog_name, options.args[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># Special-cases: We want 'django-admin --version' and</span></span><br><span class="line">    <span class="comment"># 'django-admin --help' to work, for backwards compatibility.</span></span><br><span class="line">    <span class="keyword">elif</span> subcommand == <span class="string">'version'</span> <span class="keyword">or</span> self.argv[<span class="number">1</span>:] == [<span class="string">'--version'</span>]:</span><br><span class="line">        sys.stdout.write(django.get_version() + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">elif</span> self.argv[<span class="number">1</span>:] <span class="keyword">in</span> ([<span class="string">'--help'</span>], [<span class="string">'-h'</span>]):</span><br><span class="line">        sys.stdout.write(self.main_help_text() + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.fetch_command(subcommand).run_from_argv(self.argv)</span><br></pre></td></tr></table></figure>
<p>源码太长了。。。我把关键地方抠出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> settings.configured:</span><br><span class="line">    <span class="comment"># Start the auto-reloading dev server even if the code is broken.</span></span><br><span class="line">    <span class="comment"># The hardcoded condition is a code smell but we can't rely on a</span></span><br><span class="line">    <span class="comment"># flag on the command class because we haven't located it yet.</span></span><br><span class="line">    <span class="keyword">if</span> subcommand == <span class="string">'runserver'</span> <span class="keyword">and</span> <span class="string">'--noreload'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.argv:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            autoreload.check_errors(django.setup)()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="comment"># The exception will be raised later in the child process</span></span><br><span class="line">            <span class="comment"># started by the autoreloader. Pretend it didn't happen by</span></span><br><span class="line">            <span class="comment"># loading an empty list of applications.</span></span><br><span class="line">            apps.all_models = defaultdict(OrderedDict)</span><br><span class="line">            apps.app_configs = OrderedDict()</span><br><span class="line">            apps.apps_ready = apps.models_ready = apps.ready = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Remove options not compatible with the built-in runserver</span></span><br><span class="line">            <span class="comment"># (e.g. options for the contrib.staticfiles' runserver).</span></span><br><span class="line">            <span class="comment"># Changes here require manually testing as described in</span></span><br><span class="line">            <span class="comment"># #27522.</span></span><br><span class="line">            _parser = self.fetch_command(<span class="string">'runserver'</span>).create_parser(<span class="string">'django'</span>, <span class="string">'runserver'</span>)</span><br><span class="line">            _options, _args = _parser.parse_known_args(self.argv[<span class="number">2</span>:])</span><br><span class="line">            <span class="keyword">for</span> _arg <span class="keyword">in</span> _args:</span><br><span class="line">                self.argv.remove(_arg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In all other cases, django.setup() is required to succeed.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        django.setup()</span><br></pre></td></tr></table></figure>
<p>这里也是注释最多的地方，可以看到有<code>runserver</code>这条命令，然后这里面在经过一系列的判断最后要执行最后一行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.fetch_command(subcommand).run_from_argv(self.argv)</span><br></pre></td></tr></table></figure>
<p>这行代码等学习 Django 处理流程的时候在详细解释，反正只要知道目前经过这个函数的执行，Django 的 web server 成功运行了。</p>
<p>实现了 WSGI 的模块/库有 wsgiref（python 内置，下面也是用这个来举例）、werkzeug.serving、twisted.web等。</p>
<p>当前运行在 wsgi 之上的 web 框架有 Bottle、Flask、Django 等。WSGI server 所做的工作仅仅是将客户端收到的请求传递给 WSGI application，然后将 WSGI application 的返回值作为相应传给客户端。WSGI application 可以是栈式的，这个栈的中间部分叫做<code>中间件</code>，两端是必须要实现的 application 和 server。所以对客户端来说，中间件扮演服务器；对服务器来说，中间件扮演客户端。在 Django 中wsgi 收到的数据用 request对象表示，要传给客户端的数据用 Httpresponse对象表示。</p>
<h2 id="搭建一个-wsgi-服务"><a href="#搭建一个-wsgi-服务" class="headerlink" title="搭建一个 wsgi 服务"></a>搭建一个 wsgi 服务</h2><p>在上章节说了 python 有个内置的 WSGI 库叫 wsgiref。</p>
<p>首先看下项目结构：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyz9diklxej30fo072jrx.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># templates为模板（HTML）文件夹</span></span><br><span class="line"><span class="comment"># start.py 为项目入口，</span></span><br><span class="line"><span class="comment"># urls.py 为路由配置</span></span><br><span class="line"><span class="comment"># views.py 为具体处理路由逻辑代码</span></span><br></pre></td></tr></table></figure>
<h3 id="start-文件"><a href="#start-文件" class="headerlink" title="start 文件"></a>start 文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start.py文件</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> urls <span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(env, response)</span>:</span></span><br><span class="line">    <span class="comment"># 在这里，</span></span><br><span class="line">    print(env)</span><br><span class="line">    route = env[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    print(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置状态码与响应头</span></span><br><span class="line">    response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置错误处理</span></span><br><span class="line">    data = urls[<span class="string">'/error'</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置路由处理</span></span><br><span class="line">    <span class="keyword">if</span> route <span class="keyword">in</span> urls:</span><br><span class="line">        data = urls[route]()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 返回二进制响应体</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建服务器对象</span></span><br><span class="line">    server = make_server(<span class="string">''</span>, <span class="number">8808</span>, app)</span><br><span class="line">    print(<span class="string">'服务：http://localhost:8808'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 服务保持运行状态</span></span><br><span class="line">    server.serve_forever()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># WSGI server 是一个 web server，其处理一个 HTTP 请求的逻辑如下：</span></span><br><span class="line">	<span class="comment"># iterable = app(env, response)</span></span><br><span class="line">	<span class="comment">#     for date in iterable:</span></span><br><span class="line">    <span class="comment">#         send data to client</span></span><br></pre></td></tr></table></figure>
<p>其实这个模块底层使用了 sockserver 模块，我前面的博客也有介绍。经过 <code>make_server</code>就成功开启了<code>wsgi server</code>，然后<code>server_forever()</code>是为了将服务器持续接收客户端请求，采用的是轮询方法，该方法里面的参数 <code>poll_interval=0.5</code>，采用的是0.5秒轮询一次，轮询采用的是 <code>selector</code>学名叫多路复用技术。</p>
<h3 id="urls-文件"><a href="#urls-文件" class="headerlink" title="urls 文件"></a>urls 文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py文件</span></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> *</span><br><span class="line">urls = &#123;</span><br><span class="line">    <span class="string">'/index'</span>: index, <span class="comment"># 函数地址</span></span><br><span class="line">    <span class="string">'/error'</span>: error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文件就是处理路由的，然后将对应的路由映射到相应的逻辑处理函数。</p>
<h3 id="views-文件"><a href="#views-文件" class="headerlink" title="views 文件"></a>views 文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理请求的功能函数(处理结果返回的都是页面 =&gt; 功能函数)</span></span><br><span class="line"><span class="comment"># 利用 jinja2来渲染模板，将后台数据传给前台</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jinjia2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理主页请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'templates/index.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    tem = Template(dt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将后台数据通过模板渲染功能渲染传给前台页面</span></span><br><span class="line">    resp = tem.render(name=<span class="string">'主页'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理图标请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ico</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dt = f.read()</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理错误请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b'404'</span></span><br></pre></td></tr></table></figure>
<h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><p>该文件夹里面放的伪要返回给前端相关资源，比如index.html</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>index 测试</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fyzamp4hn6j30zg0840ty.jpg" alt></p>
<ul>
<li>error 测试</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fyzan5nck4j30zu05qgmp.jpg" alt></p>
<h2 id="WSGI-application接口"><a href="#WSGI-application接口" class="headerlink" title="WSGI application接口"></a>WSGI application接口</h2><p>在上面wsgi 服务中的 app 就是 wsgi 中的 application，该接口应该实现为一个可调用对象，例如函数、方法、类、含<code>__call__</code>方法的实例。这个可调用对象可以接收两个参数：</p>
<ul>
<li>一个字典，该字典可以包含了客户端请求的信息以及其他信息，可以认为是请求上下文，一般叫做 environment（在这里我取名为 env）；</li>
<li>一个用于发送 HTTP 状态码与响应头的回调函数。（具体怎么回调的还不清楚）</li>
</ul>
<p>同时，可调用对象的返回值是响应体（response body），响应正文是可迭代的、并包含了多个字符串。（加了中括号可以减少迭代次数，提高效率）</p>
<p>把上面的 app 代码拷下来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(env, response)</span>:</span></span><br><span class="line">    <span class="comment"># 在这里，</span></span><br><span class="line">    print(env)</span><br><span class="line">    route = env[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    print(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置状态码与响应头</span></span><br><span class="line">    response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置错误处理</span></span><br><span class="line">    data = urls[<span class="string">'/error'</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置路由处理</span></span><br><span class="line">    <span class="keyword">if</span> route <span class="keyword">in</span> urls:</span><br><span class="line">        data = urls[route]()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 返回二进制响应体</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br></pre></td></tr></table></figure>
<p>当我对服务端发起请求时，会打印出 env，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'PATH'</span>: <span class="string">'/Users/jingxing/Virtualenv/py3-env1/bin:/Users/jingxing/.nvm/versions/node/v4.9.1/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/python_study/mongodb/bin://Volumes/python_study/mongodb/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/python_study/Applications/mongodb-osx-x86_64-3.6.3/bin::/usr/local/mysql/bin'</span>, <span class="string">'PS1'</span>: <span class="string">'(py3-env1) '</span>, <span class="string">'VERSIONER_PYTHON_VERSION'</span>: <span class="string">'2.7'</span>, <span class="string">'LS_OPTIONS'</span>: <span class="string">'--color=auto'</span>, <span class="string">'LOGNAME'</span>: <span class="string">'jingxing'</span>, <span class="string">'XPC_SERVICE_NAME'</span>: <span class="string">'com.jetbrains.pycharm.23248'</span>, <span class="string">'PWD'</span>: <span class="string">'/Users/jingxing/django_project/day01'</span>, <span class="string">'PYCHARM_HOSTED'</span>: <span class="string">'1'</span>, <span class="string">'NODE_PATH'</span>: <span class="string">'/Users/jingxing/.nvm/versions/node/v4.9.1/lib/node_modules'</span>, <span class="string">'PYCHARM_MATPLOTLIB_PORT'</span>: <span class="string">'62845'</span>, <span class="string">'PYTHONPATH'</span>: <span class="string">'/Users/jingxing/django_project/day01:/Users/jingxing/django_project/day04:/Users/jingxing/django_project/day02:/Users/jingxing/PycharmProjects/youku/youkusecond:/Users/jingxing/django_project/day03:/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend'</span>, <span class="string">'NVM_CD_FLAGS'</span>: <span class="string">''</span>, <span class="string">'NVM_DIR'</span>: <span class="string">'/Users/jingxing/.nvm'</span>, <span class="string">'SHELL'</span>: <span class="string">'/bin/bash'</span>, <span class="string">'LSCOLORS'</span>: <span class="string">'CxfxcxdxbxegedabagGxGx'</span>, <span class="string">'PYTHONIOENCODING'</span>: <span class="string">'UTF-8'</span>, <span class="string">'VERSIONER_PYTHON_PREFER_32_BIT'</span>: <span class="string">'no'</span>, <span class="string">'USER'</span>: <span class="string">'jingxing'</span>, <span class="string">'CLICOLOR'</span>: <span class="string">'Yes'</span>, <span class="string">'TMPDIR'</span>: <span class="string">'/var/folders/yl/3drd7wf93f90sfkgpc2zg9cr0000gn/T/'</span>, <span class="string">'SSH_AUTH_SOCK'</span>: <span class="string">'/private/tmp/com.apple.launchd.ujA3r16JUC/Listeners'</span>, <span class="string">'VIRTUAL_ENV'</span>: <span class="string">'/Users/jingxing/Virtualenv/py3-env1'</span>, <span class="string">'XPC_FLAGS'</span>: <span class="string">'0x0'</span>, <span class="string">'PYTHONUNBUFFERED'</span>: <span class="string">'1'</span>, <span class="string">'__CF_USER_TEXT_ENCODING'</span>: <span class="string">'0x1F5:0x0:0x0'</span>, <span class="string">'Apple_PubSub_Socket_Render'</span>: <span class="string">'/private/tmp/com.apple.launchd.gOrXw3Il2u/Render'</span>, <span class="string">'LC_CTYPE'</span>: <span class="string">'en_US.UTF-8'</span>, <span class="string">'NVM_BIN'</span>: <span class="string">'/Users/jingxing/.nvm/versions/node/v4.9.1/bin'</span>, <span class="string">'HOME'</span>: <span class="string">'/Users/jingxing'</span>, <span class="string">'SERVER_NAME'</span>: <span class="string">'jingxingdeMacBook-Pro.local'</span>, <span class="string">'GATEWAY_INTERFACE'</span>: <span class="string">'CGI/1.1'</span>, <span class="string">'SERVER_PORT'</span>: <span class="string">'8808'</span>, <span class="string">'REMOTE_HOST'</span>: <span class="string">''</span>, <span class="string">'CONTENT_LENGTH'</span>: <span class="string">''</span>, <span class="string">'SCRIPT_NAME'</span>: <span class="string">''</span>, <span class="string">'SERVER_PROTOCOL'</span>: <span class="string">'HTTP/1.1'</span>, <span class="string">'SERVER_SOFTWARE'</span>: <span class="string">'WSGIServer/0.2'</span>, <span class="string">'REQUEST_METHOD'</span>: <span class="string">'GET'</span>, <span class="string">'PATH_INFO'</span>: <span class="string">'/'</span>, <span class="string">'QUERY_STRING'</span>: <span class="string">''</span>, <span class="string">'REMOTE_ADDR'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'CONTENT_TYPE'</span>: <span class="string">'text/plain'</span>, <span class="string">'HTTP_HOST'</span>: <span class="string">'127.0.0.1:8808'</span>, <span class="string">'HTTP_CONNECTION'</span>: <span class="string">'keep-alive'</span>, <span class="string">'HTTP_UPGRADE_INSECURE_REQUESTS'</span>: <span class="string">'1'</span>, <span class="string">'HTTP_USER_AGENT'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>, <span class="string">'HTTP_ACCEPT'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>, <span class="string">'HTTP_ACCEPT_ENCODING'</span>: <span class="string">'gzip, deflate, br'</span>, <span class="string">'HTTP_ACCEPT_LANGUAGE'</span>: <span class="string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>, <span class="string">'HTTP_COOKIE'</span>: <span class="string">'csrftoken=YjPgsyb6TW4fen2fxjy6DHzZYFlBU4SsAuE9AVqWRjLIhymeAlukqjVBpL7KTPPH'</span>, <span class="string">'wsgi.input'</span>: &lt;_io.BufferedReader name=<span class="number">7</span>&gt;, <span class="string">'wsgi.errors'</span>: &lt;_io.TextIOWrapper name=<span class="string">'&lt;stderr&gt;'</span> mode=<span class="string">'w'</span> encoding=<span class="string">'UTF-8'</span>&gt;, <span class="string">'wsgi.version'</span>: (<span class="number">1</span>, <span class="number">0</span>), <span class="string">'wsgi.run_once'</span>: <span class="literal">False</span>, <span class="string">'wsgi.url_scheme'</span>: <span class="string">'http'</span>, <span class="string">'wsgi.multithread'</span>: <span class="literal">True</span>, <span class="string">'wsgi.multiprocess'</span>: <span class="literal">False</span>, <span class="string">'wsgi.file_wrapper'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">wsgiref</span>.<span class="title">util</span>.<span class="title">FileWrapper</span>'&gt;&#125;</span></span><br></pre></td></tr></table></figure>
<p>这些参数值得关注的为：</p>
<ul>
<li>PATH_INFO：路由信息；</li>
<li>SERVER_PORT：端口；</li>
<li>HTTP_HOST：ip；</li>
<li>SERVER_PROTOCOL：服务器端通信协议</li>
</ul>
<h3 id="可迭代响应"><a href="#可迭代响应" class="headerlink" title="可迭代响应"></a>可迭代响应</h3><p>在 app 中向客户端返回数据时，写的为</p>
<p><code>return [data]</code>，如果改为<code>return date</code>，这将会导致 WSGI 程序的响应变慢。原因是字符串<code>date</code>也是可迭代的，它的每一次迭代只能得到 1bytes 的数据量，这也意味着每一次只向客户端发送1bytes 的数据，直到发送完毕为止。所以推荐使用<code>return [data]</code>。这里的数据是怎么返回的目前还不清楚，保留疑问。。。</p>
<p>如果可迭代响应含有多个字符串，那么<code>Content-Length</code>应该是这些字符串长度之和。</p>
<h3 id="解析-GET-请求"><a href="#解析-GET-请求" class="headerlink" title="解析 GET 请求"></a>解析 GET 请求</h3><p>运行 start.py文件，在浏览器中访问<code>http://localhost:8808/?id=1&amp;name=musibii</code>，可以在响应内容中找到到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'QUERY_STRING'</span>: <span class="string">'id=1&amp;name=musibii'</span></span><br><span class="line"><span class="string">'REQUEST_METHOD'</span>: <span class="string">'GET'</span></span><br></pre></td></tr></table></figure>
<p><code>cgi.parse_qs()</code>函数可以很方便的处理 QUERY_STRING，同时需要<code>cgi.escape()</code>处理特殊字符以防止脚本注入，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> parse_qs, escape</span><br><span class="line"></span><br><span class="line">QUERY_STRING = <span class="string">'id=1&amp;name=musibii'</span></span><br><span class="line">d = parse_qs(QUERY_STRING)</span><br><span class="line">print(d.get(<span class="string">'id'</span>, [<span class="string">''</span>])[<span class="number">0</span>]) <span class="comment"># ['']是默认值，如果在QUERY_STRING中没找到则返回默认值</span></span><br><span class="line">print(d.get(<span class="string">'name'</span>,[]))</span><br><span class="line"></span><br><span class="line">print(escape(<span class="string">'&lt;script&gt;alert(123);&lt;/script&gt;'</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="string">'musibii'</span>]</span><br><span class="line">&amp;lt;script&amp;gt;alert(<span class="number">123</span>);&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure>
<h2 id="处理-GET-请求的动态网页"><a href="#处理-GET-请求的动态网页" class="headerlink" title="处理 GET 请求的动态网页"></a>处理 GET 请求的动态网页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> parse_qs, escape</span><br><span class="line"></span><br><span class="line"><span class="comment"># html中 form 的 method 默认为 get，action 是当前页面</span></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">   &lt;form method="get" action=""&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">           Age: &lt;input type="text" name="age" value="%(age)s"&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">            Hobbies:</span></span><br><span class="line"><span class="string">            &lt;input</span></span><br><span class="line"><span class="string">                name="hobbies" type="checkbox" value="software"</span></span><br><span class="line"><span class="string">                %(checked-software)s</span></span><br><span class="line"><span class="string">            &gt; Software</span></span><br><span class="line"><span class="string">            &lt;input</span></span><br><span class="line"><span class="string">                name="hobbies" type="checkbox" value="tunning"</span></span><br><span class="line"><span class="string">                %(checked-tunning)s</span></span><br><span class="line"><span class="string">            &gt; Auto Tunning</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="submit" value="Submit"&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">        Age: %(age)s&lt;br&gt;</span></span><br><span class="line"><span class="string">        Hobbies: %(hobbies)s</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(env, response)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析QUERY_STRING</span></span><br><span class="line">    d = parse_qs(env[<span class="string">'QUERY_STRING'</span>])</span><br><span class="line">    </span><br><span class="line">    age = d.get(<span class="string">'age'</span>, [<span class="string">''</span>])[<span class="number">0</span>] <span class="comment"># 返回 age 对应的值</span></span><br><span class="line">    hobbies = d.get(<span class="string">'hobbies'</span>, []) <span class="comment"># 以 list 形式返回所有的 hobbies</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 防止脚本注入</span></span><br><span class="line">    age = escape(age)</span><br><span class="line">    hobbies = [escape(hobby) <span class="keyword">for</span> hobby <span class="keyword">in</span> hobbies]</span><br><span class="line">    </span><br><span class="line">    response_body = html% &#123;</span><br><span class="line">        <span class="string">'checked-software'</span>: (<span class="string">''</span>, <span class="string">'checket'</span>)[<span class="string">'software'</span> <span class="keyword">in</span> hobbies],</span><br><span class="line">        <span class="string">'checked-tunning'</span>: (<span class="string">''</span>, <span class="string">'checked'</span>)[<span class="string">'tunning'</span> <span class="keyword">in</span> hobbies],</span><br><span class="line">        <span class="string">'age'</span>: age <span class="keyword">or</span> <span class="string">'Empty'</span>,</span><br><span class="line">        <span class="string">'hobbies'</span>: <span class="string">','</span>.join(hobbies <span class="keyword">or</span> [<span class="string">'No Hobbies?'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    </span><br><span class="line">    response_body = [</span><br><span class="line">        (<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>),</span><br><span class="line">        (<span class="string">'Content-Length'</span>, str(len(response_body)))</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [response_body]</span><br><span class="line"></span><br><span class="line">httpd = make_server(<span class="string">''</span>, <span class="number">8088</span>, app)</span><br><span class="line"></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<h2 id="处理-POST-请求的动态网页"><a href="#处理-POST-请求的动态网页" class="headerlink" title="处理 POST 请求的动态网页"></a>处理 POST 请求的动态网页</h2><p>对于POST 请求，查询字符串是放在 HTTP 请求正文（request body）末尾的，不是显式在 url 中。请求正文在 env 字典变量中键为<code>wsgi.input</code>对应的值中，这是一个类似 file 的变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'wsgi.input'</span>: &lt;_io.BufferedReader name=<span class="number">7</span>&gt;</span><br></pre></td></tr></table></figure>
<p>我看源码看晕了还是没找到这个 name 具体是什么意思，经过 google 猜测这个应该是个标识符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> parse_qs, escape</span><br><span class="line"></span><br><span class="line"><span class="comment"># html中form的method是post</span></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">   &lt;form method="post" action=""&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">           Age: &lt;input type="text" name="age" value="%(age)s"&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">            Hobbies:</span></span><br><span class="line"><span class="string">            &lt;input</span></span><br><span class="line"><span class="string">                name="hobbies" type="checkbox" value="software"</span></span><br><span class="line"><span class="string">                %(checked-software)s</span></span><br><span class="line"><span class="string">            &gt; Software</span></span><br><span class="line"><span class="string">            &lt;input</span></span><br><span class="line"><span class="string">                name="hobbies" type="checkbox" value="tunning"</span></span><br><span class="line"><span class="string">                %(checked-tunning)s</span></span><br><span class="line"><span class="string">            &gt; Auto Tunning</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="submit" value="Submit"&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">        Age: %(age)s&lt;br&gt;</span></span><br><span class="line"><span class="string">        Hobbies: %(hobbies)s</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CONTENT_LENGTH 可能为空，或者没有</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request_body_size = int(environ.get(<span class="string">'CONTENT_LENGTH'</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">except</span> (ValueError):</span><br><span class="line">        request_body_size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    request_body = environ[<span class="string">'wsgi.input'</span>].read(request_body_size)</span><br><span class="line">    d = parse_qs(request_body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    age = d.get(<span class="string">'age'</span>, [<span class="string">''</span>])[<span class="number">0</span>] </span><br><span class="line">    hobbies = d.get(<span class="string">'hobbies'</span>, []) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转义，防止脚本注入</span></span><br><span class="line">    age = escape(age)</span><br><span class="line">    hobbies = [escape(hobby) <span class="keyword">for</span> hobby <span class="keyword">in</span> hobbies]</span><br><span class="line"></span><br><span class="line">    response_body = html % &#123; </span><br><span class="line">        <span class="string">'checked-software'</span>: (<span class="string">''</span>, <span class="string">'checked'</span>)[<span class="string">'software'</span> <span class="keyword">in</span> hobbies],</span><br><span class="line">        <span class="string">'checked-tunning'</span>: (<span class="string">''</span>, <span class="string">'checked'</span>)[<span class="string">'tunning'</span> <span class="keyword">in</span> hobbies],</span><br><span class="line">        <span class="string">'age'</span>: age <span class="keyword">or</span> <span class="string">'Empty'</span>,</span><br><span class="line">        <span class="string">'hobbies'</span>: <span class="string">', '</span>.join(hobbies <span class="keyword">or</span> [<span class="string">'No Hobbies?'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line"></span><br><span class="line">    response_headers = [</span><br><span class="line">        (<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>),</span><br><span class="line">        (<span class="string">'Content-Length'</span>, str(len(response_body)))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [response_body]</span><br><span class="line"></span><br><span class="line">httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8051</span>, application)</span><br><span class="line"></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件位于 WSGI server 和 WSGI application 之间。所以对客户端来说，中间件扮演服务器；对服务器来说，中间件扮演客户端。在 Django 中wsgi 收到的数据用 request对象表示，要传给客户端的数据用 Httpresponse对象表示。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line"></span><br><span class="line">    response_body = <span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line"></span><br><span class="line">    response_headers = [</span><br><span class="line">        (<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>),</span><br><span class="line">        (<span class="string">'Content-Length'</span>, str(len(response_body)))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [response_body]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upperware</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">      self.wrapped_app = app</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">      <span class="keyword">for</span> data <span class="keyword">in</span> self.wrapped_app(environ, start_response):</span><br><span class="line">        <span class="keyword">yield</span> data.upper()</span><br><span class="line"></span><br><span class="line">wrapped_app = Upperware(application)</span><br><span class="line"></span><br><span class="line">httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8051</span>, wrapped_app)</span><br><span class="line"></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>前端（一）之 HTML</title>
    <url>/2018/12/04/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B-HTML/</url>
    <content><![CDATA[<h1 id="前端之-HTML"><a href="#前端之-HTML" class="headerlink" title="前端之 HTML"></a>前端之 HTML</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>python 基础、网络编程、并发编程与数据库要开始告一段落了，从现在开始进入前端的学习。前端的东西多且杂，需要好好地练习。</p>
<h2 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h2><p>前端即网站前台部分，运行在 PC 端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5、CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。</p>
<p>前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的 HTML 和 CSS 以及 JavaScript。</p>
<ul>
<li>广义前端：所有用户可以直接看见并交互的界面；</li>
<li>狭义前端：浏览器上运行的用户交互界面。</li>
</ul>
<h2 id="什么是-HTML"><a href="#什么是-HTML" class="headerlink" title="什么是 HTML"></a>什么是 HTML</h2><p>HTML 是一种超文本标记语言（Hyper Text Markup Language），主要负责完成页面的结构设计，一般以.html或者.htm 后缀结尾。</p>
<p>超文本指页面内可以包含图片、链接甚至音乐、程序等非文字元素。</p>
<ol>
<li><p>标记语言</p>
<p>标记语言为非编程语言，不具备编程语言具备的程序逻辑。</p>
</li>
<li><p>html 为前端页面的主题，由标签、指令与转义字符（实体）等组成</p>
<p>标签：被尖括号包裹，由字母开头包含合法字符的，可以被浏览器解析的标记。eg：系统标签、自定义标签。</p>
<p>指令：被尖括号包裹，由 <strong>!</strong>开头的标记。eg：&lt;!doctype html&gt; <!-- --></p>
<p>转义字符：被&amp;与;包裹的特殊字母组合或#开头的十进制数。eg：\&#60;\&#62;\&nbsp;</p>
</li>
<li><p>文档类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签语法规范 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://www.w3.org/TR/html4/strict.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板解读"><a href="#模板解读" class="headerlink" title="模板解读"></a>模板解读</h3><ul>
<li>DOCTYPE：指定文档类型，规定 html 标签语法；</li>
<li>html：文档根标签，标注着文档（页面）的开始与结束；</li>
<li>head：文档头标签，可以引用脚本文件、指定样式表、书写代码逻辑块、提供元信息；</li>
<li>body：文档主体标签，包含文档所有文本与超文本内容；</li>
<li>title：文档 tag 标题标签，设置文档 tag 的标题内容。</li>
</ul>
<h3 id="其他核心模板标签"><a href="#其他核心模板标签" class="headerlink" title="其他核心模板标签"></a>其他核心模板标签</h3><h4 id="1-meta（元标签）"><a href="#1-meta（元标签）" class="headerlink" title="1. meta（元标签）"></a>1. meta（元标签）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">字符编码</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'content-type'</span> <span class="attr">content</span>=<span class="string">'text/html;charset=utf-8'</span>/&gt;</span></span><br><span class="line">SEO</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'keywords'</span> <span class="attr">content</span>=<span class="string">'8-12个以英文逗号隔开的单词或词语'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'description'</span> <span class="attr">content</span>=<span class="string">'80字以内的一段话，与网站内容相关'</span>&gt;</span></span><br><span class="line">移动适配</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'viewport'</span> <span class="attr">content</span>=<span class="string">'width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no'</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-link（链接标签）"><a href="#2-link（链接标签）" class="headerlink" title="2. link（链接标签）"></a>2. link（链接标签）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">外联样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span> <span class="attr">href</span>=<span class="string">'style.css'</span>/&gt;</span></span><br><span class="line">文档 tag 图标</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'shortcut icon'</span> <span class="attr">type</span>=<span class="string">'image/x-icon'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">'http://www.baidu.con/favicon.ico'</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-style（样式标签）"><a href="#3-style（样式标签）" class="headerlink" title="3. style（样式标签）"></a>3. style（样式标签）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">内联样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-sctipt（脚本标签）"><a href="#4-sctipt（脚本标签）" class="headerlink" title="4. sctipt（脚本标签）"></a>4. sctipt（脚本标签）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html-常用标签"><a href="#html-常用标签" class="headerlink" title="html 常用标签"></a>html 常用标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 无意义标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- div：最常用标签，没有之一（搭建页面架构） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- span：文本最常用标签 -（构建文本架构，可以直接包裹文本，也可以包裹其他文本类（内联类型标签）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- span 作为文本架构，删除样式的文本再由具体的文本类标签 del 嵌套 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>$1000<span class="tag">&lt;<span class="name">del</span>&gt;</span>$2300<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 标题标签：h1~h6 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一般一个页面会出现一次，作为该页面的总标题出现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        普通文本</span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落段落段落段落段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 原生标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">            呵        呵</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 换行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文本类标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 斜体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 斜体强调 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加粗 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加粗强调 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗强调<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 由 ruby 和 rt 两个标签配合使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">            拼音<span class="tag">&lt;<span class="name">rt</span>&gt;</span>pinyin<span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 插入文本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上角标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>文本<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上角标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 链接标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- href 标签的全局属性，超链接，规定协议--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不规定的话：会在当前文件路径做路径拼接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>通往百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 图片标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- src 图片源地址可以加载网络|本地|动态图片 alt：图片资源加载时文本提示 title：鼠标悬浮产生的文本提示（任意标签都可以具有该全局属性）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"小柯基"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a>标签的分类</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>标签的分类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 系统标签 | 自定义标签: 系统没有的满足标签语法的所有标签 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">zero</span> <span class="attr">title</span>=<span class="string">"XXX"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>zero<span class="tag">&lt;/<span class="name">zero</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 行块标签(display) --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 块: 换行显示 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 行:同行显示 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>测试4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 单结构 | 组合结构 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>单结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 被form包裹的input内容可以提交给后台,单独使用的input内容只能在前台(js)使用 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 单双标签 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 双: 首尾分离 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 主内容:可以包含文本,也可以包含子标签 (具有作用域) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 单: 首尾连体 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 主功能: 不需要子内容,标签就可以代表所有的功能语义 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- input的内容 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"abc"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-特殊符号转义"><a href="#HTML-特殊符号转义" class="headerlink" title="HTML 特殊符号转义"></a>HTML 特殊符号转义</h2><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxuqw7sl3hj311g0swdjh.jpg" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端（七）之动画与阴影</title>
    <url>/2018/12/14/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E5%8A%A8%E7%94%BB%E4%B8%8E%E9%98%B4%E5%BD%B1/</url>
    <content><![CDATA[<h1 id="动画及阴影"><a href="#动画及阴影" class="headerlink" title="动画及阴影"></a>动画及阴影</h1><h2 id="一-拼接网页"><a href="#一-拼接网页" class="headerlink" title="一.拼接网页"></a>一.拼接网页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将区域整体划分起名 =&gt; 对其他区域布局不产生影响</span><br><span class="line">提出公共css =&gt; reset操作</span><br><span class="line">当有区域发送显示重叠(脱离文档流导致的), 需要通过z-index调整层级</span><br><span class="line">一定需要最外层,且最外层做自身布局时,不要做过多布局操作</span><br></pre></td></tr></table></figure>
<h2 id="二-过渡"><a href="#二-过渡" class="headerlink" title="二.过渡"></a>二.过渡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transition属性</span><br><span class="line"></span><br><span class="line">transition: 过渡时间(必须) 延迟时间(一般不设) 过渡属性(一般采用all默认值) 过渡曲线(贝赛尔曲线)(cubic-bezier())</span><br><span class="line"></span><br><span class="line">过渡属性具体设置给初始状态还是第二状态 根据具体需求</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*过渡的持续时间*/</span></span><br><span class="line"><span class="selector-tag">transition-duration</span>: 2<span class="selector-tag">s</span>;</span><br><span class="line"><span class="comment">/*延迟时间*/</span></span><br><span class="line"><span class="selector-tag">transition-delay</span>: 50<span class="selector-tag">ms</span>;</span><br><span class="line"><span class="comment">/*过渡属性*/</span></span><br><span class="line"><span class="comment">/*单一属性 | 属性1, ..., 属性n | all*/</span></span><br><span class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">all</span>;</span><br><span class="line"><span class="comment">/*过渡曲线*/</span></span><br><span class="line"><span class="comment">/*cubic-bezier() | ease | ease-in | ease-out | ease-in-out | linear*/</span></span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0, 2<span class="selector-class">.23</span>, 0<span class="selector-class">.99</span>, <span class="selector-tag">-1</span><span class="selector-class">.34</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*结论:*/</span></span><br><span class="line"><span class="comment">/*1.尽量悬浮静止的盒子, 控制运动的盒子*/</span></span><br><span class="line"><span class="comment">/*2.不能确定区间范围的属性值, 不会产生动画效果*/</span></span><br><span class="line"><span class="comment">/*display 不能做动画  | opacity 可以做动画*/</span></span><br></pre></td></tr></table></figure>
<h2 id="三-阴影"><a href="#三-阴影" class="headerlink" title="三.阴影"></a>三.阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*x轴偏移量 y轴偏移量 虚化程度 阴影宽度 阴影颜色*/</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 0 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*一个盒子可以设置多个阴影, 每一套阴影间用逗号隔开*/</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 <span class="selector-tag">-10px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">-5px</span> <span class="selector-tag">black</span>, 0 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">-5px</span> <span class="selector-tag">black</span>;</span><br></pre></td></tr></table></figure>
<h2 id="四-伪类实现边框"><a href="#四-伪类实现边框" class="headerlink" title="四.伪类实现边框"></a>四.伪类实现边框</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*自身需要定位*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伪类通过定位来完成图层的布局*/</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/*完成布局*/</span></span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*构建图层*/</span></span><br><span class="line">	<span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>元类</title>
    <url>/2018/11/28/%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客学习 python 中一种高级概念，元类。在《说文》中这样描述<strong>元</strong>：元，始也（ps：这也太简短了）。三个字，最后一个字还是语气词。。很形象的说明了元的意思，最开始的意思，在道教中元的意思是：开始的，最初。第一。为首的。主要，根本，整体的意思。那么很显然，元类是最开始的类的意思。我们都知道在 python 中一切皆为对象，而对象都继承与 object 类，那么元类与 object 的关系是什么呢？</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxo2z56gvgj316i0lktce.jpg" alt></p>
<p>可以看出元类也是继承自 object 类的。</p>
<p>那么元类和类的关系是什么呢？</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxo30rsvicj30pr0jrq38.jpg" alt></p>
<p>简单来讲就是：类生成对象，元类生成自己本身同时实例化其他所有的类。</p>
<h1 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h1><h2 id="类作为对象"><a href="#类作为对象" class="headerlink" title="类作为对象"></a>类作为对象</h2><p>之前已经说过 python 中一切皆对象，那么类同样也是对象，而且类是元类的对象。当使用关键词<strong>class</strong>定义一个类时，在代码执行阶段就会创建一个  空的object，并使用元类的__init__方法来出初始化一个类。这个对象（类）本身可以创建对象，因为它是一个类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在内存中创建一个 Foo 对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>但是同样的它也是一个对象，一个元类的实例对象。</p>
<p>所以从对象层面将和它自己实例出来的对象没有什么不同，因此：</p>
<ul>
<li>可以将类赋值给一个变量</li>
<li>可以复制它</li>
<li>可以为类添加其他的属性</li>
<li>可以将其作为参数来传递</li>
</ul>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ObjectCreator) <span class="comment"># you can print a class because it's an object</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">def</span> <span class="title">echo</span><span class="params">(o)</span>:</span></span><br><span class="line"><span class="meta">... </span>      print(o)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>echo(ObjectCreator) <span class="comment"># you can pass a class as a parameter</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span><span class="params">(hasattr<span class="params">(ObjectCreator, <span class="string">'new_attribute'</span>)</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br><span class="line">&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' # you can add attributes to a class</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hasattr(ObjectCreator, <span class="string">'new_attribute'</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ObjectCreator.new_attribute)</span><br><span class="line">foo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ObjectCreatorMirror = ObjectCreator <span class="comment"># you can assign a class to a variable</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ObjectCreatorMirror.new_attribute)</span><br><span class="line">foo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ObjectCreatorMirror())</span><br><span class="line">&lt;__main__.ObjectCreator object at <span class="number">0x8997b4c</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h2><p>由于类也是对象，因此可以像任何对象一样动态创建它们。 在python中，type 除了可以查看对象的类型，还有一个很强大的功能，type 可以动态的创建类。type 可以将类的描述作为参数并返回一个类。</p>
<p>使用 <strong>class</strong>关键词时，python 会自动的创建此对象，就像实例化一个对象时，调用的是类中的__init__方法，创建对象时同样的调用了元类中的__init__方法：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxonr22s8bj315e08ymyk.jpg" alt></p>
<p>该函数有四个参数，第一个参数为 <strong>cls</strong>表示这是一个由类调用的初始化函数，python 在检测语法的时候发现 <strong>class</strong>则会把 class 后面的类名当做参数传给 <strong>what</strong>，bases 表示继承的父类是谁，是个元祖类型（因为会有多继承），<strong>dict</strong> 是个字典类型，是类的名称空间，可以通过<strong>__dict__</strong>查看，使用 type来创建一个类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">what = <span class="string">'Music'</span></span><br><span class="line">bases = (object,)</span><br><span class="line">dict = &#123;<span class="string">'music_name'</span>: <span class="string">'南山忆'</span>&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxooefc40wj322o0h2gqy.jpg" alt></p>
<p>这和我们使用 <strong>class</strong>关键词定义一个类没有什么不同：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxooh159v8j322q0r0n5a.jpg" alt></p>
<p>之前在学习类的时候，我们知道创建一个对象是调用了类中__init__方法，同理在创建类的时候是调用了元类中也就是 type 中的__init__方法，所以我们可以通过改写 type 中的元类来自定义创建类，比如加些判断或者其他的属性：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxooov5dwxj31eo0jgtd7.jpg" alt></p>
<p>可惜想象是美好的，这招根本行不通，那么有没有别的办法呢？当然有啦，哈哈哈哈哈</p>
<p>在学习类的三大特性的时候，从父类继承的属性可以改写（多态的思想），那么改写不了元类是因为元类很特殊，那我继承自元类的类肯定可以改写吧。这个到后面再讲，突然发现什么是元类还没讲清楚。。。</p>
<h2 id="什么是元类"><a href="#什么是元类" class="headerlink" title="什么是元类"></a>什么是元类</h2><p>我把元类称之为 <strong>类的类</strong>。元类是创建类的‘’东西‘’，我们定义类来创建对象，类也是对象，所以定义了一个元类用来创建对象。<strong>type</strong>是 Python 用来创建所有类的元类（不包括 object 类）。其实这和用 <strong>str</strong>创建字符串对象，<strong>int</strong>创建整数对象一致的。<strong>type</strong>只是创建类对象的类。</p>
<p>一切，all thing都是 Python 中的一个对象。这包括整数、字符串、函数和类。所有这些都是对象，所有这些都是从一个类创建的。因此，元类是创建类对象的东西。</p>
<h2 id="metaclass-属性"><a href="#metaclass-属性" class="headerlink" title="__metaclass__属性"></a>__metaclass__属性</h2><p>除了使用 type 动态创建类以外，要控制类的创建行为，可以使用 metaclass，这也是自定义元类的方法。</p>
<p>metaclass 的意思就是元类：当我们定义了类以后，就可以根据这个类创建出实例，所以先定义类，然后创建实例。但是如果想创建出类呢？那就必须根据 metaclass 创建出类，所以：先定义元类（不自定义时，默认用 type），然后创建类。（大部分情况使用不到 metaclass，除非想自定义元类）。</p>
<p>默认情况下，类是使用 type 构造的。类主体在一个新的名称空间中执行，类名在本地绑定到类型的结果（名称，基，名称空间）。</p>
<p>可以通过类定义行中传递元类关键字参数来定制类的创建过程，或者从包含此类参数的现有类继承。</p>
<h2 id="实例化对象的完整过程"><a href="#实例化对象的完整过程" class="headerlink" title="实例化对象的完整过程"></a>实例化对象的完整过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Bar)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>当解释器执行这行代码时，执行以下操作：</p>
<p>Foo 有__metaclass__属性吗？如果有的话，python 会通过 __metaclass__在内存中创建一个名称为 Foo 的类对象。如果 Python 没有找到__metaclass__，它会继续在 Bar 中寻找__metaclass__属性，并尝试做和前面同样的操作。如果 Python 在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。如果还找不到__metaclass__，python 就会用内置的 type 来创建这个类对象。</p>
<p>那么在自定义类是，可以在__metaclass__中放置什么代码呢？</p>
<p>可以放用来创建一个类的东西，type 或者 type的子类都可以放。</p>
<p>以上面的代码为例，我们实例化一个对象obj=Foo()，会先执行 Foo 类中的__new__方法，没有则使用父类的__new__方法，创建一个空对象并返回，然后执行__init__方法（自己有就用自己的，没有就用父类的，这里分两种情况，如果是创建一个类的对象，那就是使用父类的，因为自己没有；如果是创建类，自己有就是用自己的，否则就是用父类的），为创建的对象进行初始化。</p>
<p>obj()会执行 Foo 类的__call__方法，没有则用父类的。现在已经知道。类同样也是对象，是元类的对象，即实例化一个对象（类）时，调用其父类（元类）的__call__方法。</p>
<p><strong>元类处理过程：</strong>定义一个类时，使用声明或者默认的元类对该类进行创建，对元类求 type 运算，得到父元类（该类声明元类的父元类），调用父元类的__call__方法，在父元类的__call__方法中，调用该类声明的元类的__new__来创建一个空对象（该方法需要返回一个类对象实例），然后再调用该元类的__init__方法初始化该类对象，最终返回一个类。</p>
<ol>
<li>对象时类创建，创建对象时类的__init__方法自动执行，对象()则会执行类的__call__方法；</li>
<li>类是由 type 创建的，class 定义的时候 type 的__init__方法自动执行，类()则会执行type 的__call__方法（类的__new__，类的__init__方法）</li>
</ol>
<p>元类的__new__方法和__init__影响的是创建类的对象行为（不是创建类），父元类的__call__控制对子元类的__new__，__init__的调用，就是说控制类对象的创建和初始化。父元类的__new__和__init__由更上层的元类控制，一般来说，原始 type 是最初的父元类，其__new__和__init__是最具有普遍意义的，即应该是分配内存、初始化相关信息等。元类的__call__方法影响的是创建类的实例对象的行为，所以这时候自定义__call__就可以控制创建类对象的实例对象的行为了。比如单例模式的创建。</p>
<p>__new__和__init__影响的是创建对象的行为，当这些函数在元类中时，影响创建的是类；同理，当这两个函数在普通类中时，影响的是创建普通的对象实例行为。</p>
<p>__call__影响()调用行为，__call__是在创建类的时候调用，即：定义类时就是创建类，此时会调用元类的__call__，如果元类有继承，子元类定义时执行的是父元类的__call__。如果是普通类实例化，调用的是普通类的__call__。（昨晚上卡在这里了，其实实例化一个普通的对象时，都是调用其父类的__call__方法，除了元类，普通类中不会有__call__方法。）</p>
<h2 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h2><p>元类的主要目的是在创建类时自动更改类，比如想要将创建的所有类都变成首字母大写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MymetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> type(args[<span class="number">0</span>]) != str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'参数必须为字符串类型'</span>)</span><br><span class="line">        obj = object.__new__(cls)</span><br><span class="line">        obj.__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=MymetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = Foo(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxosrpgrbhj31wp0u0qc9.jpg" alt></p>
<p>这就是自定义元类的好处，可以在__call__来对传入的参数进行一些判断来做一些自定义操作。</p>
<h3 id="通过函数"><a href="#通过函数" class="headerlink" title="通过函数"></a>通过函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the metaclass will automatically get passed the same argument</span></span><br><span class="line"><span class="comment"># that you usually pass to `type`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">      Return a class object, with the list of its attribute turned</span></span><br><span class="line"><span class="string">      into uppercase.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pick up any attribute that doesn't start with '__' and uppercase it</span></span><br><span class="line">    uppercase_attr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, val <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>):</span><br><span class="line">            uppercase_attr[name.upper()] = val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">    <span class="comment"># let `type` do the class creation</span></span><br><span class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)</span><br><span class="line"></span><br><span class="line">__metaclass__ = upper_attr <span class="comment"># this will affect all classes in the module</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span> <span class="comment"># global __metaclass__ won't work with "object" though</span></span><br><span class="line">    <span class="comment"># but we can define __metaclass__ here instead to affect only this class</span></span><br><span class="line">    <span class="comment"># and this will work with "object" children</span></span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))</span><br><span class="line"><span class="comment"># Out: False</span></span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))</span><br><span class="line"><span class="comment"># Out: True</span></span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)</span><br><span class="line"><span class="comment"># Out: 'bip'</span></span><br></pre></td></tr></table></figure>
<h3 id="通过元类"><a href="#通过元类" class="headerlink" title="通过元类"></a>通过元类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remember that `type` is actually a class like `str` and `int`</span></span><br><span class="line"><span class="comment"># so you can inherit from it</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="comment"># __new__ is the method called before __init__</span></span><br><span class="line">    <span class="comment"># it's the method that creates the object and returns it</span></span><br><span class="line">    <span class="comment"># while __init__ just initializes the object passed as parameter</span></span><br><span class="line">    <span class="comment"># you rarely use __new__, except when you want to control how the object</span></span><br><span class="line">    <span class="comment"># is created.</span></span><br><span class="line">    <span class="comment"># here the created object is the class, and we want to customize it</span></span><br><span class="line">    <span class="comment"># so we override __new__</span></span><br><span class="line">    <span class="comment"># you can do some stuff in __init__ too if you wish</span></span><br><span class="line">    <span class="comment"># some advanced use involves overriding __call__ as well, but we won't</span></span><br><span class="line">    <span class="comment"># see this</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name,</span></span></span><br><span class="line"><span class="function"><span class="params">                future_class_parents, future_class_attr)</span>:</span></span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, val <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure>
<h3 id="使用元类的-new-方法"><a href="#使用元类的-new-方法" class="headerlink" title="使用元类的__new__方法"></a>使用元类的__new__方法</h3><p>因为 type 的__new__不会被覆盖，所以可以使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name,</span></span></span><br><span class="line"><span class="function"><span class="params">                future_class_parents, future_class_attr)</span>:</span></span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, val <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        <span class="comment"># reuse the type.__new__ method</span></span><br><span class="line">        <span class="comment"># this is basic OOP, nothing magic in there</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(upperattr_metaclass, future_class_name,</span><br><span class="line">                            future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure>
<h3 id="使用-super-的-new-方法"><a href="#使用-super-的-new-方法" class="headerlink" title="使用 super 的__new__方法"></a>使用 super 的__new__方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, dct)</span>:</span></span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, val <span class="keyword">in</span> dct.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>
<p>使用元类的代码复杂性背后的原因不是因为元类，而是因为你通常使用元类来依赖于内省，操纵继承，变量__dict__等等来做扭曲的东西。实际上，元类特别适用于制作黑魔法，因此也很复杂。但他们本身很简单：</p>
<ul>
<li>拦截类的创建</li>
<li>自定义类</li>
<li>返回修改后的类</li>
</ul>
<h2 id="为什么要使用元类而不是函数？"><a href="#为什么要使用元类而不是函数？" class="headerlink" title="为什么要使用元类而不是函数？"></a>为什么要使用元类而不是函数？</h2><p>既然__metaclass__可以接收任何调用，那么为什么要使用一个类，因为类显然比函数要复杂。</p>
<p>有几个原因：</p>
<ul>
<li>目的很明确，你知道使用元类会发生什么；</li>
<li>可以使用 OOP。metaclass 可以从元类继承，覆盖父方法，元类甚至可以使用元类；</li>
<li>如果你指定了元类，但没有使用元类函数，则类的子类将其元类的实例；</li>
<li>可以更好地构建代码；</li>
<li>可以和__new__，__init__，__call__搭配使用，来使得创建一个类或者一个类实例变得更有创造性。</li>
</ul>
<p>元类创建类，调用元类中的 new 和 init 方法，类创建类对象，调用元类中的 call 方法，call 里面会调用类对象的 new（通常为 object 的 new，产生一个空对象），然后调用类的 init 实例化</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>优化 Linux</title>
    <url>/2019/07/27/%E4%BC%98%E5%8C%96-Linux/</url>
    <content><![CDATA[<h1 id="优化Linux"><a href="#优化Linux" class="headerlink" title="优化Linux"></a>优化Linux</h1><h2 id="1-更换-apt-源"><a href="#1-更换-apt-源" class="headerlink" title="1. 更换 apt 源"></a>1. 更换 apt 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse'</span> &gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<h2 id="2-系统更新"><a href="#2-系统更新" class="headerlink" title="2. 系统更新"></a>2. 系统更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<h2 id="3-安装搜狗输入法"><a href="#3-安装搜狗输入法" class="headerlink" title="3. 安装搜狗输入法"></a>3. 安装搜狗输入法</h2><h3 id="3-1-安装-fcitx-输入框架"><a href="#3-1-安装-fcitx-输入框架" class="headerlink" title="3.1 安装 fcitx 输入框架"></a>3.1 安装 fcitx 输入框架</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure>
<h3 id="3-2-下载-linux-版本搜狗输入法"><a href="#3-2-下载-linux-版本搜狗输入法" class="headerlink" title="3.2 下载 linux 版本搜狗输入法"></a>3.2 下载 linux 版本搜狗输入法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="3-3-安装"><a href="#3-3-安装" class="headerlink" title="3.3 安装"></a>3.3 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>
<p>如果出现依赖包的问题执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt --fix-broken install</span><br></pre></td></tr></table></figure>
<h3 id="3-4-进入设置"><a href="#3-4-进入设置" class="headerlink" title="3.4 进入设置"></a>3.4 进入设置</h3><ol>
<li>根据提示安装输入法</li>
</ol>
<p><img src="https://i.loli.net/2019/07/27/5d3bcb0870cf032824.png" alt></p>
<ol start="2">
<li>将输入框架改为 fcitx</li>
</ol>
<p><img src="https://i.loli.net/2019/07/27/5d3bcba7add6811109.png" alt></p>
<p>点击<code>Apply System-Wide</code>后将用户注销，如果注销没有效果那么就重启吧。</p>
<ol start="3">
<li>登陆后右上角出现小键盘</li>
</ol>
<p><img src="https://i.loli.net/2019/07/27/5d3bcc813745256417.png" alt></p>
<p>点击<code>Configure Current Input Method</code>，进入<code>Input Method</code>界面，选择加号添加搜狗输入法。</p>
<p><img src="https://i.loli.net/2019/07/27/5d3bcd1c42cd266092.png" alt></p>
<h2 id="4-软件卸载、安装"><a href="#4-软件卸载、安装" class="headerlink" title="4. 软件卸载、安装"></a>4. 软件卸载、安装</h2><h3 id="4-1-卸载-libreOffice-安装-wps"><a href="#4-1-卸载-libreOffice-安装-wps" class="headerlink" title="4.1  卸载 libreOffice 安装 wps"></a>4.1  卸载 libreOffice 安装 wps</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove libreoffice-common</span><br></pre></td></tr></table></figure>
<h3 id="4-2-安装-wps"><a href="#4-2-安装-wps" class="headerlink" title="4.2 安装 wps"></a>4.2 安装 wps</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office_11.1.0.8722_amd64.deb</span><br><span class="line">sudo dpkg -i wps-office_11.1.0.8722_amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="4-3-卸载-firefox-安装-chrome"><a href="#4-3-卸载-firefox-安装-chrome" class="headerlink" title="4.3 卸载 firefox 安装 chrome"></a>4.3 卸载 firefox 安装 chrome</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudp apt remove firefox</span><br><span class="line"></span><br><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
<h2 id="5-vim-配置"><a href="#5-vim-配置" class="headerlink" title="5. vim 配置"></a>5. vim 配置</h2><h3 id="5-1-下载-vim"><a href="#5-1-下载-vim" class="headerlink" title="5.1 下载 vim"></a>5.1 下载 vim</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure>
<h3 id="5-2-编辑-vim-配置文件"><a href="#5-2-编辑-vim-配置文件" class="headerlink" title="5.2 编辑 vim 配置文件"></a>5.2 编辑 vim 配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/vim/vimrc</span><br></pre></td></tr></table></figure>
<p>添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">配置还在更新</span><br></pre></td></tr></table></figure>
<h2 id="6-美化-ubuntu"><a href="#6-美化-ubuntu" class="headerlink" title="6. 美化 ubuntu"></a>6. 美化 ubuntu</h2><h3 id="6-1-安装-unity-tweak-tool"><a href="#6-1-安装-unity-tweak-tool" class="headerlink" title="6.1 安装 unity-tweak-tool"></a>6.1 安装 unity-tweak-tool</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt intall unity-tweak-tool</span><br></pre></td></tr></table></figure>
<h3 id="6-2-下载-flatabulous-主题"><a href="#6-2-下载-flatabulous-主题" class="headerlink" title="6.2 下载 flatabulous 主题"></a>6.2 下载 flatabulous 主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照官方教程使用 add-apt-repository 方法定位不到 flatabulous 包，改用手动安装</span></span><br><span class="line">sudo add-apt-repository ppa://noobslab/themes</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install flatabulous-theme</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/anmoljagetia/Flatabulous/archive/master.zip</span><br><span class="line">mkdir .theme</span><br><span class="line">mv ./master.zip ~/.theme</span><br><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure>
<h3 id="6-3-下载-flat-icons"><a href="#6-3-下载-flat-icons" class="headerlink" title="6.3 下载 flat icons"></a>6.3 下载 flat icons</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa://noobslab/icons</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ultra-flat-icons</span><br></pre></td></tr></table></figure>
<h3 id="6-4-打开-unity-tweak-tool"><a href="#6-4-打开-unity-tweak-tool" class="headerlink" title="6.4 打开 unity-tweak-tool"></a>6.4 打开 unity-tweak-tool</h3><p>再打开 unity-tweak-tool 时出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Gtk was imported without specifying a version first. Use gi.require_version(&apos;Gtk&apos;, &apos;3.0&apos;) before import to ensure that the right version gets loaded.</span><br><span class="line">  from gi.repository import Gtk</span><br><span class="line">Error: schema com.canonical.notify-osd not installed</span><br></pre></td></tr></table></figure>
<p>解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install notify-osd</span><br><span class="line">sudo apt install overlay-scrollbar</span><br></pre></td></tr></table></figure>
<p>图标配置好了,但是主题因为 GTK 的原因没有成功,记录如下：</p>
<p><img src="https://i.loli.net/2019/07/27/5d3bf60dc592c26835.png" alt></p>
<h3 id="6-5-下载字体"><a href="#6-5-下载字体" class="headerlink" title="6.5 下载字体"></a>6.5 下载字体</h3><p>在 monaco-font 库中下载 zip 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip monaco-font-master.zip</span><br><span class="line">sudo ./install-font-ubuntu.sh https://github.com/todylu/monaco.ttf/blob/master/monaco.ttf?raw=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>下载完成后使用<code>unity-tweak-tool</code>设置字体。</p>
<h2 id="7-终端"><a href="#7-终端" class="headerlink" title="7. 终端"></a>7. 终端</h2><p>这个才是重头戏。</p>
<p>因为很多 linux 默认的终端 shell 都是 bash，但是不太好用，所以改为 zsh。</p>
<h3 id="7-1-下载-zsh"><a href="#7-1-下载-zsh" class="headerlink" title="7.1 下载 zsh"></a>7.1 下载 zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure>
<h3 id="7-2-下载-oh-my-zsh"><a href="#7-2-下载-oh-my-zsh" class="headerlink" title="7.2 下载 oh-my-zsh"></a>7.2 下载 oh-my-zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="7-3-修改默认-shell"><a href="#7-3-修改默认-shell" class="headerlink" title="7.3 修改默认 shell"></a>7.3 修改默认 shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod --shell /bin/zsh <span class="variable">$USERNAME</span></span><br></pre></td></tr></table></figure>
<p>修改后记得 log_out 重新登录用户。</p>
<h3 id="7-4-修改皮肤"><a href="#7-4-修改皮肤" class="headerlink" title="7.4 修改皮肤"></a>7.4 修改皮肤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改皮肤</span></span><br><span class="line">ZSH_THEME=<span class="string">"robbyrussell"</span></span><br></pre></td></tr></table></figure>
<h3 id="8-插件安装"><a href="#8-插件安装" class="headerlink" title="8. 插件安装"></a>8. 插件安装</h3><h3 id="8-1-autojump"><a href="#8-1-autojump" class="headerlink" title="8.1 autojump"></a>8.1 autojump</h3><ol>
<li>下载</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install aotujump</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置 autojump</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/share/doc/autojump/README.Debian</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'. /usr/share/autojump/autojump.sh'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="8-2-zsh-syntax-highlighting"><a href="#8-2-zsh-syntax-highlighting" class="headerlink" title="8.2 zsh-syntax-highlighting"></a>8.2 zsh-syntax-highlighting</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(zsh-syntax-highlighting)</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="8-3-zsh-autosuggestions"><a href="#8-3-zsh-autosuggestions" class="headerlink" title="8.3 zsh-autosuggestions"></a>8.3 zsh-autosuggestions</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(zsh-autosuggestions)</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="8-4-git-open"><a href="#8-4-git-open" class="headerlink" title="8.4 git-open"></a>8.4 git-open</h3><ol>
<li>下载</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git-open)</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="8-5-修改查看-history-格式"><a href="#8-5-修改查看-history-格式" class="headerlink" title="8.5 修改查看 history 格式"></a>8.5 修改查看 history 格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HIST_STAMPS=<span class="string">"yyyy-mm-dd"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>前端（九） 之表格的使用</title>
    <url>/2018/12/17/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%B9%9D%EF%BC%89-%E4%B9%8B%E8%A1%A8%E6%A0%BC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前端之表格的使用"><a href="#前端之表格的使用" class="headerlink" title="前端之表格的使用"></a>前端之表格的使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.table1</span> &#123;</span></span><br><span class="line">			width: 500px;</span><br><span class="line">			height: 500px;</span><br><span class="line">			display: none;</span><br><span class="line">		&#125;</span><br><span class="line">		th, td &#123;</span><br><span class="line">			padding: 20px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.table2</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*border: 10px solid black;*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- table的display: table --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- table显示规则注意点: 当设置的盒子高度不足够显示内容时, 盒子高度由内容撑开, 当设置的高度大于显示内容所需高度,采用设置的高度 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- border: 设置边框宽度 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- cellspacing: 单元格间的间距 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- cellpadding: 单元格的内边距 == th, td设置padding --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- tr&gt;th&#123;标题&#125;*3 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- (tr&gt;td&#123;单元格&#125;*3)*3 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 边框的保留格式 =&gt; rules: rows | cols | groups | all --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table2"</span> <span class="attr">border</span>=<span class="string">"10"</span> <span class="attr">rules</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;单元格&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;单元格&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;单元格&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;单元格&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;单元格&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- &gt;&gt;&gt; display: table-cell =&gt; 可以嵌入任意类型标签, 可以快速实现多行文本垂直居中 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端（八）之形变</title>
    <url>/2018/12/17/%E5%89%8D%E7%AB%AF%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E5%BD%A2%E5%8F%98/</url>
    <content><![CDATA[<h1 id="前端之形变"><a href="#前端之形变" class="headerlink" title="前端之形变"></a>前端之形变</h1><h2 id="一-形变"><a href="#一-形变" class="headerlink" title="一.形变"></a>一.形变</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1.形变参考点: 三轴交界点*/</span></span><br><span class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">x</span>轴坐标 <span class="selector-tag">y</span>轴坐标;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.旋转 rotate deg*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(720<span class="selector-tag">deg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*偏移 translate px*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(200<span class="selector-tag">px</span>) <span class="selector-tag">translateY</span>(200<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*缩放 scale 无单位*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">x</span>轴比例, <span class="selector-tag">y</span>轴比例)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*注: 可以多形变, 空格隔开书写在一条transform属性中, 顺序一般会影响形变结果*/</span></span><br><span class="line"><span class="comment">/*形变不改变盒子布局, 只拿形变做动画*/</span></span><br></pre></td></tr></table></figure>
<h2 id="二-动画animation"><a href="#二-动画animation" class="headerlink" title="二.动画animation"></a>二.动画animation</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1.设置动画体*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    <span class="comment">/*起点省略采用的就是初始状态*/</span></span><br><span class="line">    0% &#123;&#125;</span><br><span class="line">    33<span class="selector-class">.3</span>% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="comment">/*在每一个动画节点都需要明确所有做动画属性在该节点的属性值*/</span></span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    66<span class="selector-class">.6</span>% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*终点需要设置*/</span></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.设置动画属性*/</span></span><br><span class="line"><span class="comment">/*animation: 动画名 时间 运动次数(无限次:infinite) 运动曲线*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: move <span class="number">2s</span> <span class="number">1</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三-表格"><a href="#三-表格" class="headerlink" title="三.表格"></a>三.表格</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">table的全局属性:</span><br><span class="line">border="1"  设置边框宽度</span><br><span class="line">cellspacing="10" 单元格间的间距</span><br><span class="line">cellpadding="10" 单元格的内边距</span><br><span class="line">rules="rows | cols | groups | all" 边框的保留格式</span><br><span class="line"></span><br><span class="line">td的全局属性</span><br><span class="line">rowspan='2' 合并两行单元格</span><br><span class="line">colspan='3' 合并三列单元格</span><br><span class="line"></span><br><span class="line">table的高度: 由内容和设置高度中的大值决定</span><br><span class="line"></span><br><span class="line">table-cell: 可以嵌套任意类型标签, 可以快速实现多行文本垂直居中</span><br></pre></td></tr></table></figure>
<h2 id="四-多行文本垂直居中"><a href="#四-多行文本垂直居中" class="headerlink" title="四.多行文本垂直居中"></a>四.多行文本垂直居中</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一行文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第二行文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sup</span> &#123;</span><br><span class="line">    <span class="comment">/*实现多行文本垂直居中 =&gt; </span></span><br><span class="line"><span class="comment">    针对父级设置, 父级中的多个块级文本类子级标签垂直居中*/</span></span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*注: 如果想调整sup的位置,可以给sup嵌套一个"位置层"*/</span></span><br><span class="line"><span class="comment">/*.box&gt;.sup&gt;p+div*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端（三）</title>
    <url>/2018/12/06/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前端之-CSS-选择器高级与盒模型"><a href="#前端之-CSS-选择器高级与盒模型" class="headerlink" title="前端之 CSS 选择器高级与盒模型"></a>前端之 CSS 选择器高级与盒模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先回顾昨日的内容，昨天讲了 w3c 的整个架构，由结构层&gt;布局层&gt;内容层三部分组成，了解了 CSS 的三种引入方式，行间式最简单直接；内联式解耦合，可读性强；外联式适合团队高效开发，耦合性低，复用性强，了解了三种选择器，并且 id 选择器&gt;类选择器&gt;标签选择器&gt;通配选择器，还有通过多类名选择器来操作标签。还有常用的长度单位包括 px、cm、mm、em、vw、in，颜色属性有 rgb、rgba 等，还有操作文本样式的属性调整字体大小，字体风格，文本对齐，缩进，字间距，词间距等，其中 font 是综合性描述：font: 风格 大小/行高 字族（风格可以省略），比如font: 100 normal 60px/200px ‘STSong’;最后讲的就是 display，这是一个重点难点，display 目前只介绍了三个属性值：inline：不支持宽高，宽高由文本内容撑开，只能嵌套 inline 标签同行显示；block：像 p 标签，h 标签的 display 属性就是 block，支持所有的 css 样式，默认有宽高（自定义后取自定义值），能嵌套所有标签，异行显示；inline-block：支持所有css 样式，默认没有宽高（由内容撑开（可以自定义宽高））不建议嵌套任意标签，同行显示。</p>
<h2 id="选择器高级"><a href="#选择器高级" class="headerlink" title="选择器高级"></a>选择器高级</h2><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><h4 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h4><p>群组选择器可以同时控制多个选择器，语法：逗号分隔，控制多个<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>群组选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.d1</span>,<span class="selector-tag">div</span>,<span class="selector-id">#a</span> &#123;</span></span><br><span class="line">			color: green;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'d1'</span>&gt;</span>001<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>002<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'d3'</span>&gt;</span>003<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>一次性控制多个选择器</li>
<li>选择器之间以,隔开，每一个选择器位均可以为任意合法选择器或选择器组合</li>
</ul>
<h4 id="子代-后代-选择器"><a href="#子代-后代-选择器" class="headerlink" title="子代(后代)选择器"></a>子代(后代)选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">子代选择器用&gt;连接</span><br><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">后代选择器用空格连接</span><br><span class="line"><span class="selector-class">.sup</span> <span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一次性控制一个选择器(逻辑最后的那个选择器)，前置位的选择器为修饰性选择器</li>
<li>每一个选择器位均可以为任意合法选择器或选择器组合</li>
<li>子代选择器必须为一级父子嵌套关系，后代选择器可以为一级及多级父子嵌套关系</li>
</ul>
<h4 id="相邻-兄弟-选择器"><a href="#相邻-兄弟-选择器" class="headerlink" title="相邻(兄弟)选择器"></a>相邻(兄弟)选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">相邻选择器用+连接</span><br><span class="line"><span class="selector-class">.d1</span> + <span class="selector-class">.d2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">兄弟选择器用~连接</span><br><span class="line"><span class="selector-class">.d1</span> ~ <span class="selector-class">.d3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一次性控制一个选择器(逻辑最后的那个选择器)，前置位的选择器为修饰性选择器</li>
<li>每一个选择器位均可以为任意合法选择器或选择器组合</li>
<li>相邻选择器必须为直接相邻关系，兄弟选择器可以为直接相邻或间接相邻关系</li>
</ul>
<h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div class="d" id="dd"&gt;&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.d</span><span class="selector-id">#dd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="d1 d2 d3"&gt;&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.d1</span><span class="selector-class">.d2</span><span class="selector-class">.d3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组合选择器优先级"><a href="#组合选择器优先级" class="headerlink" title="组合选择器优先级"></a>组合选择器优先级</h2><ul>
<li>组合选择器优先级与权值相关，权值为权重和</li>
<li>权重对应关系</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th style="text-align:center">权重</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">通配</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">标签</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">类、属性</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">1000</td>
</tr>
<tr>
<td style="text-align:center">!important</td>
<td style="text-align:center">10000</td>
</tr>
</tbody>
</table>
<ul>
<li>选择器权值比较，只关心权重和，不更新选择器位置</li>
<li>不同级别的选择器间不具备可比性：1个类选择器优先级高于n个标签选择器的任意组合</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li>[attr]：匹配拥有attr属性的标签</li>
<li>[attr=val]：匹配拥有attr属性，属性值为val的标签</li>
<li>[attr^=val]：匹配拥有attr属性，属性值以val开头的标签</li>
<li>[attr$=val]：匹配拥有attr属性，属性值以val结尾的标签</li>
<li>[attr*=val]：匹配拥有attr属性，属性值包含val的标签</li>
</ul>
<h6 id="v-hint：属性选择器权重等价于类"><a href="#v-hint：属性选择器权重等价于类" class="headerlink" title="v_hint：属性选择器权重等价于类"></a>v_hint：属性选择器权重等价于类</h6><h6 id="v-test：掌握所有选择器，并熟知选择器优先级"><a href="#v-test：掌握所有选择器，并熟知选择器优先级" class="headerlink" title="v_test：掌握所有选择器，并熟知选择器优先级"></a>v_test：掌握所有选择器，并熟知选择器优先级</h6><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="1、a标签四大伪类"><a href="#1、a标签四大伪类" class="headerlink" title="1、a标签四大伪类"></a>1、a标签四大伪类</h3><ul>
<li>:link：未访问状态</li>
<li>:hover：悬浮状态</li>
<li>:active：活跃状态</li>
<li>:visited：已访问状态</li>
</ul>
<h3 id="2、内容伪类"><a href="#2、内容伪类" class="headerlink" title="2、内容伪类"></a>2、内容伪类</h3><ul>
<li>:before：内容之前</li>
<li>:after：内容之后</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:before</span>, <span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"ctn"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、索引伪类"><a href="#3、索引伪类" class="headerlink" title="3、索引伪类"></a>3、索引伪类</h3><ul>
<li>:nth-child(n)：位置优先，再匹配类型</li>
<li>:nth-of-type(n)：类型优先，再匹配位置</li>
</ul>
<h6 id="v-hint：值可以为位置数，也可以为2n、3n…，代表2的倍数，3的倍数，且位置数从1开始"><a href="#v-hint：值可以为位置数，也可以为2n、3n…，代表2的倍数，3的倍数，且位置数从1开始" class="headerlink" title="v_hint：值可以为位置数，也可以为2n、3n…，代表2的倍数，3的倍数，且位置数从1开始"></a>v_hint：值可以为位置数，也可以为2n、3n…，代表2的倍数，3的倍数，且位置数从1开始</h6><h3 id="4、取反伪类"><a href="#4、取反伪类" class="headerlink" title="4、取反伪类"></a>4、取反伪类</h3><ul>
<li>:not(selector)：对selector进行取反</li>
</ul>
<p>##盒模型</p>
<p>###盒模型概念</p>
<ul>
<li>广义盒模型：文档中所有功能性及内容性标签，及文档中所有显示性标签</li>
<li>侠义盒模型：文档中以块级形式存在的标签（块级标签拥有盒模型100%特性且最常用）</li>
<li>盒模型组成：margin + border + padding + content</li>
</ul>
<h6 id="v-hint：content-width-x-height"><a href="#v-hint：content-width-x-height" class="headerlink" title="v_hint：content = width x height"></a>v_hint：content = width x height</h6><p>###盒模型成员介绍</p>
<h4 id="1、content"><a href="#1、content" class="headerlink" title="1、content"></a>1、content</h4><ul>
<li>通过设置width与height来规定content</li>
<li>块级标签可以设置自身宽高，默认宽为父级宽(width=auto)、高为0，高度可以由内容决定</li>
<li>内联标签不可以设置自身宽高，默认宽高均为0，宽高一定由内容决定</li>
</ul>
<h4 id="2、border"><a href="#2、border" class="headerlink" title="2、border"></a>2、border</h4><ul>
<li>border(边框)由border-width(宽度)、border-color(颜色)、border-style(风格)三部分组成</li>
<li>border成员：border-left、border-right、border-top、border-bottom</li>
<li>border-width成员：border-left-width、border-right-width、border-top-width、border-bottom-width</li>
<li>border-color成员：border-left-color、border-right-color、border-top-color、border-bottom-color</li>
<li>border-style成员：border-left-style、border-right-style、border-top-style、border-bottom-style</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">风格</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">solid</td>
<td style="text-align:center">实线</td>
</tr>
<tr>
<td style="text-align:center">dashed</td>
<td style="text-align:center">虚线</td>
</tr>
<tr>
<td style="text-align:center">dotted</td>
<td style="text-align:center">点状线</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">双实线</td>
</tr>
<tr>
<td style="text-align:center">groove</td>
<td style="text-align:center">槽状线</td>
</tr>
<tr>
<td style="text-align:center">ridge</td>
<td style="text-align:center">脊线</td>
</tr>
<tr>
<td style="text-align:center">inset</td>
<td style="text-align:center">内嵌效果线</td>
</tr>
<tr>
<td style="text-align:center">outset</td>
<td style="text-align:center">外凸效果线</td>
</tr>
</tbody>
</table>
<h6 id="v-hint：border满足整体设置语法，eg：border-1px-solid-red"><a href="#v-hint：border满足整体设置语法，eg：border-1px-solid-red" class="headerlink" title="v_hint：border满足整体设置语法，eg：border: 1px solid red;"></a>v_hint：border满足整体设置语法，eg：border: 1px solid red;</h6><h4 id="3、padding"><a href="#3、padding" class="headerlink" title="3、padding"></a>3、padding</h4><ul>
<li>padding成员：padding-left、padding-right、padding-top、padding-bottom</li>
<li>padding整体设置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">值得个数</th>
<th style="text-align:center">方位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">上下左右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">上下 \</td>
<td>左右</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">上 \</td>
<td>左右 \</td>
<td>下</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">上 \</td>
<td>右 \</td>
<td>下 \</td>
<td>左</td>
</tr>
</tbody>
</table>
<h4 id="4、margin"><a href="#4、margin" class="headerlink" title="4、margin"></a>4、margin</h4><ul>
<li>margin成员：margin-left、margin-right、margin-top、margin-bottom</li>
<li>margin整体设置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">赋值个数</th>
<th style="text-align:center">方位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">上下左右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">上下 \</td>
<td>左右</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">上 \</td>
<td>左右 \</td>
<td>下</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">上 \</td>
<td>右 \</td>
<td>下 \</td>
<td>左</td>
</tr>
</tbody>
</table>
<p>###边界圆角</p>
<h4 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h4><ul>
<li>border-radius成员</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">成员</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">border-top-left-radius</td>
<td style="text-align:center">左上 方位</td>
</tr>
<tr>
<td style="text-align:center">border-top-right-radius</td>
<td style="text-align:center">右上 方位</td>
</tr>
<tr>
<td style="text-align:center">border-bottom-left-radius</td>
<td style="text-align:center">左下 方位</td>
</tr>
<tr>
<td style="text-align:center">border-bottom-right-radius</td>
<td style="text-align:center">右下 方位</td>
</tr>
</tbody>
</table>
<ul>
<li>单方位设置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">赋值个数(值类型：长度 \</th>
<th style="text-align:center">百分比)</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">横纵</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">横 \</td>
<td>纵</td>
</tr>
</tbody>
</table>
<ul>
<li>按角整体设置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">赋值个数(值类型：长度 \</th>
<th style="text-align:center">百分比)</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">左上 右上 左下 右下</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">左上 右下 \</td>
<td>右上 左下</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">左上  \</td>
<td>右上 左下 \</td>
<td>右下</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">左上 \</td>
<td>右上 \</td>
<td>右下 \</td>
<td>左下</td>
</tr>
</tbody>
</table>
<ul>
<li>分向整体设置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1 / 1</td>
<td style="text-align:center">横向 \</td>
<td>纵向</td>
</tr>
</tbody>
</table>
<p>###其他相关属性</p>
<ul>
<li>max|min-width|height</li>
<li>overflow</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">visible</td>
<td style="text-align:left">默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:left">内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td style="text-align:center">scroll</td>
<td style="text-align:left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:center">auto</td>
<td style="text-align:left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:left">规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody>
</table>
<ul>
<li>display</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">inline</td>
<td style="text-align:center">内联</td>
</tr>
<tr>
<td style="text-align:center">block</td>
<td style="text-align:center">块级</td>
</tr>
<tr>
<td style="text-align:center">inline-block</td>
<td style="text-align:center">内联块</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>前端（五）之浮动</title>
    <url>/2018/12/10/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="前端之浮动布局、清浮动"><a href="#前端之浮动布局、清浮动" class="headerlink" title="前端之浮动布局、清浮动"></a>前端之浮动布局、清浮动</h1><h2 id="display-总结"><a href="#display-总结" class="headerlink" title="display 总结"></a>display 总结</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display 总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*1. 同行显示，就相当于纯文本，当一行显示不下，那么显示不下的（字）就会自动换行，和纯文本的区别就是有标签整体的概念，标签与标签间有一个空格的隔断*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*2. 支持部分 css 样式，不支持宽高 | 不支持行高，行高会映射到父级 block 标签 | 不支持 margin 上下*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*3. content 由文本内容撑开*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*4. inline 标签只嵌套 inline 标签*/</span></span></span><br><span class="line">        abc &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="comment">/*line-height: 300px;*/</span></span></span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            margin-bottom: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*1. 同行显示，就相当于纯文本，标签会作为一个整体换行显示*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*2. 支持所有 css 样式，*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*3. content 默认由文本（图片）内容撑开，也可以自定义宽高，当自定义宽高后一定会采用自定义宽高（显示区域不足，内容会在标签内部换行显示，可能超出显示区域）*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*4. inline-block 标签不建议嵌套任意标签*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d2</span> &#123;</span></span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        def &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            background: blue;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*1. 异行显示，不管自身区域多大都会独占一行*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*2. 支持所有css 样式，*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*3. width默认继承父级，height由内容（文本、图片、子标签）撑开，当设置自定义宽高后一定采用自定义宽高*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*4. block 标签可以嵌套任意标签*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d3</span> &#123;</span></span><br><span class="line">            background: brown;</span><br><span class="line">        &#125;</span><br><span class="line">        opq &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            background: cyan;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">abc</span>&gt;</span> 自定义标签<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">abc</span>&gt;</span> 自定义标签<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">abc</span>&gt;</span> 自定义标签<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">def</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">def</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">def</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">def</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">def</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">def</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">opq</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">opq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">opq</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">opq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">opq</span>&gt;</span>自定义标签<span class="tag">&lt;/<span class="name">opq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- inline-block 不建议作为结构|布局层理由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        xyz &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">        xyz &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*文本垂直方向控制属性*/</span></span></span><br><span class="line">            vertical-align: top;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.x2</span> &#123;</span></span><br><span class="line">            line-height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xyz</span> <span class="attr">class</span>=<span class="string">"x1"</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">xyz</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xyz</span> <span class="attr">class</span>=<span class="string">"x2"</span>&gt;</span>两段文本<span class="tag">&lt;/<span class="name">xyz</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xyz</span> <span class="attr">class</span>=<span class="string">"x3"</span>&gt;</span>三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本三段文本<span class="tag">&lt;/<span class="name">xyz</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="overflow在处理超出内容中的应用"><a href="#overflow在处理超出内容中的应用" class="headerlink" title="overflow在处理超出内容中的应用"></a>overflow在处理超出内容中的应用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>overflow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span> &#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.d2</span> &#123;</span></span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-top: -50px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.b1</span> &#123;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="comment">/*overflow:处理内容超出盒子显示区域*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* auto：自适应，内容超出，滚动显示超出部分，不超出则正常显示*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*scroll：一直采用滚动方式显示*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*overflow: scroll;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*hidden：隐藏超出盒子显示范围的内容*/</span></span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*注：根据文本的具体超出范围，横向纵向均可能出现滚动条*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.b2</span> &#123;</span></span><br><span class="line">            background: cyan;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本层要高于背景层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span>我是文本我是<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span>我是文本我是<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 问题：内容（文本、图片、子标签）会超出盒子的显示区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span>我是文本我是我是文本我是我是文本我是我是文本我是我是文本我是<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b2"</span>&gt;</span>sdfsafafasdfafasdfsdfsafafasdfafasdfsdfsafafasdfafasdfsdfsafafasdfafasdfsdfsafafasdfafasdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.temp</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: orange;</span><br><span class="line"><span class="css">            <span class="comment">/*Box自身水平方向的位置由margin左或右决定(具体已经参照BFC方位)，属于同一个BFC的两个相邻Box的margin会发生叠加。*/</span></span></span><br><span class="line">            margin-right: 100px;</span><br><span class="line">            float: right;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="xml">        /*<span class="comment">&lt;!-- float：浮动布局，改变 bfc 的参照方位，就可以改变盒子的排列方式 --&gt;</span>*/</span></span><br><span class="line"><span class="xml">        /*<span class="comment">&lt;!-- 为什么要使用：块级盒子就会同行显示 --&gt;</span>*/</span></span><br><span class="line"><span class="css">        <span class="comment">/*float: left | right*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: orange;</span><br><span class="line">            font: 900 40px/100px 'STSong';</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*注：浮动布局的横向显示范围由父级width 决定，当一行显示不下时会自动换行，排列方式（起点）还是遵循 BFC 参照方位 =&gt; 固定了父级width 也就固定了浮动布局的行数*/</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"temp"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wraper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="清浮动"><a href="#清浮动" class="headerlink" title="清浮动"></a>清浮动</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>清浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.outter</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 200px;*/</span></span></span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*清浮动：让父级（有浮动子级）获得一个合适的高度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*子标签设置浮动 =&gt; 导致子标签不完全脱离文档流*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*脱离文档流：产生了新的 BFC，（不再关联父级宽高）*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*浮动的子级，默认不会获取父级宽度，也不会撑开父级高度*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*不完全：父级在做清浮动操作后，可以重新被子级撑开高度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*当父级没有下兄弟标签可以不做清浮动，但清浮动操作应该在每一次发生浮动后均需要处理*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: red;</span><br><span class="line">            float: left;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*清浮动操作*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outter</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: cyan;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*盒子先加载 before，在加载自身（文本、图片、子标签），最后加载after*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.div</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">            content: '123';</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: '456';</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清浮动：清除浮动导致的布局问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span>原文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="清浮动方式"><a href="#清浮动方式" class="headerlink" title="清浮动方式"></a>清浮动方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>清浮动方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.sub</span>, <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*1. 设置死高度*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sup</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 200px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*2. overflow*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">            background: cyan;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*3. 兄弟标签清浮动*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*clear: left;*/</span></span></span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*4. 伪类清浮动*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清浮动：使父级获取一个合适高度 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通常情况下在子级浮动，父级不会被撑开高度在该问题发生之后做清浮动操作 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在发生浮动之前，可以通过设置父级的高度来避免浮动问题。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bb</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/*手动设置了死高度，才会产生超出高度的内容为无用内容*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 50px;*/</span></span></span><br><span class="line">            background: pink;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bb"</span>&gt;</span>hao<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="一-display-总结"><a href="#一-display-总结" class="headerlink" title="一 display 总结"></a>一 display 总结</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* inline */</span></span><br><span class="line">        <span class="comment">/*1. 同行显示，就相当于纯文本，当一行显示不下，那么显示不下的（字）就会自动换行，和纯文本的区别就是有标签整体的概念，标签与标签间有一个空格的隔断*/</span></span><br><span class="line">        <span class="comment">/*2. 支持部分 css 样式，不支持宽高 | 不支持行高，行高会映射到父级 block 标签 | 不支持 margin 上下*/</span></span><br><span class="line">        <span class="comment">/*3. content 由文本内容撑开*/</span></span><br><span class="line">        <span class="comment">/*4. inline 标签只嵌套 inline 标签*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* inline-block */</span></span><br><span class="line">        <span class="comment">/*1. 同行显示，就相当于纯文本，标签会作为一个整体换行显示*/</span></span><br><span class="line">        <span class="comment">/*2. 支持所有 css 样式，*/</span></span><br><span class="line">        <span class="comment">/*3. content 默认由文本（图片）内容撑开，也可以自定义宽高，当自定义宽高后一定会采用自定义宽高（显示区域不足，内容会在标签内部换行显示，可能超出显示区域）*/</span></span><br><span class="line">        <span class="comment">/*4. inline-block 标签不建议嵌套任意标签*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* block */</span></span><br><span class="line">        <span class="comment">/*1. 异行显示，不管自身区域多大都会独占一行*/</span></span><br><span class="line">        <span class="comment">/*2. 支持所有css 样式，*/</span></span><br><span class="line">        <span class="comment">/*3. width默认继承父级，height由内容（文本、图片、子标签）撑开，当设置自定义宽高后一定采用自定义宽高*/</span></span><br><span class="line">        <span class="comment">/*4. block 标签可以嵌套任意标签*/</span></span><br></pre></td></tr></table></figure>
<h3 id="二-overflow-知识"><a href="#二-overflow-知识" class="headerlink" title="二 overflow 知识"></a>二 overflow 知识</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* overflow：处理内容超出盒子显示区域 */</span></span><br><span class="line">overflow: auto | scroll | hidden</span><br><span class="line">        <span class="comment">/*overflow:处理内容超出盒子显示区域*/</span></span><br><span class="line">        <span class="comment">/* auto：自适应，内容超出，滚动显示超出部分，不超出则正常显示*/</span></span><br><span class="line">        <span class="comment">/*scroll：一直采用滚动方式显示*/</span></span><br><span class="line">        <span class="comment">/*overflow: scroll;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*hidden：隐藏超出盒子显示范围的内容*/</span></span><br><span class="line">        <span class="comment">/*注：根据文本的具体超出范围，横向纵向均可能出现滚动条*/</span></span><br></pre></td></tr></table></figure>
<h3 id="三-浮动布局"><a href="#三-浮动布局" class="headerlink" title="三 浮动布局"></a>三 浮动布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*float：浮动布局，改变 bfc 的参照方位，就可以改变盒子的排列方式 */</span></span><br><span class="line"><span class="comment">/*为什么要使用：块级盒子就会同行显示 */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">float: left | right; 左 | 右 浮动</span><br><span class="line"><span class="comment">/*left: BFC 参照方向从左向右*/</span></span><br><span class="line"><span class="comment">/*right: BFC 参照方向从右向左*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*浮动的区域由父级的 width 决定*/</span></span><br></pre></td></tr></table></figure>
<h3 id="四-清浮动"><a href="#四-清浮动" class="headerlink" title="四 清浮动"></a>四 清浮动</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">浮动问题：子级浮动了，不再撑开父级的高度，那么父级如果拥有兄弟标签可能就会出现布局重叠</span><br><span class="line">清浮动：解决上面的问题，通过使父级获取一个合适的高度，这样子级就不会和父级的兄弟布局发生重叠</span><br><span class="line">清浮动的本质是：left | right | both</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清浮动的四种方式*/</span></span><br><span class="line">1. 设置腹肌的死高度</span><br><span class="line">2. 通过兄弟设置 <span class="selector-tag">clear</span>: <span class="selector-tag">both</span></span><br><span class="line">3. 设置父级 <span class="selector-tag">overflow</span> 属性为 <span class="selector-tag">hidden</span></span><br><span class="line">    <span class="selector-class">.sup</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">4. 通过父级: <span class="selector-tag">after</span> 伪类</span><br><span class="line">    <span class="selector-class">.sup</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>浮动</tag>
      </tags>
  </entry>
  <entry>
    <title>前端（二）之  CSS</title>
    <url>/2018/12/05/%E5%89%8D%E7%AB%AF%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B-CSS/</url>
    <content><![CDATA[<h1 id="前端之-CSS"><a href="#前端之-CSS" class="headerlink" title="前端之 CSS"></a>前端之 CSS</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天学习了标记式语言，也就是无逻辑语言。了解了网页的骨架是什么构成的，了解了常用标签，两个指令以及转义字符；其中标签可以分为两大类：</p>
<ol>
<li>一类是根据标签内容可以分类单双标签，单标签指的是不需要字内容，标签就可以代表所有功能；双标签：主内容可以包含文本，也可以包含子标签（具有作用域）；</li>
<li>另一类是根据标签显示的效果可以分为行块标签，块标签会换行显示；行标签会同行显示。</li>
</ol>
<p>今天学习 CSS，被称之为网页的化妆师。</p>
<h2 id="什么是-CSS"><a href="#什么是-CSS" class="headerlink" title="什么是 CSS"></a>什么是 CSS</h2><p>CSS 全称为级联样式表（Cascading Style Sheet），主要负责页面的风格设计，样式、美观。通常以.css 后缀结尾。</p>
<ol>
<li><p>标记语言</p>
<p>和 html 一样是非编程语言，不具备语言的程序逻辑。</p>
</li>
<li><p>css 为前端页面的样式，由选择器、作用域与样式块组成。</p>
<p>选择器：由标签、类、id 单独或组合出现；</p>
<p>作用域：一组大括号包含的区域；</p>
<p>样式块：满足 css 连接语法的众多样式。</p>
</li>
<li><p>css 发展史代表版本</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">① 1990年，Tim Berners-Lee和Robert Cailliau共同发明了Web。1994年，Web真正走出实验室。</span><br><span class="line">② 1994年哈坤·利提出了CSS的最初建议。而当时伯特·波斯（Bert Bos）正在设计一个名为Argo的浏览器，于是他们决定一起设计CSS。</span><br><span class="line">③ 哈坤于1994年在芝加哥的一次会议上第一次提出了CSS的建议，1995年的www网络会议上CSS又一次被提出，博斯演示了Argo浏览器支持CSS的例子，哈肯也展示了支持CSS的Arena浏览器。</span><br><span class="line">④ 1997年初，W3C组织负责CSS的工作组开始讨论第一版中没有涉及到的问题。其讨论结果组成了1998年5月出版的CSS规范第二版。</span><br><span class="line">⑤ CSS3是CSS（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块。</span><br></pre></td></tr></table></figure>
<h2 id="CSS-书写语法"><a href="#CSS-书写语法" class="headerlink" title="CSS 书写语法"></a>CSS 书写语法</h2><p>css 由三部分组成：选择器、作用域与样式块。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    样式1: 值1;</span><br><span class="line">    样式2: 值2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-的三种引入方式"><a href="#CSS-的三种引入方式" class="headerlink" title="CSS 的三种引入方式"></a>CSS 的三种引入方式</h2><h3 id="第一种引入方式：行间式"><a href="#第一种引入方式：行间式" class="headerlink" title="第一种引入方式：行间式"></a>第一种引入方式：行间式</h3><p>特点：</p>
<ol>
<li>书写在标签的 style全局属性中；</li>
<li>样式格式为=》key：value（单位）；</li>
<li>以分号隔开多个样式；</li>
<li>最后的分号可以省略</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css 三种引入第一种引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认有宽 高为0 背景颜色默认为透明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; background-color: green"</span>&gt;</span>css 第一种引入行间式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第二种引入方式：内联式"><a href="#第二种引入方式：内联式" class="headerlink" title="第二种引入方式：内联式"></a>第二种引入方式：内联式</h3><p>特点：</p>
<ol>
<li>样式书写在 head 标签内的 style 属性内；</li>
<li>样式格式为 =&gt; 选择器：p|作用域 {}|样式块；</li>
<li>以分号隔开多个样式；</li>
<li>最后的分号可以省略</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>css 三种引入第二种引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内联式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">            p &#123;</span><br><span class="line">                width: 150px;</span><br><span class="line">                height: 150px;</span><br><span class="line">                background-color: red</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            css 第二种引入内联式引入</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第三种引入方式：外联式"><a href="#第三种引入方式：外联式" class="headerlink" title="第三种引入方式：外联式"></a>第三种引入方式：外联式</h3><p>特点：</p>
<ol>
<li>书写在外部的 css文件中，不需要书写任何标签；</li>
<li>其他同上</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css 文件书写 css 语法*/</span></span><br><span class="line"><span class="comment">/*外部 css 文件 00.css*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第三种引入外联式引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'./00.css'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">           第三种引入外联式引入</span><br><span class="line">       <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS-三种引入方式的优先级"><a href="#CSS-三种引入方式的优先级" class="headerlink" title="CSS 三种引入方式的优先级"></a>CSS 三种引入方式的优先级</h2><p>三种可以同时存在并协同完整布局，三种引入方式之间没有优先级之说，哪种引入方式在逻辑下方（后解释的）谁就起作用（样式覆盖）。并且行间式一定是逻辑最下方的。</p>
<p>当三种引入方式同时存在且操作同一对象的同一属性时，才会出现冲突，最终起作用的就是优先级高的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*o4.css*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三种引入的优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 三种可以同时存在，协同完整布局 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三种之间没有优先级之说 谁在逻辑下方（后解释的）谁就起作用（样式覆盖） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 行间式一定是逻辑最下方的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            color: pink;</span><br><span class="line"><span class="css">            <span class="comment">/*height: 200px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./04.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 优先级：大家同时存在且操作统一对象同一属性，才会出现冲突，最终起作用的就是优先级高的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 行间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: cyan; color: orange"</span>&gt;</span>你是个好人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* div =&gt; 标签名 =》 标签选择器：开发过程中尽可能少的运用，运用范围为最内层的显示层 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* dd =&gt; class 名 =》 类选择器：布局的主力军 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* d =&gt; id名 =》 id 选择器：一定唯一的 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* * =&gt; 通配选择器 =》控制 html,body,body 下所有用于显示内容的标签（head 不参与显示）*/</span></span></span><br><span class="line">        * &#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 三种选择器有优先级*/</span></span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 类选择器： .类名&#123;&#125; */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.dd</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* id 选择器： #id名 &#123;&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d</span> &#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 优先级：id 选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 作用范围越精确，优先级越高*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.div</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: orange</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 多类名：类名与类名之间不能拥有任何符号隔断 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span><span class="selector-class">.div</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.div</span><span class="selector-class">.red</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ***** --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选择器：css 选择 html 标签的一个工具 =》将 html 与 css 建立起联系，那么 css 就可以控制 html样式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选择器就是给 html 标签起名字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dd"</span> <span class="attr">id</span>=<span class="string">"d"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="长度单位与颜色"><a href="#长度单位与颜色" class="headerlink" title="长度单位与颜色"></a>长度单位与颜色</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>长度单位与颜色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*px mm cm in em vw vh*/</span></span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="comment">/*颜色单词 | rgb() 0~255 | rgba | #六个十六进制数*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:  <span class="selector-tag">rgba</span>(255,0,255,0<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* #abc == #AABBCC*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#00FFFF</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文本样式操作"><a href="#文本样式操作" class="headerlink" title="文本样式操作"></a>文本样式操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本样式操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: orange</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*字体样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"></span><br><span class="line">            width: 400px;</span><br><span class="line"><span class="css">            <span class="comment">/*字族*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* STSong 作为首选字体，微软雅黑作为备用字体*/</span></span></span><br><span class="line">            font-family: 'STSong','微软雅黑';</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-class">.uu</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 字体大小*/</span></span></span><br><span class="line">            font-size: 40px;</span><br><span class="line"><span class="css">            <span class="comment">/*字重*/</span></span></span><br><span class="line">            font-weight: 100;</span><br><span class="line"><span class="css">            <span class="comment">/*风格*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*none清除系统字体风格*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*font-style: none;*/</span></span></span><br><span class="line">            font-style: italic;</span><br><span class="line"><span class="css">            <span class="comment">/*行高：某一段文本在自身行高中可以垂直居中显示=》文本垂直居中*/</span></span></span><br><span class="line">            line-height: 200px;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*字体整体设置*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*字重 风格 大小/行高 字族 （风格可以省略）*/</span></span></span><br><span class="line">            font: 100 normal 60px/200px 'STSong';</span><br><span class="line">        /*&#125;</span><br><span class="line">        i &#123;</span><br><span class="line">            Normal 清除系统字体风格</span><br><span class="line">            font-style: normal;</span><br><span class="line">        &#125;*/</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.w1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*换行方式*/</span></span></span><br><span class="line">            word-break: break-all;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.w2</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line"><span class="css">            <span class="comment">/*水平居中：left|center|right*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*text-align: center;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*字划线 中下上划线*/</span></span></span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">            text-decoration: underline;</span><br><span class="line">            text-decoration: overline;</span><br><span class="line"><span class="css">            <span class="comment">/*字间距*/</span></span></span><br><span class="line">            letter-spacing: 5px;</span><br><span class="line"><span class="css">            <span class="comment">/*词间距*/</span></span></span><br><span class="line">            word-spacing: 5px;</span><br><span class="line"><span class="css">            <span class="comment">/*缩进*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*1em 相当于一个字的宽度*/</span></span></span><br><span class="line">            text-indent: 2em;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*取消划线*/</span></span></span><br><span class="line">            text-decoration: none</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box uu"</span>&gt;</span>[普通文本]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>i的文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span> 一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap w1"</span>&gt;</span> 一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二三四五一二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap w2"</span>&gt;</span>hello world hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sfjsflj"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            background-color: orange</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*block: 块级标签，独占一行，支持所有 css 样式*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*inline：内联（行级）标签，同行显示，不支持宽高*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*inline-block：内联块标签，同行显示，支持所有 css 样式*/</span></span></span><br><span class="line">            display: inline-block;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*标签的嵌套规则*/</span></span></span><br><span class="line"><span class="css">             <span class="comment">/*block 可以嵌套所有显示类型标签，div|h1~h6|p，*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*注：hn 与 p 属于文本类型标签，所以一般只嵌套inline 标签*/</span></span></span><br><span class="line"></span><br><span class="line">            /* inline 标签只能嵌套 inline 标签，span|i|b|sub|sup|ins|</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*inline-block 可以嵌套其他类型标签，但不建议嵌套任意类型标签 img|input*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.b1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.b2</span> &#123;</span></span><br><span class="line">            height: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.b3</span> &#123;</span></span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*文本基线对齐*/</span></span></span><br><span class="line">            vertical-align: baseline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b1"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b2"</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b3"</span>&gt;</span>789<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码</title>
    <url>/2018/10/08/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p><strong>本来都以为自己完全弄懂字符编码了，昨天一个小问题给难倒了，思考了很久才得出答案，惭愧</strong></p>
<h1 id="字符编码的简介"><a href="#字符编码的简介" class="headerlink" title="字符编码的简介"></a>字符编码的简介</h1><p>字符编码可以说每一种编程语言都会遇到的问题，为什么会有这么多的问题呢，就是因为计算机发展速度太快了，不仅计算机的诞生国要使用，第三世界国家也要使用，所以人和计算机的交流方式就变得复杂起来。像英语国家最简单，直接用一个字节也就是7bit，总共128种状态就可以满足交流需求；但是像中国等不以英语为第一母语的国家就会出很多问题了，但中文就有60000+个，那么很显然，7bit满足不了需求，所以为了满足需求，中国出了gb2312编码，不过gb2312也不能满足需求，所以又出来了gbk编码，可以表示60000+汉子。</p>
<p>虽然可以通过自己国家去规定本国的字符编码方式，可是这么多国家，每个国家都有自己的编码方式，那么跨过交流会变得困难起来。为了解决这种问题，在1990年开始起草unicode码，简称万国码。里面是一张超级大的对照表，包含了所有的编码集，比如：utf-8、shiftjis、gbk、iso-8859-1。既然包含这么多的对照表，那么每个国家都继续用自己的编码操作文件，但是在内存中都用unicode码，存的时候又根据unicode对照映射成自己国家的编码方式存储不就可以解决跨国交流的问题了嘛。</p>
<h1 id="文本编辑器打开文件"><a href="#文本编辑器打开文件" class="headerlink" title="文本编辑器打开文件"></a>文本编辑器打开文件</h1><p>文本编辑器打开文件通常分为三步：</p>
<ol>
<li><p>首先启动文本编辑器</p>
</li>
<li><p>文本编辑器将存储在硬盘中的文件读入内存</p>
</li>
<li><p>文本编辑器识别内存中文件的编码方式进而解码</p>
<p>第一步不用多解释了，重要在第二步和第三步。</p>
<p>硬盘中的文件会有一种编码方式，如下图</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw0v8r9cm5j30vm05w77y.jpg" alt></p>
</li>
</ol>
<p>可以看出来有ASCII和UTF-8两种编码方式，所以当文本编辑器将它们读入内存中时，需要按照ASCII和UTF-8分别解码成unicode码（内存中默认编码都为unicode），第三步需要在显示屏上显示出来，那么需要将内存中的unicode码解码出来，那么这时候按照什么解码方式呢？如果我们没指定的话按照当前环境的编码方式，比如windows系统默认编码方式为gbk，类linux系统默认编码方式为utf-8。所以这就会出现问题了，假如在windows系统中读取utf-8编码方式的文件时</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw0x03quo8j319e0gm764.jpg" alt></p>
<p>在windows下使用python2进行试验，定义了一个变量，并且是unicode编码的，当我分别是用utf-8和gbk对unicode编码时，然后打印发现utf-8码乱码了，这就说明在打印的时候会根据当前环境的编码方式进行解码，这和windows默认编码为gbk是相符的。</p>
<h1 id="python中的编码"><a href="#python中的编码" class="headerlink" title="python中的编码"></a>python中的编码</h1><p>在python中有两种编码：分别为文件编码以及运行代码时定义字符串的编码</p>
<ol>
<li><p>第一种在前面解释了，总的来说一个文本编辑器从硬盘中读入文件时，第一步按照文件存储的编码解码为unicode码存入内存，然后根据文件头声明的编码解码（如果有文件头声明编码方式的话），否则就按照环境默认编码进行解码。</p>
<p>而python2和python3有很大的不同，python2默认编码为ascii，python3默认编码为utf-8，即python2编写的文件默认为ASCII编码，python3编写的文件默认为utf-8编码，但是读入内存中都需要解码为unicode。</p>
</li>
<li><p>第二种的话，在上幅图中为了演示，把字符串定义为unicode码，那么字符串前面不加’u’呢？</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fw0xfocfdaj31bc0c675n.jpg" alt></p>
</li>
</ol>
<p>按照我们之前的认识，ASCII识别不了中文，所以在print(a)时应该会报错才对啊，为什么不报错呢？这个应该是python2做的改变，当识别不了中文时，使用当前系统默认编码进行编码和解码，来证明一下，我使用linux做个试验就知道了。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw0xj6hev8j31hs0dmwga.jpg" alt></p>
<p>真相大白了，python2这个改进不得不说挺机智的，因为历史遗留问题才导致python2的编码问题经过这样算是一种比较完美的解决方式。而完美的python3会有这种问题吗？怎么可能。python3是完美的。</p>
]]></content>
      <categories>
        <category>Computer Basics</category>
      </categories>
  </entry>
  <entry>
    <title>前端（六）之盒模型显隐、定位与流式布局思想</title>
    <url>/2018/12/11/%E5%89%8D%E7%AB%AF%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%98%BE%E9%9A%90%E3%80%81%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="前端之盒模型显隐、定位与流式布局思想"><a href="#前端之盒模型显隐、定位与流式布局思想" class="headerlink" title="前端之盒模型显隐、定位与流式布局思想"></a>前端之盒模型显隐、定位与流式布局思想</h1><h2 id="盒模型的显隐"><a href="#盒模型的显隐" class="headerlink" title="盒模型的显隐"></a>盒模型的显隐</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子的显隐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span>, <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="comment">/*display: none; 通过控制盒子的显示方式来隐藏盒子*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*该隐藏方式在页面中不占位*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			display: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*opacity: 0; 通过控制盒子的透明度来隐藏盒子*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*该隐藏方式在页面中占位*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*opacity: 0*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*注: 一般显隐操作的盒子都是采用定位布局*/</span></span></span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="comment">/*悬浮父级显示子级*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-tag">body</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			display: block;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="comment">/*将盒子藏到屏幕外: 不能通过盒模型布局, 也不建议通过浮动布局, 可以采用定位布局*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*margin-top: -208px*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="comment">/*定位布局的导入*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*需求: */</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*1.子级在父级的右下角显示*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*2.子级完成布局后,父级做content后,子级不需要重新布局*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			width: 300px;</span><br><span class="line">			height: 300px;</span><br><span class="line">			background: pink;</span><br><span class="line">			border: 10px solid black;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			width: 50px;</span><br><span class="line">			height: 50px;</span><br><span class="line">			background: red;</span><br><span class="line">			margin-left: auto;</span><br><span class="line">			margin-top: 150px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*能不能有一种定位, 让盒子可以通过上下左右四个方位均操作自身布局 =&gt; 定位布局*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*什么是定位布局: 可以通过上下左右四个方位完成自身布局的布局方式*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			display: none;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="comment">/*相对定位布局*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background: pink;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b2</span> &#123; <span class="attribute">background</span>: orange &#125;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.b1</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*1.设置定位属性，就会打开定位方位*/</span></span></span><br><span class="line">			position: relative;</span><br><span class="line"><span class="css">			<span class="comment">/*2.通过定位方位完成布局*/</span></span></span><br><span class="line">			top: 300px;</span><br><span class="line">			left: 300px;</span><br><span class="line"><span class="css">			<span class="comment">/*bottom: 100px;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*right: 100px;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*margin-top: 200px;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*结论*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*1.左右取左,上下取上(eg:left与right共存是,left生效)*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*2.left=-right, top=-bottom*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*3.参考系: 自身原有位置(不是某一个点,eg: right参考的就是原有位置的右边界)*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*4.自身布局后不会影响自身原有位置*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*5.不脱离文档流(脱离文档流: 不再撑开父级高度)*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 300px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background: pink;</span><br><span class="line"><span class="css">			<span class="comment">/*position: absolute;*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			width: 50px;</span><br><span class="line">			height: 50px;</span><br><span class="line">			background: red;</span><br><span class="line"><span class="css">			<span class="comment">/*1.开的定位*/</span></span></span><br><span class="line">			position: absolute;</span><br><span class="line"><span class="css">			<span class="comment">/*2.采用定位方位完成布局*/</span></span></span><br><span class="line">			right: 0;</span><br><span class="line">			bottom: 0;</span><br><span class="line">		&#125;</span><br><span class="line">		body &#123;</span><br><span class="line">			position: relative;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*注: 一般父级采用的是相对定位布局, 一般情况下,父级不需要脱离文档流*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*如果父级需要脱离文档流,用绝对定位父级完成布局,完全可以,不会影响子级相对于自身的布局,但是自身又要需要一个在文档流中的(不脱离文档流中的)定位参考父级 =&gt; 父相子绝*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*相对定位的应用场景大部分都是辅助于子级的绝对定位*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			position: relative;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*left: 0;*/</span></span></span><br><span class="line">			right: 0;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 绝对定位布局一定存在父子关系 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 导入定位布局时,父级设置宽高没?(设置了) 子级呢?(也设置了) =&gt; 父级的高度不再依赖于子级 =&gt; 子级脱离文档流 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 参考系: 最近的定位父级 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;div class="box"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	1.top|bottom|left|right都可以完成自身布局, 上下取上,左右取左</span></span><br><span class="line"><span class="comment">	2.父级必须自己设置宽高</span></span><br><span class="line"><span class="comment">	3.完全离文档流</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="comment">/*参考系: 页面窗口*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*1.top|bottom|left|right都可以完成自身布局, 上下取上,左右取左*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*2.相对于页面窗口是静止的*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*3.完全脱离文档流*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 300px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			position: fixed;</span><br><span class="line">			top: 200px;</span><br><span class="line">			right: 50px;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="z-index-属性"><a href="#z-index-属性" class="headerlink" title="z-index 属性"></a>z-index 属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>z-index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background: pink;</span><br><span class="line"><span class="css">			<span class="comment">/*父级做相对定位处理,并不是自己需要用定位完成布局,最主要的原因是辅助于子级完成绝对定位布局*/</span></span></span><br><span class="line">			position: relative;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 75px;</span><br><span class="line">			height: 75px;</span><br><span class="line">			font: normal 30px/75px "STSong";</span><br><span class="line">			text-align: center;</span><br><span class="line">			background: cyan;</span><br><span class="line"><span class="css">			<span class="comment">/*绝对定位需要大家脱离文档流,相互不会影响布局,每个都是独立相对于父级进行布局的个体*/</span></span></span><br><span class="line">			position: absolute;</span><br><span class="line"><span class="css">			<span class="comment">/*top: 0;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*bottom: 0;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*left: 0;*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b1</span> &#123;</span></span><br><span class="line">			left: 0;</span><br><span class="line">			top: 0;	</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b2</span> &#123;</span></span><br><span class="line">			right: 0;</span><br><span class="line">			top: 0;</span><br><span class="line">			background: yellow;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b3</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*虽然子级脱离了文档流,但是父子关系以及存在,子级获取100%,得到的还是父级对应的值*/</span></span></span><br><span class="line">			left: calc((100% - 75px) / 2);</span><br><span class="line">			top: calc((100% - 75px) / 2);;	</span><br><span class="line">			background: green;</span><br><span class="line"><span class="css">			<span class="comment">/*z-index改变显示层级, 显示层级的值为正整数, 值越大,显示层级越高*/</span></span></span><br><span class="line">			z-index: 1;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b4</span> &#123;</span></span><br><span class="line">			left: 0;</span><br><span class="line">			bottom: 0;</span><br><span class="line">			background: blue;</span><br><span class="line"><span class="css">			<span class="comment">/*z-index: 88889;*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b5</span> &#123;</span></span><br><span class="line">			right: 0;</span><br><span class="line">			bottom: 0;	</span><br><span class="line">			background: white;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="流式布局思想"><a href="#流式布局思想" class="headerlink" title="流式布局思想"></a>流式布局思想</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>流式布局思想<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">		html, body &#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			width: 100%;</span><br><span class="line"><span class="css">			<span class="comment">/*辅助body内部的子级有height流式布局的基础*/</span></span></span><br><span class="line">			height: 100%;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*流式布局思想: 尽可能不去使用固定属性值*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*通过父级来获取相应的属性值*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.b1</span> &#123;</span></span><br><span class="line">			width: 100%;</span><br><span class="line">			height: 100%;</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.b2</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*view-width view-height*/</span></span></span><br><span class="line">			width: 80vw;</span><br><span class="line">			height: 80vh;</span><br><span class="line">			background: orange;</span><br><span class="line"><span class="css">			<span class="comment">/*流式布局限制条件: 流式布局下宽度最大只能放大到800px,最小只能缩小到600px*/</span></span></span><br><span class="line">			max-width: 800px;</span><br><span class="line">			min-width: 600px;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		html &#123;</span><br><span class="line">			font-size: 200px;</span><br><span class="line">		&#125;</span><br><span class="line">		body &#123;</span><br><span class="line">			font-size: 100px;</span><br><span class="line">		&#125;</span><br><span class="line">		span &#123;</span><br><span class="line"><span class="css">			<span class="comment">/*设置自身字体时 em = ?px 父级字体的大小*/</span></span></span><br><span class="line">			font-size: 2em;</span><br><span class="line"></span><br><span class="line">			display: block;</span><br><span class="line"><span class="css">			<span class="comment">/*宽高em在自身设置字体大小后,值又会更改为相应大小*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*eg: body: 100px =&gt; 设置自身字体时em=100px, */</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*自身设置字体大小为2em,自身字体大小为200px =&gt; width=2em的em=200px*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*结果自身宽度是400pk*/</span></span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="comment">/*自身非设置字体时使用em单位,em值取自身字体大小*/</span></span></span><br><span class="line">			width: 2em;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*rem = html字体的大小*/</span></span></span><br><span class="line">			height: 2rem;</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			padding: 50px;</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*父级的content是提供给子级盒子利用的*/</span></span></span><br><span class="line">			margin: 0 5px;</span><br><span class="line">			border: 5px solid black;</span><br><span class="line">			padding: 5px;</span><br><span class="line"><span class="css">			<span class="comment">/*auto &lt;= 100%*/</span></span></span><br><span class="line">			width: auto;</span><br><span class="line"><span class="css">			<span class="comment">/*width: 100%;*/</span></span></span><br><span class="line">			height: 50px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;div class="b1"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- &lt;div class="b2"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- &lt;span&gt;好的&lt;/span&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="hover-父子悬浮"><a href="#hover-父子悬浮" class="headerlink" title="hover 父子悬浮"></a>hover 父子悬浮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			width: 120px;</span><br><span class="line">			height: 40px;</span><br><span class="line">			background: pink;</span><br><span class="line">			position: relative;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			width: 120px;</span><br><span class="line">			height: 100px;</span><br><span class="line">			background: black;</span><br><span class="line">			position: absolute;</span><br><span class="line">			left: 0;</span><br><span class="line">			top: 40px;</span><br><span class="line">			display: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			display: block;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="一-浮动布局的总结"><a href="#一-浮动布局的总结" class="headerlink" title="一.浮动布局的总结"></a>一.浮动布局的总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.同一结构下, 如果采用浮动布局,所有的同级别兄弟标签都要采用浮动布局</span><br><span class="line">2.浮动布局的盒子宽度在没有设定时会自适应内容宽度</span><br></pre></td></tr></table></figure>
<h2 id="二-盒子的显隐"><a href="#二-盒子的显隐" class="headerlink" title="二.盒子的显隐"></a>二.盒子的显隐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: none;</span><br><span class="line">在页面中不占位, 采用定位布局后, 显示隐藏都不会影响其他标签布局, 不需要用动画处理时</span><br><span class="line"></span><br><span class="line">opacity: 0;</span><br><span class="line">在页面中占位, 采用定位布局后, 显示隐藏都不会影响其他标签布局, 需要采用动画处理时</span><br></pre></td></tr></table></figure>
<h2 id="三-定位布局"><a href="#三-定位布局" class="headerlink" title="三.定位布局"></a>三.定位布局</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是定位布局: 可以通过上下左右四个方位完成自身布局的布局方式</span><br></pre></td></tr></table></figure>
<ul>
<li>相对定位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考系: 自身原有位置</span><br><span class="line">position: relative;  =&gt; 打开了四个定位方位</span><br><span class="line">1.top|bottom|left|right都可以完成自身布局, 上下取上,左右取左</span><br><span class="line">2.left = -right | top = -bottom</span><br><span class="line">3.布局后不影响自身原有位置</span><br><span class="line">4.不脱离文档流</span><br></pre></td></tr></table></figure>
<ul>
<li>绝对定位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考系: 最近的定位父级</span><br><span class="line">position: absolute;  =&gt; 打开了四个定位方位</span><br><span class="line">1.top|bottom|left|right都可以完成自身布局, 上下取上,左右取左</span><br><span class="line">2.父级必须自己设置宽高</span><br><span class="line">3.完全离文档流</span><br></pre></td></tr></table></figure>
<ul>
<li>固定定位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考系: 页面窗口</span><br><span class="line">position: fixed;  =&gt; 打开了四个定位方位</span><br><span class="line">1.top|bottom|left|right都可以完成自身布局, 上下取上,左右取左</span><br><span class="line">2.相对于页面窗口是静止的</span><br><span class="line">3.完全脱离文档流</span><br></pre></td></tr></table></figure>
<ul>
<li>z-index</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改显示层级(在发生重叠时使用), 值取正整数, 值不需要排序随意规定, 值大的显示层级高</span><br></pre></td></tr></table></figure>
<h2 id="四-流式布局思想"><a href="#四-流式布局思想" class="headerlink" title="四.流式布局思想"></a>四.流式布局思想</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 百分比</span><br><span class="line">2. vw | vh =&gt; max-width(height) | min-width(height)</span><br><span class="line">3. em | rem</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>工作随想</title>
    <url>/2019/07/07/%E5%B7%A5%E4%BD%9C%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<h1 id="一个月零-10-天"><a href="#一个月零-10-天" class="headerlink" title="一个月零 10 天"></a>一个月零 10 天</h1><p>今天是 7 月的第一个周末，优一宝贝接近尾声，虽然中途出现了许多意料之外的 bug，但好在没出什么大问题。工作很累，此处的累不是说写代码的累，而是沟通交流的累。</p>
<p>感觉有点承受不住了。</p>
<p>项目分工及其不明确，项目 bug 分配及其不准确，测试部人员及其不专业。用了三个及其实在出乎我的意料，因为实在没想到测试提交 bug 连提交给前端还是后端都不清楚。我有点目瞪口呆。</p>
<p>项目从 6 月初开始开发，期间需求文档理解不够透彻，是我个人的原因，在对接 OMS 系统的时候给的对接文档居然是 18 年 6 月份的，一年前的文档对接属实有点痛苦，有的参数和字段居然需要一个个调试来最后确定。这些其实都不是大问题，最后参数加密，参数和字段也确定的差不多了，然后说不用我来对接 OMS了，让我去对接 DRP 系统，好。那就对接呗。在对接 DRP 系统的过程中遇到最大的困难是查询数据需要传 sql 语句形式过去。无力吐槽，不知道是我太落后了还是 drp 系统太高级效率太高了。最后对接是成功了。查询数据也没问题，订单推送和售后单推送也完成了。这周五 uat 的时候说需要改需求。。。</p>
<p>大概可以从文字中体会到我的无奈之情，在工作前看到网上的段子说时间越久的代码越像屎山。当时我微微一笑，现在报应来了。来的猝不及防，把我一下子搞晕了。</p>
<p>上周王宁需求会仪说要改用微服务了，当时我还激动得不行，要重构代码了。虽然知道这不是一件简单的事，但是这种挑战我觉得很有动力，而不是对业务进行某些调整。结果知道，微服务不是由我们来写的。哎😔。</p>
<p>下周二应该是最后一次参与 uat 了，之后就要开始万宁项目的开发，对我来说是挑战是成长，我会全力以赴的。</p>
<p>第二个说说生活，工作一个多月以来我觉得还挺满意的，生活稳步向好，每天都还过得挺充实。早上 7 点半左右起床，洗澡然后吃早饭，八点半出发去公司，大概 40 分钟到。每逢周一、三、五的上下班地铁会有 python 和 mysql 的专栏来学习，嗯，挺好的。之前都是用的摩拜单车，但是最近发现摩拜单车少了好多，之前这里鲜有 hello 单车，但现在一大片都是 hello，阿里还是有钱啊。向摩拜单车说声对不起我抛弃你了，但是我没办法。</p>
<p>在上班途中最值得大说特说的就是路上的风景了，可谓是有山有水有树林，有花有鸟有猫狗。路上看着这些风景然后来一首应景的歌曲，会觉得人生不过如此了。最令我羡慕的就是在河边钓鱼的人了。在上班之前的某个时间和两位钓者闲聊，发现这种生活很惬意，他说早上 6 点来，自己带事物，然后钓的开心的话会钓到晚上八九点。</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>out</tag>
      </tags>
  </entry>
  <entry>
    <title>前端（四）</title>
    <url>/2018/12/07/%E5%89%8D%E7%AB%AF%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前端之常用标签的使用、边界圆角、精灵图以及盒模型的布局"><a href="#前端之常用标签的使用、边界圆角、精灵图以及盒模型的布局" class="headerlink" title="前端之常用标签的使用、边界圆角、精灵图以及盒模型的布局"></a>前端之常用标签的使用、边界圆角、精灵图以及盒模型的布局</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇博客介绍了组合选择器，包括四种，分别是群组选择器、后代（子代）选择器、兄弟（相邻选择器）及交集选择器；a 标签的四大伪类选择器，a:link、a:hover、a:active、a:visited，其中 hover 和 active 也可以用于其他标签，索引选择器包括三种</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 先位置后类型 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> </span><br><span class="line">&lt;!<span class="selector-tag">--</span> 先类型后位置 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 取反，先找到有 <span class="selector-tag">abc</span> 和 <span class="selector-tag">div</span> 类的标签，然后取反<span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[abc]</span>)</span><br></pre></td></tr></table></figure>
<p>最后介绍了最最重要的盒模型，盒模型由四部分组成由内到外分别是：content+padding+border+margin，其中 content+padding+border 参与盒子显示，margin 参与盒子布局。</p>
<h2 id="常用标签的使用"><a href="#常用标签的使用" class="headerlink" title="常用标签的使用"></a>常用标签的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>常用标签的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- SEO --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;meta name="keywords" content="8-12个以英文逗号隔开的单词或词语"&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;meta name="description" content="80字以内的一段话，与网站内容相关"&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 移动适配 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" /&gt; --&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/favicon.ico"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.img</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*根据需求,是指定高还是指定宽,设置一个,另一个会等比缩放*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*width: 200px;*/</span></span></span><br><span class="line">			height: 100px;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="comment">/*四个伪类*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*reset操作*/</span></span></span><br><span class="line">		a &#123;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="comment">/*ul的reset操作*/</span></span></span><br><span class="line">		ul &#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			padding: 0;</span><br><span class="line">			list-style: none;</span><br><span class="line"><span class="css">			<span class="comment">/*margin-left: 40px;*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1.设置锚点: 锚点名page_top --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"page_top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"./img/timg.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"00_复习预习.html"</span>&gt;</span>前往00页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 前往本页面中个某个位置: Top =&gt; 锚点 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1.设置锚点 2.设置前往锚点的a转跳 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 通配标签页可以设置锚点 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;a href="" name="t_123"&gt;&lt;/a&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"t_123"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2.设置前往锚点的a转跳: #锚点名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#page_top"</span>&gt;</span>Top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#t_123"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"00_复习预习.html#md"</span>&gt;</span>前往锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="边界圆角"><a href="#边界圆角" class="headerlink" title="边界圆角"></a>边界圆角</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>边界圆角<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background-color: orange;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*边界圆角*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*百分比控制*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*border-radius: 50%;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*实际像素控制*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*border-radius: 20px;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*横纵分离  横 / 纵*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*border-radius: 20px / 50%;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*左上为第一个角, 顺时针赋值, 无值找对角*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*左上横30px 右上横100px 右下横=左上横 左下横=右上横, 四角纵向全是50%*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*border-radius: 30px 100px / 50%;*/</span></span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="comment">/*单独设置时, 横向 纵向*/</span></span></span><br><span class="line">			/*border-top-left-radius: 50% 100%;</span><br><span class="line">			border-top-right-radius: 50% 100%;*/</span><br><span class="line">			</span><br><span class="line">			border-radius: 50% 50% 0 0 / 100% 100% 0 0;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>背景样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span>, <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 200px;</span><br><span class="line">			background-color: orange;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*图片过大会显示不全*/</span></span></span><br><span class="line">			background-image: url('img/timg.jpg');</span><br><span class="line"><span class="css">			<span class="comment">/*规定背景图片显示尺寸*/</span></span></span><br><span class="line">			background-size: 200px 200px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*图片过小会平铺*/</span></span></span><br><span class="line">			background-image: url('img/123.png');</span><br><span class="line"><span class="css">			<span class="comment">/*平铺:repeat-x | repeat-y | repeat | no-repeat*/</span></span></span><br><span class="line">			background-repeat: no-repeat;</span><br><span class="line"><span class="css">			<span class="comment">/*位置(定位): 可以写具体数值,也可以写位置单词*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*background-position: 10px center;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*background-position: right bottom;*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*background-position: center center;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*设置一个值时,控制的是x轴,y轴取center*/</span></span></span><br><span class="line"><span class="css">			<span class="comment">/*设置;两个值时,第一个值控制x,第二个值控制y*/</span></span></span><br><span class="line">			background-position: 10px 40px;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/*整体设置*/</span></span></span><br><span class="line">			background: url('img/123.png') red no-repeat 50px 50px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*注: 实际开发中,资源图片大小一定要与显示区域等大*/</span></span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/123.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>精灵图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			width: 500px;</span><br><span class="line">			height: 100px;</span><br><span class="line"><span class="css">			<span class="comment">/*height: 300px;*/</span></span></span><br><span class="line">			border: 5px solid black;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span> &#123;</span></span><br><span class="line">			background-image: url('img/bg.png');</span><br><span class="line">			background-position: 0 -150px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">			cursor: pointer;</span><br><span class="line">			background-position: 0 -250px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*1.显示区域一定要与精灵图目标小图大小一致*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*2.通过背景图片定位方式将目标小图移至显示位置*/</span></span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.lt1</span> &#123;</span></span><br><span class="line">			width: 155px;</span><br><span class="line">			height: 48px;</span><br><span class="line">			background: url('img/bg.png') no-repeat 0 0;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.lt1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">			cursor: pointer;</span><br><span class="line">			background: url('img/bg.png') no-repeat 0 -48px;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 精灵图: 各种小图拼接起来的一张大图 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 为什么使用精灵图: 减少请求次数, 降低性能的消耗, 二次加载图片资源时极为迅速(不在需要发送请求) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="盒模型布局"><a href="#盒模型布局" class="headerlink" title="盒模型布局"></a>盒模型布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>盒模型布局细节<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			width: 500px;</span><br><span class="line">			height: 100px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			width: 50px;</span><br><span class="line">			height: 50px;</span><br><span class="line">			background-color: red;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*sub在sup中 水平居中*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			/*margin-left: auto;</span><br><span class="line">			margin-right: auto;*/</span><br><span class="line">			margin: 0 auto;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*垂直居中*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sub</span> &#123;</span></span><br><span class="line">			margin-top: 24px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*margin坑: 父子联动*/</span></span></span><br><span class="line">		/*.box &#123;</span><br><span class="line">			width: 1px;</span><br><span class="line">			height: 1px;</span><br><span class="line">		&#125;*/</span><br><span class="line"><span class="css">		<span class="comment">/*解决一: 设置border-top*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			/*border-top: 1px solid transparent;</span><br><span class="line">			height: 99px;*/</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="comment">/*解决二: 设置padding-top*/</span></span></span><br><span class="line"><span class="css">		<span class="selector-class">.sup</span> &#123;</span></span><br><span class="line">			padding-top: 1px;</span><br><span class="line">			height: 99px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="comment">/*margin坑: 上兄弟margin-bottom与下兄弟margin-top重合, 取大值*/</span></span></span><br><span class="line"><span class="css">		<span class="comment">/*解决方案: 只设置一个,建议设置下兄弟margin-top*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="comment">/*margin布局: 下盒子的垂直起始位置决定于同结构中上盒子的margin结束位置;水平起始位置就是父级content最左侧*/</span></span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sup"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;div class="box"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>匿名函数python内置高阶函数以及递归</title>
    <url>/2018/10/10/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0python%E5%86%85%E7%BD%AE%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>python定义一个函数通常使用<strong>def</strong>关键词，后面跟函数名，然后是注释、代码块等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''注释'''</span></span><br><span class="line">    print(<span class="string">'from func'</span>)</span><br></pre></td></tr></table></figure>
<p>这样就在全局命名空间定义了一个叫func的函数，func表示函数体的内存地址，因为func指向函数体内存地址，所以可以通过func来调用函数。</p>
<p>那么匿名函数呢？从名字就可看出，匿名。想想就有点像以前小时候的佚名一样，带点说不清楚的神秘色彩，现在想来之所以感觉神秘可能是因为那时候不认识‘’佚‘’这个字。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">强调:</span><br><span class="line">    匿名函数的定义就相当于只产生一个变量在值,而没有绑定任何名字,</span><br><span class="line">    所以会在定义完之后就被回收,无法重复使用,只能在定义时使用一次</span><br><span class="line">应用:当某一个功能仅使用一次就没有再重复使用的必要了,就应该定义成匿名函数</span><br></pre></td></tr></table></figure>
<p>言归正传，匿名和佚名一样没有名字或者不需要知道名字，对就是这么酷。</p>
<p>定义一个匿名函数使用<strong>lambda</strong>关键词，和<strong>def</strong>比较的话会发现其实定义逻辑很像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>定义的匿名函数的意思是参数为x，返回x的平方，返回？怎么没看到return？因为<strong>lambd</strong>引号后面的值默认返回，所以没必要加return了，但是我一定要加呢？就是这么不讲道理。那么解释器只好报错了，因为你不认同我的语法，那我也没必要惯着你了。就是这么拽。</p>
<p>匿名函数的使用场景通常为使用一次就结束了，不会频繁的使用。而且匿名函数通常和python里面自带的高阶函数结合使用，在某些应用场景下会达到事倍功半的效果哦。</p>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><strong>map</strong>的意思是地图的意思，由此引申出映射表示一一对应。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw38xi26ooj30yc06qaaz.jpg" alt></p>
<p>翻译过来的意思是：创建一个迭代器，使用每个迭代的参数计算函数。 当最短的可迭代用尽时停止。</p>
<p><strong>map</strong>函数有两个参数，第一个为某种规则的函数，第二个位多个可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(type(map(func, lis)))</span><br><span class="line">print(list(map(func, lis)))</span><br></pre></td></tr></table></figure>
<p><strong>map</strong>函数把可迭代对象中的元素自动传给func，通过func的加工，得到一个生成器对象，通过<strong>list</strong>函数转化为一个列表。</p>
<p>当然，<strong>map</strong>函数可以接收多个可迭代对象，比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">lis1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lis2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">print(list(map(func, lis1,lis2)))</span><br><span class="line"><span class="comment"># 结果为[3, 5, 7, 9, 11, 13]</span></span><br></pre></td></tr></table></figure>
<p><strong>map</strong>函数会把后面迭代器对象中的元素迭代出来经过func加工，当最短的可迭代用尽是停止，所以只进行到6+7就结束了。</p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p><strong>reduce</strong>是减少、合并的意思，会把可迭代对象中的元素经过函数的加工进而产生新的结果。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw3c2zhoprj315s0a2mzk.jpg" alt></p>
<p>翻译过来就是：从左到右累加两个参数的函数到序列的项目，以便将序列减少为单个值。例如，reduce（lambda x，y：x + y，[1,2,3] ，4,5]计算（（（（（1 + 2）+3）+4）+5）。如果存在初始值，则将其放置在计算中序列的项之前，并在序列为空时用作默认值。</p>
<p><strong>reduce</strong>函数有三个参数，函数和序列都是必须参数，初始值为可选参数。</p>
<p>应用：比如求1-100的和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">print(reduce(func, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>)]))</span><br><span class="line"><span class="comment"># 结果为 5050</span></span><br></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><strong>filter</strong>的意思为过滤，通过函数的返回值对序列进行过滤。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw3c8f3y9nj310m06wq3w.jpg" alt></p>
<p>翻译过来：返回一个迭代器，产生函数（item）为真的迭代项。 如果函数为None，则返回结果为真的项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x.isdigit()</span><br><span class="line">lis = [<span class="string">'12'</span>, <span class="string">'ad'</span>, <span class="string">'34'</span>, <span class="string">'bc'</span>, <span class="string">'46'</span>]</span><br><span class="line">print(list(filter(func, lis)))</span><br><span class="line"><span class="comment"># 结果为 ['12', '34', '46']</span></span><br></pre></td></tr></table></figure>
<p><strong>filter</strong>过滤结果为真的值放进迭代器中。</p>
<h1 id="高阶函数和匿名函数"><a href="#高阶函数和匿名函数" class="headerlink" title="高阶函数和匿名函数"></a>高阶函数和匿名函数</h1><h2 id="map和匿名函数"><a href="#map和匿名函数" class="headerlink" title="map和匿名函数"></a>map和匿名函数</h2><p>在之前<strong>map</strong>函数中的func参数都是定义了一个有名参数，然后用函数名传入<strong>map</strong>函数的，有了匿名函数就不用这么麻烦了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x: x*<span class="number">2</span>, lis)))</span><br><span class="line"><span class="comment"># 结果为 [2, 4, 6, 8, 10, 12]</span></span><br></pre></td></tr></table></figure>
<h2 id="reduce和匿名函数"><a href="#reduce和匿名函数" class="headerlink" title="reduce和匿名函数"></a>reduce和匿名函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x + y, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>)], <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 输出结果为 5050</span></span><br></pre></td></tr></table></figure>
<h2 id="filter和匿名函数"><a href="#filter和匿名函数" class="headerlink" title="filter和匿名函数"></a>filter和匿名函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sala = &#123;</span><br><span class="line">     <span class="string">'MAC'</span>: <span class="number">30000</span>,</span><br><span class="line">     <span class="string">'iPhone'</span>: <span class="number">9000</span>,</span><br><span class="line">     <span class="string">'lenovo'</span>: <span class="number">10000</span>,</span><br><span class="line">     <span class="string">'xiaomi'</span>: <span class="number">3000</span></span><br><span class="line">&#125;</span><br><span class="line">print(list(filter(<span class="keyword">lambda</span> x: sala[x] &gt; <span class="number">5000</span>, sala)))</span><br><span class="line"><span class="comment"># 输出结果为 [‘iPhone', 'lenovo']</span></span><br></pre></td></tr></table></figure>
<p>匿名函数的使用场景较为单一，一次性使用，随用随时定义。在某些场景下和高阶函数结合会提升效率，同时使代码更加简洁。</p>
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="一-递归调用的定义"><a href="#一-递归调用的定义" class="headerlink" title="一 递归调用的定义"></a>一 递归调用的定义</h2><p>递归调用时函数嵌套调用的一种特殊形式，函数在调用时，直接或间接地调用了自身，就是递归调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接调用自身</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line">    f1()</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接调用自身</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line">    f1()</span><br><span class="line">f2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数会产生局部的名称空间，占用内存，因为上述这种调用会无限调用自身，python解释器的内存管理机制为了防止无限占用内存，对函数的递归调用做了层级限制，可以通过代码修改最大层级限制。</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二-递归调用的两个阶段"><a href="#二-递归调用的两个阶段" class="headerlink" title="二 递归调用的两个阶段"></a>二 递归调用的两个阶段</h2><p>递归调用包含两个明确的阶段：回溯，递推</p>
<ul>
<li><p>回溯就是从外向里一层一层递归调用下去，回溯阶段必须要有一个明确的结束条件（不然会成为死循环），每进入下一次递归时，问题的规模都应该有所减少。</p>
</li>
<li><p>递推就是从里向外一层层结束递归。</p>
</li>
<li>递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈实现的，每当进入一个函数调用，在栈下面会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以递归调用次数过多，会导致栈溢出）</li>
</ul>
<h2 id="三-二分法"><a href="#三-二分法" class="headerlink" title="三 二分法"></a>三 二分法</h2><p>从一个排序的数字列表中找到指定的数字，使用遍历的效率太低，使用二分法可以极大地缩小问题规模。</p>
<ol>
<li><p>实现in的效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">59</span>,<span class="number">99</span>,<span class="number">443</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fucn</span><span class="params">(num, nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; nums[mid_index]:</span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        fucn(num, nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> num &lt; nums[mid_index]:</span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        fucn(num,nums)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'not exis'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现index的效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">57</span>, <span class="number">73</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">97</span>, <span class="number">101</span>]  <span class="comment"># 从小到大排列的数字列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(find_num,nums)</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'not exists'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 功能</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        nums=nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 重新运行功能,传入新列表</span></span><br><span class="line">        binary_search(find_num,nums)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        nums=nums[:mid_index]</span><br><span class="line">        <span class="comment"># 重新运行功能,传入新列表</span></span><br><span class="line">        binary_search(find_num,nums)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line">        </span><br><span class="line">binary_search(<span class="number">95</span>,nums)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（一）</title>
    <url>/2018/11/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该系列为并发编程,在几乎所有的编程语言中,并发始终是绕不开的坎,可以说学习一门编程语言,学好了并发就说明这门语言你学的还可以.所以接下来就让我们好好看看 python 的并发是怎么实现的吧.</p>
<p>在学习并发之前,有必要学习一下计算机操作系统发展史,因为可以实现并发可操作系统的发展是分不开的.</p>
<h1 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h1><p>操作系统的发展史在某种意义上来说也是计算机的发展史.操作系统提供对硬件控制的调用和应用程序所必需的功能.</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>早期的计算机没有操作系统.只有单独的机器,操作者会带着记录有程序和数据的卡片或较后期的打孔纸带去操作机器.程序读入机器后,机器就开始工作直到程序停止.由于程序难免有误,所以机器通常都会中途崩溃.程序一般通过控制板的开关和状态灯来调试.</p>
<p>后来,机器引入帮助程序输入输出等工作的代码库.这是现代操作系统的起源.然而,机器每次只能执行一个任务.在英国剑桥大学,这些任务的磁从前是排成一排挂在衣钩上的,衣钩的颜色代表任务的优先级.</p>
<p>概念意义上的操作系统和通俗意义上的操作系统差距越来越大.通俗意义上的操作系统为了方便而把最普通的包和应用程序的集合包括在操作系统内.随着操作系统的发展,一些功能更强的’第二类’操作系统软件也被包括进去.在今天,没有图形界面和各种文件浏览器已经不能称之为一个真正的通俗意义上的操作系统,但事实上,运行在数据中心和服务器等领域的操作系统往往是没有图形界面的.</p>
<h2 id="第一代计算机-1940-1955-真空管和穿孔卡片"><a href="#第一代计算机-1940-1955-真空管和穿孔卡片" class="headerlink" title="第一代计算机(1940~1955):真空管和穿孔卡片"></a>第一代计算机(1940~1955):真空管和穿孔卡片</h2><p>第一代之前人类是想用机械取代人力，第一代计算机的产生是计算机由机械时代进入电子时代的标志，从Babbage失败之后一直到第二次世界大战，数字计算机的建造几乎没有什么进展，第二次世界大战刺激了有关计算机研究的爆炸性进展。</p>
<p>lowa州立大学的john Atanasoff教授和他的学生Clifford Berry建造了据认为是第一台可工作的数字计算机。该机器使用300个真空管。大约在同时，Konrad Zuse在柏林用继电器构建了Z3计算机，英格兰布莱切利园的一个小组在1944年构建了Colossus，Howard Aiken在哈佛大学建造了Mark 1，宾夕法尼亚大学的William Mauchley和他的学生J.Presper Eckert建造了ENIAC。这些机器有的是二进制的，有的使用真空管，有的是可编程的，但都非常原始，设置需要花费数秒钟时间才能完成最简单的运算。</p>
<p>在这个时期，同一个小组里的工程师们，设计、建造、编程、操作及维护同一台机器，所有的程序设计是用纯粹的机器语言编写的，甚至更糟糕，需要通过成千上万根电缆接到插件板上连成电路来控制机器的基本功能。没有程序设计语言（汇编也没有），操作系统则是从来都没听说过。</p>
<h2 id="第二代计算机-1955-1965-晶体管和批处理系统"><a href="#第二代计算机-1955-1965-晶体管和批处理系统" class="headerlink" title="第二代计算机(1955~1965):晶体管和批处理系统"></a>第二代计算机(1955~1965):晶体管和批处理系统</h2><p>由于当时的计算机非常昂贵,自认很自然的想办法减少计算机运行时间的浪费.通常采用的就是批处理系统.</p>
<p>特点:设计人员、生产人员、操作人员、程序人员和维护人员直接有了明确的分工，计算机被锁在专用空调房间中，由专业操作人员运行，这便是‘大型机’,有了操作系统的概念.</p>
<p>有了程序设计语言：FORTRAN语言或汇编语言，写到纸上，然后穿孔打成卡片，再讲卡片盒带到输入室，交给操作员，然后喝着咖啡等待输出接口.</p>
<p>工作过程:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx9wwhvbt4j30p007sq46.jpg" alt></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx9wwrodzvj30qv05b76b.jpg" alt></p>
<p>第二代计算机解决了第一代计算机的一些问题:</p>
<ol>
<li>把一个人的输入改为批量输入;</li>
<li>然后顺序计算(这个仍然有问题);</li>
<li>把一个人的输出改为批量输出.</li>
</ol>
<p>优点:因为是批处理系统,节省了计算机的使用时间,增加的计算机的使用效率;</p>
<p>缺点:</p>
<ol>
<li>整个流程需要人参与控制,将磁带搬来搬去;</li>
<li>计算的过程仍然是顺序计算-&gt;串行;</li>
<li>程序员原来独享一段时间的计算机,现在必须被统一规划到一批作业中,等待结果和重新调试的过程都需要等同批次的其他程序都运行完才可以接着使用.</li>
</ol>
<h2 id="第三代计算机-1965-1980-集成电路芯片和多道程序设计"><a href="#第三代计算机-1965-1980-集成电路芯片和多道程序设计" class="headerlink" title="第三代计算机(1965~1980):集成电路芯片和多道程序设计"></a>第三代计算机(1965~1980):集成电路芯片和多道程序设计</h2><p>在第三道计算机的操作系统广泛的应用了第二代计算机的操作系统没有的关键技术:多道技术.</p>
<p>多道程序设计技术就是指允许多个程序同时进入内存并运行.即同时把多个程序放入内存,并允许他们交替在 CPU 中运行,它们共享系统中的各种硬,软件资源.当一道程序因 I/O 请求而暂停运行时, CPU 便立即转去运行另一道程序.</p>
<p><strong>多道技术:</strong></p>
<p>​    多道技术中的多道指的是多个程序,多道技术的实现是为了解决多个程序竞争或者说共享同一个资源(比如 CPU)的有序调度问题,解决方式即多路复用,多路复用分为时间和空间的复用.</p>
<p><strong>空间复用</strong>:</p>
<p>​    将内存分为几部分,每个部分放入一个程序,这样,同一时间内内存中就有了多道程序.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx9xfpetmzj3052043mx7.jpg" alt></p>
<p><strong>时间复用:</strong></p>
<p>​    当一个程序在等待 I/O 时,另一个程序可以使用 CPU, 如果内存中可以同时存放足够多的任务,则 CPU 的利用率可以接近100%.操作系统采用了多道技术后,可以控制进程的切换,或者说进程之间去争抢CPU 的执行权限.这种切换不仅会在一个进程遇到 I/O 时进行,一个进程占用 CPU 时间过长也会切换,或者说被操作系统夺走 CPU 的执行权限.</p>
<p><strong>详解:</strong></p>
<p>​    现代计算机或者网络都是支持多用户登录的,多个用户不仅共享硬件,而且共享文件,数据库等信息,共享意味着会发生冲突和运行无序.</p>
<p>操作系统的主要作用为:</p>
<ol>
<li>记录哪个程序使用什么资源;</li>
<li>对资源请求进行分配;</li>
<li>为不同的程序和用户调解互相冲突的资源请求.</li>
</ol>
<p>我们将上述操作系统的功能总结为:处理来自多个程序发起的多个(多个即多路)共享(共享即复用)资源的请求,简称多路复用.</p>
<p>在空间复用上的问题为:程序之间的内存必须隔离,这种隔离需要在硬件层面上实现,由操作系统控制.如果内存彼此不分割,则一个程序可以访问另外一个程序的内存,这样一来就会产生应用程序的数据不安全,比如你的 qq 程序可以访问操作系统的内存,这意味着 qq 可以拿到操作系统的所有权限.其次丧失的是稳定性,某个程序崩溃时有可能把其他的程序的内存一起回收了,比如说把操作系统的内存回收,则操作系统崩溃.</p>
<h2 id="第四代计算机-1980-个人计算机时代"><a href="#第四代计算机-1980-个人计算机时代" class="headerlink" title="第四代计算机(1980~):个人计算机时代"></a>第四代计算机(1980~):个人计算机时代</h2><p>微型处理器的发展使计算机的应用普及至<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%B0%8F%E4%BC%81%E6%A5%AD" target="_blank" rel="noopener">中小企业</a>及个人爱好者。而计算机的普及又推动了硬件组件公共接口的发展（如S-100,SS-50,Apple II,ISA和PCI总线），并逐渐地要求有一种“标准”的操作系统去控制它们。在这些早期的计算机中，主要的操作系统是8080/8085/Z-80 CPU用的CP/M-80，它创建在<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%A0%94%E7%A9%B6%E5%85%AC%E5%8F%B8" target="_blank" rel="noopener">数字研究公司</a>(Digital Research)先前几个针对PDP-11架构的操作系统的基础上。在此基础上又产生了<a href="https://zh.wikipedia.org/wiki/MS-DOS" target="_blank" rel="noopener">MS-DOS</a>（或IBM公司的PC-DOS）。这些计算机在ROM（只读存储器）都有一个小小的启动程序，可以把操作系统从磁盘装载到内存。IBM-PC系列的BIOS是这一思想的延伸。自1981年第一台IBM-PC诞生以来，BIOS的功能得到不断地增强。</p>
<p>随着显示设备和处理器成本的降低，很多操作系统都开始提供图形用户界面。如：许多<a href="https://zh.wikipedia.org/wiki/UNIX" target="_blank" rel="noopener">UNIX</a>提供的X Window一类的系统、<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF" target="_blank" rel="noopener">微软</a>的<a href="https://zh.wikipedia.org/wiki/Windows" target="_blank" rel="noopener">Windows</a>系统、<a href="https://zh.wikipedia.org/wiki/%E8%8B%B9%E6%9E%9C%E5%85%AC%E5%8F%B8" target="_blank" rel="noopener">苹果公司</a>的<a href="https://zh.wikipedia.org/wiki/Mac_OS" target="_blank" rel="noopener">Mac OS</a>和<a href="https://zh.wikipedia.org/wiki/IBM" target="_blank" rel="noopener">IBM公司</a>的<a href="https://zh.wikipedia.org/wiki/OS/2" target="_blank" rel="noopener">OS/2</a>等。最初的图形用户界面是由Xerox Palo Alto研究中心70年代初期研发出来的，之后被许多公司模仿，继承发展。</p>
<h2 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h2><ol>
<li>隐藏了复杂的硬件调用接口,为应用程序员调用硬件资源提供更好,更简单,更清晰的模型.应用程序员有了这些接口后,就可以不用考虑操作硬件的细节,专心写代码即可;</li>
<li>将应用程序对硬件资源的竞争请求变得有序.</li>
</ol>
<h2 id="多道技术"><a href="#多道技术" class="headerlink" title="多道技术"></a>多道技术</h2><p>在之前第三代计算机的时候产生了多道技术,可以更高效率的使用计算机的资源.产生背景为:那时候的计算机都是单核,为了能够同一时间运行多个程序产生了多道技术.</p>
<p>多道技术的产生直接影响了计算机的发展方向,多道技术出现后,单核可以实现并发工作了.</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（三）</title>
    <url>/2018/11/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过前一篇博客的学习了解了 Unix 和 Windows 系统创建进程的方式了,对于 Unix系统来说,会把父进程的数据直接拷贝一份到子进程的内存空间;而 Windows 系统会重新加载一遍父进程的代码.</p>
<p>那么在 python 中怎么创建进程呢?其实也是调用了操作系统提供的接口,像 Unix 是 fork 接口, Windows 是 CreateProcess 接口.</p>
<h1 id="python-进程"><a href="#python-进程" class="headerlink" title="python 进程"></a>python 进程</h1><h3 id="Process-源码探析"><a href="#Process-源码探析" class="headerlink" title="Process 源码探析"></a>Process 源码探析</h3><p>首先不管怎么创建进程都是调用了一个multiprocessing模块里面的 Process 类,学习一个模块第一件事就是查看源码.(ps: 对我来说看源码很爽😋)因为 python3看不到源码,所以用 python2可以看到:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxa6rs7loog30dc064npg.gif" alt></p>
<p>翻译 Process 类的注释:进程对象表示在隔开的进程中运行的活动,这个类和 threading.Thread 同义.(因为最开始的计算机都是单核,多进程是后面才出来的)</p>
<p>那么很显然,因为 Process 是个类,那么想要创建一个进程就是实例化一个 Process 类的对象.查看<strong> init</strong>方法:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxb1y1zgtbj30yu0g0wi7.jpg" alt="image-20181116211024312"></p>
<p>哇,参数好多啊,不过大部分都可以使用默认值,第一个参数是 group, 看后面有一句注释: group 参数当前必须为 None, 好了可以不用理会了;第二个参数很重要,表示创建的进程将要进行的任务,必须要传参数(函数名);第三个是名字,可以自定义进程名;第四个是可变长参数,参数会在创建进程的时候传进 target 中;第五个为关键词参数,也是给 target 传的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> group <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>断言,只有该表达式值为 True 才会运行下面的代码.很显然不用管就行.</p>
<p>然后下面的都是一些类属性,需要关注的是 self._target,sekf._popen.</p>
<p>查看 process 模块的注释:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxauq74fldg30dc064qv5.gif" alt></p>
<p>翻译可知:</p>
<p>模块提供 Process 类是模拟于’ threading.Thread’</p>
<p>再分配和使用的源代码和二进制形式，无论有无修改,但必须符合下列的情况:</p>
<p>1.源代码的再分发必须保留上述版权声明，此条件列表和以下免责声明。 </p>
<p>2.二进制形式的再分发必须在随分发提供的文档和/或其他材料中复制上述版权声明，此条件列表和以下免责声明。</p>
<p>3.未经事先书面许可，不得使用作者姓名或任何贡献者的姓名来认可或宣传本软件衍生的产品。(ps: 这注释怎么和 process 一点关系没有😲)</p>
<h3 id="开启进程的两种方式"><a href="#开启进程的两种方式" class="headerlink" title="开启进程的两种方式"></a>开启进程的两种方式</h3><ol>
<li>实例化 Process 类</li>
</ol>
<p>创建一个子进程的 demo 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,current_process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'子'</span>, current_process)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start() <span class="comment"># 启动一个进程</span></span><br><span class="line">    print(<span class="string">'主'</span>, current_process)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>:创建进程的代码为什么要放在 mian 下面?</p>
<p>这是因为在 windows 系统下创建进程会重新加载一遍父进程的代码,如果不放在 main 判断下面的话会重复执行创建进程的代码.在 类linux 系统下就不用了.创建进程后执行start方法其实就是运行传入的 task 函数:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxatnjxgd8j30wa06y74y.jpg" alt></p>
<p>这个类方法的注释含义为:运行在子进程中的方法,可以在子类中重写.</p>
<p>看看创建的子进程的运行结果:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxav9ty4mkj314w04yjsn.jpg" alt></p>
<p>结果会打印出主进程和子进程.</p>
<ol start="2">
<li>新建一个继承自 Process 类的子类并改写 run 方法</li>
</ol>
<p>demo 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,current_process</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'子'</span>, current_process())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = MyProcess()</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'主'</span>, current_process())</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxav6zykv4j315a05675l.jpg" alt></p>
<h3 id="进程之间内存空间互相隔离"><a href="#进程之间内存空间互相隔离" class="headerlink" title="进程之间内存空间互相隔离"></a>进程之间内存空间互相隔离</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    print(<span class="string">'子'</span>, x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'主'</span>, x)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxavk7l036j315804wdgm.jpg" alt></p>
<p>可以得出即使在子进程中global x了,修改的也是子进程内存空间里面的名称,这和之前讲的子进程将父进程的代码重新加载了一遍,所以这里面的 x 是两个不同的 x.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxb1zr8r3ij315e04o3z8.jpg" alt="image-20181117110113666"></p>
<p>为什么进程的内存空间需要切必须要互相隔离呢?</p>
<p>进程隔离是为保护操作系统中进程互不干扰而设计的一组不同硬件和软件的技术.这个技术是为了避免A 进程写入 B 进程的情况发生.进程的隔离实现,使用了虚拟地址空间.进程 A 的虚拟地址和进程 B 的虚拟地址不同,这样就防止进程 A 将数据信息写入进程 B,总的来说就是为了数据安全,但也有办法可以实现进程间通信,稍后再谈.</p>
<h3 id="父子进程执行顺序与-join-方法"><a href="#父子进程执行顺序与-join-方法" class="headerlink" title="父子进程执行顺序与 join 方法"></a>父子进程执行顺序与 join 方法</h3><p>在上面的代码中实例一个进程对象然后执行 start 方法,会创建出一个子进程然后去执行任务,其实 python 只是调用了操作系统提供的接口,在上一篇博客说到,类 Unix 是调用了操作系统的 fork 函数, windows 是 CreateProcess 函数,所以是通过操作系统来调用并创建一个进程的,而创建进程需要一些必要的资源,那么在操作系统分配这些资源的过程中,主进程代码的执行应该进行完成了,所以运行结果会先出现主进程代码执行完,后子进程的代码执行完.</p>
<p><strong>创建进程的具体时间</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">'子进程运行时间'</span>)</span><br><span class="line">    print(time.time() - start_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'创建子进程'</span>, time.time() - start_time)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'主'</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxax05vxqyj315i06kabk.jpg" alt></p>
<p>可以得出创建子进程几乎花了总程序运行时间的90%以上,所以主进程先运行结束就很正常了.</p>
<p><strong>join 方法</strong></p>
<p>那么如何可以让主进程等待子进程运行结束主进程才结束呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">'子进程运行时间'</span>)</span><br><span class="line">    print(time.time() - start_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'创建子进程'</span>, time.time() - start_time)</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'主'</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxax8s8o5aj315a06i402.jpg" alt></p>
<p>这样主进程就会等待子进程运行结束才会结束.</p>
<p>join 方法:主进程等待子进程运行完毕,即主进程在原地阻塞而不影响子进程的运行.</p>
<h3 id="进程对象相关属性和方法"><a href="#进程对象相关属性和方法" class="headerlink" title="进程对象相关属性和方法"></a>进程对象相关属性和方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'start'</span>, name)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">'stop'</span>, name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">'musibii'</span>,), name=<span class="string">'musibii_Process'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">    print(p.name) <span class="comment"># 获取进程名,可以自定义</span></span><br><span class="line">    print(p.pid) <span class="comment"># 获取进程 pid</span></span><br><span class="line">    p.terminate() <span class="comment"># 结束子进程</span></span><br><span class="line">    print(p.is_alive()) <span class="comment"># 判断进程是否存活,布尔值</span></span><br><span class="line">    </span><br><span class="line">    print(os.getpid()) <span class="comment"># 当前主进程 pid</span></span><br><span class="line">    print(os.getppid()) <span class="comment"># 执行 py 文件的进程,当前为 pycharm 进程pid</span></span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxaxox6dqtj315i07mmyc.jpg" alt></p>
<p>为什么在 terminate 之后判断子进程是否存活,结果为 True 呢?</p>
<p>因为在执行终结子进程命令后需要操作系统来结束子进程,而完全终结子进程需要一定的时间,而代码执行速度很快,所以会是 True.</p>
<h3 id="僵尸进程与孤儿进程以及守护进程"><a href="#僵尸进程与孤儿进程以及守护进程" class="headerlink" title="僵尸进程与孤儿进程以及守护进程"></a>僵尸进程与孤儿进程以及守护进程</h3><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><p>在类 Unix 系统中,僵尸进程是指完成执行(通过 exit 系统调用,或运行时发生致命错误或收到终止信号所致)但在操作系统的进程表中仍然有一个表项(进程控制块 PCB),处于’终止状态’的进程.</p>
<h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><p>在操作系统中,孤儿进程指的是在其父进程执行完成或被终止后仍继续运行的一类进程,这类进程由操作系统进行管理和回收.</p>
<h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>在一个多工的电脑作业系统中,守护进程是一种在后台执行的电脑程序.此类程序会被以进程的形式初始化.守护进程程序的名称通常以’ d’结尾:例如 syslogd 就是指管理系统日志的守护进程.</p>
<p>详解:</p>
<ol>
<li>一般情况下,子进程是由父进程创建的,而子进程和父进程的退出是无顺序的,两者之间都不知道谁先退出.正常情况下父进程先结束则会调用 wait 或者 waitpid 函数等待子进程完成再退出,而一旦父进程不等待直接退出,则剩下的子进程会被 init(pid=1)进程接收,成被孤儿进程.(进程树种除了 init 都会有父进程)</li>
<li>如果子进程先退出,父进程还未结束并且没有调用 wait 或者 waitpid 函数获取子进程的状态信息,则子进程残留的状态信息(task_struct 结构和少量系统资源信息)会变成僵尸进程.</li>
<li>守护进程是指在后台运行,没有控制终端与之相连的进程.它独立于控制终端,通常周期性的执行某种任务.(特别的,守护进程不能有子进程)守护进程脱离于终端是为了避免进程在执行过程中的信息在任何终端上显示并且进程也不会被任何终端所产生的终端信息所打断.</li>
</ol>
<p>产生的危害</p>
<p>孤儿进程结束后会被 init 进程管理并处理后事,并没有危害,而僵尸进程则会一直占着进程号,操作系统的进程数量有限则会受影响.</p>
<p>解决办法:</p>
<p>一般僵尸进程的产生都是因为父进程的原因,则可以通过kill 父进程解决,这时候僵尸进程就变成了孤儿进程,被 init 进程管理.</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（六）</title>
    <url>/2018/11/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面两篇介绍了进程理论,创建进程的两种方式,互斥锁以及进程间通信的三种方式还有生产着消费者模型.除了进程间通信线程里面没有(因为线程间数据共享)其他的几乎没什么两样,而且在多进程模块里面的Process 类介绍也说了</p>
<p><code>The class is analagous to &#39;threading.Thread&#39;</code></p>
<p>大意就是说进程类和线程类类似,所以很多用法都一样.</p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h3 id="线程理论"><a href="#线程理论" class="headerlink" title="线程理论"></a>线程理论</h3><p>为了充分利用 CPU 多核的性能,程序实现了多线程模型,通过多线程实现多任务的并行执行.</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（二）</title>
    <url>/2018/11/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在第三代计算机的发展中因为出现了多道技术使得同一时刻可以在内存中同时运行多个程序,那么这样就产生了进程的概念.</p>
<p>在本篇博客中将介绍进程相关的理论知识,对操作系统进一步的认识.</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>进程( process),是指计算机中已运行的程序.进程曾经是分时系统的基本运行单位.在面向进程设计的系统(如早期的 UNIX,Linux2.4及更早的版本)中,进程是程序的基本执行实体,是操作系统的资源单位;在面向线程设计的系统(如当代多数操作系统, Linux2.6及更新的版本)中,进程本身不是基本运行单位,运行单位变为线程,进程是线程的容器.程序本身只是指令,数据及其组织形式的描述,进程才是(指令和数据)的真正运行实例.若干进程有可能与同一个程序相关系,且每个进程皆可以同步(循序)或异步(平行)的方式独立运行.现代计算机系统因为空间共享(空间复用)可在同一段时间内以进程的形式将多个程序加载到存储器中,并借由时间共享(时间复用),以在一个处理器上表现出异步(平行)运行的感觉.</p>
<p>###开启进程需要的资源</p>
<p>用户下达运行程序的命令后,就会产生进程.同一程序可产生多个进程(一对多的关系),以允许同时又多位用户运行同一程序,却不会产生冲突.</p>
<p>开启进程需要一些必要的资源才能完成工作,如 CPU 使用时间,存储器,文件以及 I/O 设备,且为依序逐一进行,也就是每个 CPU 内核任何时间内仅能运行一项进程.</p>
<p>###进程包含的资源</p>
<p>一个计算机系统集成包括(或者说拥有)下列资源:</p>
<ul>
<li>那个程序的可执行机器代码的一个在存储器的映像;</li>
<li>分配到的存储器(通常是虚拟的一个存储器区域).存储器的内容包括可执行代码,特定于进程的数据(输入或输出),调用堆栈(用于保存运行时运输中途产生的数据);</li>
<li>分配给该进程的资源的操作系统描述符,诸如文件描述符( UNIX 术语)或文件句柄( Windows),数据源和数据终端;</li>
<li>安全特性,诸如进程拥有者和进程的权限集(可以容许的操作);</li>
<li>处理器状态,诸如寄存器内容,物理存储器定址等.当进程正在运行时,状态通常保存在寄存器,其他数据保存在存储器.</li>
</ul>
<p>###进程的状态</p>
<p>进程在运行中,状态会随时发生改变.所谓状态,就是指进程目前的动作:</p>
<ul>
<li>新生( new):进程新产生重;</li>
<li>运行(running):正在运行;</li>
<li>等待( waiting):等待某事发生,例如等待用户输入完成.也称之为阻塞;</li>
<li>就绪( ready):等待 CPU;</li>
<li>结束( terminated):完成运行.</li>
</ul>
<p>各状态名称可能虽不同的操作能够系统而不同,对于单核系统( UP),任何时间可能有多个进程为等待,就绪,但必定仅有一个进程在运行.</p>
<p>###进程表</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxa00rkfj8j30cw0bvaaw.jpg" alt></p>
<p>对于一个进程来说,操作系统为了能够在CPU离开后继续执行该进程,会把此时进程运行的所有状态保存下来,为此,操作系统和会维护一张表格,即进程表( process table),每个进程占用一个进程表项(也称之为进程控制块).</p>
<p>对于上图中重要项的解释如下:</p>
<ul>
<li>寄存器:如累加器,变址寄存器,堆栈指针以及一般用途寄存器,状况代码等,主要用途在于中断</li>
</ul>
<p>进程时暂时存储数据,以便稍后继续利用;其数量及类别因计算机体系结构有所差异;</p>
<ul>
<li>程序计数器:接下来要运行的指令地址;</li>
<li>进程状态:可以是 new,ready,running,waiting,blocked或 terminated;</li>
<li>优先级( CPU 排班法):优先级,排班队列等指针以及其他参数;</li>
<li>存储管理:如标签页表,正文段指针,数据段指针以及堆栈指针等;</li>
<li>会计信息:如 CPU 遇实际时间值使用数量,时限,账号,工作或进程号;</li>
<li>输入输出状态:配置进程使用 I/O 设备,如磁带机.</li>
</ul>
<h1 id="Unix进程"><a href="#Unix进程" class="headerlink" title="Unix进程"></a>Unix进程</h1><h3 id="类-Unix-系统进程概念"><a href="#类-Unix-系统进程概念" class="headerlink" title="类 Unix 系统进程概念"></a>类 Unix 系统进程概念</h3><h4 id="Unix进程PID"><a href="#Unix进程PID" class="headerlink" title="Unix进程PID"></a>Unix进程PID</h4><p>在类 Unix 系统中可以使用 ps 命令查询正在运行的进程,比如 ps -eo pid,comm,cmd,下图为执行结果:(-e 表示列出全部进程, -o pis,comm,cmd 表示我们需要 PID,COMMAND,CMD 信息)</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxa0ll9f3uj31c00u0wso.jpg" alt></p>
<p>每一行代表一个进程.每一行分为三列.第一列为 PID(Process IDentity)是一个整数,每一个进程都有一个唯一的 PID 来表示自己的身份,进程也可以根据 PID 来识别其他的进程.第二列 COMMAND 是该进程的简称.第三列 CMD 是进程所对应的程序以及运行时所带的参数.(第三列有一些由[]括起来的,它们是内核的一部分功能)</p>
<p>在第一行的 PID 为1,名字为 systemd(18.04,版本为16.04该名字为 init).这个进程是执行/sbin/init 这一文件(程序)产生的(不知道我的为什么不是,查看了朋友的是/sbin/init😭).当 Linux 启动的时候, systemd 是系统创建的第一个进程,这一进程会一直存在,直到关闭计算机.</p>
<p>实际上,当计算机开机时,内核( kernel)只建立了一个systemd 进程. Linux 内核并不提供直接建立新进程的系统调用.剩下的所有进程都是 systemd 进程通过<strong>fork</strong> 机制建立的.新的进程要通过老的进程复制自身得到,这就是<strong>fork</strong>.fork 是一个系统调用.进程存活于内存中.每个进程都在内存中分配有属于自己的一片空间(address space).当进程<strong>fork</strong> 的时候, Linux 在内存中开辟出一片新的内存空间给新的进程,并将老的进程空间中的内容复制到新的空间中,此后两个进程同时运行.</p>
<p>老进程成为新进程的父进程(parent process),而相应的,新进程就是老进程的子进程(child process).一个进程除了有一个 PID 之外,还会有一个 PPID(parent PID)来存储父进程的 PID. 如果我们循着 PPID 不断向上追溯的话,总会发现其源头是 systemd 进程.所以说,所有的进程也构成一个以 systemd 为根的树状结构.</p>
<h4 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h4><p>使用 pstree命令查看进程树:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxa2gudtd7j31c00u0to0.jpg" alt></p>
<p>可以看到 systemd 进程是整个进程树的根.</p>
<p>fork 通常作为一个函数调用,这个函数会有两次返回,将子进程的 PID 返回给父进程,0返回给子进程.实际上,子进程总可以查询自己的 PPID 来知道自己的父进程是谁,这样,一对父子进程就可以随时查询对方.在调用<strong>fork</strong> 函数后,程序会设计一个 if 选择结构.当 PID 等于0时,说明该进程为子进程,那么让它执行某些指令;而当 PID 为一个正整数时,说明为父进程,则执行另外一些指令.由此,就可以在子进程建立之后,让它执行与父进程不同的功能.</p>
<h4 id="子进程的终结"><a href="#子进程的终结" class="headerlink" title="子进程的终结"></a>子进程的终结</h4><p>当子进程终结时,它会通知父进程,清空自己所占据的内存,并在内核里留下自己的退出信息( exit code, 如果顺利运行,返回0;如果有错误或异常状况,为&gt;0的整数).在这个信息里,会解释该进程为什么退出.父进程在得知子进程终结时,有责任对该子进程使用 wait 系统调用.这个 wait 函数能从内核中取出子进程的退出信息,清空该信息在内核中所占据的空间.但是,如果父进程早于子进程终结,子进程就会成为一个孤儿(orphand)进程.孤儿进程会过继给 systemd 进程, systemd 进程也就成了该进程的父进程. systemd 进程负责该子进程终结时调用 wait 函数,</p>
<p>一个糟糕的程序也完全可能造成子进程的退出信息滞留在内核中的状况(父进程不对子进程调用 wait 函数),这样的情况下,子进程成为僵尸( zombie)进程.当大量僵尸进程积累时,内存空间会被挤占.</p>
<h4 id="类-UNIX-系统进程和线程的区别"><a href="#类-UNIX-系统进程和线程的区别" class="headerlink" title="类 UNIX 系统进程和线程的区别"></a>类 UNIX 系统进程和线程的区别</h4><p>尽管在 UNIX 中,进程与线程是有联系但不同的两个东西,但在 Linux 中,线程只是一种特殊的进程.多个线程之间可以共享内存空间和 IO 接口.所以,进程是 Linux 程序的唯一实现方式.</p>
<h3 id="Linux创建进程"><a href="#Linux创建进程" class="headerlink" title="Linux创建进程"></a>Linux创建进程</h3><p>从系统调用<strong>fork</strong> 中返回时,两个进程除了返回值 PID 不同外,具有完全一样的用户级上下文.在子进程中, PID的值为0.在系统启动时有内核创建的进程1是唯一不通过系统调用<strong>fork</strong> 而创建的进程.也就是上图的 systemd进程.</p>
<p>内核为系统调用<strong>fork</strong> 完成下列操作:</p>
<ol>
<li>为新进程在进程表中分配一个空项;</li>
<li>为子进程赋一个惟一的进程标识号 PID;</li>
<li>做一个父进程上下文的逻辑副本.由于进程的某些部分,如正文区,可能被几个进程所共享,所以内核有时只要增加某个区的引用数即可,而不是真的将该区拷贝到一个新的内存物理区;</li>
<li>增加与该进程相关联的文件表和索引节点表的引用数;</li>
<li>对父进程返回子进程的进程号,对子进程返回零.</li>
</ol>
<p>下面是系统调用<strong>fork</strong> 的算法.内核首先确信有足够的资源来完成<strong>fork</strong>. 如果资源不满足要求,则系统调用<strong>fork</strong> 失败.如果资源满足要求,内核在进程表中找一个空项,并开始构造子进程的上下文.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入:无</span><br><span class="line"></span><br><span class="line">输出:对父进程是子进程的 PID, 对子进程是<span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	检查可用的内核资源</span><br><span class="line"></span><br><span class="line">	取一个空闲的进程表项和唯一的 PID 号</span><br><span class="line"></span><br><span class="line">	检查用户没有过多的运行进程</span><br><span class="line"></span><br><span class="line">	将子进程的状态设置为'创建'状态</span><br><span class="line"></span><br><span class="line">	将父进程的进程表中的数据拷贝到子进程表中</span><br><span class="line"></span><br><span class="line">	当前目录的索引节点和改变的根目录(如果可以)的引用数加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">	文件表中的打开文件的引用数加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">	在内存中做父进程上下文的拷贝</span><br><span class="line"></span><br><span class="line">	在子进程的系统级上下文中压入虚设系统级上下文层</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* 虚设上下文层中含有使子进程能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		/* 识别自己的数据,使子进程被调度时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		/* 从这里开始运行</span></span><br><span class="line"><span class="comment">if (正在执行的进程是父进程)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			将子进程的状态设置为'就绪'状态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			return (子进程的 PID)			//从系统到用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	else	&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			初始化计时区</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			return 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>来看下面的例子.该程序说明的是经过系统调用<strong>fork</strong> 之后,对文件的共享存取.用户调用改程序时应有两个参数,一个是已经有的文件名;另一个是要创建的新文件名.该进程打开已有的文件,创建一个新文件,然后假定没有遇见错误,它调用<strong>fork</strong> 来创建一个子进程.子进程可以通过使用相同的文件描述符来继承的存取父进程的文件(即父进程已经打开和创建的文件).</p>
<p>当然,父进程和子进程要分别独立的调用<strong>rdwrt</strong> 函数并执行一个循环,即从源文件中读一个字节,然后写一个字节到目标文件中去.当系统调用 read 遇见文件尾时,函数<strong>rdwrt</strong> 立即返回.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>	fdrd, fdwt;</span><br><span class="line"><span class="keyword">char</span>	c;</span><br><span class="line"></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((fdrd = open(argv[<span class="number">1</span>], O_RDONLY)) == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((fdwt = creat(argv[<span class="number">2</span>], <span class="number">0666</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fork();</span><br><span class="line">	<span class="comment">// 两个进程执行同样的代码</span></span><br><span class="line">	rdwrt();</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rdwrt()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		<span class="keyword">if</span> (read(fdrd, &amp;c, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		write(fdwt, &amp;c, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中,两个进程的文件描述符都指向相同的文件表项.这两个进程永远不会读或写到相同的文件偏移量,因为内核在每次 read 和 write 调用后,都要增加文件的偏移量.尽管两个进程似乎是将源文件拷贝了两次,但因为它们分担了工作任务,因此,目标文件的内容依赖于内核调度两个进程的次序.如果内核这样调度两个进程:是它们交替的执行它们的系统调用,甚至使它们交替的执行每对 read 和 write 调用,则目标文件的内容和源文件的内容完全一致.但考虑这样的情况:两个进程正要读源文件中的连续的字符’ab’.假定父进程读了字符’a’,这时,内核在父进程write 之前,做了上下文切换来执行子进程。如果子进程 读到字符 “b”，并在父进程被调度前，将它写到目标文件，那么目标文件将不再含有 字符串 “ab”，而是含有 “ba”了。内核并不保证进程执行的相对速率。</p>
<p>另一个例子:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>	<span class="built_in">string</span>[] = <span class="string">"Hello, world"</span>;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span>	count, i;</span><br><span class="line">	<span class="keyword">int</span>	to_par[<span class="number">2</span>], to_chil[<span class="number">2</span>];		<span class="comment">// 到父、子进程的管道</span></span><br><span class="line">	<span class="keyword">char</span>	buf[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">	pipe(to_par);</span><br><span class="line">	pipe(to_chil);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// 子进程在此执行</span></span><br><span class="line">		close(<span class="number">0</span>);		<span class="comment">// 关闭老的标准输入</span></span><br><span class="line">		dup(to_child[<span class="number">0</span>]);	<span class="comment">// 将管道的读复制到标准输入</span></span><br><span class="line">		close(<span class="number">1</span>);		<span class="comment">// 关闭老的标准输出</span></span><br><span class="line">		dup(to_par[<span class="number">1</span>]);		<span class="comment">// 将管道的写复制到标准输出</span></span><br><span class="line">		close(to_par[<span class="number">1</span>]);	<span class="comment">// 关闭不必要的管道描述符</span></span><br><span class="line">		close(to_chil[<span class="number">0</span>]);</span><br><span class="line">		close(to_par[<span class="number">0</span>]);</span><br><span class="line">		close(to_chil[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((count = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf)) == <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">exit</span>();</span><br><span class="line">			write(<span class="number">1</span>, buf, count);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 父进程在此执行</span></span><br><span class="line">	close(<span class="number">1</span>);		<span class="comment">// 重新设置标准输入、输出</span></span><br><span class="line">	dup(to_chil[<span class="number">1</span>]);</span><br><span class="line">	close(<span class="number">0</span>);</span><br><span class="line">	dup(to_par[<span class="number">0</span>]);</span><br><span class="line">	close(to_chil[<span class="number">1</span>]);</span><br><span class="line">	close(to_par[<span class="number">0</span>]);</span><br><span class="line">	close(to_chil[<span class="number">0</span>]);</span><br><span class="line">	close(to_par[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">		write(<span class="number">1</span>, <span class="built_in">string</span>, <span class="built_in">strlen</span>(<span class="built_in">string</span>));</span><br><span class="line">		read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子进程从父进程继承了文件描述符0和1(标准输入和标准输出)。两次执行系统调用 <strong>pipe</strong> 分别在数组 to_par 和 to_chil 中分配了两个文件描述符。然后该进程 执行系统调用 <strong>fork</strong>，并复制进程上下文：象前一个例子一样，每个进程存取 自己的私有数据。父进程关闭他的标准输出文件(文件描述符1)，并复制(dup)从管道 线 to_chil 返回的写文件描述符。因为在父进程文件描述符表中的第一个空槽是刚刚 由关闭腾出来的，所以内核将管道线写文件描述符复制到了文件描述符表中的第一 项中，这样，标准输出文件描述符变成了管道线 <strong>to_chil</strong> 的写文件描述符。 父进程以类似的操作将标准输入文件描述符替换为管道线 <strong>to_par</strong> 的读文件 描述符。与此类似，子进程关闭他的标准输入文件(文件描述符0)，然后复制 (dup) 管道 线 <strong>to_chil</strong> 的读文件描述符。由于文件描述符表的第一个空项是原先的标准 输入项，所以子进程的标准输入变成了管道线 <strong>to_chil</strong> 的读文件描述符。 子进程做一组类似的操作使他的标准输出变成管道线 <strong>to_par</strong> 的写文件描述 符。然后两个进程关闭从 <strong>pipe</strong> 返回的文件描述符。上述操作的结果是：当 父进程向标准输出写东西的时候，他实际上是写向 <strong>to_chil</strong>–向子进程发送 数据，而子进程则从他的标准输入读管道线。当子进程向他的标准输出写的时候， 他实际上是写入 <strong>to_par</strong>–向父进程发送数据，而父进程则从他的标准输入 接收来自管道线的数据。两个进程通过两条管道线交换消息。</p>
<p>无论两个进程执行的顺序如何，这个程序执行的结果是不变的。他们可能去执行睡眠 和唤醒来等待对方。父进程在15次循环后退出。然后子进程因管道线没有写进程而读 到“文件尾”标志，并退出。</p>
<h1 id="Windows进程"><a href="#Windows进程" class="headerlink" title="Windows进程"></a>Windows进程</h1><h3 id="进程-PID"><a href="#进程-PID" class="headerlink" title="进程 PID"></a>进程 PID</h3><p>windows 也是使用 PID 来唯一标识一个进程.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxa4h747kpj31c00u0duj.jpg" alt></p>
<p>在一个进程内部,使用进程句柄来标识关注的每个进程.使用 Windows API 从进程 PID 获取进程句柄:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">OpenProcess(PROCESS_ALL_ACCESS, TRUE, procId); <span class="comment">//或者PROCESS_QUERY_INFORMATION</span></span><br></pre></td></tr></table></figure>
<p>使用 API 函数: GETModuleFileNameEx 或 GetProcessImageFileName 或QUeryFullProcessImageName 查询进程的 exe 文件名,使用 API 函数 GetCurrentProcess可以获取本进程的伪句柄(值为-1),只能用于本进程的 API 函数调用;不能被其他进程继承或复制.可用 API 函数 DuplicateHandle 获得进程的真句柄.</p>
<h3 id="Windows创建进程"><a href="#Windows创建进程" class="headerlink" title="Windows创建进程"></a>Windows创建进程</h3><p>Windows 系统使用 CreateProcess 创建进程, WaitForSingleObject 可等待子进程的结束.例如:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    STARTUPINFO si;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">    si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line">    ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line">    <span class="comment">// Start the child process.</span></span><br><span class="line">    <span class="keyword">if</span> (!CreateProcess(<span class="literal">NULL</span>,    <span class="comment">// No module name (use command line)</span></span><br><span class="line">                       <span class="string">"demo.exe arg1"</span>, <span class="comment">// Command line</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">// Process handle not inheritable</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">// Thread handle not inheritable</span></span><br><span class="line">                       FALSE,   <span class="comment">// Set handle inheritance to FALSE</span></span><br><span class="line">                       <span class="number">0</span>,       <span class="comment">// No creation flags</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">// Use parent's environment block</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">// Use parent's starting directory</span></span><br><span class="line">                       &amp;si,     <span class="comment">// Pointer to STARTUPINFO structure</span></span><br><span class="line">                       &amp;pi)     <span class="comment">// Pointer to PROCESS_INFORMATION structure,用于给出子进程主窗口的属性</span></span><br><span class="line">       ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CreateProcess failed (%d).\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Wait until child process exits.</span></span><br><span class="line">    WaitForSingleObject(pi.hProcess, INFINITE);</span><br><span class="line">    <span class="comment">// Close process and thread handles.</span></span><br><span class="line">    CloseHandle(pi.hProcess);</span><br><span class="line">    CloseHandle(pi.hThread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父子进程关系"><a href="#父子进程关系" class="headerlink" title="父子进程关系"></a>父子进程关系</h3><p>创建的子进程可以继承父进程的:</p>
<ul>
<li>CreateFile 返回的打开句柄,包括文件,控制台输入缓冲区,控制台屏幕缓冲区,命名管道,串口通信设备,邮槽;</li>
<li>打开的句柄,包括:进程,线程,互斥锁,事件对象,信号量,命名管道,匿名管道,文件映射对象;</li>
<li>环境变量;</li>
<li>当前目录;</li>
<li>控制台,除非进程脱离( detach)或创建了新的控制台;</li>
<li>错误模式,使用 API 函数 SetErrorMode 设置;</li>
<li>进程亲和掩码( affinity mask),用以指示期望使用 CPU 的哪些核;</li>
<li>在哪个任务中.</li>
</ul>
<p>子进程不能继承:</p>
<ul>
<li>优先级类别 Priority class;</li>
<li>句柄,有 LocalAlloc,GlobalAlloc,HeapCreate,HeapAlloc 返回;</li>
<li>伪句柄,有 GetCurrentProcess或 GetCurrentThread 返回;</li>
<li>DLL 模块句柄,由 LoadLibrary 返回;</li>
<li>GDI 对象句柄或 USER 对象句柄,如 HBITMAP 或 HMENU.</li>
</ul>
<p>为继承句柄,父进程在创建(或者代开,复制)各种可继承对象句柄时,在 SECURITY_ATTRIBUTES 结构的 blnheritHandle 成员为 TRUE. 在 CreateProcess 的blnheritHandles 参数为 TRUE; 如果要继承标准输入,标准输出,标准错误的句柄, STARTUPINFO 结构的 dwFlags 成员包含 STARTF_USESTDHANDLES 标志位.</p>
<h3 id="获取进程信息的相关函数"><a href="#获取进程信息的相关函数" class="headerlink" title="获取进程信息的相关函数"></a>获取进程信息的相关函数</h3><ul>
<li>GetCommandLine：当前进程的命令行字符串</li>
<li>GetStartupInfo：当前进程被创建时的STARTUPINFO结构</li>
<li>GetProcessVersion：获取可执行头的版本信息</li>
<li>GetModuleFileName：获取包含了进程代码的可执行文件的全路径与文件名</li>
<li>GetGuiResources：获取使用中的GUI对象的句柄数量</li>
<li>IsDebuggerPresent：确定进程是否被调试</li>
<li>GetProcessIoCounters：获取进程执行的所有I/O操作的薄记信息。</li>
<li>GetProcessMemoryInfo：获取进程的工作集内存的信息</li>
<li>GetProcessWorkingSetSize：获取进程的工作集内存被允许的下限与上限</li>
<li>SetProcessWorkingSetSize：设置进程的工作集内存的下限与上限</li>
</ul>
<h3 id="进程终结"><a href="#进程终结" class="headerlink" title="进程终结"></a>进程终结</h3><p>子进程终止时,所有打开的句柄被关闭,进程对象被处罚( signaled).进程的退出码( exit code)或者 ExitProcess,TerminateProcess 函数中指出,或者是 main,WinMain 函数返回值.如果进程由于一个致命异常(fatal exception)而终止,退出码是这个异常值,同时进程的所有执行中的线程的退出码也是这个异常值.</p>
<p>优雅的关闭其他进程的方法使用RegisterWindowMessage 登记私有消息,用 BroadcastSystemMessage 播放消息,收到消息的进程用ExitProcess关闭.</p>
<h3 id="获取特定名字的进程-PID"><a href="#获取特定名字的进程-PID" class="headerlink" title="获取特定名字的进程 PID"></a>获取特定名字的进程 PID</h3><p>如果想要获取特定名字的进程的ID，需要枚举所有进程。传统办法是CreateToolhelp32Snapshot、Process32First、Process32Next函数；也可以使用EnumProcesses、EnumProcessModules函数来获取所有的进程ID，一个进程的所有模块的句柄。示例如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">HANDLE hSnaphot;</span><br><span class="line">HANDLE hApp;</span><br><span class="line">DWORD dProcess;</span><br><span class="line">hSnaphot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">// 获取进程快照</span></span><br><span class="line">Process32First(hSnaphot, &amp;pe32); <span class="comment">// 枚举第一个进程</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lstrcmpi(pe32.szExeFile, _T(<span class="string">"NotePad.exe"</span>)) == <span class="number">0</span>) &#123; <span class="comment">// 查找进程名称为 NotePad.exe</span></span><br><span class="line">        dProcess = pe32.th32ProcessID;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (Process32Next(hSnaphot, &amp;pe32)); <span class="comment">// 不断循环直到枚举不到进程</span></span><br><span class="line">hApp = OpenProcess(PROCESS_VM_OPERATION | SYNCHRONIZE, FALSE, dProcess); <span class="comment">// 根据进程 ID 获取程序的句柄</span></span><br><span class="line"><span class="keyword">if</span> (!WaitForSingleObject(hApp, INFINITE)) <span class="comment">// 等待进程关闭</span></span><br><span class="line">    AfxMessageBox(<span class="string">" 记事本已经关闭！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方法</span></span><br><span class="line">DWORD aProcId[<span class="number">1024</span>], dwProcCnt, dwModCnt;</span><br><span class="line">HMODULE hMod[<span class="number">1000</span>];</span><br><span class="line">TCHAR szPath[MAX_PATH];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举出所有进程ID</span></span><br><span class="line"><span class="keyword">if</span> (!EnumProcesses(aProcId, <span class="keyword">sizeof</span>(aProcId), &amp;dwProcCnt)) &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; "EnumProcesses error: " &lt;&lt; GetLastError() &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍例所有进程</span></span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; dwProcCnt; ++i) &#123;</span><br><span class="line">    <span class="comment">// 打开进程，如果没有权限打开则跳过</span></span><br><span class="line">    HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, aProcId[i]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != hProc) &#123;</span><br><span class="line">        <span class="comment">// 打开进程的第1个Module，并检查其名称是否与目标相符</span></span><br><span class="line">        <span class="keyword">if</span> (EnumProcessModules(hProc, &amp;hMod, <span class="number">1000</span>, &amp;dwModCnt)) &#123;</span><br><span class="line">            GetModuleBaseName(hProc, hMod, szPath, MAX_PATH);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == lstrcmpi(szPath, lpName)) &#123;</span><br><span class="line">                CloseHandle(hProc);</span><br><span class="line">                <span class="keyword">return</span> aProcId[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>异常处理</title>
    <url>/2018/11/01/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><strong>异常之问</strong></p>
<ol>
<li>什么是异常?</li>
</ol>
<p>异常就是程序运行时发生错误的信号(在程序出现错误时,则会产生一个异常,若程序没有处理它,则会抛出该异常,程序的运行也随之终止)在Python 中,错误触发的异常如下:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwskfsqgjzj315i0agwfy.jpg" alt></p>
<ul>
<li>Traceback 为异常的追踪信息</li>
<li>NameError 为异常的类型</li>
<li>name ‘a’ is not defined 为异常值</li>
</ul>
<p>在 Python 中的错误分为两种:</p>
<ul>
<li>语法错误:这种错误,通过不了 python 的语法检测,这种错误也捕捉不了,必须在程序执行前改正.</li>
<li>逻辑异常:语法没问题,通过了 Python的语法检测,但因为对 python 数据类型的错误使用导致出错.</li>
</ul>
<ol start="2">
<li>异常的种类</li>
</ol>
<p>在 Python 中不同的异常可以用不同的类型( python 中统一了类与类型,类型即类)去标识,一个异常标识一种错误.</p>
<p>常用异常:</p>
<p><code>AttributeError 试图访问一个对象没有的属性</code></p>
<p><code>IOError 输入/输出异常;通常为无法打开文件</code></p>
<p><code>ImportError 无法引入模块或包;基本上是路径问题或名称错误</code></p>
<p><code>IndentationError 语法错误的子类;代码没有正确对其</code></p>
<p><code>IndexError 下标索引超出序列边界</code></p>
<p><code>KeyError 试图访问字典中不存在的键</code></p>
<p><code>KeyboardInterrupt 键盘终止,通常为 Ctrl+C 同时被按下</code></p>
<p><code>NameError 使用一个还未被赋予对象的变量</code></p>
<p><code>SyntaxError python 代码非法,代码不能编译</code></p>
<p><code>TypeError 传入对象类型与要求的不符合</code></p>
<p><code>UnboundLocalError 试图访问一个还未被赋值的局部变量,基本是由于另有一个同名的全局变量,导致你以为正在访问它</code></p>
<p><code>ValueError 传入一个调用者不期望的值,即使值得类型是正确的</code></p>
<p>更多异常:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArithmeticError</span><br><span class="line">AssertionError</span><br><span class="line">AttributeError</span><br><span class="line">BaseException</span><br><span class="line">BufferError</span><br><span class="line">BytesWarning</span><br><span class="line">DeprecationWarning</span><br><span class="line">EnvironmentError</span><br><span class="line">EOFError</span><br><span class="line">Exception</span><br><span class="line">FloatingPointError</span><br><span class="line">FutureWarning</span><br><span class="line">GeneratorExit</span><br><span class="line">ImportError</span><br><span class="line">ImportWarning</span><br><span class="line">IndentationError</span><br><span class="line">IndexError</span><br><span class="line">IOError</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">KeyError</span><br><span class="line">LookupError</span><br><span class="line">MemoryError</span><br><span class="line">NameError</span><br><span class="line">NotImplementedError</span><br><span class="line">OSError</span><br><span class="line">OverflowError</span><br><span class="line">PendingDeprecationWarning</span><br><span class="line">ReferenceError</span><br><span class="line">RuntimeError</span><br><span class="line">RuntimeWarning</span><br><span class="line">StandardError</span><br><span class="line">StopIteration</span><br><span class="line">SyntaxError</span><br><span class="line">SyntaxWarning</span><br><span class="line">SystemError</span><br><span class="line">SystemExit</span><br><span class="line">TabError</span><br><span class="line">TypeError</span><br><span class="line">UnboundLocalError</span><br><span class="line">UnicodeDecodeError</span><br><span class="line">UnicodeEncodeError</span><br><span class="line">UnicodeError</span><br><span class="line">UnicodeTranslateError</span><br><span class="line">UnicodeWarning</span><br><span class="line">UserWarning</span><br><span class="line">ValueError</span><br><span class="line">Warning</span><br><span class="line">ZeroDivisionError</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>异常处理</li>
</ol>
<p>为了保证程序的健壮性与容错性,即在遇到错误时程序不会崩溃,我们需要对异常进行处理.如果错误发生的条件是可预知的,需要用 if 进行处理:在错误发生之前进行预防;如果错误的发生条件不可预知,则需要用 try…except: 在错误发生之后进行处理.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本语法</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">    <span class="keyword">try</span> 中一旦检测到异常,就执行这个位置的逻辑</span><br></pre></td></tr></table></figure>
<p>几个栗子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常类只能用来处理指定的异常情况,如果非指定异常则无法处理</span></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e: <span class="comment"># 捕获异常失败,报错</span></span><br><span class="line">    print(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多分支</span></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 万能异常 Exception</span></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(s1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多分支异常与万能异常</span></span><br><span class="line"><span class="comment"># 如果想要的效果是:无论出现什么异常,我们统一丢弃,或者使用同一段代码逻辑去处理它们,那么一个 Exception 就够了.</span></span><br><span class="line"><span class="comment"># 如果想要对不同的异常使用不同的处理逻辑,那么就需要用到多分支异常.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了防止对异常类型判断错误,可以在多分支后面跟上 Exception</span></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 异常的其他结构</span></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没有产生异常则执行'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'无论异常与否,都会执行该代码'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 主动触发异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'类型错误'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionMusibii</span><span class="params">(BaseException)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.msg = msg</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.msg</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> ExceptionMusibii(<span class="string">'类型错误'</span>)</span><br><span class="line"><span class="keyword">except</span> ExceptionMusibii <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断言: assert 条件</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:try...except</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 把错误处理和真正的工作分开来;</span></span><br><span class="line"><span class="comment"># 2. 代码更易组织,更清晰,复杂的工作任务更容易实现;</span></span><br><span class="line"><span class="comment"># 3. 代码更加健壮,不易崩溃.</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>什么时候用异常处理</li>
</ol>
<p>只有在错误发生的条件无法预知的情况下才应该加上 try…except</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（五）</title>
    <url>/2018/11/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇博客的内容是守护进程,对于操作系统来说可以在后台执行一些程序.这篇的内容是互斥锁,在上上篇博客上说到进程内存空间互相隔离,所以可以通过共享文件来操作同一个文件,那么这样操作的话会发生什么呢?</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>多个进程需要共享数据时,先将其锁定,此时资源状态为’锁定’,其他进程不能更改;知道该进程释放资源,将资源的状态变成非’锁定’,其他的线程才能再次锁定该资源.互斥锁保证了每次只有一个进程进入写入操作,从而保证了多进程情况下数据的正确性.</p>
<p>我们使用一个demo 来模拟多个进程操作同一个文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tickets</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">        print(<span class="string">'%s 查看 剩余票数: %s'</span> % (name, data[<span class="string">'count'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_ticket</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            dic[<span class="string">'count'</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(dic, f)</span><br><span class="line">                print(<span class="string">'%s: 购票成功'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    show_tickets(name)</span><br><span class="line">    buy_ticket(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        p = Process(target=task, args=(i,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxb7m2qraij315k0h2771.jpg" alt></p>
<p>在 ticket.json 里面只有一张票,结果却造成多个用户购买成功,这很显然是不符合实际情况的.\</p>
<p>那么怎么解决呢?如果多个进程对同一个文件进行读操作可以不进行限制,但是对同一个文件进行写操作就必要要进行限制,不可以同时多个人对同一个文件进行写操作.python 在多进程模块里提供一个类, Lock 类,当进程获取到锁的时候其他的进程就必须要等待锁释放才可以进行争抢,在这个例子里面就可以加上一把锁来保护数据安全.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">import</span> json,time,random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tickets</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">        print(<span class="string">'%s 查看 剩余票数: %s'</span> % (name, data[<span class="string">'count'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_ticket</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            dic[<span class="string">'count'</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'ticket.json'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(dic, f)</span><br><span class="line">                print(<span class="string">'%s: 购票成功'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name,lock)</span>:</span></span><br><span class="line">    show_tickets(name)</span><br><span class="line">    lock.acquire()</span><br><span class="line">    buy_ticket(name)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mutex = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        p = Process(target=task, args=(i,mutex))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxb7qvfd4wj314s0d6jtq.jpg" alt></p>
<p>这样加了锁(互斥锁)就可以解决同时操作同一个文件造成的数据混乱问题了.</p>
<p>当使用多进程开发时,如果多个进程同时读写同一个资源,可能会造成数据的混乱,为了防止发生问题,使用锁,或者使用 Process 的方法 join 将并行变为串行.</p>
<p><strong>join 和锁的区别</strong></p>
<ol>
<li>join 人为控制进程的执行顺序</li>
<li>join 把整个进程全部串行,而锁可以指定部分代码串行</li>
</ol>
<p>一旦串行,效率就会降低,一旦并行,数据就可能会出错.</p>
<h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><p>进程间通信( internal-process communication),我们在开启子进程是希望子进程帮助完成任务,很多情况下需要将数据返回给父进程,然而进程间内存是物理隔离的.</p>
<p>解决办法:</p>
<ol>
<li>将共享数据放到文件中</li>
<li>管道 多进程模块中的一个类,需要有父子关系</li>
<li>共享一快内存区域 需要操作系统分配</li>
</ol>
<h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p>Pipe类返回一个由管道连接的连接对象,默认情况下为双工:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()</span><br><span class="line">    p = Process(target=f, args=(child_conn,))</span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure>
<p>实例化 Pipe 类会返回两个连接对象表示管道的两端.每个连接对象都有 send() 和 recv() 方法(及其他).请注意,如果两个进程同时尝试读写管道的同一端,则管道中的数据可能会损坏.当然,同时使用管道的不同端部的过程不存在损坏的风险.</p>
<h3 id="共享内存通信"><a href="#共享内存通信" class="headerlink" title="共享内存通信"></a>共享内存通信</h3><h4 id="Queue-通信"><a href="#Queue-通信" class="headerlink" title="Queue 通信"></a>Queue 通信</h4><p>Queue类会生成一个先进先出的容器,通过往队列中存取数据而进行进程间通信.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(q)</span>:</span></span><br><span class="line">    q.put([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p = Process(target=f, args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure>
<p>队列其他特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 阻塞操作 必须掌握</span></span><br><span class="line">q = Queue(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 存入数据</span></span><br><span class="line">q.put(<span class="string">"hello"</span>,block=<span class="literal">False</span>)</span><br><span class="line">q.put([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>],block=<span class="literal">False</span>)</span><br><span class="line">q.put(<span class="number">1</span>,block=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 当容量满的时候 再执行put 默认会阻塞直到执行力了get为止</span></span><br><span class="line"><span class="comment"># 如果修改block=False 直接报错 因为没地方放了</span></span><br><span class="line"><span class="comment"># q.put(&#123;&#125;,block=False)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # # 取出数据</span></span><br><span class="line">print(q.get(block=<span class="literal">False</span>))</span><br><span class="line">print(q.get(block=<span class="literal">False</span>))</span><br><span class="line">print(q.get(block=<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 对于get   当队列中中没有数据时默认是阻塞的  直达执行了put</span></span><br><span class="line"><span class="comment"># 如果修改block=False 直接报错 因为没数据可取了</span></span><br><span class="line">print(q.get(block=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解</span></span><br><span class="line">q = Queue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="string">"q"</span>,timeout=<span class="number">3</span>)</span><br><span class="line">q.put(<span class="string">"q2"</span>,timeout=<span class="number">3</span>)</span><br><span class="line">q.put(<span class="string">"q3"</span>,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 如果满了 愿意等3秒  如果3秒后还存不进去 就炸</span></span><br><span class="line"><span class="comment"># q.put("q4",timeout=3)</span></span><br><span class="line"></span><br><span class="line">print(q.get(timeout=<span class="number">3</span>))</span><br><span class="line">print(q.get(timeout=<span class="number">3</span>))</span><br><span class="line">print(q.get(timeout=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 如果没了 愿意等3秒  如果3秒后还取不到数据 就炸</span></span><br><span class="line">print(q.get(timeout=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>####Manager 通信</p>
<p>demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span>  Process,Manager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(dic)</span>:</span></span><br><span class="line">    print(<span class="string">"子进程xxxxx"</span>)</span><br><span class="line">    <span class="comment"># li[0] = 1</span></span><br><span class="line">    <span class="comment"># print(li[0])</span></span><br><span class="line">    dic[<span class="string">"name"</span>] = <span class="string">"xx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m = Manager()</span><br><span class="line">    <span class="comment"># li = m.list([100])</span></span><br><span class="line">    dic = m.dict(&#123;&#125;)</span><br><span class="line">    <span class="comment"># 开启子进程</span></span><br><span class="line">    p = Process(target=task,args=(dic,))</span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>可以创建一片共享内存区域用来存取数据.</p>
<h1 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h1><h3 id="什么是生产者消费者模型"><a href="#什么是生产者消费者模型" class="headerlink" title="什么是生产者消费者模型"></a>什么是生产者消费者模型</h3><p>在软件开发过程中,经常碰到这样的场景:</p>
<p>某些模块负责生产数据,这些数据由其他模块来负责处理(此处的模块可能是:函数,线程,进程等).生产数据的模块称为生产者,而处理数据的模块称为消费者.在生产者与消费者之间的缓冲区称之为仓库.生产者负责往仓库运输商品,而消费者负责从仓库里取出商品,这就构成了生产者消费者模型.</p>
<p>结构图如下:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fxbf3bmhbtj30fb046mx8.jpg" alt></p>
<p>为了便于理解,我们举一个寄信的例子。假设你要寄一封信，大致过程如下：</p>
<ol>
<li>你把信写好——相当于生产者生产数据;</li>
<li>你把信放入邮箱——相当于生产者把数据放入缓冲区;</li>
<li>邮递员把信从邮箱取出，做相应处理——相当于消费者把数据取出缓冲区,处理数据.</li>
</ol>
<h3 id="生产者消费者模型的优点"><a href="#生产者消费者模型的优点" class="headerlink" title="生产者消费者模型的优点"></a>生产者消费者模型的优点</h3><ul>
<li>解耦</li>
</ul>
<p>假设生产者和消费者分别是两个线程.如果让生产者直接调用消费者的某个方法,那么生产者对于消费者就会产生依赖(耦合).如果未来消费者的代码发生改变,可能会影响到生产者的代码.而如果两者都依赖于某个缓冲区,两者之间不直接依赖,耦合也就相应降低了.</p>
<p>举个例子,我们去邮局投递信件,如果不使用邮箱（也就是缓冲区,你必须得把信直接交给邮递员.有同学会说,直接给邮递员不是挺简单的嘛?其实不简单,你必须 得认识谁是邮递员,才能把信给他.这就产生了你和邮递员之间的依赖(相当于生产者和消费者的强耦合).万一哪天邮递员换人了,你还要重新认识一下(相当于消费者变化导致修改生产者代码).而邮箱相对来说比较固定,你依赖它的成本就比较低(相当于和缓冲区之间的弱耦合).</p>
<ul>
<li>并发</li>
</ul>
<p>由于生产者与消费者是两个独立的并发体,它们之间是使用缓冲区通信的,生产者只需要往缓冲区里丢数据,就可以接着生产下一个数据了,而消费者只需要从缓冲区拿数据即可,这样就不会因为彼此的处理速度而发生阻塞.</p>
<p>继续上面的例子,如果没有邮箱,就得在邮局等邮递员,知道他回来,把信交给他,这期间我们什么事都干不了(生产者阻塞).或者邮递员挨家挨户问,谁要寄信(消费者阻塞).</p>
<ul>
<li>支持忙闲不均</li>
</ul>
<p>当生产者制造数据快的时候,消费者来不及处理,为处理的数据可以暂时存在缓冲区中,慢慢处理,而不至于因为消费者的性能过慢造成数据丢失或影响生产者生产数据.</p>
<p>再拿寄信的例子,假设邮递员一次只能带走1000封信,万一碰上情人节或者其他的紧急任务,需要寄出的信超过了1000封,这个时候邮箱作为缓冲区就派上用场了.邮递员把来不及带走的信暂存在邮箱中,等下次过来时在拿走.</p>
<p>###使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name, food, q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res = <span class="string">'%s %s'</span> % (food, i)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'%s 生产了 %s'</span> % (name, res))</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name, q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s 消费了 %s'</span> % (name, res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p = Process(target=producer, args=(<span class="string">'musibii'</span>, <span class="string">'🍔'</span>, q))</span><br><span class="line">    c = Process(target=consumer, args=(<span class="string">'thales'</span>, q))</span><br><span class="line">    p.start()</span><br><span class="line">    c.start()</span><br><span class="line">    </span><br><span class="line">    p.join()</span><br><span class="line">    c.join()</span><br><span class="line">    print(<span class="string">'主进程'</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fxbh7q9cwej315a0j441e.jpg" alt></p>
<p>这样的话该进程并不会结束,因为 get 方法是阻塞的,数据消费完就会一直等待知道生产者生产新的数据,而生产者只能生产9个数据.所以会一直阻塞.</p>
<h3 id="改进使用"><a href="#改进使用" class="headerlink" title="改进使用"></a>改进使用</h3><p>我们需要在消费者消费的时候知道队列里面有多少数据,应该什么时候消费完了,所以可以在生产者里面生产结束后添加一个标志,比如 None.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 制作热狗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_hotdog</span><span class="params">(queue, name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"%s 制作了一个🌭 %s"</span> % (name, i))</span><br><span class="line">        <span class="comment"># 生产得到的数据</span></span><br><span class="line">        data = <span class="string">"%s 生产的🌭%s"</span> % (name, i)</span><br><span class="line">        <span class="comment"># 存到队列中</span></span><br><span class="line">        queue.put(data)</span><br><span class="line">    <span class="comment"># 装入一个特别的数据 告诉消费方 没有了</span></span><br><span class="line">    <span class="comment"># queue.put(None)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 吃热狗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat_hotdog</span><span class="params">(queue, name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = queue.get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">break</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"%s 吃了 %s"</span> % (name, data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建队列</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    p1 = Process(target=make_hotdog, args=(q, <span class="string">"musibii的热狗店"</span>))</span><br><span class="line">    p2 = Process(target=make_hotdog, args=(q, <span class="string">"egon的热狗店"</span>))</span><br><span class="line">    p3 = Process(target=make_hotdog, args=(q, <span class="string">"eureka的热狗店"</span>))</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=eat_hotdog, args=(q, <span class="string">"thales"</span>))</span><br><span class="line">    c2 = Process(target=eat_hotdog, args=(q, <span class="string">"maffia"</span>))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让主进程等三家店全都做完后....</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加结束标志   注意这种方法有几个消费者就加几个None 不太合适 不清楚将来有多少消费者</span></span><br><span class="line">    q.put(<span class="literal">None</span>)</span><br><span class="line">    q.put(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 现在 需要知道什么时候做完热狗了 生产者不知道  消费者也不知道</span></span><br><span class="line">    <span class="comment"># 只有队列知道</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程over"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生产方不生产了 然而消费方不知道 所以已知等待  get函数阻塞</span></span><br><span class="line">    <span class="comment"># 三家店都放了一个空表示没热狗了  但是消费者只有两个 他们只要看见None 就认为没有了</span></span><br><span class="line">    <span class="comment"># 于是进程也就结束了  造成一些数据没有被处理</span></span><br><span class="line">    <span class="comment"># 等待做有店都做完热狗在放None</span></span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fxbhfdupf3j31420kmgqo.jpg" alt></p>
<p>这样就解决了最初版本消费之因为没有数据而阻塞的问题了,但是这里还是有问题,因为不知道到底有多少消费者,因为想让消费者知道数据已经结束了的话,需要给每个消费者一个标志位,这样是不现实的.</p>
<h3 id="完美使用"><a href="#完美使用" class="headerlink" title="完美使用"></a>完美使用</h3><p>python 多进程模块提供了一个JoinableQueue类,追根溯源继承于 Queue,源码看的头疼.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, JoinableQueue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 制作热狗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_hotdog</span><span class="params">(queue, name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"%s 制作的🌭 %s"</span> % (name, i))</span><br><span class="line">        <span class="comment"># 生产得到的数据</span></span><br><span class="line">        data = <span class="string">"%s 生产的🌭 %s"</span> % (name, i)</span><br><span class="line">        <span class="comment"># 存到队列中</span></span><br><span class="line">        queue.put(data)</span><br><span class="line">    <span class="comment"># 装入一个特别的数据 告诉消费方 没有了</span></span><br><span class="line">    <span class="comment"># queue.put(None)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 吃热狗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat_hotdog</span><span class="params">(queue, name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = queue.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"%s 吃了%s"</span> % (name, data))</span><br><span class="line">        <span class="comment"># 该函数就是用来记录一共给消费方多少数据了 就是get次数</span></span><br><span class="line">        queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建队列</span></span><br><span class="line">    q = JoinableQueue()</span><br><span class="line">    p1 = Process(target=make_hotdog, args=(q, <span class="string">"musibii的热狗店"</span>))</span><br><span class="line">    p2 = Process(target=make_hotdog, args=(q, <span class="string">"egon的热狗店"</span>))</span><br><span class="line">    p3 = Process(target=make_hotdog, args=(q, <span class="string">"eureka的热狗店"</span>))</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=eat_hotdog, args=(q, <span class="string">"thales"</span>))</span><br><span class="line">    c2 = Process(target=eat_hotdog, args=(q, <span class="string">"maffia"</span>))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将消费者作为主进程的守护进程</span></span><br><span class="line">    c1.daemon = <span class="literal">True</span></span><br><span class="line">    c2.daemon = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让主进程等三家店全都做完后....</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如何知道生产方生产完了 并且 消费方也吃完了</span></span><br><span class="line">    <span class="comment"># 方法一:等待做有店都做完热狗在放None</span></span><br><span class="line">    <span class="comment"># # 添加结束标志   注意这种方法有几个消费者就加几个None 不太合适 不清楚将来有多少消费者</span></span><br><span class="line">    <span class="comment"># q.put(None)</span></span><br><span class="line">    <span class="comment"># q.put(None)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主进程等到队列结束时再继续  那队列什么时候算结束? 生产者已经生产完了 并且消费者把数据全取完了</span></span><br><span class="line">    q.join()  <span class="comment"># 已经明确生产放一共有多少数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 现在 需要知道什么时候做完热狗了 生产者不知道  消费者也不知道</span></span><br><span class="line">    <span class="comment"># 只有队列知道</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程over"</span>)</span><br><span class="line">    <span class="comment"># 生产方不生产了 然而消费方不知道 所以一直等待  get函数阻塞</span></span><br><span class="line">    <span class="comment"># 三家店都放了一个空表示没热狗了  但是消费者只有两个 他们只要看见None 就认为没有了</span></span><br><span class="line">    <span class="comment"># 于是进程也就结束了  造成一些数据没有被处理</span></span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fxbi8li0c8j315s0kwjwh.jpg" alt></p>
<p>查看 JoinableQueue 类方法 task_done 源码:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxbiabu3m4j30z209c405.jpg" alt></p>
<p>看不懂………</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>数据库（一）</title>
    <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>OK, 经过网络编程和并发编程的学习,现在到了学习数据库愉快之旅了👽.感觉到一丝丝的兴奋,学习新知识的开始总是能够给人动力,何况还是学习数据库,一看就显得高大上,而且几乎都是命令行操作,黑客既视感有没有…</p>
<h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>简单来说,数据库( DataBase)就是用来存放数据的仓库,就像 github 仓库一样是用来存放数据的,这个仓库是按照一定的数据结构(数据结构是指数据的组织形式或数据之间的联系)来组织和存储数据的,可以通过各种 SQL 语句来存取数据库里的数据.<br>随着计算机技术的发展和信息的爆炸,数据库不仅仅是存储和管理数据了,而转变成用户所需要的各种数据管理方式.数据库有很多种类和功能,从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各方面得到了广泛的应用.</p>
<h3 id="数据库之前"><a href="#数据库之前" class="headerlink" title="数据库之前"></a>数据库之前</h3><p>在数据库之前是怎么存储数据的呢?</p>
<h4 id="文本模型"><a href="#文本模型" class="headerlink" title="文本模型"></a>文本模型</h4><p>早先的数据都是保存在文本文件中的,所以这就促使了文本文件的编辑器非常流行,文本检索的速度慢效率低,当数据库文件变得庞大时,快速的检索数据就变成了一个难题.所以出现了 DB,DB 是以给每一行做一个特定的标志的方式来工作的,这个标记叫 key, 查找一个之需要先找到 key, 这样就能快速的检索大需要的值( value).DB 是伯克利大学开发的,它早期也叫 sleepcat. 但是随着数据的增加,以及用户对检索速度的需求,这就让很多数据直接工作在了内存中,当数据文件越来越大的时候,内存的容量就成了我们的瓶颈,而有些操作是完全需要载入内存中,然后由内存工作查询之后,才将结果反馈,在这种越来越复杂的机制下,使用纯文本来保存数据已经不能满足需求了,接着出现了层次模型.</p>
<h4 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h4><p>层次模型将文本分成了像根–&gt;下级目录—&gt;下下级目录这样的形式.(层次模型中非常著名的是 Sybase)信息管理系统中最重要的就是数据,而如果把信息管理系统比作身体的话,数据就相当于血液,而我们的心脏,其实就是数据库.像之前的纯文本记录数据,能够实现数据记录的就是文本文件,而实现数据管理的就是检索命令.层次模型的出现,在很大程度上缓解了数据检索速度的难题,但它毕竟是按照倒置树的结构来执行的,这样的模型想要在多个节点之间建立某种联系非常困难.所以后来出现了网状模型.</p>
<h4 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h4><p>这种模型是以彼此间如何建立关联来决定的.它在层次模型的基础上对于不同的节点建立了更多的连接,使得不同节点之间的连接变得轻松简单.但是这两种模型都有一种极大的缺陷,它们需要跟软件的耦合成都非常的高,如果我们想修改一下数据模型中的关系和结构的话,则势必要完全修改对应的数据模型下的数据管理软件.之后出现了关系模型.</p>
<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>关系模型其实就是一堆二维表,由行和列组成,在同一个数据库之间可以存在多张表,表与表之间还有相关的属性相关联.这样,表内之间有关系,表与表之间也有关系,这就是关系模型.而现在的关系模型经过进一步发展,有了对象—关系模型, MySQL 就是一个对象—关系模型.能够提供关系模型的就叫关系型数据库模拟系统.</p>
<h4 id="数据库的作用"><a href="#数据库的作用" class="headerlink" title="数据库的作用"></a>数据库的作用</h4><p>一个良好的数据库管理系统,都有以下功能:</p>
<ol>
<li>管理数据存储;</li>
<li>安全管理,为数据库提供避免非法访问的机制,非常重要;</li>
<li>管理元数据,描述数据库属性的,本身跟数据无关;</li>
<li>事务管理,为了保证数据一致性的一个重要机制,现在大多数数据管理系统都提供事务的功能;</li>
<li>支持连接,主要指网络支持能力;</li>
<li>性能优化,在性能方面提供一定的优化机制,这是现在最流行的关系型数据管理系统的最重要的标准之一.在 RDBMS 中检索效率最高的,是 Oracle和 MySQL;</li>
<li>提供备份和恢复机制,对于数据库管理系统,这也是必需的功能,像 MySQL 为了数据安全,每份数据都保存两份,虽然数据冗余,但是保证了数据的安全;</li>
<li>提供数据检索和修改的处理机制,快速查询数据和修改数据.</li>
</ol>
<h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>数据库里存储很多数据库,一个数据库可以看做是一个文件夹,数据库里面的表可以看做由文件夹管理的文件.<br>在表中有许多的字段.(可以看做是描述一个数据的特征)</p>
<ul>
<li>字段</li>
<li>记录</li>
<li>表</li>
<li>库</li>
<li>DBMS</li>
<li>数据库服务器</li>
</ul>
<p>数据库本质上是一套 C/S 架构的 socket 软件.</p>
<h2 id="数据库分类及优缺点"><a href="#数据库分类及优缺点" class="headerlink" title="数据库分类及优缺点"></a>数据库分类及优缺点</h2><p>在当前的互联网中,最常用的数据库模型主要是两种,即关系型数据库和非关系型数据库.</p>
<h3 id="关系型数据"><a href="#关系型数据" class="headerlink" title="关系型数据"></a>关系型数据</h3><p>虽然网状数据库和层次数据库已经很好的解决了数据的几种和共享问题,但是在数据独立性和抽象性上仍有很大不足,而关系型数据库就可以较好的解决这些问题.<br>关系型数据库模型是把复杂的数据结构归结为简单的二元关系(即二维表格形式).在关系数据库中,对数据的操作几乎全部建立在一个或多个关系表格上,通过对这些关联表的表格分类,合并,连接或选取等运算来实现数据的管理.<br>关系型数据库诞生距今已有40多年,从理论产生到发展为产品,例如, MySQL 和 Oracle 数据库.Oracle 在数据库领域上升到霸主地位,形成每年高达数百亿美元的庞大市场,而 MySQL 也是一路坎坷,以至于被 Oracle 收购(先被 SUN 收购,然后 SUN 被 Oracle 收购)</p>
<p><strong>总结</strong>:什么是关系型数据库</p>
<ul>
<li>二维的表格;</li>
<li>通过 SQL 结构化查询语言来存取和管理数据;</li>
<li>保持数据一致性方面很强</li>
</ul>
<h3 id="非关系数据库"><a href="#非关系数据库" class="headerlink" title="非关系数据库"></a>非关系数据库</h3><p>非关系型数据库也称为 NoSQL,NoSQL 的本意是’ Not Only SQL’,指的是非关系型数据库,而不是’No SQL’的意思.因此, NoSQL 的产生并不是要彻底否定关系型数据库,而是作为传统关系型数据库的一个有效补充. NoSQL 数据库在特定的场景下可以发挥出难以想象的高效率和高性能.<br>随着互联网 web2.0网站(以前基本是静态网页)的兴起,传统的关系型数据库在应付web2.0网站,特别是对于规模日益扩大的海量数据,超大规模和高并发的微博,微信, SNS 类型的 web2.0纯动态网站已经显得力不从心,暴露了很多难以克服的问题,例如:传统的关系型数据库 I/O 瓶颈,性能瓶颈都难以有效突破,于是开始出现了大批针对场景,以高性能和使用便利为目的的功能特异化得数据库产品, NoSQL( 非关系型)类的数据库就是在这样的场景中诞生并得到了非常迅速的发展. NoSQL 不将数据的一致性作为重点,或者是作为次重点.<br>NoSQL是非关系型数据库的广泛定义.它打破了长久以来关系型数据库与 ACID 理论大统一的局面. NoSQL 数据存储不需要固定的表结构,通常也不存在连接操作.在大数据存储上具备关系型数据库无法比拟的性能优势.当今的应用体系结构需要数据存储在和兴伸缩性上能够满足需求.而 NoSQL 存储就是为了实现这个需求而诞生的.</p>
<p><strong>总结</strong>:什么是非关系型数据库</p>
<ul>
<li>NoSQL 不是否定关系型数据库,而是作为关系数据库的一个重要补充;</li>
<li>NoSQL 为了高性能,高并发而生,忽略影响高性能,高并发的功能.</li>
</ul>
<h3 id="具体分类"><a href="#具体分类" class="headerlink" title="具体分类"></a>具体分类</h3><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><ul>
<li>Oracle: 目前最好的关系型数据库,优势在于用户管理与分布式,但是商业版收费;</li>
<li>MySQL: 免费开源,功能没有 Oracle 强大,但足以满足中小企业使用;</li>
<li>SQLserver: 属于微软生态,需要和 windows 配合使用;</li>
<li>DB2:IBM 开发的大型关系型数据库,收费,通常和硬件捆绑销售.</li>
</ul>
<h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><ul>
<li>MongoDB:面向文档</li>
<li>redis:持久化缓存</li>
<li>memercach:纯内存</li>
</ul>
<h1 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h1><h2 id="Mysql-的安装"><a href="#Mysql-的安装" class="headerlink" title="Mysql 的安装"></a>Mysql 的安装</h2><h3 id="MAC-版安装"><a href="#MAC-版安装" class="headerlink" title="MAC 版安装"></a>MAC 版安装</h3><ol>
<li><p>下载MySQL 社区版</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxdovplta0j315c0u0thu.jpg" alt="image-20181119164657918"></p>
</li>
<li><p>安装 MySQL</p>
<p>双击 mysql-5.7.24-macos10.14-x86_64.dmg 文件，加载镜像,一直点击继续,因为我已经安装了,就不演示了.<strong>注意</strong>安装成功后悔弹出一个对话框,告诉我们生成了一个 root 账户的临时密码.需要保存(实在不记得也没事,有办法修改)</p>
</li>
<li><p>启动 MySQL</p>
<p>打开系统偏好设置,会发现在最下方多了一个 MySQL 图标,点击进入设置界面</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxdgz75zuuj317c0no0vu.jpg" alt></p>
<p>安装完成,默认 MySQL 的状态是 stopped, 需要点击 Start MySQL Server 来启动,启动之后,状态变为 running. 下方有一个设置是否开机自启动.</p>
</li>
<li><p>终端连接 MySQL</p>
<p>首先把 MySQL 路径添加到环境变量中;</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxdh81xy3qj31c00u0th3.jpg" alt></p>
</li>
<li><p>命令行登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>登陆成功后需要重设登录密码,否则使用不了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.mysql&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登陆成功</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxdhd0ghk1j30w80cwad3.jpg" alt></p>
</li>
</ol>
<p>假如安装设置的默认密码忘记了怎么办呢?在使用客户端连接服务端的时候需要经过认证,那么因为服务端也在自己的电脑上,所以只要绕过认证就可以了.</p>
<ol>
<li><p>绕过服务端认证</p>
<ol>
<li><p>进入 mysql 下 bin 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取超级权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入密码后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxdjrsdo9dj313g0j4grf.jpg" alt></p>
</li>
<li><p>打开另一个终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 mysql 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>出现 Query OK, 输入,修改完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for root@localhost = password(&apos;password&apos;);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxdjul70tkj311f0u0tfc.jpg" alt></p>
</li>
</ol>
</li>
</ol>
<h3 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h3><p>Windows 安装分为两种,一种是有界面安装;一种是无界面安装。</p>
<h4 id="有界面安装"><a href="#有界面安装" class="headerlink" title="有界面安装"></a>有界面安装</h4><p>安装和 MAC 差不多,选好自己需要的功能就可以了,默认是安装在c:\program files\mysql 下.关键记住自己设置的密码。</p>
<h4 id="无界面安装"><a href="#无界面安装" class="headerlink" title="无界面安装"></a>无界面安装</h4><ol>
<li><p>注意:5.7以后的版本安装成功后需要先初始化;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加环境变量</p>
<p>打开环境变量,将 MySQL 安装目录线的 bin 目录加入 path 变量;</p>
</li>
<li><p>将 mysqld 加入到 windows 系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ol>
<li><p>修改默认密码需要先登陆成功,然后执行 update 语句直接修改 user 表中的密码;</p>
<ol>
<li><p>5.7及以后的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string = password(&apos;root&apos;) where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5.6及之前的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set password = password(&apos;root&apos;) where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>不需要登录但需要知道旧密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p 旧密码 password 新密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>忘记登录密码</p>
<p>其实思路和 mac 一样,都是需要绕过验证,然后登陆mysql 接着修改密码</p>
<ol>
<li><p>启动服务器时,控制它不要加载授权表;</p>
</li>
<li><p>无密码登录服务器</p>
</li>
<li><p>执行sql 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string = password(&apos;root&apos;) where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器.</p>
</li>
</ol>
</li>
</ol>
<h4 id="用到的系统指令"><a href="#用到的系统指令" class="headerlink" title="用到的系统指令"></a>用到的系统指令</h4><ul>
<li>mysqld 直接运行服务器程序;</li>
<li>mysqld –skip-grant-tables 跳过授权表,用于重设密码;</li>
<li>tasklist | findstr mysqld 找到 mysqld 服务进程;</li>
<li>taskkill /f /pid 结束服务器程序;</li>
<li>mysql -u 用户名 -p 密码 -h 主机 -P 端口号;</li>
<li>mysqld –install 将 mysqld 注册到 windows 服务中,在服务中叫 MySQL( 本质就是绑定了一个 exe 程序);</li>
<li>sc delete mysql 删除 windows 服务(重新 install 的话会显示服务已存在,需要重启);</li>
<li>exit 退出客户端</li>
</ul>
<h3 id="5-6和5-7的区别"><a href="#5-6和5-7的区别" class="headerlink" title="5.6和5.7的区别"></a>5.6和5.7的区别</h3><ol>
<li><p>5.7版本安装后需要初始化；</p>
</li>
<li><p>5.6游客模式 没有密码就可以登录但是无法操作数据，只能看到information_schema 和 mysql；</p>
</li>
<li><p>5.7中 data数据存放目录是由初始化时决定的</p>
<ol>
<li>带界面的在 C:\ProgramData;</li>
<li>不带界面的在安装目录中和 bin 同级;</li>
</ol>
<p>5.6中 data 就在安装目录中</p>
</li>
<li><p>密码存储字段名，在5.6中为 password，5.7中为anthentication_string</p>
</li>
</ol>
<h2 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h2><h3 id="什么是-SQL"><a href="#什么是-SQL" class="headerlink" title="什么是 SQL"></a>什么是 SQL</h3><p>sql:结构化查询语言,是上个世纪70年代由 IBM 公司发明的一种专门检索,查询数据的编程语言,这种编程语言类似于脚本语言.它是一大堆的命令语句.只不过它执行的接口是 SQL 接口,它也提供了 SQL 的语句的解释器,比如 select,update 等命令,只不过这样的命令要比 bask 复杂一点.要向执行 SQL 的语句,需要有 SQL 模型才可以.首先需要把用户写的语句输送到服务器端,这就要服务器能够接受客户端的命令,并将命令所返回的结果,送回客户端.这就是 SQL 的执行环境,而这些语句,则是实现检索修改等相关的数据管理工作的.<br>所以 SQL 就是一种管理语言,用于管理关系型系统的,实现管理,修改数据等工作的,一种特殊语言解析器.<br>最开始是 IBM 提供的 SQL 数据接口( SEQUEL),但是 Oracle 也有自己的 SQL 数据接口,这就造成了规则不匹配.所以美国国家标准委员会,就定义了一个新标准: ANSI SQL 标准,它的发展历程:</p>
<ol>
<li>上个世纪80年代,1986年研发出来,叫做 SQL-86标准;</li>
<li>89年扩展为 SQL-89;</li>
<li>1992年再次扩展, SQL-92:这一代被应用了很长的时间:各生产商 RDBMS 公司,要想实现上市,则必须严格的按照92的标准.但是这个标准定义的太严格,以至于几乎没有厂商可以达到这种标准,所以兼容的标准也分成了三中级别: Entry 级别, Intermediate 级别, Full 级别,几乎没有厂商可以达到 Full 级别,大部分都是 Entry 级别;</li>
<li>1999年再次扩展, SQL-99:MySQL 是完全兼容 SQL-99的 Entry 级别.而在此又出现了 Core SQL 级别;</li>
<li>2003年,又出现了 SQL-2003标准. XML 标准.</li>
</ol>
<p>SQL 的版本就和 bash 一样,每一个更新版本都有新功能,而且执行速度,使用便捷,提供的扩展也不一样.</p>
<h3 id="简单的-sql-语句"><a href="#简单的-sql-语句" class="headerlink" title="简单的 sql 语句"></a>简单的 sql 语句</h3><h4 id="针对库的相关操作"><a href="#针对库的相关操作" class="headerlink" title="针对库的相关操作"></a>针对库的相关操作</h4><ul>
<li><p>增 </p>
<ul>
<li>create database 库名;</li>
</ul>
</li>
<li><p>删</p>
<ul>
<li>drop database 库名;</li>
</ul>
</li>
<li><p>查</p>
<ul>
<li>show databases;（查看所有数据库）</li>
<li>show create database 库名;（查看建库语句）</li>
</ul>
</li>
<li><p>改</p>
<ul>
<li>alter database 库名 要修改的字段名;</li>
<li>alter database 库名 DEAFULT CHARACTER SET utf8; （修改默认编码）</li>
<li>alter database 库名 CHARSET utf8;</li>
</ul>
<p><strong>注意在mysql 中 只能写 utf8</strong></p>
</li>
</ul>
<h4 id="针对表的相关操作"><a href="#针对表的相关操作" class="headerlink" title="针对表的相关操作"></a>针对表的相关操作</h4><ul>
<li><p>增：建表是首先要明确数据库</p>
<ul>
<li>use 库名;</li>
<li>create table 表名(字段名 类型(长度),….);</li>
<li>create table 库名(name char(10),gender char(1), age int);</li>
<li>create table 库名.表名(字段名 类型(长度),…); # 创建同时指定数据库</li>
</ul>
</li>
<li><p>删</p>
<ul>
<li>drop table 表名;</li>
</ul>
</li>
<li><p>查</p>
<ul>
<li>show tables; 查看所有表</li>
<li>desc 表名; 查看表结构</li>
<li>show create table 表名; 查建表语句</li>
</ul>
</li>
<li><p>改</p>
<ul>
<li>alter table 表名 drop|change|modify|add<ul>
<li>alter table 表名 drop 字段;</li>
<li>alter table 表名 change 旧字段名 新字段名 新类型; </li>
<li>alter table 表名 modify 字段名 新类型;</li>
<li>alter table 表名 add 字段名 类型;</li>
</ul>
</li>
</ul>
<p>重命名表</p>
<ul>
<li>rename table 旧表名 to 新表名;</li>
</ul>
<p>修改表的属性</p>
<ul>
<li>alter table 表名 属性名 值;</li>
</ul>
</li>
</ul>
<h4 id="针对记录的相关操作"><a href="#针对记录的相关操作" class="headerlink" title="针对记录的相关操作"></a>针对记录的相关操作</h4><ul>
<li>增<ul>
<li>insert into 表名 values(值1,值2…);</li>
</ul>
</li>
<li>删<ul>
<li>delete from 表名 where 字段名=值; # 没有符合条件的话删除全部数据</li>
</ul>
</li>
<li>查<ul>
<li>select <em> from 表名; # </em>表示通配符 查看所有字段</li>
</ul>
</li>
<li>改<ul>
<li>update 表名 set 字段名 = 新值 where 字段名 = 值; # 没有符合条件的话修改全部数据</li>
</ul>
</li>
</ul>
<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><ol>
<li>不能使用纯数字；</li>
<li>可以是数字、字母、下划线的组合；</li>
<li>可以用下划线开头；</li>
<li>不能使 sql 关键词，如 create；</li>
<li>不区分大小写。</li>
</ol>
<h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><p>配置文件放在安装路径根目录中就是和 bin 同级，名称必须叫my.ini（mac 的不一样）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 客户端的配置</span><br><span class="line">[mysql]</span><br><span class="line">user = root</span><br><span class="line">password = password</span><br><span class="line">default-character-set = utf8</span><br><span class="line"># 服务端的配置</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据库（二）</title>
    <url>/2018/11/20/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客学习数据库的详细建表语句，数据库数据类型以及约束条件。</p>
<h1 id="详细建表语句"><a href="#详细建表语句" class="headerlink" title="详细建表语句"></a>详细建表语句</h1><p>在介绍建表语句之前需要了解一下存储引擎。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>MySQL 支持的存储引擎有以下几种：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxes9jsiehj31hy0d4n31.jpg" alt></p>
<p>以后我们使用的就只有 InnoDB 引擎，可以看到默认情况下存储引擎就是 InnoDB，建立一个表的时候，可以看看在文件夹里发生了什么。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(id int, name char);</span><br></pre></td></tr></table></figure>
<p>建表成功后在文件夹里多了两个文件：</p>
<ul>
<li>t1.frm</li>
<li>t1.ibd</li>
</ul>
<p>frm是 frame 的缩写是表示该表的数据结构，而 ibd 表示 InnoDB data 表示存储的是 InnoDB 引擎的数据。</p>
<p>存储引擎就相当于一个用来存取数据的软件。</p>
<p>指定以某种存储引擎建表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t2(id int name char)engine=memory;</span><br></pre></td></tr></table></figure>
<h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><p>创建表的完整语法，中括号里面的表示可选参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">字段1 数据类型[(宽度) 约束条件],</span><br><span class="line">字段2 数据类型[(宽度) 约束条件],</span><br><span class="line">字段3 数据类型[(宽度) 约束条件]);</span><br></pre></td></tr></table></figure>
<p>最后一个字段后面不能加逗号，否则会报错。</p>
<p>类型：使用限制字段必须以什么样的数据类型传值</p>
<p>约束条件：约束条件是在类型之外添加一种额外的限制。</p>
<p><strong>注意</strong></p>
<ol>
<li>在同一张表中，字段名不能相同；</li>
<li>宽度和约束条件可选，字段名和类型是必须的；</li>
<li>最后一个字段后不加逗号。</li>
</ol>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h3 id="整型：int、tinyint、bigint等"><a href="#整型：int、tinyint、bigint等" class="headerlink" title="整型：int、tinyint、bigint等"></a>整型：int、tinyint、bigint等</h3><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxetefppgkj30ka0hq40s.jpg" alt></p>
<p>整型默认是有符号的，可以通过约束条件改变（unsigned）；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t3(x tinyint unsigned);</span><br></pre></td></tr></table></figure>
<p> <strong>可选参数里面的宽度只有整型表示的是显示宽度，其他的都表示存储限制。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t4(x int(8) unsigned zerofill);</span><br></pre></td></tr></table></figure>
<p>显示时不够八位的使用0填充，如果超过八位正常显示。</p>
<p>如果不指定限制宽度会有默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t5(id int unsigned);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxeu3k5ewej311e09qmz1.jpg" alt></p>
<p> 如果是有符号的整型，则会比无符号的多一位，因为要显示正负号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t6(id int);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxeu51f051j312809iq4p.jpg" alt></p>
<p><strong>强调：对于整型来说，数据类型后的宽度并不是存储限制，而是显示限制。所以在创建表示，如果字段采用的是整型类型，完全无需指定显示宽度，默认的显示宽度，足够显示完整当初存放的数据。</strong></p>
<h3 id="浮点型：float、double、decimal等"><a href="#浮点型：float、double、decimal等" class="headerlink" title="浮点型：float、double、decimal等"></a>浮点型：float、double、decimal等</h3><p>float    4字节</p>
<p>double    8字节</p>
<p>decimal    不固定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t7(num float(m,d));</span><br></pre></td></tr></table></figure>
<p>m 表示总长度    d 表示小数部分长度</p>
<p>长度表示的是字符长度而不是数据存储范围。</p>
<p><strong>各个类型的最大长度</strong></p>
<p>float    (255,30)</p>
<p>double    (255,30)</p>
<p>decimal    (65,30)</p>
<p><strong>区别</strong></p>
<p>float 与 double 的精度不同，都是不准确的小数，decimal 准确的小数不会丢失精度</p>
<p>具体使用哪种类型得需要使用场景判断</p>
<p>float 满足大部分使用场景，decimal 适合银行系统，科学研究。</p>
<p>括号中 m 和 d 的值，可以限制数据存储范围，与整型不同</p>
<p>重点：记住 m 和 d 的含义。</p>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>常用两种</p>
<p>​    char    定长字符串</p>
<p>​    varchar    可变长度字符串</p>
<p><strong>注意：字符串中，长度指定的是数据的字符长度，与字节没有关系，在创建时 varchar 必须指定，char 有默认值。</strong></p>
<p>不同点：</p>
<p>​    char 类型在取数据时，根据长度来获取，不关心真实数据长度</p>
<p>​    无论数据有多长，占用的空间是固定的，造成了一定空间浪费。</p>
<p>​    varchar 类型在取数据时，先获取数据长度，在根据长度获取真实数据时也关心真实数据长度，先存储长度需要一个字节，在存储真实数据不会浪费空间，但是由于需要计算数据的长度，所以存取速度会比定长慢。</p>
<p>相同点：</p>
<p>​    括号中的数字，都是表示存储最大字符长度。</p>
<p>char 使用频率更高。</p>
<p>mysql 会在存储数据时自动将数据末尾的空格去掉，如果必须要存空格，需要修改 sql_mode 增加PAD_CHAR_TO_FULL_LENGTH 意思是把空格当做有效数据。</p>
<p>由于自动去除空格这个机制，在使用等于符号和 like 时有区别：</p>
<p>​    select * from t1 where name = ‘yh  ‘; </p>
<p>​    会自动去除空格</p>
<p>​    select * from t1 where name like ‘yh’;</p>
<p>​    like 用于模糊匹配，使用%表示0或任意个字符</p>
<p>​    使用_表示一个任意字符。</p>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p>year</p>
<p>time</p>
<p>date</p>
<p>datetime</p>
<p>timestamp</p>
<p>Timestamp 特点是可以给 null 自动输入当前时间</p>
<p>当这条记录被修改了会自动更新当前时间</p>
<h3 id="集合与枚举类型"><a href="#集合与枚举类型" class="headerlink" title="集合与枚举类型"></a>集合与枚举类型</h3><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>​    enum 可以指定一堆字符串的值，在插入数据时</p>
<p>​    数据必须在堆字符串中的其中一个（‘’男的‘’，‘’女的‘’）多选一</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>​    set 可以指定一堆字符串的值 再插入数据时</p>
<p>​    数据必须这堆字符串中的其中一个（‘’男的‘’，‘’女的‘’）多选一</p>
<p><strong>共同点：</strong>数据都是字符串类型</p>
<h1 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h1><p>是一种对数据的限制。</p>
<p>约束的作用？</p>
<p>​    为了保证数据的正确性，完整性</p>
<p>​    例如要存出密码 char(20) 只限制了类型和长度，无法保证数据的正确性。</p>
<h4 id="额外的约束"><a href="#额外的约束" class="headerlink" title="额外的约束"></a>额外的约束</h4><p>语法：</p>
<p>​    创建时指定约束</p>
<p>​    create table 表名称(字段名 类型(长度) 约束名称1,约束名称n,…)</p>
<p>​    后期修改的方式添加 约束</p>
<p>​    alter table 表名称 modify 字段名 类型(长度) 约束名称1 约束名称n,…</p>
<p>NOT NULL 非空约束  限制该字段的值不能为空<br>UNIQUE 唯一性约束  限制该字段的值是唯一的不能出现重复<br>DEFAULT 默认值约束 如果插入数据时没有指定该字段的值则使用默认值<br>PRIMARY KEY 主键约束 限制该字段 不能为空 并且是唯一的   可以唯一标识一条数据 <strong>*</strong><br>FOREIGN KEY 外键约束 用来指向另一个表的主键</p>
<p>每个表都应该有一个主键，需要唯一标识，否则可能出现完全相同的两个数据，无法区分 UNIQUE 不能重复，但是可以为空，这样的话不能唯一标识。</p>
<p>UNIQUE NOT NULL 不能为空且唯一 可以唯一标识一条数据，书写顺序无所谓。</p>
<p>UNIQUE NOT NULL 与主键的区别</p>
<p>​    UNIQUE NOT NULL 不能被其他表引用（不能作为其他表的外键）</p>
<p>​    UNIQUE NOT NULL 约束 一个表中可以有多个，但是主键只能有一个。</p>
<p><strong>联合唯一：</strong></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxfsodmiqgj311q0as40t.jpg" alt></p>
<p><strong>索引：</strong>用于加速查询</p>
<p>InnoDB 中索引是树形结构</p>
<p>​    为了提高查询效率，InnoDB 会找一个不为空且惟一的字段作为主键</p>
<p>​    如果表中不存在这样的字段，会自动帮你建一个隐藏逐渐字段，但是无法提升查询效率。</p>
<p>​    只要是使用 InnoDB，就应该为每个表指定一个非空且唯一的字段，InnoDB 组织数据时，首先使用主键，如果没有主键，找一个非空且惟一的字段，如果没有那就会建一个隐藏字段。</p>
<p><strong>多字段联合主键</strong>：不常用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t7(ip char(15),port int,primary key(ip,port));</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxfslyoi6uj313q09ujth.jpg" alt></p>
<p>当一个表中，由于业务需求没有一个非空且惟一的字段时，我们可以建一个新的字段专门作为主键，管理主键的值挺麻烦，需要记录上一次的主键值，MySQL 使用 auto_increment 自动增长，auto_increment 只能用于整型字段，并且该字段必须具备索引。所以主键都会加上auto_increment。</p>
<p>手动修改自动增长计数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter teble 表名 auto_increment 新值；</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果新的值小于当前最大值是无效的。</p>
<p>insert 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into 表名 values(值1,值n,...)</span><br></pre></td></tr></table></figure>
<p>要求值得顺序个数必须与表字段完全对应</p>
<p>另一种写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into 表名(字段名,字段名n,...) values(值1,值n,...)</span><br></pre></td></tr></table></figure>
<p>可以选择性插入某些字段，要求值得顺序必须与表名后面声明的字段一致。</p>
<h1 id="SQL-MODE"><a href="#SQL-MODE" class="headerlink" title="SQL_MODE"></a>SQL_MODE</h1><h3 id="查看数据库的模式"><a href="#查看数据库的模式" class="headerlink" title="查看数据库的模式"></a>查看数据库的模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%mode%&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxeuerr9gjj31z60c0aev.jpg" alt></p>
<p>在最后一行的 sql_mode 有个值为NO_ENGINE_SUBSTITUTION意思为非严格模式，作用是在如果你存储的数据类型超过限制条件了也不会报错反而会存储限制条件的边界大小，比如 tinyint，如果是非严格模式，你存储一个大于255的数据，不会保错会存储为255。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t0(id tinyint);</span><br></pre></td></tr></table></figure>
<h3 id="修改为严格模式"><a href="#修改为严格模式" class="headerlink" title="修改为严格模式"></a>修改为严格模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global sql_mode=&apos;strict_trans_tables&apos;;</span><br></pre></td></tr></table></figure>
<p>设置完成后，需要重新连接才会生效。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxew6drxv7j311k0s0jy5.jpg" alt></p>
<p>修改为严格模式后如果插入的值超过数据类型的界限后就会报错。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxewfp5mj1j312004qab3.jpg" alt></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程（四）</title>
    <url>/2018/11/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇博客介绍了进程的创建,进程的相关属性以及三种特殊进程:僵尸进程,孤儿进程和守护进程.</p>
<p>守护进程是一个在后台运行并且不受任何终端控制的进程,用于执行特定的系统任务.很多守护进程在系统引导的时候启动,并且一直运行直到系统关闭.另一些只在需要的时候才启动,完成任务后就自动结束.</p>
<p>本篇博客详细介绍守护进程的产生原因以及作用.(因为我觉得守护进程对操作系统的正常运行还蛮重要的)</p>
<h1 id="守护进程介绍"><a href="#守护进程介绍" class="headerlink" title="守护进程介绍"></a>守护进程介绍</h1><p><strong>以下介绍摘自百度百科</strong></p>
<p>守护进程是一个在后台运行并且不受任何终端控制的进程. Unix 操作系统有很多典型的守护进程,他们在后台运行,执行不同的管理任务.</p>
<p>用户使守护进程独立于所有终端是因为,在守护进程从一个终端启动的情况下,这同一个终端可能被其他的用户使用.例如,用户从一个终端启动守护进程后退出,然后另一个人也登陆到这个终端.用户不希望后者在使用该终端的过程中,接收到守护进程的任何错误信息.同样,由终端键入的任何信号(例如中断信号)也不应该影响先前在该终端启动的任何守护进程的运行.虽然让服务器后台运行很容易(只要shell 命令行以&amp;结尾),但用户还应该做些工作,让程序本身能够自动进入后台,且不依赖于任何终端.</p>
<p>守护进程没有控制终端,因此当某些情况发生时,不管是一般的报告性信息,还是由管理员处理的紧急信息,都需要以某种方式输出. Syslog 函数就是输出这些信息的标准方法,它把信息发送给 syslogd 守护进程.</p>
<h1 id="创建守护进程步骤"><a href="#创建守护进程步骤" class="headerlink" title="创建守护进程步骤"></a>创建守护进程步骤</h1><p>在不同 Unix环境下,守护进程的具体变成细节并不一致.但所幸的是,守护进程的编程原则都一样,区别仅在于具体的实现细节不同,这个原则就是要满足守护进程的特性.编程规则如下:</p>
<h3 id="在后台运行"><a href="#在后台运行" class="headerlink" title="在后台运行"></a>在后台运行</h3><p>为避免挂起控制终端,要将守护进程放入后台运行,其方法是在父进程中调用 fork 使父进程终止,让子进程在后台执行,使得程序在 shell 终端里造成一个已经运行完毕的假象.之后所有的工作都在子进程中完成,而用户在 shell 终端里则可以执行其他命令,从而使得程序以僵尸进程运行,在形式上做到了与控制终端的隔离.具体就是 fork 产生子进程后,调用 exit 使父进程终止.</p>
<h3 id="脱离控制终端-登陆会话和进程组"><a href="#脱离控制终端-登陆会话和进程组" class="headerlink" title="脱离控制终端,登陆会话和进程组"></a>脱离控制终端,登陆会话和进程组</h3><p>登陆回话可以包含多个进程组,这些进程组共享一个控制终端,这个控制终端通常是创建进程的登陆终端,控制终端,登陆回话和进程组通常都是从父进程继承下来的.目的就是要脱离这些继承的东西,不受它们的影响.</p>
<p>这就要使用 setsid 函数使进程成为会话组长.</p>
<p><strong>setsid</strong></p>
<p>setsid 命令 子进程从父进程继承了: Session ID, 进程组 ID 合打开的终端.子进程如果要脱离这些,代码中可通过调用 setsid 来实现.而命令行或脚本中可以通过命令setsid 来实现. setsid 帮助一个进程脱离从父进程继承而来的已打开的终端,会话和进程组.</p>
<p>需要说明的是,当进程是会话组长时, setsid 调用会失败,大第一点已经保证进程不是会话组长.setsid 调用成功后,进程会成为新的会话组长和新的进程组长,并与原来的登陆会话和进程组脱离,由于会话过程对控制终端的独占性,进程同时与控制终端脱离.</p>
<p>具体操作就是:</p>
<ol>
<li>成为新会话的首进程;</li>
<li>成为一个新进程组的首进程;</li>
<li>没有控制终端.</li>
</ol>
<h3 id="禁止进程重新打开控制终端"><a href="#禁止进程重新打开控制终端" class="headerlink" title="禁止进程重新打开控制终端"></a>禁止进程重新打开控制终端</h3><p>现在进程已经成为无终端的会话组长,但它可以重新申请打开一个控制终端.可以通过是进程不再成为会话组长来禁止进程重新打开控制终端.</p>
<h3 id="关闭打开的文件描述符"><a href="#关闭打开的文件描述符" class="headerlink" title="关闭打开的文件描述符"></a>关闭打开的文件描述符</h3><p>进程从创建它的父进程那里继承了打开的文件描述符.如果不关闭,会造成资源浪给,造成进程所在地文件系统无法卸下以及产生无法预料的错误.一般来说,必要的是关闭0,1,2三个文件描述符,即标准输入,标准输出,标准错误.因为一般希望守护进程自己有一套信息输出,输入的体系,而不是把所有的东西都发送到终端屏幕上.所以需要调用 fclose 来关闭文件描述符.</p>
<h3 id="改变当前工作目录"><a href="#改变当前工作目录" class="headerlink" title="改变当前工作目录"></a>改变当前工作目录</h3><p>将当前工作目录更改为根目录,从父进程继承过来的当前工作目录可能在一个装配的文件系统中.因为守护进程通常在系统引导之前是一直存在的,所以如果守护进程的当前工作目录在一个装配文件系统中,那么该文件系统就不能被拆卸.</p>
<p>另外,某些守护进程可能会把当前工作目录更改到某个指定位置,在此位置做它们的工作.例如,行式打印机守护进程常常将工作目录更改到 spool 目录上.可以调用 chdir 更改工作目录.</p>
<h3 id="重设文件创建掩码"><a href="#重设文件创建掩码" class="headerlink" title="重设文件创建掩码"></a>重设文件创建掩码</h3><p>文件创建掩码是指屏蔽掉文件创建时的对应为.由于使用 fork 后函数新建的子进程继承了父进程的文件创建掩码,这就给该子进程使用文件带来了诸多麻烦.因此,把文件创建掩码设置为0,可以大大增强该守护进程的灵活性.设置文件创建掩码的函数是 umask, 通常的使用方法为umask(0).</p>
<h3 id="处理-SIGCHLD-信号"><a href="#处理-SIGCHLD-信号" class="headerlink" title="处理 SIGCHLD 信号"></a>处理 SIGCHLD 信号</h3><p>处理 SIGCHLD 信号并不是必需的.但是对于某些守护进程,特别是服务器进程往往在请求到来时生产子进程出来请求.如果父进程不等待子进程结束,子进程将成为僵尸进程而占用系统资源.如果父进程等待子进程结束,将增加父进程的负担,影响服务器进程的并发性能.在系统下可以简单的将 SIGCHLD 信号的操作设为 SIG-IGN:</p>
<p><code>signal(SIGCHLD,SIG_IGN)</code></p>
<p>这样,内核在子进程结束后不会产生僵尸进程,这一点与 BSD4不同,杂 iBSD4下必须显式等待子进程结束后才能释放僵尸进程.</p>
<p>#python守护进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initDaemon</span><span class="params">(stdoutfd, stderrfd=None, basePath=None)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    初始化为 daemon 进程</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    basePath = <span class="string">'/'</span> <span class="keyword">if</span> basePath <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> basePath</span><br><span class="line">    curTimeStr = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stdoutfd.write(<span class="string">'Start on %s, '</span> % curTimeStr)</span><br><span class="line">        stdoutfd.flush()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.fork() &gt; <span class="number">0</span>:</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="keyword">raise</span> OSError(<span class="string">'fork error'</span>)</span><br><span class="line">        </span><br><span class="line">    os.chdir(basePath)</span><br><span class="line">    os.setsid()</span><br><span class="line">    sys.stdout = stdoutfd</span><br><span class="line">    sys.stderr = stdoutfd <span class="keyword">if</span> stderrfd <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> stderrfd</span><br><span class="line">    sys.stdin = open(<span class="string">'/dev/nu,,'</span>, <span class="string">'r'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.fork() &gt; <span class="number">0</span>:</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="keyword">raise</span> OSError(<span class="string">'fork 2 error'</span>)</span><br><span class="line">        </span><br><span class="line">    pid = int(os.getpid())</span><br><span class="line">    stdoutfd.write(<span class="string">'pid=%s\n'</span> % pid)</span><br><span class="line">    stdoutfd.flush()</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>##守护进程运行方式</p>
<h3 id="独立运行的守护进程"><a href="#独立运行的守护进程" class="headerlink" title="独立运行的守护进程"></a>独立运行的守护进程</h3><p>独立运行的守护进程有 init 脚本负责管理,所有独立运行的守护进程的脚本在/etc/rc和/etc/init.d 目录下.系统服务都是独立运行的守护进程包括 syslogd 和 cron 等.服务器监听一个特定的端口上等待客户端的连接.如果客户端产生一个连接请求,守护进程就创建一个子服务器响应这个连接,而主服务器继续监听.以保持多个子服务器池等待下一个客户端请求连接.</p>
<h3 id="由-xinetd-管理的守护进程"><a href="#由-xinetd-管理的守护进程" class="headerlink" title="由 xinetd 管理的守护进程"></a>由 xinetd 管理的守护进程</h3><p>从守护进程的概念可以看出,系统所运行的每一种服务,都必须运行一个监听某个端口连接所发生的守护进程,这通常意味着资源浪费.为了解决这个问题, Linux 引进了’网络守护进程服务程序’的概念. CentOS6.4使用的网络守护进程是 xinted(eXtendedInterNET services daemon).</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxb66jw9q7j31c00u07v9.jpg" alt></p>
<p>上图是 ubuntu18.04使用的网络守护进程服务程序, xinted 能够同时监听多个指定的端口,在接受用户请求时,它能够根据用户请求的端口不同,启动不同的网络服务进程来处理这些用户请求.可以把 xinted 看做一个管理启动服务的管理服务器,它决定把一个客户请求交给那个程序处理,然后启动相应的守护进程.</p>
<p>##守护进程分类</p>
<p>按照服务类型分为如下几个:</p>
<ul>
<li>系统守护进程: syslogd,login,crond,at 等</li>
<li>网络守护进程: sendmail,httpd,xinetd 等</li>
<li>独立启动的守护进程: httpd,named,xinetd 等</li>
<li>被动守护进程(由 xinetd 启动):telnet,finger,ktalk 等</li>
</ul>
<h2 id="python守护进程使用"><a href="#python守护进程使用" class="headerlink" title="python守护进程使用"></a>python守护进程使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'子进程'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    <span class="comment"># 将该进程设为父进程的守护进程</span></span><br><span class="line">    p.daemon = <span class="literal">True</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'主进程'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>设置守护进程必须在启动进程之前执行.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于一个操作系统来说,为了执行不同的管理任务,需要守护进程来协助管理.对于守护进程最重要的来说是需要在后台运行.其次,守护进程必须与其运行前的环境隔离开来.这些环境包括未关闭的文件描述符,控制终端,会话和进程组,工作目录以及文件创建掩码等.这些环境通常是守护进程从执行它的父进程(特别是 shell)继承下来的.最后守护进程的启动方式有其特殊之处.它可以在 Linux 系统启动时从启动脚本/etc/rc. d中启动,也可以由作业控制进程 crond 启动,还可以由用户终端(通常是 shell)执行.</p>
<p>除这几点之外,守护进程与普通进程基本上没什么区别.因此,编写守护进程实际上是把一个普通进程按照上述的守护进程的特性改造成为守护进程.</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>数据库（三）</title>
    <url>/2018/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客主要内容为表之间的关系、多表关联、复制表；查询如单表查询、多表关联查询</p>
<h1 id="表之间关系"><a href="#表之间关系" class="headerlink" title="表之间关系"></a>表之间关系</h1><h2 id="为什么要分表？"><a href="#为什么要分表？" class="headerlink" title="为什么要分表？"></a>为什么要分表？</h2><p>假如现在有两种数据，一种是部门数据一种是员工数据，如果两中数据放在同一张表中则会造成：</p>
<ul>
<li>数据重复</li>
<li>结构混乱</li>
<li>扩展维护性差</li>
<li>需要分表</li>
</ul>
<p>所以需要把表中会造成混乱的数据分出来，分成两张表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table dept(id int primary key auto_increment,name char(20),job char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(id int primary key auto_increment,name char(20),gender char,age int,salary float,d_id int);</span><br></pre></td></tr></table></figure>
<p>什么时候需要分表？</p>
<p>当出现大量重复数据时，当一条记录中的数据不属于同一类时需要分表。</p>
<p>分表之后产生的问题，员工表可以存储一个不存在的部门编号，这样的数据是不完整的无效数据，必须找到一种方法可以在物理层面建立关联关系。</p>
<p>以上建表语句可以建立逻辑上的关联关系，这有建表的人才明白其中的关系，而 mysql 并不知道关系，所以需要通过外键来进行约束，说明这两张表的关联关系。</p>
<p>##外键的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table 表名(字段名 类型(长度),foreign key(外键的字段名) references 要关联表名(主键名));</span><br></pre></td></tr></table></figure>
<p>使用外键时必须分清主从关系，也就是要分清先键那张表，因为在使用外键关联表时，需要知道对方表的表名，所以要关联的表应该是主表，应该先建主表，这样才能关联起来。</p>
<h3 id="外键的第一个约束"><a href="#外键的第一个约束" class="headerlink" title="外键的第一个约束"></a>外键的第一个约束</h3><p>先键主表，再建从表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table dept(id int primary key auto_increment,name char(20),job char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(id int primary key auto_increment,name char(20),d_id int,foreign key(d_id) references dept(id));</span><br></pre></td></tr></table></figure>
<h3 id="外键的第二个约束"><a href="#外键的第二个约束" class="headerlink" title="外键的第二个约束"></a>外键的第二个约束</h3><p>数据先插入主表，再插入从表数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into dept values(1,&apos;hr&apos;,&apos;招聘&apos;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into emp values(1,&apos;张无忌&apos;,1);</span><br></pre></td></tr></table></figure>
<h3 id="外键的第三个约束"><a href="#外键的第三个约束" class="headerlink" title="外键的第三个约束"></a>外键的第三个约束</h3><p>删除数据时先删从表，再删主表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from emp where name = &apos;张无忌&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from dept where id = 1;</span><br></pre></td></tr></table></figure>
<h3 id="外键的第四个约束"><a href="#外键的第四个约束" class="headerlink" title="外键的第四个约束"></a>外键的第四个约束</h3><p>从表更新外键时必须保证外键是存在的。</p>
<h3 id="外键的第五个约束"><a href="#外键的第五个约束" class="headerlink" title="外键的第五个约束"></a>外键的第五个约束</h3><p>更新主表的 id 时，要么先删除从表关联的数据，或者把关联数据关联到其他的主表 id。</p>
<p>有了这几种约束后，可以保证数据的完整性。相应的受到外键约束，主表的删除和更新操作受到限制，很多情况下，删除主表某个数据需要至少两条sql 语句，会很麻烦。</p>
<h3 id="外键的第六个约束"><a href="#外键的第六个约束" class="headerlink" title="外键的第六个约束"></a>外键的第六个约束</h3><p>删除主表时，要先删除从表。</p>
<h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><h4 id="删除级联"><a href="#删除级联" class="headerlink" title="删除级联"></a>删除级联</h4><p>当主表删除时，从表相关联的记录同步删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(id int primary key auto_increment,name char(20),d_id int,foreign key(d_id) references dept(id) on delete cascade);</span><br></pre></td></tr></table></figure>
<h4 id="更新级联"><a href="#更新级联" class="headerlink" title="更新级联"></a>更新级联</h4><p>当主表 id 时，从表相关联的记录通步更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(id int primary key auto_increment,name char(20),d_id int,foreign key(d_id) references dept(id) on update cascade);</span><br></pre></td></tr></table></figure>
<p>级联方向只能是主表级联从表，可以在操作主表时自动操作从表。（单箱操作，主表变化是级联操作从表，从表的变化不会影响主表）</p>
<h2 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h2><p>一对一的关系只需要加一个外键来关联即可，但是需要给外键加上唯一约束。有主从关系的都需要先建主表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create customer(c_id int primary key auto_increment,name char(20),phonenum char(11),addr char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create student(s_id int primary key auto_increment,name char(20),class char(11),number char(20),housenum char(20),c_id int unique,foreign key(c_id) references customer(c_id));</span><br></pre></td></tr></table></figure>
<p>一对一的另一种使用场景，当一个表的字段太多，而常用的字段不多时，可以采取垂直分表的方式来提高效率，比如个人信息有身份证、性别、年龄、地址等，可以拆分为基础信息和细节信息；也有另一种提升效率的方式，水平分表，当一个表中的数据记录太多时，效率会降低，可以采取水平分表，字段完全相同。</p>
<h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>假如有两张表，一张表存的是老师，另一张表存的是学生。因为一个老师可以教多个学生，一个学生也可以有多个老师，所以这是双向多对一的关系，也就是多对多的关系。那么应该怎么存储数据呢？</p>
<p>可以通过增加一个中间表来存储两张表的关系，然后其他两张表分别用一个字段作为外键来关联中间表。（只要是多对多关系都是靠中间表来存储两张表之间的关系）除了中间表，另外两张都是主表，具体先建哪种主表没有先后顺序。多对多关系至少需要三张表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(id int primary key auto_increment,name char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tea(id int primary key auto_increment,name char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tsr(id int primary key auto_increment，t_id int,s_id int,foreign key(t_id) references tea(id),foreign key(s_id) references stu(id));</span><br></pre></td></tr></table></figure>
<p>因为老师和学生都是主表，关系表是从表，所以需要先插入老师和学生的数据，接着插入中间表的数据。</p>
<p>多对多关系表中因为已经有了 id 为主键，所以可以重复存入相同的学生和老师关系数据，可以通过联合主键改变。</p>
<h2 id="多对一关系"><a href="#多对一关系" class="headerlink" title="多对一关系"></a>多对一关系</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table dept(id int primary key auto_increment,name char(20),job char(20));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(id int primary key auto_increment,name char(20),d_id int,foreign key(d_id) references dept(id));</span><br></pre></td></tr></table></figure>
<h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table 新表名 select * from 被复制的表名;</span><br></pre></td></tr></table></figure>
<p>注意不会复制主键和约束条件，数据结构都可以复制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table 新表名 select * from 源表名 where 1 = 2;</span><br></pre></td></tr></table></figure>
<p>当where 后面条件不成立时，只会复制表结构。</p>
<h2 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h2><p>自我复制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into 表名 select * from 表名;</span><br></pre></td></tr></table></figure>
<p>如果有主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into 表名(其他字段) select 其他字段 from 表名;</span><br></pre></td></tr></table></figure>
<p><strong>在日常开发中，如果对性能要求很高，不应该使用外键</strong></p>
<ol>
<li>效率降低</li>
<li>耦合 关系多起来会造成管理麻烦</li>
</ol>
<p>这时候关系只是逻辑关系很有可能产生错误数据。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据库（七）</title>
    <url>/2018/11/26/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客学习内容为视图、触发器、事务、存储过程、函数、数据备份及流程控制。</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h2><p>视图是由一张表或多张表的查询结果构成的一张虚拟表，建立一张视图后会在数据库中保留一个以 frm 后缀结尾的文件，只保留了数据结果，所有的数据都来自 sql 语句。</p>
<h2 id="为什么使用视图？"><a href="#为什么使用视图？" class="headerlink" title="为什么使用视图？"></a>为什么使用视图？</h2><p>在进行多表查询的时候，sql 语句会非常非常长，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select t1.student_id from (select student_id,num from score where course_id = (select cid from course where cname = &apos;物理&apos;)) as t1 join(select student_id,num from score where course_id = (select cid from course where cname = &apos;生物&apos;)) as t2 on t1.student_id = t2.student_id where t1.num &gt; t2.num;</span><br></pre></td></tr></table></figure>
<p>看是不是很长，这还只是三表查询，如果遇到更加复杂的表结构肯定会更长，不过那样的话对表的维护困难也加大了。如果每次都编写需要得到相同数据的 sql 语句会是一件很麻烦的事，可以把经常需要查询的 sql 语句转变为视图就可以避免重复写 sql 语句的问题。</p>
<p>视图除了可以减少 sql 语句的编写次数，还可以使用不同的视图来展示不同数据的访问，那么给某些用户设置权限不就可以了吗？注意，设置的权限要么只能看某张表的全部数据，要么只能看某张表中的某个 column 的数据，也就是列数据，列数据只是保存了字段名，比如说我要查看我的当月工资，是需要查看一行数据的，这样权限就帮不了忙了。（当然可以加 where 条件，在这里是介绍视图）</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create [or replace] view 视图名 [(column_list)] as select_statement;</span><br></pre></td></tr></table></figure>
<p>加上 or replace 时如果已经存在相同视图则替换原有视图，column_list 指定哪些字段要出现在视图中。<strong>注意：由于是一张虚拟表，视图中的数据实际来源于其他表，所以在视图中的数据不会出现在硬盘上，也就是只会保存一份数据结构。</strong></p>
<h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><p>视图是一张虚拟表，所以使用方式与普通表没有区别。</p>
<h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><ol>
<li>查看数据结构</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc view_name;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查看创建语句</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create view view_name;</span><br></pre></td></tr></table></figure>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter view_name select_statement;</span><br></pre></td></tr></table></figure>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop view view_name;</span><br></pre></td></tr></table></figure>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="案例一：简化多表-sql-语句"><a href="#案例一：简化多表-sql-语句" class="headerlink" title="案例一：简化多表 sql 语句"></a>案例一：简化多表 sql 语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 准备数据</span><br><span class="line">mysql&gt; create database db02 charset utf8;</span><br><span class="line">mysql&gt; use db02;</span><br><span class="line">mysql&gt; create table student(</span><br><span class="line">	   s_id int(3),</span><br><span class="line">	   name varchar(20),</span><br><span class="line">       math float,</span><br><span class="line">       chinese float);</span><br><span class="line">mysql&gt; insert into student values(1,&apos;tom&apos;,80,70),(2,&apos;jack&apos;,80,80),(3,&apos;rose&apos;,60,75);</span><br><span class="line">mysql&gt; create table stu_info(</span><br><span class="line">	   s_id int(3),</span><br><span class="line">       class varchar(50),</span><br><span class="line">       addr varchar(100));</span><br><span class="line">mysql&gt; insert into stu_info values(1,&apos;二班&apos;,&apos;安徽&apos;)，(2，&apos;二班&apos;,&apos;湖南&apos;),(3,&apos;三班&apos;,&apos;黑龙江&apos;)；</span><br><span class="line"># 创建视图包含编号、学生姓名、班级</span><br><span class="line">mysql&gt; create view stu_v (编号,姓名,班级) as select student.s_id,student.name,stu_info.class from student,stu_info where student.s_id = stu_info.s_id;</span><br><span class="line"># 查看视图中的数据</span><br><span class="line">mysql&gt; select * from stu_v;</span><br></pre></td></tr></table></figure>
<h3 id="案例二：隔离数据"><a href="#案例二：隔离数据" class="headerlink" title="案例二：隔离数据"></a>案例二：隔离数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建工资表</span><br><span class="line">mysql&gt; create table salarys(</span><br><span class="line">	   id int primary key,</span><br><span class="line">       name char(10),</span><br><span class="line">       salary double,</span><br><span class="line">       dept char(10));</span><br><span class="line">mysql&gt; insert into salarys values</span><br><span class="line">	   (1,&apos;刘强东&apos;,800000,&apos;市场&apos;),</span><br><span class="line">	   (2,&apos;马云&apos;,899990,&apos;市场&apos;),</span><br><span class="line">	   (3,&apos;李彦宏&apos;,989090,&apos;市场&apos;),</span><br><span class="line">	   (4,&apos;马化腾&apos;,88889999,&apos;财务&apos;);</span><br><span class="line"># 创建市场部视图</span><br><span class="line">mysql&gt; create view dept_sc as select * from salarys where dept = &apos;市场&apos;;</span><br><span class="line">mysql&gt; select * from dept_sc;</span><br></pre></td></tr></table></figure>
<p><strong>注意：对视图数据的 insert update delete 会同步到原表中，但由于视图可能是部分字段，很多时候会失败。</strong></p>
<p><strong>总结：mysql 可以分担程序中的部分逻辑，但这样一来后续的维护会变得更麻烦。如果需要改表结构，那意味着视图也需要相应的修改，没有直接在程序中修改 sql 来的方便。</strong></p>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="什么是触发器？"><a href="#什么是触发器？" class="headerlink" title="什么是触发器？"></a>什么是触发器？</h2><p>触发器是一段与表有关的 mysql 程序，当这个表在某个时间点发生了某种事件时，将会自动执行相应的触发器程序。</p>
<h2 id="何时使用触发器"><a href="#何时使用触发器" class="headerlink" title="何时使用触发器"></a>何时使用触发器</h2><p>当我们想要在一个表记录被更新时做一些操作时就可以说使用触发器，但是完全可以在 python 中来完成这个事情。</p>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create trigger t_name t_time t_event on table_name for each row</span><br><span class="line">begin</span><br><span class="line">stmts...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>支持的时间点（t_time）：事件发生之前和之后 before|after</p>
<p>支持的事件（t_event）：update、insert、delete</p>
<p>在触发器中可以访问到将被修改的那一行数据，根据事件不同能访问的也不同，update 可用 old 访问旧数据，new访问新数据，insert 可用 new 访问新数据，delete 可用 old 访问旧数据。</p>
<p>可以将 new 和 old 看做一个对象，其中封装了修改的数据的所有字段。</p>
<h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>有 cmd 表和错误日志表，需求：在 cmd 执行失败时自动将信息存储到错误日志表中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 准备数据</span><br><span class="line">mysql&gt; create table cmd(</span><br><span class="line">	   id int primary key auto_increment,</span><br><span class="line">       user char(32),</span><br><span class="line">       priv char(10),</span><br><span class="line">       cmd char(64),</span><br><span class="line">       sub_time datetime, # 提交时间</span><br><span class="line">       success enum(&apos;yes&apos;,&apos;no&apos;)); # 0代表执行失败</span><br><span class="line"># 错误日志表</span><br><span class="line">mysql&gt; create table errlog(</span><br><span class="line">	   id int primary key auto_increment,</span><br><span class="line">	   err_cmd char(64),</span><br><span class="line">	   err_time datetime);</span><br><span class="line"># 创建触发器</span><br><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create trigger trigger1 after insert on cmd for each row</span><br><span class="line">begin</span><br><span class="line">if new.success = &apos;no&apos; then</span><br><span class="line">	insert into errlog values(null,new.cmd,new.sub_time);</span><br><span class="line">end if;</span><br><span class="line">end //</span><br><span class="line">delimiter;</span><br><span class="line"># 往表 cmd 中插入记录，触发触发器，根据 if 条件决定是否需要插入错误日志</span><br><span class="line">mysql&gt; insert into cmd(</span><br><span class="line">	   user,</span><br><span class="line">       priv,</span><br><span class="line">       cmd,</span><br><span class="line">       sub_time,</span><br><span class="line">       success</span><br><span class="line">) values</span><br><span class="line">	   (&apos;thales&apos;,&apos;0755&apos;,&apos;ls-l /etc&apos;,now(),&apos;yes&apos;),</span><br><span class="line">	   (&apos;thales&apos;,&apos;0755&apos;,&apos;cat /etc/password&apos;,now(),&apos;no&apos;),</span><br><span class="line">	   (&apos;thales&apos;,&apos;0755&apos;,&apos;user ass xxx&apos;,now(),&apos;no&apos;),</span><br><span class="line">	   (&apos;thales&apos;,&apos;0755&apos;,&apos;ps aux&apos;,now(),&apos;yes&apos;);</span><br><span class="line"># 查看错误日志表中的记录是否有自动插入</span><br><span class="line">mysql&gt; select * from errlog;</span><br></pre></td></tr></table></figure>
<p><strong><code>delimiter</code>用于修改默认的行结束符，由于在触发器中有多条 sql 语句需要使用分号来结束，但是触发器是一个整体，所以需要先更换默认的结束符（这里修改的只是客户端的结束符，服务端还是以分号结束），在触发器编写完后再讲结束符设置回分号</strong></p>
<p><strong>注意：外键不能触发事件，主表删除了某个主键，从表也会相应的删除数据，但是并不会执行触发器，并且触发器中不能使用事务，相同时间点的相同事件的触发器，不能同时存在。</strong></p>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop trigger trigger_name;</span><br><span class="line"># 删除上面创建的触发器</span><br><span class="line">mysql&gt; drop trigger trigger1;</span><br></pre></td></tr></table></figure>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>mysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也需要删除和该人员相关的信息，如信箱、文章等，这样，这些数据库操作就构成一个事务。事务是逻辑上的一组操作，要么都成功，要么都失败。</p>
<ul>
<li>在 mysql 中只有使用了 InnoDB 数据库引擎的数据库或表才支持事务；</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么都执行，要么都不执行；</li>
<li>事务用来管理 insert、update、delete语句</li>
</ul>
<h2 id="事务的四个特性"><a href="#事务的四个特性" class="headerlink" title="事务的四个特性"></a>事务的四个特性</h2><p>一般来说，事务必须满足四个条件（ACID）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。</p>
<ul>
<li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样；</li>
<li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性的完成预定的工作；</li>
<li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（Read committed）、可重复读（Repeatable read）和串行化（Serializable）。</li>
<li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<p><strong>在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式的开启一个事务必须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。</strong></p>
<h2 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h2><ul>
<li>begin 或 start transaction：显式的开启一个事务；</li>
<li>commit：也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>rollback：也可以使用 rollback work，二者也是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>savepoint identifier：savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；</li>
<li>release savepoint identifier：删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>rollback to identifier：把事务回滚到标记点；</li>
<li>set transaction：用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有 read uncommitted、read committed、repeatable read和 serializable。</li>
</ul>
<h2 id="mysql-事务处理的两种方式"><a href="#mysql-事务处理的两种方式" class="headerlink" title="mysql 事务处理的两种方式"></a>mysql 事务处理的两种方式</h2><ol>
<li>BEGIN，ROLLBACK，COMMIT 来实现</li>
</ol>
<ul>
<li><strong>BEGIN：</strong>开始一个事务</li>
<li><strong>ROLLBACK：</strong>事务回滚</li>
<li><strong>COMMIT：</strong>事务确认</li>
</ul>
<ol start="2">
<li>直接使用 set 来改变 mysql 的自动提交模式</li>
</ol>
<ul>
<li><strong>SET AUTOCOMMIT=0：</strong>禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1：</strong>开启自动提交</li>
</ul>
<h2 id="事务的用户隔离级别"><a href="#事务的用户隔离级别" class="headerlink" title="事务的用户隔离级别"></a>事务的用户隔离级别</h2><p>数据库使用者可以控制数据库工作在哪个级别下，就可以防止不同的隔离性问题。</p>
<ul>
<li>read uncommitted：不做任何隔离，可能脏读、幻读；</li>
<li>read committed：可以防止脏读，不能防止不可重复读和幻读；</li>
<li>repeatable read：可以防止脏读，不可重复读，不能防止幻读；</li>
<li>serializable：数据库运行在串行化实现，所有问题都没有，就是性能低。</li>
</ul>
<h2 id="修改隔离级别"><a href="#修改隔离级别" class="headerlink" title="修改隔离级别"></a>修改隔离级别</h2><h3 id="查询当前级别"><a href="#查询当前级别" class="headerlink" title="查询当前级别"></a>查询当前级别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br></pre></td></tr></table></figure>
<h3 id="修改级别"><a href="#修改级别" class="headerlink" title="修改级别"></a>修改级别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global transaction isolation level Repeatable read;</span><br></pre></td></tr></table></figure>
<h2 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h2><p><strong>start transaction：</strong>开启事务，在这条语句之后的 sql 将处在同一事务，不会立即修改数据库</p>
<p><strong>commit：</strong>提交事务，让这个事务中的 sql 立即执行数据的操作</p>
<p><strong>rollback：</strong>回滚事务，取消这个事务，这个事务不会对数据库中的数据产生任何影响。</p>
<h3 id="案例：转账过程中发生异常"><a href="#案例：转账过程中发生异常" class="headerlink" title="案例：转账过程中发生异常"></a>案例：转账过程中发生异常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 准备数据</span><br><span class="line">mysql&gt; create table account(</span><br><span class="line">	   id int primary key auto_increment,</span><br><span class="line">	   name varchar(20),</span><br><span class="line">	   money double);</span><br><span class="line">insert into account values(1,&apos;赵大儿子&apos;,1000);</span><br><span class="line">insert into account values(2,&apos;刘大牛&apos;,1000);</span><br><span class="line">insert into account values(3,&apos;猪头三&apos;,1000);</span><br><span class="line">insert into account values(4,&apos;王进&apos;,1000);</span><br><span class="line">insert into account values(5,&apos;黄卉&apos;,1000);</span><br><span class="line"></span><br><span class="line"># 赵大儿子刘大牛佳转账1000块</span><br><span class="line"># 未使用事务</span><br><span class="line">update account set money = money - 1000 where id = 1;</span><br><span class="line">update account set moneys = money - 1000 where id = 1; # money打错了导致执行失败</span><br><span class="line"></span><br><span class="line"># 在python中使用事务处理</span><br><span class="line">sql = &apos;update account set money = money - 1000 where id = 1;&apos;</span><br><span class="line">sql2 = &apos;update account set moneys = money + 1000 where id = 2;&apos; # money打错了导致执行失败</span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    cursor.execute(sql2)</span><br><span class="line">    conn.commit()</span><br><span class="line">except:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure>
<p><strong>注意：事务的回滚的前提是能捕捉到异常，否则无法决定何时回滚，python 中很简单就可以实现，另外 mysql 中需要使用存储过程才可以捕获异常。</strong></p>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h3 id="什么是存储过程？"><a href="#什么是存储过程？" class="headerlink" title="什么是存储过程？"></a>什么是存储过程？</h3><p>存储过程是一组任意的 sql 语句集合，存储在 mysql 中，调用存储过程时将会执行其包含的所有 sql 语句，与 python 中的函数类似。</p>
<h3 id="为什么使用存储过程？"><a href="#为什么使用存储过程？" class="headerlink" title="为什么使用存储过程？"></a>为什么使用存储过程？</h3><p>回顾触发器与视图其实都是为了简化应用程序中 sql 语句的书写，但是还是需要编写，而存储过程中可以包含任何的 sql 语句，包括视图、事务、控制流程等，这样一来，用用程序可以从 sql 语句中完全解放出来，mysql 可以替代应用程序完成数据相关的逻辑处理。</p>
<h3 id="三种开发方式对比"><a href="#三种开发方式对比" class="headerlink" title="三种开发方式对比"></a>三种开发方式对比</h3><ol>
<li><p>应用程序仅负责业务逻辑编写，所有与数据相关的逻辑都交给 mysql 来完成，通过存储过程（推荐使用）</p>
<p>优点：应用程序与数据处理完全解耦合，一对复杂的 sql 被封装成了一个简单的存储过程，考虑到网络环境因素，效率高，应用程序开发者不需要编写 sql 语句，开发效率高。</p>
<p>缺点：python 语法与 mysql 语法区别巨大，学习成本高，并且各种数据库的语法大不相同，所以移植性非常差，应用程序开发者与 DBA 的跨部门沟通成本高，造成整体效率低。</p>
</li>
<li><p>应用程序不仅编写业务逻辑，还需要编写所有的 sql 语句</p>
<p>优点：扩展性高，对于应用程序开发者而言，扩展性和维护性相较于第一种都有所提高。</p>
<p>缺点：执行效率低，由于需要将对象的操作转化为 sql 语句，且需要通过网络发送大量的 sql 语句。</p>
</li>
</ol>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_name(p_type p_name data_type)</span><br><span class="line">begin</span><br><span class="line">sql 语句......流程控制</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p><strong>p_type：</strong>参数类型</p>
<p><strong>in：</strong>表示输入参数</p>
<p><strong>out：</strong>表示输出参数</p>
<p><strong>inout：</strong>表示既能输入又能输出</p>
<p><strong>p_name：</strong>参数名称</p>
<p><strong>data_type：</strong>参数类型 mysql 支持的所有数据类型</p>
<h3 id="案例：使用存储过程完成对-student-表的查询"><a href="#案例：使用存储过程完成对-student-表的查询" class="headerlink" title="案例：使用存储过程完成对 student 表的查询"></a>案例：使用存储过程完成对 student 表的查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create procedure p1(in m int,in n int,out res int)</span><br><span class="line">begin</span><br><span class="line">    select *from student where chinese &gt; m and chinese &lt; n;</span><br><span class="line">    #select *from student where chineseXXX &gt; m and chinese &lt; n; 修改错误的列名以测试执行失败</span><br><span class="line">    set res = 100;</span><br><span class="line">end//</span><br><span class="line">delimiter ;</span><br><span class="line">set @res = 0;</span><br><span class="line">#调用存储过程</span><br><span class="line">call p1(70,80,@res);</span><br><span class="line">#查看执行结果</span><br><span class="line">select @res;</span><br></pre></td></tr></table></figure>
<p><strong>注意：存储过程的 out 类参数必须是一个变量，用来装输出数据的，不可是一个值</strong></p>
<h3 id="python-中调用存储过程"><a href="#python-中调用存储过程" class="headerlink" title="python 中调用存储过程"></a>python 中调用存储过程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  pymysql</span><br><span class="line"><span class="comment">#建立连接</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">"root"</span>,</span><br><span class="line">    password=<span class="string">"admin"</span>,</span><br><span class="line">    database=<span class="string">"db02"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 获取游标</span></span><br><span class="line">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用用存储过程</span></span><br><span class="line">cursor.callproc(<span class="string">"p1"</span>,(<span class="number">70</span>,<span class="number">80</span>,<span class="number">0</span>)) <span class="comment">#p1为存储过程名 会自动为为每个值设置变量,名称为 @_p1_0,@_p1_1,@_p1_2</span></span><br><span class="line"><span class="comment"># 提取执行结果是否有结果取决于存储过程中的sql语句</span></span><br><span class="line">print(cursor.fetchall())</span><br><span class="line"><span class="comment"># 获取执行状态</span></span><br><span class="line">cursor.execute(<span class="string">"select @_p1_2"</span>)</span><br><span class="line">print(cursor.fetchone())</span><br></pre></td></tr></table></figure>
<p>此处 pymysql 会自动将参数都设置一个变量所以可以直接传入一个值，当然值如果作为输出参数的话，传入什么都可以。</p>
<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure 过程名;</span><br></pre></td></tr></table></figure>
<p>修改存储过程的意义不大，不如删除重写。</p>
<h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 当前库所有存储过程名称</span><br><span class="line">mysql&gt; select &apos;name&apos; from mysql.proc where db = &apos;db02&apos; and &apos;type&apos; = 	 &apos;procedure&apos;;</span><br><span class="line"># 查看创建语句</span><br><span class="line">mysql&gt; show create procedure p1;</span><br></pre></td></tr></table></figure>
<h3 id="存储过程中的事务应用"><a href="#存储过程中的事务应用" class="headerlink" title="存储过程中的事务应用"></a>存储过程中的事务应用</h3><p>存储过程中支持任何的 sql 语句也包括事务。</p>
<h4 id="案例：模拟转账中发送异常，进行回滚操作"><a href="#案例：模拟转账中发送异常，进行回滚操作" class="headerlink" title="案例：模拟转账中发送异常，进行回滚操作"></a>案例：模拟转账中发送异常，进行回滚操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create PROCEDURE p5(</span><br><span class="line">    OUT p_return_code tinyint</span><br><span class="line">)</span><br><span class="line">BEGIN </span><br><span class="line">    DECLARE exit handler <span class="keyword">for</span> sqlexception </span><br><span class="line">    BEGIN </span><br><span class="line">        -- ERROR </span><br><span class="line">        set p_return_code = <span class="number">1</span>; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line">    <span class="comment"># exit 也可以换成continue 表示发送异常时继续执行</span></span><br><span class="line">    DECLARE exit handler <span class="keyword">for</span> sqlwarning </span><br><span class="line">    BEGIN </span><br><span class="line">        -- WARNING </span><br><span class="line">        set p_return_code = <span class="number">2</span>; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line"></span><br><span class="line">    START TRANSACTION; </span><br><span class="line">    update account set money = money - <span class="number">1000</span> where id = <span class="number">1</span>;</span><br><span class="line">    update account set moneys = money - <span class="number">1000</span> where id = <span class="number">1</span>; <span class="comment"># moneys字段导致异常</span></span><br><span class="line">    COMMIT; </span><br><span class="line"></span><br><span class="line">    -- SUCCESS </span><br><span class="line">    set p_return_code = <span class="number">0</span>; <span class="comment">#0代表执行成功</span></span><br><span class="line"></span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用存储过程</span></span><br><span class="line">set @res=<span class="number">123</span>;</span><br><span class="line">call p5(@res);</span><br><span class="line">select @res;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong>抛开沟通成本、学习成本，存储过程无疑是效率最高的处理方式。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>在SQL 语句中，表达式可用于一些诸如SELECT语句的ORDER BY 或 DELETE或 UPDATE语句的 WHERE 子句或 SET语句之类的地方。使用文本值、column值、NULL值、函数、 操作符来书 写 表达式。 本章叙述了可用于书写MySQL表达式的函数和操作符。 </p>
<p>这些内置函数大大提高了我们的开发效率</p>
<h4 id="字符相关函数"><a href="#字符相关函数" class="headerlink" title="字符相关函数"></a>字符相关函数</h4><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxlp2yzzg3j312c0lqdkz.jpg" alt="image-20181126193527077"></p>
<h4 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxlp2vch0zj312c0lqdkz.jpg" alt="image-20181126193551302"></p>
<h4 id="日期相关函数"><a href="#日期相关函数" class="headerlink" title="日期相关函数"></a>日期相关函数</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxlp3mjeg7j312s0m0n0l.jpg" alt></p>
<h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxlp5hdpcoj312c0gmgok.jpg" alt></p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create function f_name(paramters)</span><br><span class="line">return dataType</span><br><span class="line">return value;</span><br></pre></td></tr></table></figure>
<p>说明：paramters 只能是 in 输入参数、参数名、类型必须有返回值，不能加 begin 和 end，returns 后面是返回值的类型，这里不加分号，return 后面是要返回的值。</p>
<h4 id="案例：将两数相加"><a href="#案例：将两数相加" class="headerlink" title="案例：将两数相加"></a>案例：将两数相加</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create function addfuntion(a int,b int)</span><br><span class="line">returns int return a + b;</span><br><span class="line"># 执行函数</span><br><span class="line">mysql&gt; select addfuntion(1,1);</span><br></pre></td></tr></table></figure>
<p><strong>注意：函数只能返回一个值，函数一般不涉及数据的增删查改，就是一个通用的功能，调用自定义的函数与调用系统的一直，不需要 call 使用 select 可获得返回值，函数中不能使用 sql 语句，就像在 java 中不能识别 sql 语句一样（没学过java。。。）</strong></p>
<h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><h3 id="使用-mysqldump-程序进行备份"><a href="#使用-mysqldump-程序进行备份" class="headerlink" title="使用 mysqldump 程序进行备份"></a>使用 mysqldump 程序进行备份</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -u -p db_name [table_name,,,] &gt; fileName.sql</span><br></pre></td></tr></table></figure>
<p><strong>注意：这是命令行命令</strong></p>
<p>可以选则要备份那些表，如果不指定代表全部备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 示例</span><br><span class="line"># 单库备份</span><br><span class="line">mysqldump -uroot -p123 db1 &gt; db1.sql</span><br><span class="line">mysqldump -uroot -p123 db1 table table2 &gt; db1-table1-table2.sql</span><br><span class="line"></span><br><span class="line"># 多库备份</span><br><span class="line">mysqldump -uroot -p123 --databases db1 db2 mysql db3 &gt; db1_db2_mysql_db3.sql</span><br><span class="line"></span><br><span class="line"># 备份所有</span><br><span class="line">mysqldump -uroot -p123 --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure>
<h3 id="使用-mysql-进行恢复"><a href="#使用-mysql-进行恢复" class="headerlink" title="使用 mysql 进行恢复"></a>使用 mysql 进行恢复</h3><ol>
<li>退出数据库后</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u -p &lt; filenam.sql</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>不用退出数据库<ol>
<li>创建空数据库</li>
<li>选择数据库</li>
<li>然后使用 source filename 来进行还原</li>
</ol>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db1;</span><br><span class="line">mysql&gt; source /root/db1.sql</span><br></pre></td></tr></table></figure>
<h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 务必保证在相同版本之间迁移</span><br><span class="line">mysqldump -h 源ip -uroot -p123 --databases db1 | mysql -h 目标ip -uroot -p456</span><br></pre></td></tr></table></figure>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 条件 then 语句;end if;第二种 if else if 条件 then 语句1;else if 条件</p>
<p>then 语句2;else 语句3;end if;</p>
<h3 id="案例：编写过程实现-输入一个整数-type-范围1-2-输出-type-1-or-type-other"><a href="#案例：编写过程实现-输入一个整数-type-范围1-2-输出-type-1-or-type-other" class="headerlink" title="案例：编写过程实现 输入一个整数 type 范围1-2 输出 type=1 or type=other;"></a>案例：编写过程实现 输入一个整数 type 范围1-2 输出 type=1 or type=other;</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure showType(in type int,out result char(20))</span><br><span class="line">begin</span><br><span class="line">if type = 1 then </span><br><span class="line">set result = &quot;type = 1&quot;;</span><br><span class="line">elseif type = 2 then </span><br><span class="line">set result = &quot;type = 2&quot;;</span><br><span class="line">else </span><br><span class="line">set result = &quot;type = other&quot;;</span><br><span class="line">end if;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h2><p>与 switch 一样，进行选择执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure caseTest(in type int)</span><br><span class="line">begin</span><br><span class="line">CASE type </span><br><span class="line">when 1  then select &quot;type = 1&quot;;</span><br><span class="line">when 2  then select &quot;type = 2&quot;;</span><br><span class="line">else select &quot;type = other&quot;;</span><br><span class="line">end case;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; declare 变量名 类型 default 值;</span><br><span class="line">mysql&gt; declare i int default 0;</span><br></pre></td></tr></table></figure>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 循环输出10次 hello mysql</span><br><span class="line">mysql&gt; create procedure showHello()</span><br><span class="line">begin</span><br><span class="line">declare i int default 0;</span><br><span class="line">while i &lt; 10 do</span><br><span class="line">select &apos;hello mysql&apos;;</span><br><span class="line">end while;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="loop-循环"><a href="#loop-循环" class="headerlink" title="loop 循环"></a>loop 循环</h2><p>没有条件，需要自己定义结束语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 输出10次 hello mysql</span><br><span class="line">mysql&gt; create procedure showLoop()</span><br><span class="line">begin</span><br><span class="line">declare i int default 0;</span><br><span class="line">aloop:loop</span><br><span class="line">select &apos;hello loop&apos;;</span><br><span class="line">set i &gt; 9 then leave aloop;</span><br><span class="line">end if;</span><br><span class="line">end loop aloop;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="repeat-循环"><a href="#repeat-循环" class="headerlink" title="repeat 循环"></a>repeat 循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 类似do while</span><br><span class="line"># 输出10次hello repeat</span><br><span class="line">mysql&gt; create procedure showRepeat()</span><br><span class="line">begin</span><br><span class="line">declare i int default 0;</span><br><span class="line">repeat</span><br><span class="line">select &quot;hello repeat&quot;;</span><br><span class="line">set i = i + 1;</span><br><span class="line">until i &gt; 9</span><br><span class="line">end repeat;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 输出0-100之间的奇数</span><br><span class="line">mysql&gt; create procedure showjishu()</span><br><span class="line">begin</span><br><span class="line">declare i int default 0;</span><br><span class="line">aloop: loop</span><br><span class="line">set i = i + 1;</span><br><span class="line">if i &gt;= 101 then leave aloop; end if;</span><br><span class="line">if i % 2 = 0 then iterate aloop; end if;</span><br><span class="line">select i;</span><br><span class="line">end loop aloop;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据库（六）</title>
    <url>/2018/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客学习 mysql 的用户管理和使用 python 操作 mysql 的一个模块 pymysql。</p>
<h1 id="mysql-用户管理"><a href="#mysql-用户管理" class="headerlink" title="mysql 用户管理"></a>mysql 用户管理</h1><p>因为数据安全对于互联网公司来说是最重要的，不可能随便分配 root 账户，应该按照不同开发岗位分配不同的账户和权限。</p>
<h2 id="用户管理相关表"><a href="#用户管理相关表" class="headerlink" title="用户管理相关表"></a>用户管理相关表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkbj170zij30xj0u01h2.jpg" alt="image-20181125150125323"></p>
<h3 id="用户对数据库的权限顺序"><a href="#用户对数据库的权限顺序" class="headerlink" title="用户对数据库的权限顺序"></a>用户对数据库的权限顺序</h3><p>mysql 将与用户相关的数据放在 mysql库中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user-&gt;db-&gt;tables_priv-&gt;columns_priv</span><br></pre></td></tr></table></figure>
<p>如果用户拥有对所有库的访问权，则存储在 user 中；</p>
<p>如果用户拥有对部分库的使用权，则存储在 db 中；</p>
<p>如果用户拥有对部分表的使用权，则存储在 tables_priv 中；</p>
<p>如果用户拥有对表中某些字段的使用权，则存储在 columns_priv 中。</p>
<h2 id="用户授权设置"><a href="#用户授权设置" class="headerlink" title="用户授权设置"></a>用户授权设置</h2><h3 id="创建新账户"><a href="#创建新账户" class="headerlink" title="创建新账户"></a>创建新账户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user 用户名@ip identified by &apos;密码&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user musibii@127.0.0.1 identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p>创建成功后会在 user 表中查看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user\G;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkc38kdtnj30u00vxqss.jpg" alt="image-20181125152053447"></p>
<p>这样创建的账户是没有任何权限的，可以看出关于权限字段的值全为 N，接下来需要给 musibii 账号分配权限了。</p>
<h3 id="授予用户最高权限"><a href="#授予用户最高权限" class="headerlink" title="授予用户最高权限"></a>授予用户最高权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to musibii@127.0.0.1 identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p>如果 musibii 账号不存在，那么会在授予权限的时候自动创建账号。</p>
<p>现在查看一下 musibii 账号的权限关系：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkcdfbx1vj30u00yxjxg.jpg" alt></p>
<h3 id="授予授予权限"><a href="#授予授予权限" class="headerlink" title="授予授予权限"></a>授予授予权限</h3><p>现在除了 grant_priv 权限其他权限都有了，这个权限是授权权限。通过 root 账户授予：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to musibii@127.0.0.1 identified by &apos;123&apos; with grant option;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkcgi41gdj30u00vg7ak.jpg" alt></p>
<p>现在可以说这个账号就是一个 root 账户，但是只能在本机登陆。</p>
<h3 id="授予在任何地方登陆权限"><a href="#授予在任何地方登陆权限" class="headerlink" title="授予在任何地方登陆权限"></a>授予在任何地方登陆权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to musibii@&apos;%&apos; identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkcks9fejj30u00v2wkr.jpg" alt></p>
<p>现在 host 字段对应的值变为了%，意味着可以在任何主机登陆该数据库了。</p>
<h3 id="设置只能访问某个库"><a href="#设置只能访问某个库" class="headerlink" title="设置只能访问某个库"></a>设置只能访问某个库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on day46 to eureka@&apos;%&apos; identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p>这样设置的用户权限信息存储在 db 中，但是不知道为什么在 db 中没有账户信息。。。</p>
<h3 id="设置能能访问某个库中的某个表"><a href="#设置能能访问某个库中的某个表" class="headerlink" title="设置能能访问某个库中的某个表"></a>设置能能访问某个库中的某个表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on day46.emp to thales@&apos;%&apos; identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxkdkrsvnqj313408g44n.jpg" alt="image-20181125161233216"></p>
<h3 id="设置只能增删查改权限"><a href="#设置只能增删查改权限" class="headerlink" title="设置只能增删查改权限"></a>设置只能增删查改权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant select(name) on day46.emp to thales@&apos;%&apos; identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkdnf888gj30z008ydgy.jpg" alt></p>
<p>这样 thales 用户就只能对 emp 表中的 name 字段进行查询操作了。</p>
<h2 id="用户收权设置"><a href="#用户收权设置" class="headerlink" title="用户收权设置"></a>用户收权设置</h2><h3 id="收回某个账号的所有权限"><a href="#收回某个账号的所有权限" class="headerlink" title="收回某个账号的所有权限"></a>收回某个账号的所有权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; revoke all privileges [column] on db.table from user@&apos;host&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; revoke all privileges on *.* from musibii@&apos;127.0.0.1&apos;;</span><br></pre></td></tr></table></figure>
<p>查询 user 表中的权限信息，发现除了授权权限其他权限都没有了：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkdy8lvbxj30uj0u0tes.jpg" alt></p>
<p>不过在修改权限之后需要刷新权限表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
<p><strong>注意：如何授予权限就应该如何收回权限，因为不同的权限存储在不同的表中</strong></p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop user 用户名@主机;</span><br></pre></td></tr></table></figure>
<p><strong>当你在云服务器部署了 mysql 环境时，你的程序无法直接连击服务器，需要授予在任意一台电脑登陆的权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to 用户名@&apos;%&apos; identified by 密码 with grant option;</span><br></pre></td></tr></table></figure>
<h1 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h1><h3 id="pymysql-连接数据库"><a href="#pymysql-连接数据库" class="headerlink" title="pymysql 连接数据库"></a>pymysql 连接数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">	user=<span class="string">'root'</span>,</span><br><span class="line">	password=<span class="string">'123'</span>,</span><br><span class="line">	database=<span class="string">'day46'</span>,</span><br><span class="line">	charset=<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>cursor 游标对象，负责执行 sql 语句，获取返回的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">'select *from emp'</span></span><br><span class="line">res = cursor.execute(sql) <span class="comment"># 返回值是本次查询的记录条数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一条记录</span></span><br><span class="line">print(cursor.fetchone())</span><br><span class="line"><span class="comment"># 接着获取</span></span><br><span class="line">print(cursor.fetchone())</span><br><span class="line"><span class="comment"># 提取所有结果</span></span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkeot0sdmj30ym0q6781.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(fetchamany(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p>((3, ‘关羽’, ‘男’, ‘市场’, ‘员工’, 4000.0), (4, ‘孙权’, ‘男’, ‘行政’, ‘总监’, 6000.0), (5, ‘周瑜’, ‘男’, ‘行政’, ‘员工’, 5000.0))</p>
<p>参数是指定获取的数据条数。</p>
<h3 id="控制游标位置"><a href="#控制游标位置" class="headerlink" title="控制游标位置"></a>控制游标位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.scroll(<span class="number">1</span>,mode=<span class="string">'relative) # 游标从当前位置往后移动一条记录</span></span><br><span class="line"><span class="string">cursor.scroll(1,mode='</span>absolute<span class="string">') # 游标从开始位置往后移动一条记录</span></span><br></pre></td></tr></table></figure>
<h3 id="获取结果使用字典表示"><a href="#获取结果使用字典表示" class="headerlink" title="获取结果使用字典表示"></a>获取结果使用字典表示</h3><p>指定使用字典类型的游标，默认是元祖类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = conn.cursor(pymysql.cursor.DictCursor)</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkexdo53kj30yn0u0n2g.jpg" alt></p>
<p><strong>在 python 使用代码执行了增删查改后只是在内存中修改了值，想要修改数据库中的值需要提交操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn.commit()</span><br></pre></td></tr></table></figure>
<p>这样修改的值才会改变。</p>
<p>#sql 注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">	user=<span class="string">'root'</span>,</span><br><span class="line">	password=<span class="string">'password'</span>,</span><br><span class="line">	database=<span class="string">'day46'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">'用户名'</span>)</span><br><span class="line">pwd = input(<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'select * from user where name = "%s" and pwd = "%s"'</span> % (name, password)</span><br><span class="line"></span><br><span class="line">res = cursor.execute(sql)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    print(<span class="string">'登陆成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'登陆失败'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="注入写法"><a href="#注入写法" class="headerlink" title="注入写法"></a>注入写法</h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkf4yyg45j31me0u07hk.jpg" alt></p>
<h3 id="避免方式："><a href="#避免方式：" class="headerlink" title="避免方式："></a>避免方式：</h3><ol>
<li>再输入时加上正则判断，不允许输入与 sql 相关的关键词。这种方式无法避免代理服务器发起的攻击；</li>
<li>2.在服务端，执行 sql 前进行判断。</li>
</ol>
<p>pymysql 中已经做了处理，只要将参数的拼接交给 mysql 来完成就能够避免攻击。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">'用户名'</span>)</span><br><span class="line">pwd = input(<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'select * from user where name = %s and password = %s'</span></span><br><span class="line"></span><br><span class="line">res = cursor.execute(sql, (name,pwd)) <span class="comment"># 这样执行 sql 语句就可以避免攻击。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2019/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数据库（五）</title>
    <url>/2018/11/23/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过几天数据库的学习，总感觉自己只是会敲写增删查改语句而已，对数据库的内部执行情况并不了解，以及执行顺序，查询原理等，所以想对 MySQL 内部的一些原理加深一下了解。</p>
<h1 id="MySQL-语句执行顺序"><a href="#MySQL-语句执行顺序" class="headerlink" title="MySQL 语句执行顺序"></a>MySQL 语句执行顺序</h1><p>MySQL 语句一共分为11不，如下图所示，最先执行的永远是 FROM，最后执行的是 LIMIT 操作。其中每一个操作都会产生一张虚拟的表（虚拟表想要在下次查询使用需要取别名），这个虚拟的表作为一个处理的输入，只是这些虚拟的表对用户来说是透明的，但是只有最后一张虚拟表才会作为结果返回。如果没有在语句中指定某一个子句，那么会跳过相应的步骤。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxiyz6ongbj307k0753z9.jpg" alt></p>
<h2 id="来分析以下具体查询的每一个阶段"><a href="#来分析以下具体查询的每一个阶段" class="headerlink" title="来分析以下具体查询的每一个阶段"></a>来分析以下具体查询的每一个阶段</h2><ol>
<li><strong>from：</strong>对 from 左边的表和右边的表计算笛卡尔积。产生虚拟表 VT1；</li>
<li><strong>on：</strong>对虚拟表 VT1进行 on 筛选，只有符合\&lt;join-condition>的行才会被记录在虚拟表 VT2中；</li>
<li><strong>join：</strong>如果指定了 OUTER JOIN（比如 left join、right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表 VT2中，产生虚拟表 VT3，rug from 子句中包含两个以上的表的话，那么就会对上一个 join 连接产生的结果 VT3和下一个表重复执行步骤1~3这三个步骤，一直处理完所有的表为止；</li>
<li><strong>where：</strong>对虚拟表 VT3进行 where 条件过滤。只有符合\&lt;where-condition>的记录才会被插入到虚拟表 VT4中；</li>
<li><strong>group by：</strong>根据 group by 子句中的列，对 VT4中的记录进行分组操作，产生 VT5；</li>
<li><strong>cube|rollup：</strong>对虚拟表 VT5进行 cube 或 rollup 操作，产生虚拟表 VT6；</li>
<li><strong>having：</strong>对虚拟表 VT6应用 having 过滤，只有符合\&lt;having-condition>的记录才会被插入到虚拟表 VT7中；</li>
<li><strong>select：</strong>执行 select 操作，选择指定的列，插入到虚拟表 VT8中；</li>
<li><strong>distinct：</strong>对 VT8中的记录进行去重，产生虚拟表 VT9；</li>
<li><strong>order by：</strong>对虚拟表 VT9中的记录按照\&lt;order-by-list>进行排序操作，产生虚拟表 VT10；</li>
<li><strong>limit：</strong>取出指定行的记录，产生虚拟表 VT11，并将结果返回。</li>
</ol>
<h2 id="MySQL-语句执行过程"><a href="#MySQL-语句执行过程" class="headerlink" title="MySQL 语句执行过程"></a>MySQL 语句执行过程</h2><p>下面是 MySQL 的基本架构示意图,从中可以很清楚的看到 SQL 语句在 MySQL 的各个功能模块中的执行过程.</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxdlod6n42j31400u0dm9.jpg" alt></p>
<p>大体来说, MySQL 可以分为 Server 层和存储引擎两部分.<br>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数字和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。<br>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MylSAM、Memory等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL5.5.5版本开始成为了默认存储引擎。<br>也就是说，你在执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，可以通过指定存储引擎的类型来选择其他的引擎，比如在 create table 语句中使用 engine=memeory，来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同。<br>从上图中可以看出，不同的存储引擎共用一个 Server 层，也就是从连接器到执行期的部分。</p>
<h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。这时候命令是这么写的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>
<p>输完命令后，就需要在交互对话中输入密码。<br>连接命令中的 mysql 是客户端工具，用来根服务端建立连接。在完成经典的 TCP 握手后，连接器就开始认证身份，这个时候用的就是你输入的用户名和密码。</p>
<ul>
<li><p>如果用户名或密码不对，会返回’Access denied for user’的错误，然后客户端程序结束。</p>
</li>
<li><p>如果用户名密码认证通过，连接器会到权限表里面查看用户拥有的权限。之后，这个链接里面的权限判断逻辑，都依赖于此时读到的权限。这意味着修改权限不会立马有效，需要重新连接服务器才会生效。</p>
<p>连接完成后，如果没有后续的动作，这个链接就处于空闲状态，你可以在 show processlist 命令中看到它。如下所示，其中的 Command 列显示为Query，表示现在系统里面有一个查询链接。</p>
</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxdn3t6wcij30zc06a40a.jpg" alt></p>
<p>客户端如果太长时间不活跃，连接器就会自动断开连接。这个时间由参数 wiait_timeout 控制，默认为8小时。<br>如果连接断开，客户端再次发送请求时，会收到错误提醒：Lost connection to MySQL server during query。这时候如果要继续连接，就需要重连，然后执行查询。<br>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询重建一个。<br>建立连接的过程通常是比较复杂的，所以在使用中尽量减少建立连接的动作，也就是尽量使用长连接。<br>但是全部使用长连接后，会发现 MySQL 占用内存涨的特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开才会释放，所以如果大量的长连接积累的话，会导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。<br>怎么解决这个问题呢？有两种方案。</p>
<ol>
<li>定期断开长连接。使用一段时间，或者程序里面判断执行过占用内存的大查询后，断开连接，之后要查询再连接。</li>
<li>如果使用的是5.7及以后的版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接回复到刚刚创建完时的状态。</li>
</ol>
<h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。<br>MySQL 拿到一个查询请求后，会先到查询内存查看，之前是否执行过这条语句。之前执行过的语句及其结果可能会以 key-value 的形式存储在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会直接返回给客户端。<br>如果之前没有执行过这条语句，就会执行后面的执行阶段。执行完成后，执行结果会存入查询缓存。这样的优点是，如果查询缓存命中，不需要执行后面的复杂操作，就可以直接返回结果，效率会极大地提高。<br><strong>但是大多数情况不建议使用查询缓存，因为查询缓存往往利大于弊。</strong><br>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能费劲存储的缓存，还没使用就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非所有的业务是一张静态表，很长时间更新一次。比如一个系统配置表，那这张表上的查询才适合使用查询缓存。<br>好在 MySQL 提供了按需使用的方式。可以将参数query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显示指定，像下面这个语句一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select SQL_CACHE * from T where ID=10;</span><br></pre></td></tr></table></figure>
<p>不过在最新的8.0版本这功能被删了。</p>
<h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中查询缓存，就要开始真正的执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。<br>分析器首先会做‘’词法分析‘’，你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL需要识别出里面的字符串分别是什么，代表什么。<br>MySQL 从你输入的‘’select‘’这个关键词识别出来，这是一个查询语句。它也要把字符串‘’T‘’识别成‘’表名T‘’，把字符串‘’ID‘’识别成‘’列 ID‘’。<br>做完了这些识别以后，就要做‘’语法分析‘’。根据此法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。<br>如果你的语句不对，就会收到‘’You have an error in your SQL syntax‘’的错误提醒。<br>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接‘’use near‘’的内容。</p>
<h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>经过了分析器，MySQL 就知道要做什么了。在开始执行之前，还要经过优化器的处理。<br>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如下面这个语句，是执行两个表的 join：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>既可以先从表 t1中取出 c=10 记录的ID 值，在根据 ID 值关联到表 t2，再判断 t2里面 d 的值是否等于20。</p>
</li>
<li><p>也可以先从表 t2里面取出 d=20记录的 ID 值，在根据 ID 值关联到 t1，再判断 t1里面 c 的值是否等于10。</p>
<p>这两种执行方案的逻辑结果是一样的，但是效率会有不同，而优化器的作用就是决定选择使用哪个方案。</p>
<p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。</p>
</li>
</ul>
<h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>MySQL 通过分析器知道了要做什么，通过了优化器知道怎么做，于是就进入了执行器阶段，开始执行语句。<br>开始执行的时候，需要先判断用户对表 T 是否拥有查询权限，如果没有，就会返回没有权限的错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10;</span><br><span class="line">ERROR 1142 (42000): SELECT command denied to user &apos;b&apos;@&apos;localhost&apos; for table &apos;T&apos;</span><br></pre></td></tr></table></figure>
<p>如果有权限，就打开表继续执行。打开表的时候，执行器会根据表的引擎定义，去使用该引擎提供的接口。<br>比如表 T 中，ID 字段么有索引，那么执行期的执行流程是这样的：</p>
<ol>
<li><p>调用 InnoDB 引擎接口取该表的第一行，判断 ID 值是否为10，如果不是则跳过，如果是则将这行存在结果集中；</p>
</li>
<li><p>调用引擎接口取‘’下一行‘’，重复相同的判断逻辑，直到取到这个表的最后一行。</p>
</li>
<li><p>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</p>
<p>至此，该语句执行结束。</p>
<p>对于有索引的表，执行的逻辑差不多。第一次调用的是‘’取满足条件的第一行‘’这个接口，之后循环取‘’满足条件的下一行‘’这个接口，这些接口都是引擎中已经定义好的。</p>
<p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p>
<p>在某些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟rows_examined 并不是完全相同的。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>文件目录规范</title>
    <url>/2018/10/15/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>随着功能的增多，代码逻辑也会越来越多，导致代码逻辑混乱不便于管理项目。为了解决这个问题，可以将相同功能的代码集合在一个文件夹，设置一个入口函数，一些设置文件放在一个文件，主要逻辑代码放一个文件夹。。。</p>
<p>这样对于整个业务有很好的可读性和扩展性。</p>
<p>对于之前的ATM+购物车项目最开始所有的逻辑代码都在一个文件，当我们需要修改某些函数时，遇到了一点困难，就是整个项目有600+行代码，而且什么都在里面，对于想快速具体的找到想修改的地方确实需要花费一些时间，效率低下。所以重新修改后，将具体功能代码放在一起，很明显逻辑清晰了，而且看的也很舒服。</p>
<p>如下为我的项目结构中的bin文件夹：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fwafkzp4tfj31fa0l878x.jpg" alt></p>
<p>bin目录下的start.py文件为启动函数，首先在启动函数里面导入os和sys模块，目的是为了将当前项目的根路径加入环境变量，接着导入相关函数和变量。该py文件仅仅作为程序的入口，里面没有逻辑代码。</p>
<p>如下为conf文件夹：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fwafgxzs1aj31kw0gyte1.jpg" alt></p>
<p>conf是configuration的缩写，为配置的意思，里面只有settings文件，可以看出里面都是定义的一些变量，（在这里的变量其实应该使用大写的）</p>
<p>接下来是主要业务逻辑代码文件夹core（核心）：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwa37zzjrxj31kw0jiaeo.jpg" alt></p>
<p>里面有三个py文件，因为项目有三个主要功能，分别是ATM、SHOPP、USER，所以分了三个，里面的代码大同小异。</p>
<p>接下来是记录用户消费流水的文件夹，（db）里面也包括了用户信息，比如账号名、密码、余额、状态等信息。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwa3dq19nhj31kw0hj787.jpg" alt></p>
<p>这些信息文件在每一个账户登录时，会根据登录名创建一个文件，模式为追加，当退出时将数据刷入文件并关闭文件。</p>
<p>接下来为lib，lib是library的缩写，表示库的意思。里面只有common文件（里面可以放共用的一些功能代码或者第三方库）</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fwafhw8ky8j31kw0gxafy.jpg" alt></p>
<p>common文件里面是几个通用的功能函数，比如日志装饰器、读取用户所有信息的函数、、、</p>
<p>接下来为log文件夹，记录日志，哪个用户登陆了，做了什么事情都会记录下来（仔细想来，生活中我们在某些应用中做的事情是不是也会记录下来？答案是肯定的）</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwa3lcydh6j31kw0iik05.jpg" alt></p>
<p>最后一个是README.md文件，通常是用来给用户看的，说明程序怎么使用，叫做帮助文档。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>包、文件</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库（八）</title>
    <url>/2018/11/27/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客内容为索引，索引是为了提高数据库的查询效率。</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h2><p>索引就相当于书的目录，是 mysql 中一种专门的数据结构，称为 key，索引的本质原理就是通过不断地缩小查询范围，来降低 io 次数从而提升查询性能。强调：一旦为表创建了索引，以后的查询都会先查索引，再根据索引定位的结果去找数据。</p>
<h2 id="为什么要用索引？"><a href="#为什么要用索引？" class="headerlink" title="为什么要用索引？"></a>为什么要用索引？</h2><p>对于一个应用来说，对数据库的读写比例基本上是10：1，即读多写少。而且对于写来说极少出现性能问题，大多数性能问题都是慢查询提到加速查，这时候就必须用到索引。</p>
<h2 id="索引的影响"><a href="#索引的影响" class="headerlink" title="索引的影响"></a>索引的影响</h2><ol>
<li>在表中有大量数据的前提下，创建索引速度会很慢；</li>
<li>在索引创建完毕后，对表的查询性能会大幅度提升，但是写性能会降低。</li>
</ol>
<h2 id="磁盘-IO-与预读"><a href="#磁盘-IO-与预读" class="headerlink" title="磁盘 IO 与预读"></a>磁盘 IO 与预读</h2><p>磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms 以下；旋转延迟就是磁盘转速花费的时间，比如一个磁盘7200转，表示每分钟能转7200次，也就是一秒钟能转120次，旋转延迟就是1/120/2=4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间来说可以忽略不计。那么访问一次磁盘的时间，即一次磁盘 IO 的时间约等于5+4.17=9ms 左右，看起来还挺短的，但是对于现在的计算机来说，一秒钟可以执行5亿条指令，执行一次 IO 的时间可以执行约450万条指令，数据库动辄十万百万乃至千万级别数据，每次9毫秒的时间，很显然会造成大量的等待时间。下图是计算机硬件延迟的对比图：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxn1a70qkoj30f808xab9.jpg" alt></p>
<p>考虑到磁盘 IO 是非常高昂的操作，计算机操作系统做了一些优化，当一次 IO 时，不光把当前地址的数据，而是把相邻的数据也都读取到内存缓冲区，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次 IO 读取的数据称之为一页（page）。具体一页有多大数据跟操作系统有关，一般为4k 或8k，也就是我们读取一页内的数据时候才发生了一次 IO。</p>
<h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><p>对于索引来说，它的目的就是降低查找数据时产生的磁盘 IO 数量级，最好是常数数量级。索引使用的是 B+树（B+树是通过二叉查找树，再由平衡二叉树，B 树演化而来）。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxn1jeu1wyj30hc08cdgv.jpg" alt></p>
<p>如上图，是一颗 B+数，浅蓝色的块称之为一个磁块，可以看到每个人磁块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘快1包含数据项17和35，包含指针 P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不过存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>
<h3 id="B-树查找过程"><a href="#B-树查找过程" class="headerlink" title="B+树查找过程"></a>B+树查找过程</h3><p>如果所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次 IO，在内存中用二分法查找确定29在17和35之间，锁定磁盘块1的 P2指针，内存时间因为非常短（相比磁盘 IO）可以忽略不计，通过磁盘块1的 P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第三次 IO，同时内存中做二分查找找到29，结束查询，总计三次 IO。真实情况是，3层的 B+数可以表示上百万的数据，如果上百万的数据查找只需要三次 IO，性能提升将是巨大的，如果没有索引，每个数据项都要发生一次 IO，那么总共需要百万次的 IO，显然成本非常非常高。</p>
<h3 id="B-数性质"><a href="#B-数性质" class="headerlink" title="B+数性质"></a>B+数性质</h3><ol>
<li><strong>索引字段要尽量的小：</strong>IO 次数取决于 B+树的高度 h，假设当前数据表的数据为 N，每次磁盘块的数据项的数量是 m，则有 h=log(m+1)N，当数据量 N 一定的情况下，m 越大，h 越小；而 m=磁盘块的大小/数据项的大小，磁盘块的大小也是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如 int 占4字节，要比 bigint 8字节少一半。这也是为什么 B+树要求把真实的数据放在叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</li>
<li><strong>索引的最左匹配特性：</strong>当B+树的数据项是复合的数据结构，比如(name,age,sex)的时候，B+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，B+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，B+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，B+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</li>
</ol>
<h2 id="聚集索引与辅助索引"><a href="#聚集索引与辅助索引" class="headerlink" title="聚集索引与辅助索引"></a>聚集索引与辅助索引</h2><p><strong>在数据库中，B+树的高度一般都在2~4层，这也就是说查找某一个键值的行记录时最多只需要2到4次IO，这倒不错。因为当前一般的机械硬盘每秒至少可以做100次IO，2~4次的IO意味着查询时间只需要0.02~0.04秒。</strong></p>
<p><strong>数据库中的B+树索引可以分为聚集索引（clustered index）和辅助索引（secondary index），</strong></p>
<p><strong>聚集索引与辅助索引相同的是：不管是聚集索引还是辅助索引，其内部都是B+树的形式，即高度是平衡的，叶子结点存放着所有的数据。</strong></p>
<p><strong>聚集索引与辅助索引不同的是：</strong>叶子节点存放的是否是一条完整的记录。</p>
<h3 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InnoDB存储引擎表示索引组织表，即表中数据按照主键顺序存放。而聚集索引（clustered index）就是按照每张表的主键构造一棵B+树，同时叶子结点存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。聚集索引的这个特性决定了索引组织表中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向链表来进行链接。</span><br><span class="line">    </span><br><span class="line">如果未定义主键，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚簇索引。</span><br><span class="line">    </span><br><span class="line">如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</span><br><span class="line"></span><br><span class="line">由于实际的数据页只能按照一棵B+树进行排序，因此每张表只能拥有一个聚集索引。在这种情况下，查询优化器倾向于采用聚集索引。因为聚集索引能够在B+树索引的叶子节点上直接找到数据。此外由于定义了数据的逻辑顺序，聚集索引能够特别快地访问针对范围值得查询。</span><br></pre></td></tr></table></figure>
<h4 id="聚集索引优点"><a href="#聚集索引优点" class="headerlink" title="聚集索引优点"></a>聚集索引优点</h4><ol>
<li>它对主键的排序查找和范围查找速度非常快，叶子节点的数据就是用户所要查询的数据。如用户需要查找一张表，查询最后的10位用户信息，由于 B+树索引是双向链表，所以用户可以快速找到最后一个数据页，并取出10条记录。</li>
<li>范围查询，即如果要查找某一范围内的数据，通过叶子节点的上层节点就可以得到页的范围，之后直接读取数据页即可。</li>
</ol>
<h3 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h3><p>表中除了聚集索引外其他索引都是辅助索引，也称为非聚集索引，与聚集索引的区别是：辅助索引的叶子节点不包含行记录的全部数据。</p>
<p>叶子节点除了包含键值以外，每个叶子节点中的索引行中还包含一个书签。该书签用来告诉 InnoDB 存储引擎去哪里可以找到与索引相对应的行数据。</p>
<p>由于 InnoDB 存储引擎是索引组织表，因此 InnoDB 存储引擎的辅助索引的书签就是相应行数据的聚集索引键。如下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxo14l2kddj30lo0eijth.jpg" alt></p>
<p>辅助索引的存在并不影响数据再聚集索引中的组织，因此每张表中可以有多个辅助索引，但只能有一个聚集索引。当通过辅助索引来寻找数据时，InnoDB存储引擎会遍历辅助索引并通过叶子级别的指针获得指向主键索引的主键，然后通过主键索引来找到一个完整的行记录。</p>
<p>举例来说，如果在一棵高度为3的辅助索引树种查找数据，那需要对这个辅助索引树遍历3次找到指定主键，如果聚集索引树的高度同样为3，那么还需要对聚集索引树进行三次查找，最终找到一个完整的行数据所在的页，因此一共需要6次 IO 访问才能得到最终的一个数据页。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxo19x714bj30g50cugnf.jpg" alt></p>
<h2 id="MySQL-索引管理"><a href="#MySQL-索引管理" class="headerlink" title="MySQL 索引管理"></a>MySQL 索引管理</h2><h3 id="索引的功能"><a href="#索引的功能" class="headerlink" title="索引的功能"></a>索引的功能</h3><ol>
<li>索引的功能就是加速查找</li>
<li>mysql 中的 primary key、unique，联合唯一都是索引，这些索引除了加速查找以外，还有约束的功能。</li>
</ol>
<h3 id="MySQL-常用索引"><a href="#MySQL-常用索引" class="headerlink" title="MySQL 常用索引"></a>MySQL 常用索引</h3><ul>
<li>普通索引：index 加速查找</li>
<li>唯一索引：<ul>
<li>主键索引 primary key：加速查找+约束（不能为空，不能重复）</li>
<li>唯一索引 unique：加速查找+约束（不能重复）</li>
</ul>
</li>
<li>联合索引：<ul>
<li>primary key(id,name)：联合主键索引</li>
<li>unique(id,name)：联合唯一索引</li>
<li>index(id,name)：联合普通索引</li>
</ul>
</li>
</ul>
<h3 id="创建-删除索引"><a href="#创建-删除索引" class="headerlink" title="创建/删除索引"></a>创建/删除索引</h3><ol>
<li>创建表时</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table 表名(</span><br><span class="line">	   字段名1 数据类型 [完整性约束条件...],</span><br><span class="line">	   字段名2 数据类型 [完整性约束条件...],</span><br><span class="line">	   [unique | fulltext | spatial] index | key</span><br><span class="line">	   [索引名] (字段名[(长度)] [asc | desc]));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在已存在的表上创建索引</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create [unique | fulltext | spatial ] index 索引名</span><br><span class="line">	   on 表名 (字段名[(长度)] [asc | desc]);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Alter table在已存在的表上创建索引</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add [unique | fulltext | spatial ] index</span><br><span class="line">	   索引名(字段名[(长度)] [asc | desc]);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>删除索引</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 一定是为搜索条件的字段创建索引，比如select * from s1 where id = 333;就需要为id加上索引</span><br><span class="line"></span><br><span class="line">2. 在表中已经有大量数据的情况下，建索引会很慢，且占用硬盘空间，建完后查询速度加快</span><br><span class="line">比如create index idx on s1(id);会扫描表中所有的数据，然后以id为数据项，创建索引结构，存放于硬盘的表中。</span><br><span class="line">建完以后，再查询就会很快了。</span><br><span class="line"></span><br><span class="line">3. 需要注意的是：innodb表的索引会存放于s1.ibd文件中，而myisam表的索引则会有单独的索引文件table1.MYI</span><br><span class="line"></span><br><span class="line">MySAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在innodb中，表数据文件本身就是按照B+Tree（BTree即Balance True）组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此innodb表数据文件本身就是主索引。</span><br><span class="line">因为inndob的数据文件要按照主键聚集，所以innodb要求表必须要有主键（Myisam可以没有），如果没有显式定义，则mysql系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则mysql会自动为innodb表生成一个隐含字段作为主键，这字段的长度为6个字节，类型为长整型.</span><br></pre></td></tr></table></figure>
<h2 id="正确使用索引"><a href="#正确使用索引" class="headerlink" title="正确使用索引"></a>正确使用索引</h2><p>并不是说创建了索引就一定会加快查询速度，若想利用索引达到预期的提高查询速度的效果，我们在添加索引时，必须考虑以下问题：</p>
<ol>
<li><p>范围问题，或者说条件不明确，条件中出现这些符号：&gt;、&gt;=、&lt;、&lt;=、!=、between and、like</p>
</li>
<li><p>尽量选择区分度高的列作为索引，区分度的公式是 count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录越少，唯一键的区分度是1，而一些状态、性别字段可能在数据量特别大的地方就是0，一般需要 join 的字段要求都是0.1以上，即平均1次扫描10条记录</p>
</li>
<li>=和 in 可以乱序，比如 a=1 and c=3建立(a,b,c)索引可以任意顺序，mysql 的查询优化器会优化成索引可以识别的形式</li>
<li>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)</li>
<li>and/or</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、and与or的逻辑</span><br><span class="line">    条件1 and 条件2:所有条件都成立才算成立，但凡要有一个条件不成立则最终结果不成立</span><br><span class="line">    条件1 or 条件2:只要有一个条件成立则最终结果就成立</span><br><span class="line"></span><br><span class="line">2、and的工作原理</span><br><span class="line">    条件：</span><br><span class="line">        a = 10 and b = &apos;xxx&apos; and c &gt; 3 and d =4</span><br><span class="line">    索引：</span><br><span class="line">        制作联合索引(d,a,b,c)</span><br><span class="line">    工作原理:</span><br><span class="line">        对于连续多个and：mysql会按照联合索引，从左到右的顺序找一个区分度高的索引字段(这样便可以快速锁定很小的范围)，加速查询，即按照d—&gt;a-&gt;b-&gt;c的顺序</span><br><span class="line"></span><br><span class="line">3、or的工作原理</span><br><span class="line">    条件：</span><br><span class="line">        a = 10 or b = &apos;xxx&apos; or c &gt; 3 or d =4</span><br><span class="line">    索引：</span><br><span class="line">        制作联合索引(d,a,b,c)</span><br><span class="line">        </span><br><span class="line">    工作原理:</span><br><span class="line">        对于连续多个or：mysql会按照条件的顺序，从左到右依次判断，即a-&gt;b-&gt;c-&gt;d</span><br><span class="line">在左边条件成立但是索引字段的区分度低的情况下(name 与 gender 均属于这种情况)，会依次往右找到一个区分度高的索引字段，加速查询</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p>最左前缀匹配原则，非常重要的原则，对于组合索引mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配(指的是范围大了，有索引速度也慢)，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>
</li>
<li><p>其他情况</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 避免使用select *</span><br><span class="line">- count(1)或count(列) 代替 count(*)</span><br><span class="line">- 创建表时尽量时 char 代替 varchar</span><br><span class="line">- 表的字段顺序固定长度的字段优先</span><br><span class="line">- 组合索引代替多个单列索引（经常使用多个条件查询时）</span><br><span class="line">- 尽量使用短索引</span><br><span class="line">- 使用连接（JOIN）来代替子查询(Sub-Queries)</span><br><span class="line">- 连表时注意条件类型需一致</span><br><span class="line">- 索引散列值（重复少）不适合建索引，例：性别不适合</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title> 沧海一声笑</title>
    <url>/2018/10/30/%E6%B2%A7%E6%B5%B7%E4%B8%80%E5%A3%B0%E7%AC%91/</url>
    <content><![CDATA[<p>《沧海一声笑》</p>
<p>作词：黄霑</p>
<p>作曲：黄霑</p>
<p>沧海笑滔滔两岸潮</p>
<p>浮沉随浪记今朝</p>
<p>苍天笑纷纷世上潮</p>
<p>谁负谁胜出天知晓</p>
<p>江山笑烟雨遥</p>
<p>涛浪淘尽红尘俗事知多少</p>
<p>清风笑竟惹寂寥</p>
<p>豪情还剩了一襟晚照</p>
<p>苍生笑不再寂寥</p>
<p>豪情仍在痴痴笑笑</p>
<p>啦…啦…啦…</p>
<p>​                                                    记金庸大侠（查良镛）</p>
<p>​                                                    与夏梦同一天归西</p>
<p>​                                                    2018年10月30日</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>None</tag>
      </tags>
  </entry>
  <entry>
    <title>热河</title>
    <url>/2018/10/31/%E7%83%AD%E6%B2%B3/</url>
    <content><![CDATA[<p>《热河》</p>
<p>作词：李志</p>
<p>作曲：李志</p>
<p>热河路就像八十年代的金坛县</p>
<p>梧桐 垃圾 灰尘</p>
<p>和各式各样的杂货店</p>
<p>人们总是早早的离开</p>
<p>拉上卷帘门</p>
<p>在天黑前穿上毛衣</p>
<p>点一根烟</p>
<p>热河路有一家</p>
<p>开了好多年的理发店</p>
<p>不管剪什么样的发型</p>
<p>你只要付五块钱</p>
<p>老板和他的妹妹坐在椅子上</p>
<p>对着镜子一言不发</p>
<p>他们的老家</p>
<p>在身后 在岸边 在安徽全椒县</p>
<p>没有人在热河路谈恋爱</p>
<p>总有人在天亮时伤感</p>
<p>如果年轻时你没来过热河路</p>
<p>那你现在的生活是不是很幸福</p>
<p>纪念碑旁</p>
<p>有一家破旧的电影院</p>
<p>往北走五百米</p>
<p>就是南京火车西站</p>
<p>每天都有外地人</p>
<p>在直线和曲线之间迷路</p>
<p>气喘嘘嘘眼泪模糊</p>
<p>奔跑 跌倒 奔跑</p>
<p>秋林龙虾换了新的地方</p>
<p>32路还是穿过挹江门</p>
<p>高架桥拆了修了新的隧道</p>
<p>走来走去走不出我的盐仓桥</p>
<p>来到城市已经八百九十六天</p>
<p>热河路一直是相同的容颜</p>
<p>偶尔有干净的潘西路过</p>
<p>她不会说</p>
<p>你好再见</p>
<p>没有人在热河路谈恋爱</p>
<p>总有人在天黑时伤感</p>
<p>如果年轻时你来过热河路</p>
<p>那你现在是不是已经被他们淹没</p>
<p>没有新的衣服能让你爱恋</p>
<p>总有一种天气让我怀念</p>
<p>醒来或者吃饱又是一年</p>
<p>相遇然后分别就在一天</p>
<p>没有人在热河路谈恋爱</p>
<p>总有人在天黑时伤感</p>
<p>如果年轻时你来过热河路</p>
<p>那你现在是不是已经被他们淹没</p>
<p>没有新的衣服能让我爱恋</p>
<p>总有一种天气让我怀念</p>
<p>醒来或者吃饱又是一年</p>
<p>相遇然后分别就在一天</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>李志</tag>
      </tags>
  </entry>
  <entry>
    <title>类方法之绑定方法和非绑定方法</title>
    <url>/2018/10/25/%E7%B1%BB%E6%96%B9%E6%B3%95%E4%B9%8B%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在类中定义的函数总共可以分为两大类:</p>
<ol>
<li><p>绑定方法    </p>
<ol>
<li><p>绑定方法</p>
<p>特殊之处:绑定给谁就应该由谁来调用,谁来调用就会将谁当做第一个参数自动传入</p>
<p>绑定给对象的方法:在类中定义函数没有被任何装饰器装饰的情况下,默认就是绑定对象的.</p>
<p>绑定给类的方法:为类中定义函数添加一个classmethod装饰器,就是绑定给类的.</p>
</li>
<li><p>非绑定方法</p>
<p>特殊之处:非绑定方法就是一个普通函数,既不与类绑定又不与对象绑定,意味着类和对象都可以调用,但是无论谁来调用都是一个普通函数,没有自动传值的效果.</p>
<p>非绑定方法:为类中定义函数添加一个staticmethod装饰器,就是非绑定方法.</p>
</li>
</ol>
</li>
</ol>
<p>类中的绑定方法通常来说是默认给对象是用的,加了classmethod装饰器才是给类使用的,那么这三种方法的使用场景是什么呢?</p>
<p>默认绑定给对象的没什么好说的,</p>
<p>绑定给类的方法:一般用来自动实例化对象(传入某些特殊的配置文件对象),</p>
<p>非绑定方法:非绑定方法不用传入对象,也不用传入类,用在单纯的返回或得到某些值.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'func1'</span>, self)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'func2'</span>, cls)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'func3'</span>, x, y)</span><br><span class="line">        </span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定给对象的方法</span></span><br><span class="line"><span class="comment"># 绑定给对象的,应该由对象来调用</span></span><br><span class="line">obj.func1()</span><br><span class="line">print(obj)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">func1 &lt;__main__.Foo object at <span class="number">0x107e8c6d8</span>&gt;</span><br><span class="line">&lt;__main__.Foo object at <span class="number">0x107e8c6d8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定给类的方法</span></span><br><span class="line"><span class="comment"># 绑定给类的方法应该由类来调用</span></span><br><span class="line">print(Foo.func2)</span><br><span class="line">print(obj.func2) <span class="comment"># 由对象来调用的结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&lt;bound method Foo.func2 of &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Foo</span>'&gt;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">bound</span> <span class="title">method</span> <span class="title">Foo</span>.<span class="title">func2</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">Foo</span>'&gt;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 非绑定方法</span></span><br><span class="line"><span class="class"><span class="title">print</span><span class="params">(obj.func3)</span></span></span><br><span class="line"><span class="class"><span class="title">print</span><span class="params">(Foo.func3)</span></span></span><br><span class="line"><span class="class"><span class="title">obj</span>.<span class="title">func3</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">obj</span>.<span class="title">func3</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 运行结果</span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Foo</span>.<span class="title">func3</span> <span class="title">at</span> 0<span class="title">x1063e3bf8</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Foo</span>.<span class="title">func3</span> <span class="title">at</span> 0<span class="title">x1063e3bf8</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">func3</span> 1 2</span></span><br><span class="line"><span class="class"><span class="title">func3</span> 1 2</span></span><br></pre></td></tr></table></figure>
<p>实际使用的例子:主要是绑定给类的使用场景;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">IP=<span class="string">'1.1.2.2'</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ip, port)</span>:</span></span><br><span class="line">        self.id = self.creat_id()</span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&lt;%s : %s : %s'</span> % (self.id, self.ip, self.port))</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creat_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> uuid</span><br><span class="line">        <span class="keyword">return</span> uuid.uuid4()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.IP, settings.PORT)</span><br><span class="line">    </span><br><span class="line">obj = MySQL(<span class="string">'1.1.1.1'</span>, <span class="number">3306</span>)</span><br><span class="line">obj.tell_info()</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&lt;<span class="number">86044651</span>-cea8<span class="number">-4</span>d93<span class="number">-99</span>dc<span class="number">-46</span>a02e169d6d : <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> : <span class="number">3306</span>&gt;</span><br><span class="line"></span><br><span class="line">a = obj.from_conf() <span class="comment"># 产生一个新的对象</span></span><br><span class="line">a.tell_info()</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&lt;efec5e5f<span class="number">-4</span>bfc<span class="number">-4534</span><span class="number">-8e60</span><span class="number">-940824532506</span> : <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> : <span class="number">3306</span>&gt;</span><br><span class="line"></span><br><span class="line">obj1 = MySQL.from_conf()</span><br><span class="line">obj1.tell_info()</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&lt;<span class="number">9463911</span>a-ebcf<span class="number">-416</span>a<span class="number">-9332</span><span class="number">-54282</span>f3f3cba : <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> : <span class="number">3306</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库（四）</title>
    <url>/2018/11/22/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天学习了表与表之间的关系、多表关联、复制表、单表查询的知识，今天学习的内容是单表查询与关键词的执行顺序、正则表达式以及最重要的多表查询。</p>
<h1 id="数据库增删改"><a href="#数据库增删改" class="headerlink" title="数据库增删改"></a>数据库增删改</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert [into] 表名[(可选字段名)] values(一组值1),(一组值2),...;</span><br></pre></td></tr></table></figure>
<p>into 可以省略，表名后的字段可选，如果写了后面的 values 中的值必须与表名后的字段意义对应，如果没写后面的 values 中的值必须与表的所有字段一一对应，values后面可以给出多组值并用逗号隔开。</p>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名[where 条件];</span><br></pre></td></tr></table></figure>
<p>如果条件不写的话是删除所有记录，不过这样删除表的效率很低，因为是一行行删除数据，自增的 id不会归零。使用truncate 是重建表，先记录表结构然后删除整个表再重新建表出来，自增的 id 会归零。</p>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名 = 值,[,字段2 = 值2],[where 条件];</span><br></pre></td></tr></table></figure>
<p>可以一次性修改多个字段的值，值之间需要用逗号隔开；如果不写条件的话就是修改所有记录。</p>
<h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h3 id="不带关键字的查询"><a href="#不带关键字的查询" class="headerlink" title="不带关键字的查询"></a>不带关键字的查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select (*|字段名|四则运算|聚合函数) from 表名 [where 条件];</span><br></pre></td></tr></table></figure>
<p>准备数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(id int primary key auto_increment,</span><br><span class="line">	   name char(10),</span><br><span class="line">	   math int,</span><br><span class="line">	   english int);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;赵云&apos;,90,30);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;小乔&apos;,90,60);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;小乔&apos;,90.60);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;大乔&apos;,10,70);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;李清照&apos;,100,100);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;铁拐李&apos;,20,55);</span><br><span class="line">mysql&gt; insert into stu values(null,&apos;小李子&apos;,20,55);</span><br></pre></td></tr></table></figure>
<p><strong>* 表示查询所有字段</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxgybme90xj31200a8wg3.jpg" alt></p>
<p><strong>字段名 可以手动指定要查询的字段</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select engish from stu;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxgyde0s2oj30x40a8aau.jpg" alt></p>
<p><strong>字段的值可以进行加减乘除</strong></p>
<p><strong>统计总分</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select math+ english from stu;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxgyh3g8b2j310i0a8t9l.jpg" alt></p>
<p>如果觉得 math+english 名字太长也可以取别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select math+english [as] 总分 from stu;</span><br></pre></td></tr></table></figure>
<p>as可以省略 </p>
<p><strong>给英语成绩加分</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select english+10 from stu;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxgyk0iwf3j30zy0amwfc.jpg" alt></p>
<p><strong>聚合函数 用于统计</strong></p>
<p>什么是聚合函数，将多个数据进行计算，并得到一个结果，称为聚合</p>
<p>聚合函数：</p>
<p><strong>注意不能再 where 后面使用聚合函数，因为 where 相当于打开文件然后读取文件中的数据，而使用聚合函数很显然需要多个值来聚合，那么没有读取完数据就使用不了聚合函数，所以这时候应该使用 on，所以聚合函数不能写在 where 后面,where会最先执行，它的作用是读取数据并过滤</strong></p>
<ul>
<li>sum</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sum(salary) from emp;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh5otuhezj30tg05swf4.jpg" alt></p>
<ul>
<li>count</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh5vf14kvj30vk078mxu.jpg" alt></p>
<ul>
<li>avg</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select avg(salary) from emp;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh5qyfln0j30vi062aal.jpg" alt></p>
<ul>
<li>max/min</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select max(salary) from emp;</span><br><span class="line">mysql&gt; select min(salary) from emp;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh5u494emj30z40bo3zz.jpg" alt></p>
<p>结合使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,count(name) from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh91tokhqj311o074gmo.jpg" alt></p>
<p><strong>where 是可选的</strong></p>
<h1 id="关键字的执行顺序"><a href="#关键字的执行顺序" class="headerlink" title="关键字的执行顺序"></a>关键字的执行顺序</h1><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>用于打开文件</p>
<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>去除重复数据，所有数据全都重复才算重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select distinct * from stu;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh2ig2lmcj30zy09iq3u.jpg" alt></p>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>对读取的数据进行过滤</p>
<p>where 后面跟的条件比较多：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh1mmfruaj30mg08u75i.jpg" alt></p>
<h3 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where english between 70 and 80;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh3anr3q9j30z606iwfo.jpg" alt></p>
<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where math in (89,90,91);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh3w9qeioj30w2076q43.jpg" alt></p>
<h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where name like &apos;李%&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh3xtxht0j30ya05o75a.jpg" alt></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh3ymebvhj30x607gt9x.jpg" alt></p>
<h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where math &gt; 80 and english &gt; 80;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh406lnatj30zm05ut9q.jpg" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu where math &gt; 60 and english &lt; 60;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxh4381vvzj30zq05sq40.jpg" alt></p>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>对数据进行分组，为了进行统计。group by 后面可以有多个分组依据，会按照顺序执行</p>
<p>准备数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emp(</span><br><span class="line">	   id int,</span><br><span class="line">	   name char(10),</span><br><span class="line">	   sex char,</span><br><span class="line">	   dept char(10),</span><br><span class="line">	   job char(10),</span><br><span class="line">	   salary double);</span><br><span class="line">mysql&gt; insert into emp values(</span><br><span class="line">	   (1,&apos;刘备&apos;,&apos;男&apos;,&apos;市场&apos;,&apos;总监&apos;,5800),</span><br><span class="line">	   (2,&apos;张飞&apos;,&apos;男&apos;,&apos;市场&apos;,&apos;员工&apos;,3000),</span><br><span class="line">	   (3,&apos;关羽&apos;,&apos;男&apos;,&apos;市场&apos;,&apos;员工&apos;,4000),</span><br><span class="line">	   (4,&apos;孙权&apos;,&apos;男&apos;,&apos;行政&apos;,&apos;总监&apos;,6000),</span><br><span class="line">	   (5,&apos;周瑜&apos;,&apos;男&apos;,&apos;行政&apos;,&apos;员工&apos;,5000),</span><br><span class="line">	   (6,&apos;小乔&apos;,&apos;女&apos;,&apos;行政&apos;,&apos;员工&apos;,4000),</span><br><span class="line">	   (7,&apos;曹操&apos;,&apos;男&apos;,&apos;财务&apos;,&apos;总监&apos;,10000),</span><br><span class="line">	   (8,&apos;司马懿&apos;,&apos;男&apos;,&apos;财务&apos;,&apos;员工&apos;,6000)</span><br><span class="line">	   );</span><br></pre></td></tr></table></figure>
<h3 id="查看所有部门"><a href="#查看所有部门" class="headerlink" title="查看所有部门"></a>查看所有部门</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh4unc89dj30ts07c0tg.jpg" alt></p>
<p>分组后，组里的详细记录就被隐藏起来了，不能直接查看，dept 分组就变成三条记录，每个组中会包含隐藏的记录，没办法显示，如果一定想显示的话，可以使用 group_concat(字段名)，可以将多个值拼接为一个值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,group_concat(name) from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh4y21d9sj30xg07m0u9.jpg" alt></p>
<p><strong>注意：只有出现在 group by 后面的字段，才可以通过 select 显示出来，其他的都被隐藏了。在 mysql5.6分组后会默认显示每组的第一条记录，5.7不显示，因为5.7中sql_mode中就是ONLY_FULL_GROUP_BY</strong></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh5fyo07ij313g0a0wh7.jpg" alt></p>
<h3 id="查看每个部分有多少人"><a href="#查看每个部分有多少人" class="headerlink" title="查看每个部分有多少人"></a>查看每个部分有多少人</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,count(name) from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh91tokhqj311o074gmo.jpg" alt></p>
<h3 id="计算每个部门的平均薪资"><a href="#计算每个部门的平均薪资" class="headerlink" title="计算每个部门的平均薪资"></a>计算每个部门的平均薪资</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,avg(salary) from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh965u3e9j30xq07agmt.jpg" alt></p>
<p><strong>取别名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,avg(salary) 平均工资 from emp group by dept;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh987njpbj30x406uwji.jpg" alt="image-20181122232527814"></p>
<h3 id="计算每个岗位的平均工资"><a href="#计算每个岗位的平均工资" class="headerlink" title="计算每个岗位的平均工资"></a>计算每个岗位的平均工资</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select job,avg(salary) from emp group by job;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh9av6vxfj30yc06igqa.jpg" alt="image-20181122232800382"></p>
<h3 id="计算每个部门每个岗位的平均工资"><a href="#计算每个部门每个岗位的平均工资" class="headerlink" title="计算每个部门每个岗位的平均工资"></a>计算每个部门每个岗位的平均工资</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,job,avg(salary) from emp group by dept,job;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh9cg8ro3j30z809gwma.jpg" alt="image-20181122232930717"></p>
<h3 id="查询平均工资大于5000的部门"><a href="#查询平均工资大于5000的部门" class="headerlink" title="查询平均工资大于5000的部门"></a>查询平均工资大于5000的部门</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept from emp where avg(salary) &gt; 5000;</span><br></pre></td></tr></table></figure>
<p>这样写是不行的，因为 where 相当于一条条从文件中读取数据，而数据没有读取完是不能做平均值计算的，这时候就需要用 having 了。</p>
<h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><p>对分组<strong>后</strong>的数据进行过滤，作用与 where 相同，用于过滤。不通电在于，where 是从文件读取数据时的过滤条件，这导致了 where中不能使用聚合函数。</p>
<h3 id="计算工资平均值大于5000的部门"><a href="#计算工资平均值大于5000的部门" class="headerlink" title="计算工资平均值大于5000的部门"></a>计算工资平均值大于5000的部门</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,avg(salary) from emp group by dept having avg(salary) &gt; 5000;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxha6pnz5hj312606cgq5.jpg" alt="image-20181122235836836"></p>
<p>总结：select 语法是有执行顺序的，按照从左到右的顺序执行，所以 where 会在执行完成之前用不了聚合函数</p>
<h3 id="查询岗位平均薪资高于6000的岗位名称和平均薪资"><a href="#查询岗位平均薪资高于6000的岗位名称和平均薪资" class="headerlink" title="查询岗位平均薪资高于6000的岗位名称和平均薪资"></a>查询岗位平均薪资高于6000的岗位名称和平均薪资</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select job,avg(salary) from emp group by job having avg(salary) &gt; 6000;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxhab7zdm0j310u05yn1d.jpg" alt="image-20181123000257688"></p>
<h3 id="查询部门人数少于3的部门名称人员名称和人员个数"><a href="#查询部门人数少于3的部门名称人员名称和人员个数" class="headerlink" title="查询部门人数少于3的部门名称人员名称和人员个数"></a>查询部门人数少于3的部门名称人员名称和人员个数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dept,group_concat(name),count(*) from emp group by dept having count(name) &lt; 3;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxhae0gzekj311405saef.jpg" alt="image-20181123000538071"></p>
<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p>对结果排序</p>
<ul>
<li>asc 表示升序，是默认的</li>
<li>desc 表示降序</li>
<li>by 后面可以有多个排序</li>
</ul>
<h3 id="按照工资排序"><a href="#按照工资排序" class="headerlink" title="按照工资排序"></a>按照工资排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp order by salary;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxho696xe5j31240b048o.jpg" alt="image-20181123080220263"></p>
<h3 id="按照工资降序排序"><a href="#按照工资降序排序" class="headerlink" title="按照工资降序排序"></a>按照工资降序排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp order by salary desc;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxiye445ycj310s0aydin.jpg" alt="image-20181123080343839"></p>
<h3 id="按照工资升序-id-降序排序"><a href="#按照工资升序-id-降序排序" class="headerlink" title="按照工资升序 id 降序排序"></a>按照工资升序 id 降序排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp order by salary,id desc;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxiylnpbiej30yy0b012j.jpg" alt="image-20181123080537034"></p>
<h3 id="按照工资升序-id-升序排序"><a href="#按照工资升序-id-升序排序" class="headerlink" title="按照工资升序 id 升序排序"></a>按照工资升序 id 升序排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp order by salary,id;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxhob2x9qbj30z40awwo7.jpg" alt="image-20181123080658050"></p>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><p>指定获取数据条数</p>
<p>使用方法：</p>
<p>​    limit a,b;表示从 a 开始不包括 a，获取 b 个数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp limit a,b;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp limit 2,2;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxhofaqsmsj30w0062tda.jpg" alt="image-20181123081110942"></p>
<h3 id="分页查询计算页数"><a href="#分页查询计算页数" class="headerlink" title="分页查询计算页数"></a>分页查询计算页数</h3><p>起始位置的算法</p>
<p>每页显示a条，现在是第 b 页，求起始位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(b - 1) * a</span><br></pre></td></tr></table></figure>
<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh2n9lmibj30yu0aewme.jpg" alt="image-20181122193726588"></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh2q62u5vj30xy0a676p.jpg" alt></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh2rlvp6oj30ye0a8abz.jpg" alt></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxhahcbo70j311405saef.jpg" alt="image-20181123000847643"></p>
<h2 id="完整的select语句"><a href="#完整的select语句" class="headerlink" title="完整的select语句"></a>完整的select语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select [distinct] 查询字段1、查询字段2…… from 表名</span><br><span class="line">	   [where 查询之前的过滤条件</span><br><span class="line">	   group by 分组依据</span><br><span class="line">	   having 分组之后的过滤条件</span><br><span class="line">	   order by 排序字段</span><br><span class="line">	   limit]; 显示条数</span><br></pre></td></tr></table></figure>
<p><strong>注意在书写时，必须按照这个顺序来写</strong></p>
<h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h1><h3 id="匹配字段名称以’张’开头的数据"><a href="#匹配字段名称以’张’开头的数据" class="headerlink" title="^ 匹配字段名称以’张’开头的数据"></a>^ 匹配字段名称以’张’开头的数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;^张&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxhor3ub9ij310205kwh6.jpg" alt="image-20181123082232417"></p>
<h3 id="匹配字段名称以’飞’结尾的数据"><a href="#匹配字段名称以’飞’结尾的数据" class="headerlink" title="$ 匹配字段名称以’飞’结尾的数据"></a>$ 匹配字段名称以’飞’结尾的数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;飞$&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxhotomnh1j30yy05cacm.jpg" alt="image-20181123082455838"></p>
<h3 id="匹配字段名称第二位后包含’飞’的数据，‘’-‘’表示任意字符"><a href="#匹配字段名称第二位后包含’飞’的数据，‘’-‘’表示任意字符" class="headerlink" title=". 匹配字段名称第二位后包含’飞’的数据，‘’.‘’表示任意字符"></a>. 匹配字段名称第二位后包含’飞’的数据，‘’.‘’表示任意字符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;.飞&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxhoy561a2j30ww05gwgz.jpg" alt="image-20181123082918332"></p>
<h3 id="abci-匹配字段名称中含有指定集合内容的人员"><a href="#abci-匹配字段名称中含有指定集合内容的人员" class="headerlink" title="[abci] 匹配字段名称中含有指定集合内容的人员"></a>[abci] 匹配字段名称中含有指定集合内容的人员</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;[张飞关羽刘备]&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxi6y3pci1j30ya0a4do5.jpg" alt="image-20181123185141222"></p>
<h3 id="alex-匹配不符合集合中条件的内容，-表示取反"><a href="#alex-匹配不符合集合中条件的内容，-表示取反" class="headerlink" title="[^alex] 匹配不符合集合中条件的内容，^表示取反"></a>[^alex] 匹配不符合集合中条件的内容，^表示取反</h3><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxi6y8cquoj30y608gteu.jpg" alt="image-20181123185154564"></p>
<p><strong>注意1：^只有在[]内才是取反的意思，在别的地方都是表示从开始处匹配</strong></p>
<p><strong>注意2：简单理解 name regexp ‘[^alex]’ 等价于 name!=’alex’</strong></p>
<h3 id="‘a-x’-匹配条件中的任意值"><a href="#‘a-x’-匹配条件中的任意值" class="headerlink" title="‘a|x’ 匹配条件中的任意值"></a>‘a|x’ 匹配条件中的任意值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;张飞|关羽&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxi73vw8k9j30vc06gn1t.jpg" alt="image-20181123185736287"></p>
<h3 id="查询以-张开头以飞结尾的数据"><a href="#查询以-张开头以飞结尾的数据" class="headerlink" title="查询以 张开头以飞结尾的数据"></a>查询以 张开头以飞结尾的数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where name regexp &apos;^张.*飞$&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxi75mjnccj30x205awia.jpg" alt="image-20181123185917271"></p>
<p>MySQL 中使用 regexp 操作符来进行正则表达式匹配。</p>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>^ 匹配输入字符串的开始位置</p>
<p>$ 匹配输入字符串的结束位置</p>
<p>. 匹配任何字符</p>
<p>[…] 字符集合。匹配所包含的任意一个字符。例如，’[abc]’ 可以匹配 ‘plain’ 中的 ‘a’</p>
<p>[^…] 负值字符集合。匹配未包含的任意字符。例如，’[^abc]’ 可以匹配 ‘plain’ 中的 ‘p’</p>
<p>p1|p2|p3 匹配 p1 或 p2 或 p3.例如，’z|food’ 能匹配 ‘z’ 或 ‘food’。’(z|f)ood’ 则匹配 ‘zood’ 或 ‘food’</p>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h3 id="笛卡尔积查询"><a href="#笛卡尔积查询" class="headerlink" title="笛卡尔积查询"></a>笛卡尔积查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from 表1,...表n;</span><br></pre></td></tr></table></figure>
<p>查询结果是将坐标中的每条记录与右表中的每条记录都关联以遍，假如 a 表有 m 条记录，b 表有 n 条记录，则笛卡尔积结果为 m*n。</p>
<p>数据准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table empl (id int,name char(10),sex char,dept_id int);</span><br><span class="line">	   insert empl values(1,&quot;大黄&quot;,&quot;m&quot;,1);</span><br><span class="line">	   insert empl values(2,&quot;老王&quot;,&quot;m&quot;,2);</span><br><span class="line">	   insert empl values(3,&quot;老李&quot;,&quot;w&quot;,30);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table deptl (id int,name char(10));</span><br><span class="line">	   insert deptl values(1,&apos;市场&apos;);</span><br><span class="line">	   insert deptl values(2,&apos;财务&apos;);</span><br><span class="line">	   insert deptl values(3,&apos;行政&apos;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl,deptl;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxi7wdmmv5j30z80bo470.jpg" alt="image-20181123192453808"></p>
<p>因为笛卡尔积查询会产生很多错误数据，所以需要经过筛选出正确的关联关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl,deptl where empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxi86vgd32j30z406ijwa.jpg" alt="image-20181123193501507"></p>
<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>就是笛卡尔积查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl [inner] join deptl;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxi89eyenaj31040o01d8.jpg" alt="image-20181123193711910"></p>
<p>加上筛选条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl [inner] join deptl where empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxi8bp6614j311806ewjj.jpg" alt="image-20181123193935956"></p>
<h3 id="左外连接查询"><a href="#左外连接查询" class="headerlink" title="左外连接查询"></a>左外连接查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl left join deptl on empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p>左表数据全部显示，右表只显示匹配上的数据。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxi8fuyby9j312007oaga.jpg" alt="image-20181123194338224"></p>
<p><strong>on 关键词和 where 关键词都是用于条件过滤，没有本质区别。在单表中 where 的作用是筛选过滤条件；在多表中 where 连接多表，满足条件就连接，不满足就不连接。于是为了区分单表还是多表换用了 on 关键词。只要是连接多表的条件就使用 on。</strong></p>
<h3 id="右外连接查询"><a href="#右外连接查询" class="headerlink" title="右外连接查询"></a>右外连接查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl right join deptl on empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p>右表数据全部显示，左表只显示匹配上的数据。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxi8mdkh9aj30xw07mn2x.jpg" alt="image-20181123194951654"></p>
<p>内连接和外连接的理解：内指的是匹配上的数据，外指的是没匹配上的数据。</p>
<h3 id="全外连接显示"><a href="#全外连接显示" class="headerlink" title="全外连接显示"></a>全外连接显示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl full join deptl on empl.dept_id = deptl.id; # mysql 不支持</span><br></pre></td></tr></table></figure>
<h3 id="合并查询结果-全外连接"><a href="#合并查询结果-全外连接" class="headerlink" title="合并查询结果(全外连接)"></a>合并查询结果(全外连接)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl left join deptl on empl.dept_id = deptl.id</span><br><span class="line">	   union</span><br><span class="line">	   select * from empl right join deptl on empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxi901c11wj311809maid.jpg" alt="image-20181123200300937"></p>
<p><strong>union 会去除重复数据，且只能合并字段数量相同的表；如果不想去除重复数据，使用 union all</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from empl left join deptl on empl.dept_id = deptl.id</span><br><span class="line">	   union all</span><br><span class="line">	   select * from empl right join deptl on empl.dept_id = deptl.id;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxi948dlelj30ye0awguv.jpg" alt="image-20181123200703221"></p>
<h3 id="三表查询"><a href="#三表查询" class="headerlink" title="三表查询"></a>三表查询</h3><p>数据准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stul(id int primary key auto_increment,name char(10));</span><br><span class="line">mysql&gt; create table teal(id int primary key auto_increment,name char(10));</span><br></pre></td></tr></table></figure>
<p>创建中间表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tsr(id int primary key auto_increment,</span><br><span class="line">	   t_id int,s_id int,</span><br><span class="line">	   foreign key(s_id) references stul(id),</span><br><span class="line">	   foreign key(t_id) references teal(id));</span><br><span class="line">mysql&gt; insert into stul values(null,&apos;张三&apos;),(null,&apos;李四&apos;);</span><br><span class="line">mysql&gt; insert into teal values(null,&apos;musibii&apos;),(null,&apos;thales&apos;);</span><br><span class="line">mysql&gt; insert into tsr values(null,1,1),(null,1,2)(null,2,2);</span><br></pre></td></tr></table></figure>
<h4 id="查询-musibii-教过那些学生"><a href="#查询-musibii-教过那些学生" class="headerlink" title="查询 musibii 教过那些学生"></a>查询 musibii 教过那些学生</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stul join teal join tsr </span><br><span class="line">	   on stul.id = tsr.s_id and teal.id = tsr.t_id where teal.name = &apos;musibii&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxia48ocnuj313a07aag6.jpg" alt="image-20181123204140888"></p>
<h4 id="多表查询总结："><a href="#多表查询总结：" class="headerlink" title="多表查询总结："></a>多表查询总结：</h4><ol>
<li>把所有表连接起来</li>
<li>加上连接条件</li>
<li>如果有别的过滤条件，加上 where</li>
</ol>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p> 当一个查询的结果是另一个查询的条件是，这个查询称之为子查询（内层查询）。</p>
<p>什么时候使用子查询？</p>
<p>当一次查询无法得到想要的结果时，需要多次查询。这样可以分多步查询减少查询的复杂度。</p>
<p>数据准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emps(id int,name char(10),sex char,age int,dept_id int, job char(10),salary double);</span><br><span class="line">mysql&gt; insert into emps values</span><br><span class="line">	   (1,&apos;刘备&apos;,&apos;男&apos;,26,1,&apos;总监&apos;,5800),</span><br><span class="line">	   (2,&apos;张飞&apos;,&apos;男&apos;,24,1,&apos;员工&apos;,3000),</span><br><span class="line">	   (3,&apos;关羽&apos;,&apos;男&apos;,30,1,&apos;员工&apos;,4000),</span><br><span class="line">	   (4,&apos;孙权&apos;,&apos;男&apos;,25,2,&apos;总监&apos;,6000),</span><br><span class="line">	   (5,&apos;周瑜&apos;,&apos;男&apos;,22,2,&apos;员工&apos;,5000),</span><br><span class="line">	   (6,&apos;小乔&apos;,&apos;女&apos;,31,2,&apos;员工&apos;,4000),</span><br><span class="line">	   (7,&apos;曹操&apos;,&apos;男&apos;,40,3,&apos;总监&apos;,10000),</span><br><span class="line">	   (8,&apos;司马懿&apos;,&apos;男&apos;,46,3,&apos;员工&apos;,6000);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table depts(id int primary key,name char(10));</span><br><span class="line">mysql&gt; insert into depts values(1,&apos;市场&apos;),(2,&apos;行政&apos;),(3,&apos;财务&apos;);</span><br></pre></td></tr></table></figure>
<h3 id="查询市场部人员"><a href="#查询市场部人员" class="headerlink" title="查询市场部人员"></a>查询市场部人员</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emps where dept_id = (select id from depts where name = &apos;市场&apos;);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxib29qymgj30zy0747ac.jpg" alt="image-20181123211421700"></p>
<p>子查询思路：</p>
<ol>
<li>将一个复杂的问题 拆分为多个简单的问题</li>
<li>把一个复杂的查询 拆分为多个简单的查询</li>
</ol>
<p>就比如查询部门人员：</p>
<ol>
<li>查询部门 id</li>
<li>拿着 id 去员工表查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emps.name from emps join dept on dept.id = emps.dept_id where depts.name = &apos;财务&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxib7nqbq2j312m06e43a.jpg" alt="image-20181123211930985"></p>
<h3 id="查询平均年龄大于26的部门名称"><a href="#查询平均年龄大于26的部门名称" class="headerlink" title="查询平均年龄大于26的部门名称"></a>查询平均年龄大于26的部门名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from depts where id in (select dept_id from emps group by dept_id having avg(age) &gt; 26);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxibd49udqj313k06wjwr.jpg" alt="image-20181123212448658"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select depts.name from depts join emps on emps.dept_id = depts.id </span><br><span class="line">	   group by depts.name having avg(age) &gt; 26;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxibhl4gg7j313i07479t.jpg" alt="image-20181123212907673"></p>
<h3 id="exists-关键词查询"><a href="#exists-关键词查询" class="headerlink" title="exists 关键词查询"></a>exists 关键词查询</h3><p>exists 后跟子查询，子查询有结果时为 True，没有结果是为 False，为 True 时外层执行，为 False 时外层不执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emps where exists(select * from emps where salary &gt; 1000);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxivxo028nj30zy0detlb.jpg" alt="image-20181124091632042"></p>
<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="查询每个部门工资最高的员工信息"><a href="#查询每个部门工资最高的员工信息" class="headerlink" title="查询每个部门工资最高的员工信息"></a>查询每个部门工资最高的员工信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emps join</span><br><span class="line">	   # 使用子查询得到每个部门的 id 以及部门的最高工资，形成一个虚拟表把原始表和虚拟表连接在一起</span><br><span class="line">	   (select dept_id,max(salary) as m from emps group by dept_id) as t1</span><br><span class="line">	   # 如果这个人的部门编号等于虚拟表中的部门编号，并且这个人的工资等于虚拟表中的最高工资，就是要找的数据</span><br><span class="line">	   on emps.dept_id = t1.dept_id and emps.salary = t1.m;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxixq62cxaj312w08k117.jpg" alt="image-20181124101839921"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>day46</tag>
      </tags>
  </entry>
  <entry>
    <title>类的内置方法</title>
    <url>/2018/10/25/%E7%B1%BB%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong>类的内置方法都是继承object基类的,内置方法通常为双下划线的方法,比如__init__方法,而类的内置方法也叫做魔术方法,因为太强大了.</strong></p>
<p>在介绍魔术方法之前先看一些判断对象和类的继承关系的方法:</p>
<ol>
<li>isinstance(obj, A_tuple):判断某个对象是否属于某一个集合类的对象</li>
<li>issubclass(x, A_tuple): 判断某个类是否是某一个集合类的子类</li>
</ol>
<h3 id="1-str-方法"><a href="#1-str-方法" class="headerlink" title="1 __str__方法"></a>1 __str__方法</h3><p>会在对象被打印的时候自动触发,然后将返回值当做打印的结果</p>
<p>使用例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    de __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s : %s&gt;'</span> % (self.name, self.age)</span><br><span class="line">    </span><br><span class="line">peo = People(<span class="string">'musibii'</span>, <span class="number">18</span>)</span><br><span class="line">print(peo) <span class="comment"># print(peo.__str__())</span></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&lt;musibii : <span class="number">18</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-del-方法"><a href="#2-del-方法" class="headerlink" title="2 __del__方法"></a>2 __del__方法</h3><p>会在对象被删除时自动触发执行,用来在对象被删除前回收资源</p>
<p>使用例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, filepath)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.f = open(filepath, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 写回收系统资源相关的代码</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        </span><br><span class="line">obj = Bar(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">del</span> obj</span><br></pre></td></tr></table></figure>
<p><strong>未完待续</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>类的三大特性之多态</title>
    <url>/2018/10/24/%E7%B1%BB%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p><strong>多态三问</strong></p>
<ol>
<li>什么是多态?</li>
</ol>
<p>多态指的是同一种事物的多种形态,举个例子:每个人都会睡觉,但是每个人的睡觉姿势,睡眠质量都不一样,再说,每个人的祖宗都是猿类,但是现在几乎没有一模一样的两个人,有句话说世界上没有两片相同的叶子,这就是多态,这也是为什么这个世界多姿多彩,因为我们一样,我们也不一样.</p>
<ol start="2">
<li>为何要用多态?</li>
</ol>
<p>我觉得不是用不用多态的问题,python的哲学是一切皆对象,那么对象其实可以想象成现实生活中的个体,这就自然而然有了多态的概念了,多个对象的某一个相同的方法,却有不一样的表现形式.那么在Python中怎么定义多态呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Animal() 父类不能实例化,因为父类本身就是用来制定标准的</span></span><br><span class="line"><span class="comment"># speak方法被一个装饰装饰了,意味着只要是继承Animal类的子类都必须实现speak方法,强制实行的</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#只有这样,才可以继承Animal类</span></span><br></pre></td></tr></table></figure>
<p>python是一门自由度很高的语言,几乎没有什么强制要做的事情,这有好处也有坏处.好处是一门语言越自由那么开发者的创新性就越强,所以才有了越来越多的第三方库,使得python的生态环境愈发完善,像著名的requests库,唯一的一个非转基因的python HTTP库,人类可以安全享用.(扯远了…),越来越多的开发者使用python,开发新的特性和新的库,那么坏处就是python很自由,所以没有什么标准,你可以有你的标准,我可以有我的标准,按理说python是不禁止的,那么怎么解决这个问题呢?</p>
<p>python的开发者都约定成俗的执行一些事情,比如常量全大写,函数名小写或者加下划线,类呢,就使用驼峰法命名,那么我们一看到变量名就可以知道这是个什么类型的变量了,同理,在python的类中,也约定成俗了用同样的名字改写自己的方法,查看基类object的源码可知:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">object</span>:</span></span><br><span class="line">    <span class="string">""" The most base type """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement delattr(self, name). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        __dir__() -&gt; list</span></span><br><span class="line"><span class="string">        default dir() implementation</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self==value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" default object formatter """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return getattr(self, name). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return hash(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_subclass__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        This method is called when a class is subclassed.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        The default implementation does nothing. It may be</span></span><br><span class="line"><span class="string">        overridden to extend subclasses.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="comment"># known special case of object.__init__</span></span><br><span class="line">        <span class="string">""" Initialize self.  See help(type(self)) for accurate signature. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *more)</span>:</span> <span class="comment"># known special case of object.__new__</span></span><br><span class="line">        <span class="string">""" Create and return a new object.  See help(type) for accurate signature. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self!=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce_ex__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" helper for pickle """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" helper for pickle """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return repr(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement setattr(self, name, value). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sizeof__</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        __sizeof__() -&gt; int</span></span><br><span class="line"><span class="string">        size of object in memory, in bytes</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return str(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod # known case</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__subclasshook__</span><span class="params">(cls, subclass)</span>:</span> <span class="comment"># known special case of object.__subclasshook__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Abstract classes can override this to customize issubclass().</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        This is invoked early on by abc.ABCMeta.__subclasscheck__().</span></span><br><span class="line"><span class="string">        It should return True, False or NotImplemented.  If it returns</span></span><br><span class="line"><span class="string">        NotImplemented, the normal algorithm is used.  Otherwise, it</span></span><br><span class="line"><span class="string">        overrides the normal algorithm (and the outcome is cached).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    __class__ = <span class="literal">None</span> <span class="comment"># (!) forward: type, real value is ''</span></span><br><span class="line">    __dict__ = &#123;&#125;</span><br><span class="line">    __doc__ = <span class="string">''</span></span><br><span class="line">    __module__ = <span class="string">''</span></span><br></pre></td></tr></table></figure>
<p>这里面的双下划线的方法,是基类已经定义好了的方法,那么继承基类的类,如果没有就用我的,如果有的话,你也用相同的名字,这样的话不管什么对象,都有同样的方法执行类似的事情,这就是多态,这也是python语言的魅力.</p>
<p>具体点来说,像linux的哲学是一切皆文件,那么通常来说文件只有两个属性,读和写,那么linux已经把各种复杂的方法封装为了读和写两个方法,那么就算我们不了解linux里面的某些硬件,我们也可以使用同样的方法来操作硬件.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>模块与包</title>
    <url>/2018/10/11/%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</url>
    <content><![CDATA[<h3 id="一-什么是模块"><a href="#一-什么是模块" class="headerlink" title="一 什么是模块"></a>一 什么是模块</h3><p>模块就是一组功能的集合体，可以通过导入模块来复用模块的功能。</p>
<p>比如我在同一个文件夹定义两个.py文件，分别命名为A.py和B.py，那么可以通过在A文件里通过<strong>import B</strong>来使用B文件里的名称空间。</p>
<p>python中，模块的使用方式都是一样的，可以分为四个通用类别：</p>
<ol>
<li>使用python编写的.py文件</li>
<li>已被编译为共享库或DLL的C或C++扩展</li>
<li>把一系列模块组织到一起的文件夹（注：文件夹下有一个<strong>init</strong>.py文件，该文件夹称之为包）</li>
<li>使用C编写并链接到python解释器的内置模块</li>
</ol>
<h3 id="二-为何要使用模块"><a href="#二-为何要使用模块" class="headerlink" title="二 为何要使用模块"></a>二 为何要使用模块</h3><ol>
<li><p>从文件级别组织程序，便于管理</p>
<p>随着需求的增多，功能也会越来越多，为了方便管理，通常将程序分成多个文件，这样项目的结构会更加清晰，方便管理。这时不仅仅可以把这些文件当做脚本去执行，还可以把他们当做模块来导入到其他的模块中，实现功能复用。</p>
</li>
<li><p>使用别人写好的模块，提高开发效率</p>
<p>使用别人已经写好的轮子，在自己的项目中使用，可以极大地提高开发效率。</p>
<p>注意：当退出python解释器的时候，重新进入那么之前定义的函数和变量都会丢失，因此通常将程序写到文件中以便永久保存，需要时可以在命令行通过python *.py方法执行。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test1.py</span></span><br><span class="line">print(<span class="string">'from test1'</span>)</span><br><span class="line"></span><br><span class="line">money = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'test1模块:'</span>, money)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'test1模块'</span>)</span><br><span class="line">    func1()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test2.py</span></span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line">test1.func1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>当在tes2t导入的时候会执行test1中的代码，所以首先会打印<em>from test1</em>接着执行test1中的func1函数。</p>
<h3 id="三-使用模块之import"><a href="#三-使用模块之import" class="headerlink" title="三 使用模块之import"></a>三 使用模块之import</h3><h4 id="1-import的使用"><a href="#1-import的使用" class="headerlink" title="1 import的使用"></a>1 import的使用</h4><p>模块可以包含可执行的语句和函数的定义，这些语句的目的是初始化模块，它们只在模块名第一次导入时才会执行（import语句可以在程序中的任意位置使用的，且针对同一个模块可以import多次，python为了防止重复导入，当第一次导入模块时就将模块的名称空间加载到内存了，后续的import语句仅是对已经加载到内存中的模块对象增加了一次引用，并不会重复执行模块内的语句）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test3</span></span><br><span class="line">print(<span class="string">'from test3'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test4</span></span><br><span class="line"><span class="keyword">import</span> test3</span><br><span class="line"><span class="keyword">import</span> test3</span><br><span class="line"><span class="keyword">import</span> test3</span><br><span class="line"><span class="keyword">import</span> test3</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test3</span><br></pre></td></tr></table></figure>
<p>ps:可以导入sys模块，调用sys.module查看当前加载到内存中的模块，sys.module是一个字典，内部包含模块名和模块名路径的对应关系。该字典决定了导入模块时是否需要重新导入。</p>
<h4 id="2-导入模块时发生了什么"><a href="#2-导入模块时发生了什么" class="headerlink" title="2 导入模块时发生了什么"></a>2 导入模块时发生了什么</h4><p>运行py文件导入一个模块时，解释器做了三件事：</p>
<ol>
<li><p>在执行文件中为被导入文件创建新的名称空间，在被导入模块中定义的函数和方法若是使用到了<strong>global</strong>时访问的就是这个名称空间。</p>
</li>
<li><p>在新创建的名称空间中执行模块中的包含的代码。函数定义也是‘’被执行‘’的语句，模块级别函数定义的执行将函数名放入模块全局名称空间表，可以用<strong>globals()</strong>可以查看。</p>
</li>
<li><p>在执行文件的名称空间创建被导入模块的名称来引用该名称空间。</p>
<p>这个名字和变量名没什么区别，都是‘’第一类‘’的，且使用句点表示法可以访问被导入模块的名称空间，导入的模块与被导入的模块是独立的两个名称空间。</p>
</li>
</ol>
<h4 id="3-被导入模块有独立的名称空间"><a href="#3-被导入模块有独立的名称空间" class="headerlink" title="3 被导入模块有独立的名称空间"></a>3 被导入模块有独立的名称空间</h4><p>每个模块都是一个独立的名称空间，定义在这个模块中的函数，把这个模块的名称空间当做全局名称空间，这样就不用担心定义在不同的模块中全局变量在导入时与使用者的全局变量冲突。</p>
<ul>
<li>测试1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test5.py</span></span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">print(test1.money)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test6</span></span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from test6 func1'</span>)</span><br><span class="line">test1.func1()</span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块: <span class="number">10</span></span><br><span class="line"><span class="keyword">from</span> test6 func1</span><br><span class="line"><span class="comment"># 这说明 test6中的函数和test1中的函数不冲突</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试3</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test7</span></span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">test1.change()</span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块: <span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 这说明test1中的change函数只是修改了test1中的全局变量，对test7中的变量没有操作权限</span></span><br></pre></td></tr></table></figure>
<h3 id="四-使用模块之from…import…"><a href="#四-使用模块之from…import…" class="headerlink" title="四 使用模块之from…import…"></a>四 使用模块之from…import…</h3><h4 id="1-from…import…与import-…的区别"><a href="#1-from…import…与import-…的区别" class="headerlink" title="1 from…import…与import …的区别"></a>1 from…import…与import …的区别</h4><p>区别就是：使用from…import…是将被导入模块中的名字直接导入到当前的名称空间中，所以在当前名称空间中，直接使用名字就可以了，不需要在前面加上模块名前缀。</p>
<p>from…import…导入方式的优缺点：</p>
<ul>
<li>好处：使用方便</li>
<li>坏处：容易与当前执行文件的名字冲突</li>
</ul>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2 验证"></a>2 验证</h4><ol>
<li>验证1：当前位置直接使用test1中的函数名，执行时仍然以test1.py文件为全局名称空间</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入的函数func1，执行时仍然回到test1.py中寻找全局变量money</span></span><br><span class="line"><span class="comment"># test8</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> func1</span><br><span class="line">money = <span class="number">50</span></span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入的函数func2，执行时需要调用func1，仍然回到test1.py中找func1</span></span><br><span class="line"><span class="comment">#test9.py</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> func2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----'</span>)</span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块</span><br><span class="line">test1模块: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>验证2：如果当前名称空间和被导入的模块中的名字重合，那么会覆盖掉前面的名字</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入的函数fun1,被当前位置定义的func1覆盖掉了</span></span><br><span class="line"><span class="comment"># test10</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> func1</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'======'</span>)</span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">======</span><br><span class="line"><span class="comment"># 这说明func1把被导入名字func1覆盖掉了</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前位置定义的func1导入func1</span></span><br><span class="line"><span class="comment"># test11</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'======'</span>)</span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> func1</span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> test1</span><br><span class="line">test1模块: <span class="number">10</span></span><br><span class="line"><span class="comment"># 这说明在后面导入的话会覆盖掉前面的</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>验证3：被导入的方法执行时，始终以源文件为准</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test12</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> money,func1</span><br><span class="line">money=<span class="number">100</span> <span class="comment">#将当前位置的名字money绑定到了100</span></span><br><span class="line">print(money) <span class="comment">#打印当前的名字</span></span><br><span class="line">func1() <span class="comment">#读取spam.py中的名字money,仍然为1000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> the test</span><br><span class="line"><span class="number">100</span></span><br><span class="line">test1模块: <span class="number">10</span></span><br><span class="line"><span class="comment"># 可以看出运行func1的时候依然从原名称空间查找的</span></span><br></pre></td></tr></table></figure>
<h4 id="3-from-…-import"><a href="#3-from-…-import" class="headerlink" title="3 from … import *"></a>3 from … import *</h4><p>from … import * 是把被导入文件中所有不是以下划线(_)开头的名字都导入到当前名称空间。</p>
<p>大部分情况下不应该以这种导入方式，因为不知道被导入包中的名字是否会和当前名称空间中的名字重合造成名字覆盖。</p>
<p>解决方法是在被导入文件中使用<strong>all</strong> = []来控制被导入的名字，只有在<strong>all</strong>里面的才会被导入。</p>
<h4 id="4-模块循环导入问题"><a href="#4-模块循环导入问题" class="headerlink" title="4 模块循环导入问题"></a>4 模块循环导入问题</h4><p>模块循环/嵌套导入抛出异常的根本原因是由于在python中模块被导入一次之后，就不会重新导入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test1.py</span></span><br><span class="line">print(<span class="string">'正在导入1'</span>)</span><br><span class="line"><span class="keyword">from</span> test2 <span class="keyword">import</span> y</span><br><span class="line">x = <span class="string">'1'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test2.py</span></span><br><span class="line">print(<span class="string">'正在导入2'</span>)</span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> x</span><br><span class="line">y = <span class="string">'2'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run.py</span></span><br><span class="line"><span class="keyword">import</span> test1</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">正在导入<span class="number">1</span></span><br><span class="line">正在导入<span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/jingxing/PycharmProjects/python全栈/day18/pack/run.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> test1</span><br><span class="line">  File <span class="string">"/Users/jingxing/PycharmProjects/python全栈/day18/pack/test1.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> test2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">"/Users/jingxing/PycharmProjects/python全栈/day18/pack/test2.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> test1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'x'</span></span><br></pre></td></tr></table></figure>
<p>分析：在run文件中执行导入test1，运行test1的代码，打印并且从test2中导入y，回到test2，打印并且从test1中导入，因为已经导入test1了（没导入完全，因为代码没执行完），所以直接找’x’，但因为在test1中的代码执行不下去，所以报错。执行文件不等于就完全导入文件了。</p>
<p>解决方法1：导入语句放在最后</p>
<p>解决方法2：导入语句放在函数中（因为在导入模块时，函数内的代码并不会执行，只会判断语法错误，所以这时候导入模块可以完全导入）</p>
<h4 id="5-模块的重载"><a href="#5-模块的重载" class="headerlink" title="5 模块的重载"></a>5 模块的重载</h4><p>考虑到性能的原因，每个模块只被导入一次，放入字典sys.module中，如果你改变了模块的内容，必须重启程序（python不支持重新加载或卸载之前导入的模块）</p>
<p>就算在修改已经导入的模块里面的代码对运行结果也没影响。</p>
<h4 id="6-py文件区分两种用途：模块与脚本"><a href="#6-py文件区分两种用途：模块与脚本" class="headerlink" title="6 py文件区分两种用途：模块与脚本"></a>6 py文件区分两种用途：模块与脚本</h4><ol>
<li>脚本，一个文件就是整个程序，用来被执行</li>
<li>模块，文件中存放着一堆功能，用来被导入使用</li>
</ol>
<p>python内置了全局变量<strong>name</strong>,</p>
<ul>
<li>当文件被当做脚本执行时：<strong>name</strong>等于’<strong>main</strong>‘</li>
<li>当文件被当做模块导入时：<strong>name</strong>等于模块名</li>
</ul>
<p>作用：用来控制.py文件在不同的应用场景下执行不同的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h4 id="7-模块搜索路径"><a href="#7-模块搜索路径" class="headerlink" title="7 模块搜索路径"></a>7 模块搜索路径</h4><p>模块的查找顺序是：内存中已经加载的模块–》内置模块–》sys.path路径中包含的模块</p>
<p>详细：在第一次导入某个模块式，会先检查该模块是否已经被加载到内存中（当前执行文件的名称空对应的内存），如果有则直接引用；</p>
<p>ps:python解释器会在启动时自动加载一些模块到内存中，可以使用sys.module查看。</p>
<p>如果在内存中没有，解释器会查找同名的内建模块；</p>
<p>如果还没有则去sys.path给出的目录列表中查找。</p>
<p>了解：sys.path的初始化的值来自于：</p>
<p><strong>The directory containing the input script (or the current diretory whrn no files is specified).</strong></p>
<p><strong>PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</strong></p>
<p><strong>The installation-dependent default.</strong></p>
<p>在初始化后，python程序可以修改sys.path，路径放在前面的优于标准库被加载。</p>
<p>搜索时按照sys.path中从左到右的顺序查找，位于前面的优先被查找，sys.path中还可能包含.zip归档文件和.egg文件，python会把.zip归档文件当成一个目录去处理。</p>
<p>.egg文件是setuptools创建的包，这是按照第三方python库和扩展时使用的一种常见格式，.egg文件实际上只是添加了额外元数据（如版本号，依赖项等）的.zip文件。</p>
<p><strong>只能从.zip文件中导入.py，.pyc等文件。使用C编写的共享库和扩展块无法直接从.zip文件中加载（此时setuptools等打包系统有时能提供一种规避方法），且从.zip中加载文件不会创建.pyc或者.pyo文件，因此一定要事先创建他们，来避免加载模块是性能下降。</strong></p>
<h4 id="8-编译python文件"><a href="#8-编译python文件" class="headerlink" title="8 编译python文件"></a>8 编译python文件</h4><p>为了提高加载模块的速度，强调强调强调：提高的是加载速度而绝非运行速度。python解释器会在<strong>pycache</strong>目录中下缓存每个模块编译后的版本，格式为：module.version.pyc。通常会包含python的版本号。例如，在CPython3.3版本下，spam.py模块会被缓存成<strong>pycache</strong>/spam.cpython-33.pyc。这种命名规范保证了编译后的结果多版本共存。</p>
<p>Python检查源文件的修改时间与编译的版本进行对比，如果过期就需要重新编译。这是完全自动的过程。并且编译的模块是平台独立的，所以相同的库可以在不同的架构的系统之间共享，即pyc使一种跨平台的字节码，类似于JAVA火.NET,是由python虚拟机来执行的，但是pyc的内容跟python的版本相关，不同的版本编译后的pyc文件不同，2.5编译的pyc文件不能到3.5上执行，并且pyc文件是可以反编译的，因而它的出现仅仅是用来提升模块的加载速度的，不是用来加密的。</p>
<h3 id="五-包"><a href="#五-包" class="headerlink" title="五 包"></a>五 包</h3><h4 id="1-什么是包？"><a href="#1-什么是包？" class="headerlink" title="1 什么是包？"></a>1 什么是包？</h4><p>包是一种通过’.模块名’来组织python模块名称的方式。</p>
<p><strong>具体的：包就是一个包含有<strong>init</strong>.py文件的文件夹，所以其实我们创建包的目的就是为了用文件夹将文件/模块组织起来。</strong></p>
<h4 id="2-为何使用包？"><a href="#2-为何使用包？" class="headerlink" title="2 为何使用包？"></a>2 为何使用包？</h4><p>包的本质就是一个文件夹，文件夹的功能就是将同类型的文件组织起来。</p>
<p>其实使用包的原因和使用模块的原因是一样的，都是为了提高程序的结构性和可维护性。</p>
<h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h4><ol>
<li>关于包相关的导入语句也分为import和from … import …两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</li>
<li><p>import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的<strong>init</strong>.py，导入包本质就是在导入该文件</p>
</li>
<li><p>包A和包B下如果有同名模块也不会冲突，因为他们的名称空间是独立的。</p>
</li>
</ol>
<h4 id="4-绝对导入和相对导入"><a href="#4-绝对导入和相对导入" class="headerlink" title="4 绝对导入和相对导入"></a>4 绝对导入和相对导入</h4><p>包是写给别人用的，然而在包的内部也会有彼此之间互相导入的需求，这时候就有绝对导入和相对导入两种方式：</p>
<p>绝对导入：以包作为起点</p>
<p>相对导入：以.或..的方式作为起点（只能在一个包中使用，不能用于不同目录内）</p>
<p>**包以及包所包含的模块都是用来被导入的，而不是直接执行的。而环境变量都是以执行文件为准。</p>
<h4 id="5-绝对导入与相对导入总结"><a href="#5-绝对导入与相对导入总结" class="headerlink" title="5 绝对导入与相对导入总结"></a>5 绝对导入与相对导入总结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绝对导入与相对导入</span><br><span class="line"></span><br><span class="line"># 绝对导入: 以执行文件的sys.path为起始点开始导入,称之为绝对导入</span><br><span class="line">#        优点: 执行文件与被导入的模块中都可以使用</span><br><span class="line">#        缺点: 所有导入都是以sys.path为起始点,导入麻烦</span><br><span class="line"></span><br><span class="line"># 相对导入: 参照当前所在文件的文件夹为起始开始查找,称之为相对导入</span><br><span class="line">#        符号: .代表当前所在文件的文件加,..代表上一级文件夹,...代表上一级的上一级文件夹</span><br><span class="line">#        优点: 导入更加简单</span><br><span class="line">#        缺点: 只能在导入包中的模块时才能使用</span><br><span class="line">　　　　  #注意:</span><br><span class="line">　　　　　　　　1. 相对导入只能用于包内部模块之间的相互导入,导入者与被导入者都必须存在于一个包内</span><br><span class="line">　　　　　　　　2. attempted relative import beyond top-level package # 试图在顶级包之外使用相对导入是错误的,言外之意,必须在顶级包内使用相对导入,每增加一个.代表跳到上一级文件夹,而上一级不应该超出顶级包</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>类的三大特性之封装</title>
    <url>/2018/10/24/%E7%B1%BB%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p><strong>封装三问</strong></p>
<ol>
<li>什么是封装?</li>
</ol>
<p>装指的是把属性装进一个容器</p>
<p>封指的是隐藏的意思,但是这种隐藏是对外不对内的</p>
<ol start="2">
<li>为什么要封装?</li>
</ol>
<p>封装不是单纯意义的隐藏;</p>
<p>​    封装数据的目的:将数据属性封装起来,类外部的使用就无法直接操作该数据属性</p>
<p>​    想要在内部操作属性的话需要在类内部提供一个接口给使用者,类的设计者可以在接口之上附加任意逻辑,从而严格控制使用者对属性的操作</p>
<p>​    封装函数属性的目的:隔离复杂度</p>
<ol start="3">
<li>如何封装?</li>
</ol>
<p>只需要在属性前加上__开头,该属性就会被隐藏起来,该隐藏具备的特点:</p>
<pre><code>1. 只是一种语法意义上的变形,即__开头的属性会在检测语法时发生变形,变为\_类名\_\_属性名;
2. 这种隐藏是对外不对内的,因为在类内部检测语法时所有的代码统一都发生变形;
3. 这种变形只在检测语法时发生一次,在类定义之后新增的__开头的属性并不会发生变形;
4. 如果父类不想让子类覆盖自己的属性,可以在属性前加上__开头.
</code></pre><h1 id="一-封装的意图"><a href="#一-封装的意图" class="headerlink" title="一 封装的意图"></a>一 封装的意图</h1><h3 id="一-封装数据属性的真实意图"><a href="#一-封装数据属性的真实意图" class="headerlink" title="一 封装数据属性的真实意图"></a>一 封装数据属性的真实意图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># @Time    : 2018/10/24 6:39 PM</span></span><br><span class="line"><span class="comment"># @Author  : MUSIBII</span></span><br><span class="line"><span class="comment"># @Email   : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># @File    : 封装数据属性的真实意图.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name: %s age:%s'</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span><span class="params">(self, new_name, new_age)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(new_name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">'名字必须是str类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> type(new_age) <span class="keyword">is</span> <span class="keyword">not</span> int:</span><br><span class="line">            print(<span class="string">'年龄必须是int类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.__name = new_name</span><br><span class="line">        self.__age = new_age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__name</span><br><span class="line">        <span class="keyword">del</span> self.__age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">'musibii'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">obj.tell_info()</span><br><span class="line">obj.set_info(<span class="string">'maffia'</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure>
<h3 id="二-封装函数属性的真实意图"><a href="#二-封装函数属性的真实意图" class="headerlink" title="二 封装函数属性的真实意图"></a>二 封装函数属性的真实意图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># @Time    : 2018/10/24 6:53 PM</span></span><br><span class="line"><span class="comment"># @Author  : MUSIBII</span></span><br><span class="line"><span class="comment"># @Email   : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># @File    : 封装函数属性的真实意图.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATM</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__card</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'插卡'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__auth</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'用户认证'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__input</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'输入提取金额'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__print_bill</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'打印账单'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__take_money</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'取款'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__card()</span><br><span class="line">        self.__auth()</span><br><span class="line">        self.__input()</span><br><span class="line">        self.__print_bill()</span><br><span class="line">        self.__take_money()</span><br><span class="line"></span><br><span class="line">a = ATM()</span><br><span class="line">a.withdraw()</span><br></pre></td></tr></table></figure>
<p>我们自己设置的私有属性并不是不让用,而是为了减少复杂度以及保护数据,在类里面定义的私有属性应该怎么访问呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># @Time    : 2018/10/24 6:39 PM</span></span><br><span class="line"><span class="comment"># @Author  : MUSIBII</span></span><br><span class="line"><span class="comment"># @Email   : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># @File    : 封装数据属性的真实意图.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, x)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name: %s age:%s'</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span><span class="params">(self, new_name, new_age)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(new_name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">'名字必须是str类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> type(new_age) <span class="keyword">is</span> <span class="keyword">not</span> int:</span><br><span class="line">            print(<span class="string">'年龄必须是int类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.__name = new_name</span><br><span class="line">        self.__age = new_age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__name</span><br><span class="line">        <span class="keyword">del</span> self.__age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">'musibii'</span>, <span class="number">18</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">obj.tell_info()</span><br><span class="line">obj.set_info(<span class="string">'maffia'</span>, <span class="number">23</span>)</span><br><span class="line">print(obj.x)</span><br><span class="line">print(obj.__dict__)</span><br><span class="line">print(obj._People__name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"></span><br><span class="line">name: musibii age:<span class="number">18</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line">&#123;<span class="string">'_People__name'</span>: <span class="string">'maffia'</span>, <span class="string">'_People__age'</span>: <span class="number">23</span>, <span class="string">'x'</span>: <span class="number">13</span>&#125;</span><br><span class="line">maffia</span><br></pre></td></tr></table></figure>
<p>虽然通过直接访问没用,查看对象的名称空间可以看到,原本的__name变形为了_People__name,那么可以通过这个名字访问到对象中的私有属性,同理函数也是一样的方法访问.</p>
<p>这种变形需要注意的问题是:</p>
<ol>
<li>这种机制并没有真正意义上限制我们从外部直接访问属性,知道了类名和属性名就可以拼出名字:_类名__属性,然后就可以访问了,如a._A__N,即这种操作并不是严格意义上的限制外部访问,仅仅只是一种语法意义上的变形,主要用来限制外部的直接访问;</li>
<li>变形过程只在类的定义时发生一次,在定义后的赋值操作,不会变形.</li>
<li>在继承中,父类如果不想让子类覆盖自己的方法,可以将方法定义为私有属性.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子类继承父类的非私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from A'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fa()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from B'</span>)</span><br><span class="line"></span><br><span class="line">b=B()</span><br><span class="line">b.test()</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> B</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类和父类具有同名的私有属性,那么在父类调用私有属性的话就以父类的为准</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span><span class="params">(self)</span>:</span> <span class="comment">#在定义时就变形为_A__fa</span></span><br><span class="line">        print(<span class="string">'from A'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__fa() <span class="comment">#只会与自己所在的类为准,即调用_A__fa</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from B'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.test()</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="keyword">from</span> A</span><br></pre></td></tr></table></figure>
<h1 id="二-封装不是单纯意义的隐藏"><a href="#二-封装不是单纯意义的隐藏" class="headerlink" title="二 封装不是单纯意义的隐藏"></a>二 封装不是单纯意义的隐藏</h1><p>封装的真谛在于<strong>明确的区分内外</strong>,封装的属性可以在内部直接使用,而不能被外部直接使用,然而定义的属性的目的终归是要使用的,外部要想用类隐藏的属性,需要内部提供接口,让外部能够间接地用到我们隐藏起来的属性,那这么做的意义何在?</p>
<ol>
<li>封装数据:</li>
</ol>
<p>将数据隐藏起来不是目的.隐藏起来然后对外提供操作该数据的接口,然后我们可以在接口附加上对该数据操作的限制,以此完成对数据属性操作的严格控制.</p>
<ol start="2">
<li>封装方法:</li>
</ol>
<p>封装方法的目的是隔离复杂度,在编程语言里,对外提供的接口(接口可以理解为一个入口),可以是函数,成为接口函数,这与接口的概念不一样,接口代表一组接口函数的集合体.</p>
<ol start="3">
<li>了解</li>
</ol>
<p>python并不会真的阻止你访问私有属性,模块也遵循这种约定,如果模块名以单下划线开头,那么from <em> import </em>时不能被导入,但是你from module import _private_module依然可以导入.</p>
<h3 id="三-特性属性"><a href="#三-特性属性" class="headerlink" title="三 特性属性"></a>三 特性属性</h3><p>什么是特性?</p>
<p>property是一种特殊的属性,访问它时会执行一段功能(函数)然后返回值.类中可能会有某些函数运行后的值是特定的或者就单纯的计算出某种特定的值,那么这种情况下,可以把该函数变为特性.</p>
<p>为什么要用property?</p>
<p>将一个类的函数定义为特性后,对象再去使用的时候,可以是访问数据属性一样访问,就好像装饰器一样,其实你根本不知道外面做了什么操作,而property也是一个装饰器.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, weight, height)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line">        self.height = height</span><br><span class="line">        </span><br><span class="line">   	<span class="comment"># @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height ** <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">obj = People(<span class="string">'musibii'</span>, <span class="number">60</span>, <span class="number">1.73</span>)</span><br><span class="line">obj.weight = <span class="number">65</span></span><br><span class="line">print(obj.bmi())</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">21.71806608974573</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把注释去掉后,调用方法bmi()就可以像访问属性一样进行访问了.</span></span><br><span class="line">print(obj.bmi)</span><br></pre></td></tr></table></figure>
<p>另外一种方法也可以实现这种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">yyy_name</span><span class="params">(self, new_name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(new_name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">'名字必须是str类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.__name = new_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zzz_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xxx_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;name:%s&gt;'</span> % self.__name</span><br><span class="line"></span><br><span class="line">    name = property(xxx_name, yyy_name, zzz_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">'musibii'</span>)</span><br><span class="line">print(obj.name)</span><br></pre></td></tr></table></figure>
<p>这种方法稍显奇怪,其实作用是一样的,但是这种方法有一个需要注意的地方,那就是property类的__init__方法的参数是位置参数,所以严格按照每个方法的位置传值.查看__init__源码可得:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwjlrxnusij31fi0sejwg.jpg" alt></p>
<p>想要对该方法操作的数据属性实现删除,修改,查看是和property装饰器结合起来使用的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;name:%s&gt;'</span> %self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self,new_name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(new_name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">'名字必须是str类型'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__name=new_name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__name</span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">'musibii'</span>)</span><br><span class="line">print(obj.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj.name=123</span></span><br><span class="line"><span class="comment"># print(obj.name)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj.name</span><br><span class="line">print(obj.__dict__)</span><br></pre></td></tr></table></figure>
<p>这样才真正实现了在不改变操作数据形式的基础上修改了数据属性的值.</p>
<p>经过本篇博客可知:封装其实是更高层次的一个函数形式,我觉得类同理,开辟自己的名称空间,减少代码的耦合性,更一步说,操作数据就是操作内存中的数据,其实在内存中有什么函数,类和对象吗?以我现在的知识觉得应该没有,内存中就是一堆冷冰冰的数据,那么除了产生新的对象(可变不可变),其实内存中的值得内存地址都没有变,只是一一个指向引用关系,其实python中也有指针概念的,只是没有c那样需要自己维护罢了,python的变量名和变量名指向的对象的关系就是房子和门牌号的关系,有名字便于找到房子,那么没有名字的房子不像现实生活中还可以存在,没有名字对该房子的引用,那么python的内存管理机制就会把该房子摧毁以便建下一个房子.</p>
<p>在python中的类和该类产生的对象是如何保存的呢?</p>
<p>类以及类中的方法在内存中只有一份,而通过类创建的每一个对象都需要在内存中保存一份,那么对象保存的是什么呢?其实就只保存了房子的地址(也就是类对象指针),该值指向当前对象的类.</p>
<p>当通过对象执行方法时,过程如下:</p>
<ol>
<li>根据当前对象中的类对象指针,找到类中的方法;</li>
<li>将对象当做参数传给方法的第一个参数(self),这个self就是高度封装的一个对象(和类的特性封装不一样),一个self骑士可以容纳万物,只要内存可以装得下.</li>
</ol>
<p>python的面向对象里面的封装思想太厉害了.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>类的三大特性之继承</title>
    <url>/2018/10/23/%E7%B1%BB%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="一-初识继承"><a href="#一-初识继承" class="headerlink" title="一 初识继承"></a>一 初识继承</h1><h3 id="一-什么是继承"><a href="#一-什么是继承" class="headerlink" title="一 什么是继承?"></a>一 什么是继承?</h3><p>继承是一种创建新类的方式,新建的类可以继承一个或多个父类(python支持多继承),父类又可成为基类或超类,新建的类称为派生类或子类.</p>
<p>子类会继承父类的属性,从而解决代码重用问题.</p>
<p>python中类的继承分为:单继承和多继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span><span class="params">(Parent1)</span>:</span> <span class="comment"># 单继承,基类是Parent1,派生类是Sub</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span><span class="params">(Parent1,Parent2)</span>:</span> <span class="comment"># 多继承,用逗号分隔开多个继承的类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>查看继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(sub2.__bases__) <span class="comment"># __base__只查看继承的第一个子类,__bases__则是查看所有继承的父类</span></span><br></pre></td></tr></table></figure>
<p><strong>经典类与新式类</strong></p>
<ol>
<li>只有在python2中才分新式类和经典类,python3统一都是新式类</li>
<li>在python2中,没有显式的继承object类的类,类与该类的子类,都是经典类</li>
<li>在python2中,显式的声明继承object的类,类与该类的子类,都是新式类</li>
<li>在python3中,无论是否继承object,都默认继承object,即python3中所有的类均为新式类</li>
</ol>
<p><strong>python3中如果没有指定基类,python的类会默认继承object类,object类是所有python类的基类,它内置了一些方法.</strong></p>
<h3 id="二-继承与抽象"><a href="#二-继承与抽象" class="headerlink" title="二 继承与抽象"></a>二 继承与抽象</h3><p>继承描述的是子类与父类的继承关系,想要找出这种关系,必须先抽象再继承.</p>
<p><strong>抽象:即抽取类似或者相似的部分</strong></p>
<p><strong>继承:是基于抽象的结果,通过编程语言去实现它,肯定是先经历抽象这个过程,才能通过继承的方式去表达出抽象的结构</strong></p>
<h1 id="二-继承的使用场景"><a href="#二-继承的使用场景" class="headerlink" title="二 继承的使用场景"></a>二 继承的使用场景</h1><h3 id="三-继承与重用性"><a href="#三-继承与重用性" class="headerlink" title="三 继承与重用性"></a>三 继承与重用性</h3><p>在开发程序的过程中,如果我们首先定义了一个A类,然后又想新建一个B类,但是B类的大部分内容与A类代码相同时,可以通过继承的方法来实现代码重用.</p>
<p>B继承A会获得A的所有属性(数据属性与函数属性),所以B中没有而A中具有的属性可以被B用来使用,而B中有的就使用自己的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">123</span></span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A, func1'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A, func2'</span>)</span><br><span class="line">        self.func1()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    a = <span class="number">134</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B, func1'</span>)</span><br><span class="line">        </span><br><span class="line">b = B()</span><br><span class="line">print(b.a)</span><br><span class="line">b.func2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">123</span> <span class="comment"># A为B的父类,在继承的时候会首先执行A类中的代码</span></span><br><span class="line"><span class="number">134</span></span><br><span class="line">A, func2</span><br><span class="line">B, func1</span><br></pre></td></tr></table></figure>
<h3 id="四-派生类"><a href="#四-派生类" class="headerlink" title="四 派生类"></a>四 派生类</h3><p>虽然子类是继承了父类的的属性,但是子类也可以添加自己新的属性或者对子类生成的对象定义自己的属性(不会影响到父类),需要注意的是,一旦重新定义了自己的属性且与父类同名时,那么调用新的属性时以子类的为准.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">123</span></span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A, func1'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A, func2'</span>)</span><br><span class="line">        self.func1()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    a = <span class="number">134</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B, func1'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B, func3'</span>)</span><br></pre></td></tr></table></figure>
<p>B定义了自己新的属性func3,而且该函数和A类没有关系.</p>
<h3 id="五-组合与重用性"><a href="#五-组合与重用性" class="headerlink" title="五 组合与重用性"></a>五 组合与重用性</h3><p>软件重用的重要方式除了继承之外还有另外一种方式,即:组合</p>
<p>组合指的是,在一个类中以另外一个类的对象作为数据属性,称为类的组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Equip</span>:</span> <span class="comment">#武器装备类</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">fire</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">'release Fire skill'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Riven</span>:</span> <span class="comment">#英雄Riven的类,一个英雄需要有装备,因而需要组合Equip类</span></span><br><span class="line">	camp=<span class="string">'Noxus'</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,nickname)</span>:</span></span><br><span class="line">		self.nickname=nickname</span><br><span class="line">		self.equip=Equip() <span class="comment">#用Equip类产生一个装备,赋值给实例的equip属性 </span></span><br><span class="line">r1=Riven(<span class="string">'锐雯雯'</span>)</span><br><span class="line">r1.equip.fire() <span class="comment">#可以使用组合的类产生的对象所持有的方法</span></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">release Fire skill</span><br></pre></td></tr></table></figure>
<p>组合与继承都是有效的利用已有类的资源的重要方式.但是二者的概念和使用场景皆不同.</p>
<ol>
<li>继承的方式</li>
</ol>
<p>通过继承建立了派生类和父类之间的关系,它是一种从属关系.</p>
<p>当类之间有很多相同的功能,提取这些共同的功能做成基类,用继承比较好</p>
<ol start="2">
<li>组合的方式</li>
</ol>
<p>用组合的方式建立了类与组合的类之间的关系,它是一种附带关系.</p>
<h3 id="六-抽象类"><a href="#六-抽象类" class="headerlink" title="六 抽象类"></a>六 抽象类</h3><ol>
<li>什么是抽象类?</li>
</ol>
<p>与java一样,python也有抽象类的概念但是同样需要借助模块实现,抽象类是一个特殊的类,它的特殊之处在于只能被继承,不能被实例化.</p>
<ol start="2">
<li>为什么要有抽象类?</li>
</ol>
<p>如果说类是从一堆对象中抽取相同的内容得来的,那么抽象类就是从一堆类中抽取相同的内容而来的,内容包括数据属性和函数属性.</p>
<p>从设计角度看,抽象类与普通类的不同之处在于:抽象类中只能抽象方法(没有实现功能),该类不能被实例化,只能被继承,且子类必须实现抽象方法.</p>
<h1 id="三-继承实现的原理"><a href="#三-继承实现的原理" class="headerlink" title="三 继承实现的原理"></a>三 继承实现的原理</h1><h3 id="一-继承顺序"><a href="#一-继承顺序" class="headerlink" title="一 继承顺序"></a>一 继承顺序</h3><p>在python中可以同时继承多个父类,如A(B,C,D)</p>
<p>如果继承关系为非菱形结构,则会按照先找B这一条分支,然后再找C这一条分支,最后找D这一条分支的顺序直到找到要找的属性,找完了还没有的话会报属性不存在的错误.</p>
<p>如果继承关系为菱形结构,那么属性的查找方式有两种,分别是:深度优先和广度优先.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwiei8x37cj30fc0alt98.jpg" alt></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwieiknfgrj30ex0abmxq.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from C'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from D'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'from E'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span><span class="params">(D,E)</span>:</span></span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print('from F')</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">f1=F()</span><br><span class="line">f1.test()</span><br><span class="line">print(F.__mro__) <span class="comment">#只有新式才有这个属性可以查看线性列表，经典类没有这个属性</span></span><br><span class="line"><span class="comment">#新式类继承顺序:F-&gt;D-&gt;B-&gt;E-&gt;C-&gt;A</span></span><br><span class="line"><span class="comment">#经典类继承顺序:F-&gt;D-&gt;B-&gt;A-&gt;E-&gt;C</span></span><br><span class="line"><span class="comment">#python3中统一都是新式类</span></span><br><span class="line"><span class="comment">#pyhon2中才分新式类与经典类</span></span><br></pre></td></tr></table></figure>
<h3 id="二-继承原理"><a href="#二-继承原理" class="headerlink" title="二 继承原理"></a>二 继承原理</h3><p>python是如何实现继承并查找属性的,对于你定义的每一个类,python会计算出一个方法解析顺序(MRO)列表,这个MRO列表就是一个简单的所有基类的线性顺序列表.</p>
<p>为了实现继承,python会在MRO列表中从左到右开始查找基类,直到找到第一个匹配这个属性的类为止.而这个MRO列表的构造是通过一个C3线性化算法来实现的.它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<ol>
<li>子类会先于父类被检查</li>
<li>多个父类会根据它们在列表中的顺序被检查</li>
<li>如果对下一个类存在两个合法的选择,选择第一个父类</li>
</ol>
<p>查找属性时,即使没有直接继承关系,也会按照MRO列表继续往后查找,当使用super()函数时,python会在MRO列表上继续搜索下一个类.只要每个重定义的方法统一使用super()并只调用它一次,那么控制流最终会遍历完整个MRO列表,每个方法也只会被调用一次</p>
<p><strong>注意:使用super调用的所有属性,都是从MRO列表当前的位置往后找,不要在意继承关系,看MRO列表就好</strong></p>
<h3 id="三-super的使用"><a href="#三-super的使用" class="headerlink" title="三 super的使用"></a>三 super的使用</h3><p>BaseTher类的创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># @Time    : 2018/10/23 11:40 PM</span></span><br><span class="line"><span class="comment"># @Author  : MUSIBII</span></span><br><span class="line"><span class="comment"># @Email   : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># @File    : father_type.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line"><span class="keyword">import</span> db_file</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">	11、抽象老师类与学生类得到父类，用继承的方式减少代码冗余</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseTher</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.time = time.time()</span><br><span class="line">        <span class="comment"># self.id_hash = self.create_id()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建唯一的id</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># timenow = str(time.time()).split('.')[0]</span></span><br><span class="line">        key = self.name + str(self.age) + self.gender + str(self.time)</span><br><span class="line">        m = hashlib.md5(key.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        self.id_hash = m.hexdigest()</span><br><span class="line">        <span class="comment"># print(m.hexdigest())</span></span><br><span class="line">        <span class="comment"># return m.hexdigest()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.get_obj_by_id()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            print(<span class="string">'%-10s: %-20s'</span> % (item, data[item]))</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将信息序列化后保存到文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        user_data = &#123;<span class="string">'name'</span>: self.name, <span class="string">'age'</span>: self.age, <span class="string">'gender'</span>: self.gender, <span class="string">'id_hash'</span>: self.id_hash&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db_file/%s'</span> % self.id_hash, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(user_data, f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过id反序列化信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_obj_by_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db_file/%s'</span> % self.id_hash, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> pickle.load(f)</span><br></pre></td></tr></table></figure>
<p>子类通过super().<strong>init</strong>(*args)使用父类的<strong>init</strong>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(BaseTher)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender, level, salary)</span>:</span></span><br><span class="line">        super().__init__(name, age, gender)</span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line">        <span class="comment"># self.id_hash = self.create_id()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建唯一的id</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># timenow = str(time.time()).split('.')[0]</span></span><br><span class="line">        key = self.name + str(self.age) + self.gender + str(self.level) + str(self.salary)</span><br><span class="line">        m = hashlib.md5(key.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        self.id_hash = m.hexdigest()</span><br><span class="line">        <span class="comment"># print(m.hexdigest())</span></span><br><span class="line">        <span class="comment"># return m.hexdigest()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def tell_info(self):</span></span><br><span class="line">    <span class="comment">#     data = self.get_obj_by_id()</span></span><br><span class="line">    <span class="comment">#     for item in data:</span></span><br><span class="line">    <span class="comment">#         print('%-10s: %-20s' % (item, data[item]))</span></span><br><span class="line">    <span class="comment">#     # print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将老师信息序列化后保存到文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        user_data = &#123;<span class="string">'name'</span>: self.name, <span class="string">'age'</span>: self.age, <span class="string">'gender'</span>: self.gender, <span class="string">'level'</span>: self.level, <span class="string">'salary'</span>: self.salary, <span class="string">'id_hash'</span>: self.id_hash&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db_file/%s'</span>%self.id_hash, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(user_data, f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 通过id反序列化老师信息</span></span><br><span class="line">    <span class="comment"># def get_obj_by_id(self):</span></span><br><span class="line">    <span class="comment">#     with open('db_file/%s'%self.id_hash, 'rb') as f:</span></span><br><span class="line">    <span class="comment">#         return pickle.load(f)</span></span><br></pre></td></tr></table></figure>
<p>在Python3中,super()括号里面可以为空,不过也可以写成super(本类的名字,self)</p>
<p>像上面的<strong>super().<strong>init</strong>(name, age, gender),</strong></p>
<p>可以写成<strong>super(Teacher,self).<strong>init</strong>(name, age, gender)</strong></p>
<h3 id="四-组合的使用"><a href="#四-组合的使用" class="headerlink" title="四 组合的使用"></a>四 组合的使用</h3><ol>
<li>什么是组合?</li>
</ol>
<p>一个对象的属性是来自另外一个类的对象,称之为组合</p>
<ol start="2">
<li>为何用组合?</li>
</ol>
<p>组合也是用来解决类与类代码冗余的问题</p>
<ol start="3">
<li>组合的用法如下代码:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># @Time    : 2018/10/24 10:27 AM</span></span><br><span class="line"><span class="comment"># @Author  : MUSIBII</span></span><br><span class="line"><span class="comment"># @Email   : shaozuanzuan@gmail.com</span></span><br><span class="line"><span class="comment"># @File    : zuhe.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">'Oldboy'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span><span class="params">(OldboyPeople)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        super().__init__(name, age, gender)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s is choosing course'</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span><span class="params">(OldboyPeople)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender, level, salary)</span>:</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, gender)</span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, stu, num)</span>:</span></span><br><span class="line">        stu.num = num</span><br><span class="line">        print(<span class="string">'老师%s给学生%s打分%s'</span> % (self.name, stu.name, num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, course_name, course_price, course_period)</span>:</span></span><br><span class="line">        self.course_name = course_name</span><br><span class="line">        self.course_price = course_price</span><br><span class="line">        self.course_period = course_period</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'课程名:&lt;%s&gt; 价钱:[%s] 周期:[%s]'</span> % (self.course_name, self.course_price, self.course_period))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">course = Course(<span class="string">'python'</span>, <span class="number">3000</span>, <span class="string">'5months'</span>)</span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">'musibii'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">stu1.course = course</span><br><span class="line"></span><br><span class="line">print(stu1)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程（一）</title>
    <url>/2018/11/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="一-客户端-服务端架构"><a href="#一-客户端-服务端架构" class="headerlink" title="一 客户端/服务端架构"></a>一 客户端/服务端架构</h2><ol>
<li><p>硬件 C/S 架构</p>
</li>
<li><p>软件 C/S 架构</p>
<p>互联网处处是 C/S 架构的</p>
<p>如一个网站就是服务端,浏览器是客户端( B/S 架构)</p>
</li>
<li><p>服务端需要遵循的原则:</p>
<ol>
<li>服务端与客户端都需要有惟一的地址,但是服务端的地址必须固定/绑定</li>
<li>对外一直提供服务,需要稳定运行</li>
<li>服务端需要支持并发</li>
</ol>
</li>
<li><p>网络</p>
<p>网络建立的目的是为了数据交互(通信)</p>
<p>如何实现通信:</p>
<pre><code>1. 建立好底层的物理连接介质
2. 有一套统一的通信标准,称之为互联网协议
</code></pre></li>
<li><p>互联网协议:就是计算机界的标准语言</p>
</li>
</ol>
<h2 id="二-七层模型总览"><a href="#二-七层模型总览" class="headerlink" title="二 七层模型总览"></a>二 七层模型总览</h2><p>互联网的实现,总共可以分为七层.每一层都靠下一层的支持.用户接触的是第七层,也就是应用层.想要理解互联网协议,必须从最下层开始,自下而上理解每一层的功能.</p>
<p>OSI 模型可以分为七层,五层,四层,其实都是一个道理,只不过合并了几层而已.从下而上分别为:物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwyjnukpjqj30ke09ojsr.jpg" alt></p>
<p>每层运行常见的物理设备:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwyjp5g9n1j30ik04vgmf.jpg" alt></p>
<h2 id="三-tcp-IP-五层模型理解"><a href="#三-tcp-IP-五层模型理解" class="headerlink" title="三 tcp/IP 五层模型理解"></a>三 tcp/IP 五层模型理解</h2><p>一般讲应用层,表示层,会话层并做应用层,从 tcp/IP 五层协议的角度来阐述每层的由来和功能,搞清楚了每层的主要协议也就理解了互联网通信的原理.</p>
<p>每层都运行特定的协议,越往上越靠近用户,越往下越靠近硬件.</p>
<h3 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一 物理层"></a>一 物理层</h3><p>物理层也可以称之为实体层.电脑想要互相通信,第一件事先要把电脑连起来,可以用光缆,电缆等方式实现通信.这就叫<strong>实体层</strong>,它就是把电脑连接起来的物理手段.它主要规定了网络的一些电器特性.它的功能室基于电器特性发送高低电压(电信号),高电压对应数字1,低电压对应数字0.</p>
<h3 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二 数据链路层"></a>二 数据链路层</h3><p>物理层单纯的传输电信号0和1没有任何意义,必须规定电信号多少位一组,每组什么意思.</p>
<p>数据链路层的功能:定义了电信号的分组方式,这就是数据链路层的功能,它在物理层的上方,确定了0和1的分组方式.</p>
<h4 id="1-以太网协议"><a href="#1-以太网协议" class="headerlink" title="1 以太网协议"></a>1 以太网协议</h4><p>早期的时候各个公司都有自己的分组方式,后来形成了统一的标准,即以太网协议 Ethernet.</p>
<p>Ethernet 规定</p>
<ul>
<li>一组电信号构成一个数据包,也叫数据帧</li>
<li>每一组数据帧分成:报头 head 和数据 data 两部分</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwyk0i1snvj30i2034jrh.jpg" alt></p>
<p>报头包含数据包的一些说明项,比如发送者的源地址,接受者的源地址以及数据类型等等.</p>
<ul>
<li>发送者/源地址: 6个字节</li>
<li>接受者/目标地址: 6个字节</li>
<li>数据类型: 6个字节</li>
</ul>
<p>数据则是数据包的具体内容</p>
<ul>
<li>数据包最短为46字节,最长为1500字节</li>
</ul>
<p>所以一个数据帧的长度最短为64字节,最长1518字节,超过最大限制就分片发送.</p>
<h4 id="2-mac-地址"><a href="#2-mac-地址" class="headerlink" title="2 mac 地址"></a>2 mac 地址</h4><p>head 中包含的源地址和目标地址的由来: Ethernet 规定接入 Internet 的设备都必须具备网卡,发送端和接收端的地址便是指网卡的地址,即MAC 地址.</p>
<p>mac 地址:每块网卡出厂时都被烧制上世界上一个惟一的MAC 地址,长度为48位2进制,通常由12位16进制数表示(前六位是厂商编号,后六位是流水线号)</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwykh847llj31101akdwu.jpg" alt></p>
<p>装了好多次虚拟机,我现在也不知道那个是我的了…</p>
<h4 id="3-广播"><a href="#3-广播" class="headerlink" title="3 广播"></a>3 广播</h4><p>定义MAC 地址只是第一步,在一部电脑第一次接入局域网的时候,是怎么知道它的MAC 地址的呢.在局域网内通信都是通过MAC 地址来发包收包的,只要知道了对方的MAC 地址才可以互相通信.这就要靠ARP(addres resolution protocol) 协议来获取MAC 地址了,那么 arp 协议是如何解析出对方的MAC 地址呢?</p>
<p>这里等到了网络层再来解释.</p>
<p>注意:以太网数据包必须知道接收方的MAC 地址,才能发包.</p>
<p>那么在同一个局域网内,知道了对方的MAC 地址,系统怎样才能把数据包准确送到接收方呢?</p>
<p>以太网采用了一种很’原始’的方式,它并不是直接把数据包发到接收方,而是向局域网内所有的计算机发送,让每台计算机自己拆包后判断自己是否为接收方(前提知道对方MAC 地址)</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwykr499haj30jg0ergn0.jpg" alt></p>
<p>上图中,1号计算机向2号计算机发送一个数据包,局域网内其他的计算机都会收到这个包.他们读取数据包的报头,找到接收方得MAC 地址,然后与自身的MAC 地址相比较,如果两者相同,就接收这个包,做进一步的处理,不相同的话就丢弃这个数据包.这种发送方式叫’广播’.</p>
<p>有了数据包的定义,网卡的MAC 地址,广播的发送方式,数据链路层就可以在同一局域网内的计算机之间传送数据了.</p>
<h3 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三 网络层"></a>三 网络层</h3><h4 id="1-网络层的由来"><a href="#1-网络层的由来" class="headerlink" title="1 网络层的由来"></a>1 网络层的由来</h4><p>以太网协议,依靠MAC 地址发送数据,但这仅仅只能在同一个局域网内发送数据.理论上,依靠MAC 地址,是可以和全球任何一个MAC 地址发送数据的,因为MAC 地址是惟一的.但是这样做有一个致命的缺陷.</p>
<p>以太网依靠广播方式发送数据包,而广播就意味着每个人都要发送一份,那么全球这么多的计算机,在找到对方的MAC 地址之前都要发一份无疑会造成巨大的浪费,而且效率极低,而且局限在发送者的局域网.也就是说,如果两台计算机不在同一个局域网,广播是传不过去的.这种设计是合理的,否则的话互联网上每一台计算机都会收到所有包,那会引起灾难.</p>
<p>互联网可以想象成由无数个局域网组成的一个巨型网络,如果想要跨局域网通信必须找到另一种方式,能够区分哪些MAC 地址属于同一个局域网,哪些不属于同一个局域网.如果是同一个局域网的话,就采用广播发送(如何知道对方的MAC 地址),否则就采用’路由’的方式发送.(‘路由’的意思,就是指如何向不同局域网发送数据包)</p>
<p>这就导致了’网络层’的诞生.它的作用是引进一套新的地址,使得我们能够区分不同的计算机是否属于同一个局域网.这套地址叫做’网络地址’,简称’网址’.</p>
<p>于是,网络层出现以后,每台计算机有了两种地址,一种是MAC 地址,另一种是网络地址.两种地址之间没有任何联系,MAC 地址是绑定到网卡上的,网络地址则是由MAC 服务器分配的,当一台计算机第一次联网时,会向MAC 服务器发送一个包,然后MAC 服务器会分配好网络地址.</p>
<p>网络地址帮助我们确定计算机所在的局域网,MAC 地址则将数据包发送到该局域网中的目标MAC 地址.因此从逻辑上判断,必定是先处理网络地址,然后处理MAC 地址.</p>
<p>可以这样理解,互联网中的通信都是MAC 地址互相发送数据包,而网络地址是为了帮我们确认需要往哪个局域网里面的目标MAC 地址发送数据包,两者缺一不可.</p>
<h4 id="2-IP-协议"><a href="#2-IP-协议" class="headerlink" title="2 IP 协议"></a>2 IP 协议</h4><p>规定网络地址的协议,叫做 IP 协议.它定义的地址,称为 IP 地址.</p>
<p>目前,广泛采用的是 IP 协议第四版,简称 IPV4.这个版本规定,网络地址由32个二进制位组成.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwyls7jodaj312y088425.jpg" alt></p>
<p>可以看出我的 IP 地址为192.168.11.95,习惯上,用四段的十进制数表示 IP 地址,从0.0.0.0到255.255.255.255.</p>
<p>IP 地址一般分为5类:A,B,C,D,E 类, D 和E 类为其他用途的.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwym12dookj30z809ggmu.jpg" alt></p>
<p>可以看粗来 IP 地址是有限的,而且现在的 IPV4 地址已经分完了,以后使用的就是 IPV6了,据说世界上的每一粒沙子都有一个惟一的 IP 地址.</p>
<p>互联网上的每一台计算机,都会分配到一个 IP 地址.这个地址分为两部分,前一部分代表网络,后一部分代表主机.比如, 我的 IP 地址192.168.11.95,这是一个32位的地址,我的网络部分是前面24位192.168.11,那么主机号就是后8位.处于同一个局域网的电脑,它们 IP 地址的网络部分必定是相通的,也就是说192.168.11.95与192.168.11.49处于同一个局域网.</p>
<p>但是我们单纯从 IP 地址是无法判断网络部分的,我为什么知道我的 IP 地址的网络号?其实没有另外一个地址的话我也不知道的.</p>
<p>那么怎样从 IP 地址来判断计算机是否处于同一个局域网呢?这就是另外一个地址的作用了,也就是子网掩码.</p>
<p>所谓子网掩码,就是表示子网络特征的一个参数.它在形式上等同于 IP 地址,也是一个32位二进制数字,它的网络部分全为1,主机部分全部为0.比如我的 IP192.168.11.95,因为我的网络部分为前24位,那么我的子网掩码就是255.255.255.0.</p>
<p>知道了子网掩码,就可以判断,任意两个 IP 地址是否处于同一个局域网.方法是将两个 IP 地址与子网掩码分别进行 AND 运算(两个数位都为1,则为1,否则为0),然后比较结果是或否相同,如果相同,就表明处在同一个局域网,否则就不是,就需要通过路由协议发送数据包.</p>
<p>IP 协议的作用主要有两个:一个是为每一台计算机分配 IP 地址,另一个是和子网掩码结合确定元 IP 与目标 IP 是否处于同一个局域网.</p>
<h4 id="3-IP-数据包"><a href="#3-IP-数据包" class="headerlink" title="3 IP 数据包"></a>3 IP 数据包</h4><p>根据 IP 协议发送的数据,叫做 IP 数据包,不难想象,其中必定包括 IP 地址信息.</p>
<p>但是前面说过.以太网数据包只包含MAC 地址,并没有 IP 地址的位置.那么是否需要修改数据定义在添加一个位置呢?</p>
<p>我们可以直接把 IP 数据包放进以太网数据包的数据部分,因此完全不用修改以太网的规格.这就是互联网分层结构的好处:上层的变动完全不涉及下层的结构.</p>
<p>具体来说, IP 数据包也分为报头和数据两个部分</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwymqivhr5j30i203ot8t.jpg" alt></p>
<p>报头部分主要包括版本,长度, IP 地址等信息,数据部分则是 IP 数据包的具体内容.它放进以太网数据包后,以太网数据包就拥有了两个报头.</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwymrrfhyyj30i703t3yo.jpg" alt></p>
<p>IP 数据包的报头部分的长度为20到60个字节,整个数据包的总长度最大为65535字节.因此,理论上,一个 IP 数据包的数据部分,最长为65515字节,前面说过,以太网数据包的数据部分,最长为1500字节.因此,如果 IP 数据包超过了1500字节,它就需要分割成几个以太网数据包,分开发送.</p>
<h4 id="4-ARP-协议"><a href="#4-ARP-协议" class="headerlink" title="4 ARP 协议"></a>4 ARP 协议</h4><p>从数据链路层和网络层我们知道,想要发送一个数据包,必须知道两个地址,一个是对方的 MAC 地址,另一个是对方的 IP 地址.通常情况下,对方的 IP 地址是已知的,但是不知道对方的 MAC 地址.</p>
<p>所以需要一种机制能够从 IP 地址得到 MAC 地址.</p>
<p>这里可以分为两种情况:第一种情况,如果两台主机不在同一个局域网,那么事实上没办法得到对方的 MAC 地址,只能把数据包传送到两个局域网连接处的网关’ gateway’,让网关去处理.</p>
<p>第二种情况,如果两台主机在同一个局域网,那么可以使用 ARP 协议,得到对方的 MAC 地址. ARP 协议也是发送一个数据包(包含在以太网数据包中),其中包含它索要查询主机的IP 地址,在对方 MAC 地址这个位置,填的是 FF:FF:FF:FF:FF:FF,表示这是一个广播地址.它所在局域网的每一台计算机都会收到这个数据包,从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>
<h3 id="四-传输层"><a href="#四-传输层" class="headerlink" title="四 传输层"></a>四 传输层</h3><h4 id="1-传输层的由来"><a href="#1-传输层的由来" class="headerlink" title="1 传输层的由来"></a>1 传输层的由来</h4><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>
<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>
<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>
<p><strong>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p>
<h4 id="2-UDP-协议"><a href="#2-UDP-协议" class="headerlink" title="2 UDP 协议"></a>2 UDP 协议</h4><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由”报头”和”数据”两部分组成。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwyn9g4puyj30ii042wel.jpg" alt></p>
<p>“报头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwyn9ycqwhj30ha03fwen.jpg" alt></p>
<h4 id="3-TCP-协议"><a href="#3-TCP-协议" class="headerlink" title="3 TCP 协议"></a>3 TCP 协议</h4><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<h3 id="五-应用层"><a href="#五-应用层" class="headerlink" title="五 应用层"></a>五 应用层</h3><p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>“应用层”的作用，就是规定应用程序的数据格式。</strong></p>
<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwynjcrt45j30kp072mxv.jpg" alt></p>
<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的.</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>网络编程（三）</title>
    <url>/2018/11/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%B8%89/</url>
    <content><![CDATA[<p>在之前两篇文章我们已经大概了解了互联网的工作原理,知道了一个数据包的诞生与结束中间经历的过程,那么在这篇博客我们将了解一个稳定可靠地 TCP 连接是怎么产生的,它的数据传送有什么优点和缺点?</p>
<p>该博客将重点介绍 传输层的 TCP 协议建立连接和断开连接的过程. UDP 因为不是可靠的连接所以就不重点介绍了.</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在传输层通常遵循的协议为 TCP 和 UDP协议,并且是基于端口运行的,但是两者为应用层提供不同的服务. TCP 提供的是一种稳定,可靠地字节流服务.</p>
<p>面向连接意味着两个使用 TCP 的应用在数据传送之前需要建立 TCP 连接.这一过程可以理解为打电话,先拨号,等待接通,然后稳定的通信.</p>
<p>那么 UDP 是无连接,不可靠的数据包服务,因为无连接,所以可能会产生丢包,但是效率却较高,因为不用对方发送确认包,所以 UDP 广泛应用与游戏,直播等软件.</p>
<h1 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h1><p>在网络编程(二)中已经知道 TCP是基于端口发送数据包的,所以会记录本机端口号和目的端口号,具体格式如下:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx0tpgbpl9j307y04w3yr.jpg" alt></p>
<p>上图有几个重要的字段需要了解:</p>
<ul>
<li>序 列号: seq 序号,占32位,用来标识从 TCP 源端向目的端发送的字节流,发送方的发送数据时对比进行标记;</li>
<li>确认号: ACK 序号,占32位,只有 ACK 标志位位1时,确认号字段才有效, ack=seq+1;</li>
<li><p>标志位:共6个,即 URG,ACK,PSH,RST,SYN,FIN 等,具体含义如下:</p>
<ol>
<li>URG: 紧急指针有效;</li>
<li>ACK: 确认序号有效;</li>
<li>PSH: 接收方应该尽快将报文交给应用层;</li>
<li>RST: 重置连接;</li>
<li>SYN: 发起一个新连接</li>
<li>FIN: 释放一个连接.</li>
</ol>
</li>
<li><p>两个号码</p>
<ol>
<li>Sequene number: 顺序号码</li>
<li>Acknowledge number: 确认号码</li>
</ol>
</li>
</ul>
<p><strong>注意</strong>:</p>
<ul>
<li>不要将确认序号 Ack 与标志位中的 ACK 搞混了;</li>
<li>确认方 ack=seq+1(不论哪方发送),两端才建立连接.</li>
</ul>
<h1 id="三次握手详解"><a href="#三次握手详解" class="headerlink" title="三次握手详解"></a>三次握手详解</h1><p>所谓的三次握手( Three-Way Handshake)即建立 TCP 连接,就是指建立一个 TCP 连接时,需要客户端和服务端发送三个包用来确认连接的建立.在套接字编程中,这一过程由客户端执行 connect 来主动触发,整个流程如下:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx0u5zq7v7j30ob0r40wb.jpg" alt></p>
<p><strong>三次握手</strong></p>
<ol>
<li>第一次握手: 客户端发送 SYN 包( seq=x)的数据包到服务器,并进入 SYN_SEND 状态,等待服务器确认;</li>
<li>第二次握手: 服务器收到 SYN 包,必须确认客户端的 SYN(ACK=x+1),同时自己也发送一个 SYN 包(seq=y),即 SYN+ACK 包,此时服务器进入 SYN_RCVD 状态;</li>
<li>第三次握手: 客户端收到服务器的 SYN+ACK 包,向服务器发送确认包 ACK(ACK=y+1),此包发送完毕,客户端和服务端都进入 ESTABLISHED 状态,完成三次握手.</li>
</ol>
<p><strong>注意</strong></p>
<p>握手过程传送的包不包含任何数据,三次握手完毕后,客户端与服务器才正式开始传送数据.理想状态下, TCP 连接建立.在通信双方中的任何一方主动关闭连接之前, TCP 连接都将被一直保持下去.(双方都可以主动断开连接)</p>
<h1 id="四次挥手详解"><a href="#四次挥手详解" class="headerlink" title="四次挥手详解"></a>四次挥手详解</h1><p>在建立 TCP 连接之后,客户端和服务端开始传输数据,因为这是双向连接,所以任一方都可以主动断开连接.</p>
<p><strong>四次挥手</strong></p>
<ol>
<li>第一次挥手: 主动关闭方发送一个 FIN, 用来关闭主动方到被动方的数据传送,也就是主动关闭方告诉被动关闭方:我的数据传输已经完成了,不会再给你发送数据了(当然,在 FIN 包之前发送出去的数据,如果没有收到对应的 ACK 确认报文,主动关闭方依然会重发这些数据),但是此时主动关闭方还可以接收数据.</li>
<li>第二次挥手: 被动关闭方收到 FIN 包后,发送一个 ACK 给对方,确认序号为收到序号+1(与 SYN 相同,一个 FIN 占用一个序号).</li>
<li>第三次挥手: 被动关闭方发送一个 FIN, 用来关闭被动关闭方到主动关闭方的数据传送,也就是告诉主动关闭方,我的数据也发送完成,不会再给你发送数据了(但是在 FIN 发送之前发送的数据仍然需要主动关闭方发送确认包).</li>
<li>第四次挥手: 主动关闭方收到 FIn 后,发送一个 ACK 给被动关闭方,确认序号为收到序号+1,至此,完成四次挥手.</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx0v4ebsi1j30iy0fwmza.jpg" alt></p>
<h1 id="TCP-状态转换图"><a href="#TCP-状态转换图" class="headerlink" title="TCP 状态转换图"></a>TCP 状态转换图</h1><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx0vgkunpaj305z06j3yu.jpg" alt></p>
<p>CLOSED: 表示初始状态</p>
<p>LISTEN(服务器): 表示服务器的某个套接字处于坚挺状态,可以接受客户端的连接</p>
<p>YN_RCVD(服务器): 这个状态表示服务器接收到了客户端的 SYN 报文,在正常情况下,这个状态是服务端的 SOCKET 在建立 TCP 连接时的三次握手会话过程中的一个中间状态,很短暂,基本上用 netstat 是很难看到这种状态的,因此这种状态时,当收到客户端的 ACK 报文后,他会进入 ESTABLISHED 状态</p>
<p>SYN_SENT: 这个状态与 SYN_RCVD 相对应,当客户端SOCKET 执行 CONNECT 连接时,它首先发送 SYN 报文,因此也随机会进入 SYN_SENT, 并等待服务端发送三次连接中的第二个报文. SYN_SENT 表示客户端已发送 SYN 请求连接报文.</p>
<p>ESTABLISHED: 表示连接已经建立</p>
<p>FIN_WAIT_1: 其实 FIN_WAIT_1和 FIN_WAIT_1状态的真正含义都是表示等待对方的 FIN 报文.而这两种状态的区别是: FIN_WAIT_1状态实际上是当SOCKET 在 ESTABLISHED 状态时,它想主动关闭连接,向对方发送了 FIN 报文,此时该 SOCKET 即进入到 FIN_WAIT_1状态.而当对方回应ACK 报文后,则进入到 FIN_WAIT_2状态,当然在实际的正常情况下,无论对方在何种情况,都应该回应 ACK 报文,所以 FIN_WAIT_1状态一般是不容易见到的,而 FIN_WAIT_2可以用 netstat 看到</p>
<p>FIN_WAIT_2: 实际上 FIN_WAIT_2状态下的 SOCKET, 表示半连接,也即有一方要求 CLOSE 连接,但另外还告诉对方,我暂时还有点数据需要传送,等会再关闭连接</p>
<p>TIME_WAIT: 表示收到了对方的 FIN 报文,并发送了 ACK 报文,就等2MSL 后即可回到 CLOSED 可用状态了(初始状态).如果 FIN_WAIT_1状态下,收到了对方同时带 FIN标志和 ACK 标志的报文时,可以直接进入到 TIME_WAIT 状态,而无需经过 FIN_WAIT_2状态</p>
<p><strong>注意:</strong></p>
<p>MSL( 最大分段生存期)指明 TCP 报文在 internet 上最长生存时间,每个具体的 TCP 实现都必须选择一个确定的 MSL 值. RFC1122建议为2分钟,但 BSD 传统实现了采用30秒. TIME_WAIT 状态最大保持时间是2*MSL, 也就是1-4分钟.</p>
<p><strong>结论:</strong></p>
<p>在 TIME_WAIT 下等待2MSL, 只是为了尽最大努力保证四次握手正常关闭.确保老的报文段在网络中消失,不会影响新建立的连接.</p>
<p>CLOSING: 这种状态比较特殊,实际情况中很少见.正常情况下,当你发送 FIN 报文后,按理来说应该先收到(或同时受到)对方的 ACK 报文,再收到对方的 FIN 报文.但是 CLOSING 状态表示你发送 FIN 报文后,并没有收到对方的 ACK报文,反而收到了对方的 FIN 报文.那么什么情况下会出现这种情况.那就是双方几乎在同时 close 一个 SOCKET 的时候,那么久出现了双方同时发送 FIN 报文的情况,也即会出现 CLOSING 状态,表示双方都正在关闭 SOCKET 连接.</p>
<p>CLOSE_WAIT: 这种状态的含义其实是在表示等待关闭.当对方 close 一个 SOCKET 后发送 FIN 报文给自己,系统毫无疑问会回应一个 ACK 报文给对方,此时则进入 CLOSE_WAIT 状态.接下来就需要考虑是否还有数据需要发送给对方,如果没有的话,那么就可以 close 这个 SOCKET, 发送 FIN 报文给对方,也即关闭连接.所以在 CLOSE_WAIT 状态下,需要等待你去关闭连接</p>
<p>LAST_ACK: 它是被动关闭一方在发送 FIN 报文后,最后等待对方的 ACK 报文.当收到 ACK 报文后,也即可以进入到 CLOSED可用状态.( 初始状态)</p>
<p><strong>补充:</strong></p>
<ol>
<li>默认情况下,当调用 close 时,如果发送缓冲中还有数据, TCP 会继续把数据发送完;</li>
<li>发送了 FIN 只是表示这端不能继续发送数据(应用层不能调用 send 发送),但是仍然可以接收数据;</li>
<li>应用层如何知道对端关闭?通常,在最简单的阻塞模型中,当你调用 recv 时,如果返回0,则表示对端关闭.在这个时候通常的做法就是也调用close, 那么会发送 FIN, 完成四次握手.如果不调用 close, 那么对端就会处于 FIN_WAIT_2状态,而本端则会处于 CLOSE_WAIT状态.</li>
<li>很多时候, TCP 连接的断开都是有 TCP 层自动进行,例如使用 CTRL_C 终止程序, TCP 连接依然会正常关闭.</li>
</ol>
<p><strong>问题:</strong></p>
<ol>
<li><p>为什么建立连接协议是三次握手,而关闭连接是四次挥手呢?</p>
<p>这是因为服务端的 LISTEN 状态下的 SOCKET 收到 SYN 的请求连接时,可以把 ACK和 SYN(ACK起应答作用,而 SYN 起同步作用)放在一个报文里一起发送.但是关闭连接时,当收到对方的 FIN 报文通知时,它仅仅表示对方没有数据发送了,但是另一方未必所有的数据 都全部发送完全了,所以可能不会立马关闭 SOCKET, 也即你可能还需要发送一些数据给对方之后,再发送 FIN 报文给对方表示你同意现在关闭连接了,所以这里的 ACK 报文和 FIN 报文是分开发送的.</p>
</li>
<li><p>为什么不能用两次握手进行连接?</p>
<p>在三次握手中,总共需要完成两个重要的功能,既要双方做好发送数据的准备工作(双方都知道彼此已经准备好),也要允许双方就初始序列号进行协商,这个序列号在握手过程中被发送和确认.</p>
<p>现在把三次握手改成仅需要两次握手,是可能会发生死锁的.考虑计算机客户端和服务端之间的通信,假定客户端给服务端发送一个连接请求分组,服务端收到了这个分组,并发送了确认应答分组.按照两次握手的协定,服务端认为链接已经成功的建立了,可以开始发送数据分组.可是,客户端在服务端的应答分组在传输中被丢失的情况下,将不会知道服务端是否已准备好,不知道服务端建立什么样的序列号,客户端甚至会怀疑服务端是否收到自己的连接请求分组.在这种情况下,客户端认为连接还未建立成功,将忽略服务端发来的任何数据分组,只等待连接确认应答分组.而服务端在发出的数据分组超时后,重复发送同样的数据分组,就形成了死锁.</p>
</li>
<li><p>为什么 TIME_WAIT 状态需要等2MSL 后才能返回到 CLOSED 状态?</p>
<p>什么是 MSL? MSL 即Maximum Segment Lifetime, 也就是报文最大生存时间.’MSL 是任何报文段被丢弃前在网络内的最长时间.’那么,2MSL 也就是这个时间的两倍,当 TCP 连接完成四个报文段的交换时,主动关闭的一方将继续等待一定时间(2-4)分钟,即使两端的应用程序结束.</p>
<p>为什么需要2MSL 呢.</p>
<p>第一,虽然双方都同意关闭连接了,而且握手的四个报文也都协调和发送完毕,按理可以直接回到 CLOSED 状态(就好比从 SYN_SEND 状态到 ESTABLISH 状态那样);但是因为对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文,而重发 FIN 报文,所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文.</p>
<p>第二,报文可能会被混淆,意思是说其他时候的连接可能会被当做本次的连接.</p>
<p>当某个连接的一端处于 TIME_WAIT 状态时,该连接将不能再被使用.事实上,对于我们比较有现实意义的是,这个端口将不能再被使用.某个端口处于 TIME_WAIT(其实应该是这个连接) 状态时,这意味着这个 TCP 连接并没有断开(完全断开),那么.如果你 bind 这个端口,就会失败.对于服务器而言,如果服务器突然 crash 掉了,那么他将无法在2MSL 内重新启动,因为 bind 会失败.解决这个问题的一个方法就是设置 SOCKET 的 SO_REUSEADDR 选项.这个选项意味着可以重用一个地址.</p>
<p>当建立一个 TCP 连接时,服务端会继续用原有端口监听,同时用这个端口与客户端通信.而客户端默认情况下会使用一个随机端口与服务端的监听端口通信.有时候,为了服务端的安全性,我们需要对客户端进行验证,即限定某个 IP 的某个特定端口的客户端.客户端可以使用 bind 来使用特定的端口.对于服务端,当设置了 SO_REUSEADDR 选项时,它可以在2MSL 内启动并 listen成功.但是对于客户端,当使用 bind 并设置 SO_REUSEADDR 时,如果在2MSL 内启动,虽然 bind 会成功,但是在 windows 平台上 connect 会失败.而在 linux 是哪个不存在这个问题.</p>
<p>要解决 windows 平台的问题,可以设置 SO_LISTEN 选项. SO_LINGER 选项决定调用 close 时 TCP 的行为. SO_LINGER 涉及到 linger 结构体,如果设置结构体中 l_onoff 为非0,l_linger 为0,那么调用 close 时 TCP 连接会立刻断开, TCP 不会将发送缓冲中未发送的数据发送,而是立即发送一个 RST 报文给对方,这个时候 TCP 连接(关闭时)就不会进入 TIME_WAIT 状态.这样做虽然解决了问题,但是并不安全.通过以上方式设置 SO_LINGER 状态,等同于设置 SO_DONTLINGER 状态.</p>
<p>当 TCP 连接发生一些物理上的意外情况时,例如网线断开, linux 上的 TCP 实现会依然认为该连接有效,而 windows 则会在一定时间后返回错误信息.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>装饰器的进一步学习</title>
    <url>/2018/10/24/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>今天在调用被装饰器装饰的函数的时候实际调用函数返回的值和自己预想的不一样,经过朋友的指点发现问题在返回被装饰器装饰的函数的运行结果上.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paymoney</span><span class="params">(total)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> total &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> paymoney(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">'数额充足'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'数额不足'</span>)</span><br></pre></td></tr></table></figure>
<p>这个简单的装饰器应该很容易分析出结果,预想中的结果应该是打印:数额充足,然而结果却是什么都没打印,其实是因为装饰器有问题,因为并没有把被装饰的函数运行结果返回,那么装饰器的运行结果就为None,自然什么都不会打印.</p>
<p>正确的装饰器如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>发现</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程（二）</title>
    <url>/2018/11/06/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="六-网络编程-一-总结"><a href="#六-网络编程-一-总结" class="headerlink" title="六 网络编程(一)总结"></a>六 网络编程(一)总结</h3><p>首先对网络编程(一)做个总结:我们现在知道互联网通信其实就是发送数据包与接收数据包.电脑 A 向电脑 B 发送一个数据包, B 收到然后回复一个数据包,才实现了电脑之间的通信.数据包的结构,基本是下图的形式:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzphjwjz9j30kp072mxv.jpg" alt></p>
<p>想要发送这个数据包需要知道两个地址:</p>
<ol>
<li>对方的 MAC 地址</li>
<li>对方的 IP 地址</li>
</ol>
<p>只有发送方知道这两个地址,数据包才可以准确的发送到接收方.之前已经了解,单纯的 MAC 地址是有局限性的,就是只能在一个局域网内通过MAC 地址通信,如果两台计算机不在一个局域网,那么只能发送给网关( gateway),由网关走路由协议发送给对方.</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzpl181evj30m80c8ab3.jpg" alt></p>
<p>上图中,1号狄电脑想要个4号电脑通信.首先需要知道对方电脑的 IP 和子网掩码,然后通过 ARP 协议计算出自己和对方的网络号,然后判断是否处于同一个局域网,不是的话,1号电脑将数据包发给网关 A. 网关 A 通过路由协议,发现4号电脑位于网络 B, 又把数据包发给网关 B, 网关 B 再转发给4号电脑.</p>
<p>1号电脑想要把数据包发给网关 A, 首先必须知道网关 A 的 MAC 地址.所以,数据包的目标地址,实际上分为两种情况:</p>
<table>
<thead>
<tr>
<th>场景</th>
<th style="text-align:center">数据报地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个局域网</td>
<td style="text-align:center">对方的 MAC 地址,对方的 IP 地址</td>
</tr>
<tr>
<td>非同一个局域网</td>
<td style="text-align:center">网关的 MAC 地址,对方的 IP 地址</td>
</tr>
</tbody>
</table>
<p>发送数据包之前,电脑必须判断对方与自己是否处于同一个局域网,然后选择相应的处理方式来发送数据包.</p>
<h2 id="四-首次联网相关设置"><a href="#四-首次联网相关设置" class="headerlink" title="四 首次联网相关设置"></a>四 首次联网相关设置</h2><h3 id="一-静态IP-设置"><a href="#一-静态IP-设置" class="headerlink" title="一 静态IP 设置"></a>一 静态IP 设置</h3><p>当我们购买了一台新电脑时,插上网线,开机,这时候电脑能够上网吗?说到这想到我大二干的一件蠢事,那时候不知道路由器的工作原理,以为买了路由器就可以连无线网上网了,然后兴冲冲在网上买了一个路由器,收到货之后插上电,插上网线,发现 WiFi 倒是出现了,可是连上却没有反应,然后我就想啊,不对啊怎么连不上网?之后我想明白了,我 TM 的根本就没装宽带,哪来的网.好在那个路由器也没闲着,终于在去年服役了…</p>
<p>当购买的新电脑连上网线时,通常需要做一些设置,一般现在都会自动设置 IP, 子网掩码 DNS 服务器啦,但是也有有手动设置的,一般会设置四个参数:</p>
<ul>
<li>本机 IP 地址</li>
<li>子网掩码</li>
<li>网关 IP 地址</li>
<li>DNS IP 地址</li>
</ul>
<p>看看 linux 系统的设置</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzqfzl3eaj30w40toq5k.jpg" alt></p>
<p>这四个参数缺一不可,由于这是给定的,计算机每次开机都会分到同样的 IP 地址,所以这种情况称为静态 IP 地址上网.</p>
<p>但是这样的设置比较专业,而且不够灵活.所以大多数用户使用动态 IP 地址上网.</p>
<h3 id="二-动态-IP-地址上网"><a href="#二-动态-IP-地址上网" class="headerlink" title="二 动态 IP 地址上网"></a>二 动态 IP 地址上网</h3><p>所谓动态 IP 地址,值得是计算机开机后,会由服务器自动分配一个 IP 地址,不需要人为设置.使用的协议为 <strong>动态主机设置协议</strong>(<strong>Dynamic Host Configuration Protocol，DHCP</strong>) 协议,是一个局域网的网络协议,使用 UDP协议工作,主要有两个用途:</p>
<ol>
<li>用于内部网或网络服务供应商自动分配 IP 地址给用户;</li>
<li>用于内部网管理员作为对所有计算机作中央管理的手段.</li>
</ol>
<p>这个协议规定,每一个局域网中,有一台计算机负责管理本网络的所有 IP 地址,它叫做<strong>DHCP 服务器</strong>.新的计算机加入网络,首先必须向 DHCP 服务器发送一个 DHCP 请求数据包,申请 IP 地址和相关的网络参数.</p>
<p>前面说过,如果两台计算机在同一个局域网,必须知道对方的 MAC 地址和 IP 地址,才能发送数据包.但是新加入的计算机并不知道这两个地址,怎么发送数据包呢?这就是 DHCP 的功劳了.</p>
<h3 id="三-DHCP-协议"><a href="#三-DHCP-协议" class="headerlink" title="三 DHCP 协议"></a>三 DHCP 协议</h3><p>首先, DHCP 是应用层协议,建立在 UDP 之上的,数据包是这样的:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzqwo48aqj30m807k0th.jpg" alt></p>
<ol>
<li>最前面的以太网标头,设置发送方(本机)的 MAC 地址和接收方( DHCP)的 MAC 地址.前着就是本机网卡的 MAC 地址,后者这时候并不知道,就填入一个广播地址:FF-FF-FF-FF-FF-FF.这个地址是具有特殊意义的MAC 地址.</li>
<li>后面的 IP 标头,设置发送方的 IP 地址和接收方的 IP地址.这时候,对于这两者,本机都不知道.于是发送方的 IP 地址就设为0.0.0.0,接收方得 IP 地址设为255.255.255.255.</li>
<li>最后的 UDP 标头,设置发送方的端口和接收方的端口.这一部分是 DHCP 协议规定好的,发送方为68端口,接收方为67端口.</li>
</ol>
<p>数据包内容构造完成后,就可以发包了.以太网是基于广播方式发送的,同一个局域网的每个计算机都会收到这个数据包.因为接收方的 MAC 地址是FF-FF-FF-FF-FF-FF,看不出是发给谁的,所以每台计算机收到数据包后都会进行拆包才能确定是不是发给自己的.当看到发送方 IP 地址为0.0.0.0,接收方是255.255.255.255时, DHCP 服务器知道,哦,原来这个包是发给我的,所以其他的计算机就可以丢弃这个包了.</p>
<p>于是 DHCP 服务器读取数据包内容,分配好 IP 地址,发送一个 DHCP 响应数据包.这个是数据包的结构和上面是类似的,以太网标头的 MAC 地址是双方的网卡地址, IP 标头的 IP 地址是 DHCP 副武器的 IP 地址(发送方)和255.255.255.255(接收方),UDP 标头的端口是67(发送方)和68(接收方),分配给请求端的 IP 地址和本网络的具体参数则包含在 Data 部分.</p>
<p>新加入的计算机收到这个响应包,于是就知道了自己的 IP 地址,子网掩码,网关地址和DNS 服务器地址.</p>
<h3 id="四-小结"><a href="#四-小结" class="headerlink" title="四 小结"></a>四 小结</h3><p>这是联网的第一步,不管是静态 IP 地址还是动态 IP 地址,想要连上互联网,需要确定这四个参数:</p>
<ul>
<li>本机 IP 地址</li>
<li>子网掩码</li>
<li>网关 IP 地址</li>
<li>DNS IP 地址</li>
</ul>
<p>只有这四个参数确定了,才可以愉快的进行网络冲浪.那么当我们访问网页的时候,互联网协议是如何工作的呢?</p>
<h2 id="五-访问网页"><a href="#五-访问网页" class="headerlink" title="五 访问网页"></a>五 访问网页</h2><h3 id="一-本机参数"><a href="#一-本机参数" class="headerlink" title="一 本机参数"></a>一 本机参数</h3><p>假定经过上一节的步骤,用户设置好了自己的网络参数:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwzriwaa8vj312q0uodig.jpg" alt></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzrj786gfj312q0uo76a.jpg" alt></p>
<ul>
<li>IP 地址:192.168.2.238</li>
<li>子网掩码:255.255.255.0</li>
<li>路由器(网关地址):192.168.2.1</li>
<li>DNS 服务器:192.168.2.1</li>
</ul>
<p>打开浏览器访问谷歌,在地址栏输入 <a href="http://www.google.com,这意味着,浏览器向" target="_blank" rel="noopener">www.google.com,这意味着,浏览器向</a> google 发送一个网页请求的数据包.</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzrqfes9ej31kw0xrgq8.jpg" alt></p>
<h3 id="二-DNS-协议"><a href="#二-DNS-协议" class="headerlink" title="二 DNS 协议"></a>二 DNS 协议</h3><p>我们知道,向谷歌发送一个数据包,必须要知道对方的 IP 地址.但是现在只知道一个网址,并不知道它的 IP 地址.</p>
<p>DNS 协议可以帮助我们,将这个网址转换成 IP 地址,已经知道我们的 DNX 服务器为192.168.2.1,于是向这个地址发送一个 DNS 数据包(53端口).</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwzrt4ofebj30m807wmxv.jpg" alt></p>
<p>然后, DNS 服务器作出相应,告诉我们谷歌的地址是174.36.196.242.于是我们知道了对方的 IP 地址.</p>
<h3 id="三-子网掩码"><a href="#三-子网掩码" class="headerlink" title="三 子网掩码"></a>三 子网掩码</h3><p>接下来需要判断该 IP地址和本机是否处于同一个局域网,这就需要子网掩码来进行 AND 位运算.</p>
<p>已知子网掩码是255.255.255.0,本机用子网掩码和自己的 IP地址192.168.2.238,做一个二进制的 AND 运算,计算结果为192.168.2.0,然后对谷歌的 IP 地址也做一个 AND 运算,计算结果为174.36.196.0.两个结果不相等,所以结论是谷歌与本机不在一个局域网.</p>
<p>因此我们想要和谷歌通信的话需要通过网关转发,网关地址为192.168.2.1,也就是所接收方得 MAC 地址是网关的 MAC 地址.</p>
<h3 id="四-应用层协议"><a href="#四-应用层协议" class="headerlink" title="四 应用层协议"></a>四 应用层协议</h3><p>浏览网页用的是 HTTP/HTTPS 协议,这两种协议的数据构造差不多:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwzsa2macaj30ku06rt9e.jpg" alt></p>
<p>HTTP部分的内容,类似下面这样:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzsd6q0m5j31kw07h0w0.jpg" alt></p>
<p>假定这个部分的长度为4960字节,它会被嵌在 TCP 数据包中.</p>
<h3 id="五-TCP-协议"><a href="#五-TCP-协议" class="headerlink" title="五 TCP 协议"></a>五 TCP 协议</h3><p>TCP 数据包需要设置端口,接收方( Google)的 HTTPS默认是443,发送方(本机)的端口是一个随机生成的1024-65535之间的整数,假定为51775.</p>
<p>TCP 数据包的标头长度为20字节,加上嵌入 HTTPS 的数据包,总长度为4980字节.</p>
<h3 id="六-IP-协议"><a href="#六-IP-协议" class="headerlink" title="六 IP 协议"></a>六 IP 协议</h3><p>然后, TCP 数据包再嵌入 IP 数据包.IP 数据包需要设置双方的 IP地址,这是已知的,发送方是192.168.2.238(本机),接收方为174.36.196.242( Google).</p>
<p>IP 数据包的标头长度为20字节,加上嵌入的 TCP 数据包,总长度变为5000字节.</p>
<h3 id="七-以太网协议"><a href="#七-以太网协议" class="headerlink" title="七 以太网协议"></a>七 以太网协议</h3><p>最后, IP地址数据包嵌入以太网数据包.以太网数据包需要设置双方的 MAC 地址,发送方为本机的网卡 MAC 地址,接收方为网关192.168.2.1的 MAC 地址(通过 ARP 协议获得)</p>
<p>本机的 MAC 地址:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwzsot204kj31by0z4gq0.jpg" alt></p>
<p>网关的 MAC 地址:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzspqoyrej312q0uo0um.jpg" alt></p>
<p>以太网数据包的数据部分,最大长度为1500字节,而现在的 IP 数据包长度为5000字节.因此, IP 数据包必须分割成四个包.因为每个包都有自己的标头(20字节),所以四个包的 IP 数据包的长度分别为1500,1500,1500,560.</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzsrk689rj30ku0f83zv.jpg" alt></p>
<h3 id="八-服务端响应"><a href="#八-服务端响应" class="headerlink" title="八 服务端响应"></a>八 服务端响应</h3><p>经过多个网关的转发, google 服务器收到了四个以太网数据包.</p>
<p>根据 IP 标头的序号, google 将四个包拼起来,取出完整的 TCP 数据包,然后读取里面的 HTTPS 请求,接着做出 HTTPS 响应,再用 TCP 协议回复一个数据包.</p>
<p>本机收到 HTTPS 响应以后,就可以将网页显示出来,完成以一次网络通信.</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>网络编程（六）</title>
    <url>/2018/11/11/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上篇文章解决了 TCP 和 UDP 并发的问题,是通过一个 socketserver模块实现的,那么这个模块到底做了什么可以实现并发的效果呢?</p>
<h1 id="socketserver-源码分析"><a href="#socketserver-源码分析" class="headerlink" title="socketserver 源码分析"></a>socketserver 源码分析</h1><p>进入 socketserver 中查看注释:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx477n0fj8g30dc06onpg.gif" alt></p>
<p>翻译如下:</p>
<p>通用套接字服务类</p>
<p>该模块试图捕获定义服务器的各个方面</p>
<p>基于套接字的服务器</p>
<p>基于请求的服务器</p>
<p>在进一步查看请求之前进行客户地址验证,(这实际上是一个钩子,用于任何需要在进行其他操作之前查看请求的处理)</p>
<p>如何处理多个请求:</p>
<p>​    同步(一次处理一个请求)</p>
<p>​    分叉(每个请求由一个新进程处理)</p>
<p>​    线程化(每个请求由一个新线程处理)</p>
<p>这个模块的类喜欢编写最简单的服务器类型:一个同步的 TCP/IP 服务器.这是糟糕的设计,但是节省了一些输入.(还有一个问题是,深度类层次结构会减慢方法查找的速度)</p>
<p>在继承关系图中有五个类,其中四个表示四种类型的同步服务器:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx47f81ixnj30l00coq3k.jpg" alt></p>
<p>注意UnixDatagramServer 继承于 UDPServer, 而不是 UnixStreamServer–IP 和 Unix 服务器之间的唯一区别是地址族,这在两个 Unix 服务器类中都是重复的.</p>
<p>可以使用FrokingMixIn 和ThreadingMixIn 混合类创建每种类型服务器的进程和线程版本.例如,创建一个线程 UDP 服务器如下所示:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadingUDPServer</span><span class="params">(ThreadingMixIn, UDPServer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>混合类必须首先出现,因为它覆盖了 UDPServer 中定义的方法,设置各种成员变量还会改变底层服务器机制的行为.</p>
<p>要实现服务,必须从 BaseRequestHandler 派生一个类,并重新定义它的 handle() 方法.然后,你可以通过将一个服务器类与请求处理程序类组合在一起来运行服务的不同版本.</p>
<p>对于数据报或流式服务器,请求处理程序类必须是不同的.这可以通过使用请求处理程序子类 StreamRequestHandler 或 DatagramRequestHandler 类来隐藏.</p>
<p>当然,你还得动动脑子.</p>
<p>例如,如果服务在内存中包含可以由请求修改的状态,那么使用进程服务器是没有意义的(因为子进程中的修改永远不会达到父进程中保留并传递给每个子进程的初始状态).在这种情况下,你可以使用线程化服务器,但是你可能必须使用锁来避免几乎同时出现的两个请求,以对服务器状态应用冲突更改.</p>
<p>另一方面,如果你正在构建一个 HTTP 服务器,其中所有数据都存储在外部(例如文件系统中),同步类本质上是在处理一个请求时使服务’听不见’,如果客户端读取其请求的所有数据很慢,那么这种情况可能会持续很长时间,在这里,线程或进程服务器是合适的.</p>
<p>在某些情况下,同步的处理请求的一部分可能是合适的,但根据请求数据在进程子节点中完成处理可能是合适的.这可以通过使用同步服务器和在请求处理程序类 handle() 方法中执行显式进城来实现.</p>
<p>处理多个同时请求的另一种方法既不支持线程也不支持进程的环境(这些环境太昂贵或不适合服务)是维持一个部分完成的请求的显式表和使用选择器决定下一个要处理的请求(或者是否处理新的请求)对对流服务尤为重要.每个客户端可能长时间连接的地方.(如果线程或子线程不能使用)</p>
<p>未来的工作:</p>
<p>​    Sun RPC 的标准类(使用 TCP 或 UDP)</p>
<p>​    标准混合类实现各种身份验证</p>
<p>总结: 上面的翻译是 socketserver 的注释翻译,能够是我们大致了解该模块的工作流程.那么当我们自定义自己的类是如何进行实例化得呢?</p>
<h1 id="结合源码查看自定义类的步骤"><a href="#结合源码查看自定义类的步骤" class="headerlink" title="结合源码查看自定义类的步骤"></a>结合源码查看自定义类的步骤</h1><p>该模块分为两大类: server 类(解决连接问题)和 request 类(解决通信问题)</p>
<p> server 类继承关系:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx4aehutm8j311m0lkacr.jpg" alt></p>
<p>request 类继承关系:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx4apy6id2j310u0mi76s.jpg" alt></p>
<p>总结继承关系:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx4awbk00xj311k0ootdl.jpg" alt></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx4bicao65j312o0twjwm.jpg" alt></p>
<p>以下述代码为例,分析 socketserver 源码:</p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpServer</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    coding = <span class="string">'utf-8'</span></span><br><span class="line">    server_dir = <span class="string">'file_upload'</span></span><br><span class="line">    max_packet_size = <span class="number">1024</span></span><br><span class="line">    BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.request)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.request.recv(<span class="number">4</span>)</span><br><span class="line">            data_len = struct.unpack(<span class="string">'i'</span>, data)[<span class="number">0</span>]</span><br><span class="line">            head_json = self.request.recv(data_len).decode(self.coding)</span><br><span class="line">            head_dic = json.loads(head_json)</span><br><span class="line">            </span><br><span class="line">            cmd = head_dic[<span class="string">'cmd'</span>]</span><br><span class="line">            <span class="keyword">if</span> hasattr(self, cmd):</span><br><span class="line">                func = getattr(self, cmd)</span><br><span class="line">                func(head_dic)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, args)</span>:</span></span><br><span class="line">        file_path = os.path.normpath(os.paht.join(</span><br><span class="line">        			self.BASE_DIR,</span><br><span class="line">        			self.server_dir,</span><br><span class="line">        			args[<span class="string">'filename'</span>]))</span><br><span class="line">        filesize = args[<span class="string">'filesize'</span>]</span><br><span class="line">        recv_size = <span class="number">0</span></span><br><span class="line">        print(<span class="string">'----&gt;'</span>, file_path)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> recv_size &lt; filesize:</span><br><span class="line">                recv_data = self.request.recv(self.max_packet_size)</span><br><span class="line">                f.write(recv_data)</span><br><span class="line">                recv_size += len(recv_size)</span><br><span class="line">                print(<span class="string">'recvsize: %s filessize: %s'</span> % (recv_size, filesize))</span><br><span class="line"></span><br><span class="line">ftpserver = socketserver.ThreadingTCPServer((<span class="string">''</span>, <span class="number">8080</span>), FtpServer)</span><br><span class="line">ftpserver.serve_forever()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPClient</span>:</span></span><br><span class="line">    </span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line">    max_packet_size = <span class="number">8192</span></span><br><span class="line">    coding = <span class="string">'utf-8'</span></span><br><span class="line">    request_queue_size = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, connect=True)</span>:</span></span><br><span class="line">        self.server_address = server_address</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                   self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> connect:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.client_connect()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.client_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">client_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.socket.connect(self.server_address)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.socket.close()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp = input(<span class="string">'&gt;&gt;&gt;:'</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> inp:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            l = inp.split()</span><br><span class="line">            cmd = l[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> hasattr(self, cmd):</span><br><span class="line">                func = getattr(self, cmd)</span><br><span class="line">                func(l)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, args)</span>:</span></span><br><span class="line">        cmd = args[<span class="number">0</span>]</span><br><span class="line">        filename = args[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">            print(<span class="string">'file: %s is not exist'</span> % filenam)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            filesize = os.path.getsize(filename)</span><br><span class="line">            </span><br><span class="line">        head_dic = &#123;<span class="string">'cmd'</span>: cmd, <span class="string">'filename'</span>: os.path.basename(filename), <span class="string">'filesize'</span>: filesize&#125;</span><br><span class="line">        print(head_dic)</span><br><span class="line">        head_json = json.dumps(head_dic)</span><br><span class="line">        head_json_bytes = bytes(head_json, encoding=self.coding)</span><br><span class="line">        </span><br><span class="line">        head_struct = struct.pack(<span class="string">'i'</span>, len(head_json_bytes))</span><br><span class="line">        self.scoket.send(head_struct)</span><br><span class="line">        self.socket.send(head_json_bytes)</span><br><span class="line">        send_size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line im f:</span><br><span class="line">                self.socket.send(line)</span><br><span class="line">                send_size += len(line)</span><br><span class="line">                print(send_size)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'upload successful'</span>)</span><br><span class="line">               </span><br><span class="line">client = MyTCPClient((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line">client.run()</span><br></pre></td></tr></table></figure>
<p>以上述代码为例,分析 socketserver源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ftpserver = socketserver.ThreadingTCPServer((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line">ftpserver.serve_forever()</span><br></pre></td></tr></table></figure>
<p>查找属性的顺序可以从上面第三个继承图得到答案:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ThreadingTCPServer-&gt;ThreadingMixIn-&gt;TCPServer-&gt;BaseServer</span><br></pre></td></tr></table></figure>
<ol>
<li>实例化得到 ftpserver, 先查找 ThreadingTCPServer 的初始化方法,发现左继承的 ThreadingMixIn 没有初始化方法,于是在 TCPServer 中找到,然后执行self.server_bind和 self.server_activate 方法;</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx4cs2psjij31340qkn2g.jpg" alt></p>
<ol start="2">
<li>初始化成功后执行ftpserver.serve_forever,发现在 ThreadingMixIn和 TCPServer 中都没有,于是只好去 BaseServer 中找到并执行 serve_forever,进而执行 self._handle_request_noblock(),该方法同样在 BaseServer 中</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx4d9xi766j313w0o0jvs.jpg" alt></p>
<ol start="3">
<li>执行self_handle_request_noblock()进而执行 request,client_address = self.get_request(),在这里发现在 TCPServer 中有该方法,于是执行这个方法</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx4df4pa37j30wq07ewf6.jpg" alt></p>
<ol start="4">
<li>执行 self.socket.accept(),发现该方法在 socket 中,然后执行 self.process_address(request, client_address)</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx4dgns7uhj315e0ietd2.jpg" alt></p>
<ol start="5">
<li>在 ThreadingMixIn 中找到process_request, 开启多线程应对并发,进而执行process_request_thread,执行 self.finish_request(request, client_address)</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx4ejycnb8j30ts0m80x3.jpg" alt></p>
<ol start="6">
<li>上述四部分完成了连接循环,接下来进入处理通信部分,在 BaseServer 中找到 finish_request,触发我们定义的类的实例化并初始化一个对象,因为自己定义的类中中没有该方法,则依据继承关系计算出的 MRO 列表查找属性</li>
</ol>
<p><strong>源码分析总结:</strong></p>
<p>基于 TCP 的 socketserver 定义出的类:</p>
<ol>
<li>self.server 即套接字对象;</li>
<li>self.request 即一个连接;</li>
<li>self.client_address即客户端地址</li>
</ol>
<p>基于 UDP 的 socketserver 定义出的类:</p>
<ol>
<li>self.request 是一个元祖(第一个元素是客户端发来的数据,第二部分是服务端的 udp 套接字对象),如(b’musibii’, &lt;socket.socket fd=200, family=AddressFamily.AF_INET, type=SocketKind.SOCK_DGRAM, proto=0, laddr=(‘127.0.0.1’, 8080)&gt;);</li>
<li>self.client_address 即客户端地址.</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文查看了一下 socketserver 模块的源码,大致的实例化对象的步骤和主要运行流程差不多搞清楚了,但是有些地方还是需要仔细琢磨的,比如第五步怎么一下就到开启多线程实现并发了.</p>
<p>总的来说,查看源码还是有点用的,而且该模块的继承也对之前学习的继承知识进行了补充,特别是根据继承解析出来的( MRO)列表,这个列表是类中属性的查找顺序表,和是否直接继承没有关系.</p>
]]></content>
      <categories>
        <category>socketserver源码探析</category>
      </categories>
  </entry>
  <entry>
    <title>计算机硬件基础</title>
    <url>/2018/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一-计算机基本组成"><a href="#一-计算机基本组成" class="headerlink" title="一 计算机基本组成"></a>一 计算机基本组成</h1><p>目前市面上的计算机几乎都是冯诺依曼体系计算机，冯·诺依曼计算机使用冯诺依曼体系机构的电子数字计算机。1945年6月，冯·诺依曼提出了在数字计算机内部的存储器中存放程序的概念，这是所有现代电子计算机的末班，被称为“冯·诺依曼结构”，按照这种结构构造的电脑称为存储程序计算机，又称为通用计算机。</p>
<p>冯·诺依曼体系的计算机的特点是：程序以二进制代码的形式存放在存储器中；所有的指令都是由操作码和地址码组成；指令在其存储过程中按照执行的顺序进行存储；以运算器和控制器作为计算机结构的中心等。冯诺依曼计算机广泛应用于数据的处理和控制方面。</p>
<p>冯诺依曼理论的要点是：数字计算机的数制采用二进制；计算机应该按照程序顺序执行。</p>
<p>根据冯诺依曼体系结构组成的计算机，必须具有如下功能：</p>
<p>把需要的程序和数据送至计算机中。</p>
<p>必须具有长期记忆程序、数据、中间结果及最终运算结果的能力。</p>
<p>能够完成各种算术、逻辑运算和数据传送等数据加工处理的能力。</p>
<p>能够根据需要控制程序走向，并能根据指令控制机器的各部件协调操作。</p>
<p>能够按照要求将处理结果输出给用户。</p>
<p>为了完成以上功能，计算机必须具备以下五大基本组成部件：</p>
<ol>
<li>控制器：计算机的指挥系统。控制器通过数据地址来访问存储器，从存储器中取出指令，经过编译器编译或解释器解释后，根据结果得出相应的操作信号并作用于其他部件，使得各部件在控制器的严格控制下互相协调的工作。</li>
<li>运算器：实现算术运算和逻辑运算的部件。</li>
<li>存储器：计算机用来存储所有数据和程序的记忆部件。它的基本功能是按照指定的存储地址存（写）入或取（读）出数据。</li>
<li>输入设备：是向计算机中输入信息（程序、数据、声音、文字、图形、图像等）的设备。常见的输入设备有：键盘、鼠标、图形扫描仪、触摸屏等。</li>
<li>输出设备：主要有显示器、打印机和绘图仪等。</li>
</ol>
<p>现代计算机将上述五大部分分为三大核心部件：</p>
<ol>
<li>CPU（控制单元+算数逻辑单元）</li>
<li>主存储器</li>
<li>输入输出设备</li>
</ol>
<p>这几个部件的相关性如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwdjizf9ncj31kw0yy78h.jpg" alt></p>
<h1 id="二-编程与计算机硬件的关系"><a href="#二-编程与计算机硬件的关系" class="headerlink" title="二 编程与计算机硬件的关系"></a>二 编程与计算机硬件的关系</h1><p>为了使计算机能够理解人的意图，人类就必须将需要解决的问题的思路、方法和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人与计算机体系之间交流的过程就是编程。</p>
<p>编写的程序经过译码器分析后得到的是一大堆的二进制指令，这些指令通过CPU读取从而产生相应的操作控制信号作用于其他的硬件上，从而完成相应的功能。</p>
<h1 id="三-内存容量单位的换算"><a href="#三-内存容量单位的换算" class="headerlink" title="三 内存容量单位的换算"></a>三 内存容量单位的换算</h1><p>1Byte=8bit</p>
<p>1KB=1024Bytes</p>
<p>1MB=1024KB</p>
<p>1GB=1024MB</p>
<p>有的生产厂家的换算单位为1000。</p>
<h1 id="四-CPU位数关系"><a href="#四-CPU位数关系" class="headerlink" title="四 CPU位数关系"></a>四 CPU位数关系</h1><p>现在市面上的计算机主要分为32位和64位两种规格，他们之间的区别主要为以下四点：</p>
<ol>
<li>处理数据能力不同</li>
<li>支持的内存不同（寻址不同）</li>
<li>架构不同</li>
<li>对配置的要求不同</li>
</ol>
<h1 id="五-操作系统基础"><a href="#五-操作系统基础" class="headerlink" title="五 操作系统基础"></a>五 操作系统基础</h1><ol>
<li>操作系统是什么？</li>
</ol>
<p>操作系统（Operating System，简称OS）是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在‘裸机’上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。操作系统是一个协调\管理\控制计算机硬件资源与软件资源的一个控制程序。</p>
<ol start="2">
<li>为什么要有操作系统？</li>
</ol>
<p>操作系统是用户和计算机硬件的接口，同时也是计算机硬件和其他软件的接口。操作系统的功能包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其他应用软件提供支持，让计算机系统所有资源最大限度的发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其他软件的开发提供必要的服务和相应的接口等。实际上，用户是不用接触操作系统的，操作系统管理着计算机的硬件资源，同时按照应用程序的资源请求来分配资源，如：划分CPU时间、内存空间的开辟、调用打印机等。</p>
<p>操作系统就是为了让使用者更加方便的使用计算机硬件资源和软件资源的一个工具。</p>
]]></content>
      <categories>
        <category>Computer Basics</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式之单例</title>
    <url>/2018/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客归类于设计模式，单例模式算是我了解的不多的设计模式之一，在某些应用场景下为了节省资源，常常使用单例模式来编写代码。</p>
<p>单例模式（Singleton Pattert）是一种常用的软件设计模式，该模式的主要目的是确保在某一个类中能且只能产生一个实例。当在某些场景下希望某个类只能产生一个实例时，就可以使用单例模式了。</p>
<h1 id="python-中的单例模式"><a href="#python-中的单例模式" class="headerlink" title="python 中的单例模式"></a>python 中的单例模式</h1><p>单例模式也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>
<p>实现单例模式的思路是：一个类能返回对象一个引用（永远是同一个）和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。</p>
<p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建实例方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例惟一的原则。解决这个问题的办法是为指示是否已经实例化的变量提供一个互斥锁（虽然这样会降低效率）。</p>
<p>在面向对象编程中，学习了使用某一个类来创建多个不同的对象，那么如何使得该类只能产生一个对象呢？</p>
<p>在Python 中，可以使用多种方法来实现单例模式：</p>
<ol>
<li>使用模块</li>
<li>使用魔术方法__new__</li>
<li>使用装饰器</li>
<li>使用元类</li>
</ol>
<h2 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h2><p>python 中的模块就是天然的单例模式，因为模块只会在第一次导入的时候加载，会生成一个  <strong>.pyc</strong>文件，第二次导入时，就会直接加载 <strong>.pyc</strong>文件，而不会再次执行模块代码。因此，可以把相关的代码和数据定义在一个模块中，就可以获得一个单例对象了。然后要用的话导入就可以，我可以保证这样做的话肯定只有一个单例对象。代码就不演示了。</p>
<h2 id="使用特殊方法-new"><a href="#使用特殊方法-new" class="headerlink" title="使用特殊方法__new__"></a>使用特殊方法__new__</h2><p>在使用类实例化一个对象时，其实python 解释器做了两步操作:</p>
<ol>
<li>调用 object 的__new__方法创建一个空对象；</li>
<li>调用类本身的__init__方法进行初始化（这都是通过元类的__call__来间接调用的）</li>
</ol>
<p>那么是不是可以在调用__new__的时候做一些判断来使得只能创建一个单例对象呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleinstance</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *arg, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = super(Singleinstance, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleinstance)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，将类的__new__方法和一个类的属性关联起来，如果 cls._instance 为 None 则创建一个对象，否则的话直接返回cls._instance。</p>
<h2 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h2><p>装饰器可以动态的修改一个类或者函数的功能。所以可以使用装饰器来装饰某各类，使其只能生成一个实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleinstance</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleinstance</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在上面，定义了一个装饰器 singleinstance，它返回了一个内部函数getinstance，该函数会判断某个类是否在字典 instance 中，如果不存在，则会将 cls 作为 key，cls(*args, **kwargs)作为 value存到 instances 中，否则，直接返回 instances[cls]。该装饰器可以装饰所有只需要产生一个实例的类上。</p>
<h2 id="使用-metaclass"><a href="#使用-metaclass" class="headerlink" title="使用 metaclass"></a>使用 metaclass</h2><p>元类 metaclass 可以通过自定义__new__方法和__init__方法来控制类的创建过程，它主要做三件事：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类</li>
</ul>
<p>使用元类实现单例的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __init__(self):</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 判断对象有没有创建过</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MyMetaClass.instance:</span><br><span class="line">            <span class="comment"># 创建空对象</span></span><br><span class="line">            MyMetaClass.instance = object.__new__(cls)</span><br><span class="line">            print(cls.__name__)</span><br><span class="line">            print(cls.__dict__)</span><br><span class="line">            print(<span class="string">"创建新的播放器对象!"</span>)</span><br><span class="line">            <span class="comment"># 初始化对象</span></span><br><span class="line">            MyMetaClass.instance.__init__(*args,**kwargs)</span><br><span class="line">            print(type(MyMetaClass.instance))</span><br><span class="line">            <span class="comment"># 返回对象</span></span><br><span class="line">        <span class="keyword">return</span> MyMetaClass.instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span><span class="params">(metaclass=MyMetaClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>通过字符串来操作类或对象的属性</title>
    <url>/2018/10/25/%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E6%93%8D%E4%BD%9C%E7%B1%BB%E6%88%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>通过字符串来查看获取修改删除类或对象的属性的使用场景为获取用户的输入,因为得到的值都是字符串类型,那么就可以直接通过字符串来操作属性而不用把字符串修改为可以通过句点法访问的形式了.</p>
<p>那么有四个方法可以通过字符串来操作属性:</p>
<ol>
<li>hasattr:是否具有该属性,返回布尔值</li>
<li>getattr:获取属性值,没有该属性的话会报错,设置一个默认值 None</li>
<li>setattr:修改属性值, 有就修改,没有就添加</li>
<li>delattr:删除属性,有就删除,没有会报错,应该加个判断</li>
</ol>
<h3 id="一-hasattr方法"><a href="#一-hasattr方法" class="headerlink" title="一 hasattr方法"></a>一 hasattr方法</h3><p>查看源码可知:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasattr</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return whether the object has an attribute with the given name.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    This is done by calling getattr(obj, name) and catching AttributeError.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>翻译过来就是:返回对象是否具有给定名称的属性。这是通过调用getattr函数和捕获AttributeError错误来完成的.</p>
<p>使用例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s : %s'</span> % (self.name, self.age))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hasattr</span></span><br><span class="line">obj = Foo(<span class="string">'musibii'</span>, <span class="number">18</span>)</span><br><span class="line">print(hasattr(obj, <span class="string">'name'</span>))</span><br><span class="line">print(hasattr(obj, <span class="string">'age'</span>))</span><br><span class="line">print(hasattr(obj, <span class="string">'gender'</span>))</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="二-getattr方法"><a href="#二-getattr方法" class="headerlink" title="二 getattr方法"></a>二 getattr方法</h3><p>查看源码可知:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getattr</span><span class="params">(object, name, default=None)</span>:</span> <span class="comment"># known special case of getattr</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    getattr(object, name[, default]) -&gt; value</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.</span></span><br><span class="line"><span class="string">    When a default argument is given, it is returned when the attribute doesn't</span></span><br><span class="line"><span class="string">    exist; without it, an exception is raised in that case.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>实际该方法是调用的传入对象的魔术方法__getattribute__,查看object的源码,从魔术方法__getattribute__的注释发现’’’return getattr(self, name)’’’,当对对象调用getattr方法是,就会触发__getattribute__方法.只有对象具有__getattribute__魔术方法,才可以使用getattr方法,一般来说除非定义类的时候改写了该方法,有不同的结果.</p>
<p>使用例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># getattr</span></span><br><span class="line">print(getattr(obj, <span class="string">'name'</span>))</span><br><span class="line">print(getattr(obj, <span class="string">'age'</span>))</span><br><span class="line">print(getattr(obj, <span class="string">'gender'</span>, <span class="literal">None</span>)) <span class="comment"># 如果没有要获取的属性的话,应该定义默认值,否则会报错</span></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">musibii</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h3 id="三-setattr方法"><a href="#三-setattr方法" class="headerlink" title="三 setattr方法"></a>三 setattr方法</h3><p>查看源码可知:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setattr</span><span class="params">(x, y, v)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Sets the named attribute on the given object to the specified value.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    setattr(x, 'y', v) is equivalent to ``x.y = v''</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>设置所给对象的属性一个给定的值.</p>
<p>和getattr一样,该方法传入的对象需要有__setattr__魔术方法才可以调用getattr方法.</p>
<p>使用例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setattr</span></span><br><span class="line">print(obj.__dict__)</span><br><span class="line">setattr(obj, <span class="string">'name'</span>, <span class="string">'maffia'</span>)</span><br><span class="line">print(obj.__dict__)</span><br><span class="line">setattr(obj, <span class="string">'gender'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(obj,__dict__)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'musibii'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'maffia'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'maffia'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line"><span class="comment"># 如果设置的属性对象里面没有的话会新增属性</span></span><br></pre></td></tr></table></figure>
<h3 id="四-delattr方法"><a href="#四-delattr方法" class="headerlink" title="四 delattr方法"></a>四 delattr方法</h3><p>查看源码可知:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delattr</span><span class="params">(x, y)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Deletes the named attribute from the given object.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    delattr(x, 'y') is equivalent to ``del x.y''</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>从所给对象删除属性.</p>
<p>和getattr一样,该方法传入的对象需要有__delattr__魔术方法才可以调用delattr方法.</p>
<p>使用例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># delattr</span></span><br><span class="line"><span class="comment"># 删除属性的时候,如果没有所给的属性名,那么会报错,所以在使用delattr的时候加上if判断</span></span><br><span class="line">delattr(obj, <span class="string">'gender'</span>)</span><br><span class="line"><span class="keyword">if</span> hasattr(obj, <span class="string">'xxx'</span>):</span><br><span class="line">    delattr(obj, <span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程（四）</title>
    <url>/2018/11/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过之前三篇文章的学习我们大致了解了互联网是如何基于五层协议进行通信了,由应用层产生数据,然后进行封装,依次经过传输层,网络层,数据链路层的封装最后由物理层发送电信号进行数据的传输,在接收端首先由物理层接收到字节型的数据,然后拆包,验证 MAC 地址, IP 地址和端口,最后由目标应用获取数据并解码出来.</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx23za1holj30gk0cgjsl.jpg" alt></p>
<p>那么为了使用 TCP 协议建立连接,不用去管什么三次握手四次挥手以及数据到底是怎么在互联网中传输的,在应用层和传输层虚拟出一个抽象层,叫 socket( 套接字)层,这是一个模块为我们封装好了很多底层的协议,以便于我们只关注与实际的数据传输,而不用关系底层的实现.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx2414qee7j30f20d8q4e.jpg" alt></p>
<p>所以我们就直接使用套接字和网络通信进行交互.</p>
<h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><h3 id="socket是什么"><a href="#socket是什么" class="headerlink" title="socket是什么"></a>socket是什么</h3><p>socket是应用层与 TCP/IP协议族通信的中间软件抽象层,它是一组接口.在设计模式中, socket 就是一个模块,它把复杂的 TCP/IP 协议族隐藏在 socket 接口后面,对用户来说,一组简单的接口就是全部,让 socket 去组织数据,以符合指定的协议.</p>
<p>也有人说, socket 其实就是 ip 和 port 的组合, ip 用来标识互联网中的一台主机的位置,而 port 是用来标识这台机器上的一个应用程序, ip 地址是配置到网卡的,而 port 是应用程序开启的,这样 ip 和 port 就标识了互联网中独一无二的一个应用程序.</p>
<h3 id="套接字发展史即分类"><a href="#套接字发展史即分类" class="headerlink" title="套接字发展史即分类"></a>套接字发展史即分类</h3><p>套接字起源于20世纪70年代加利福尼亚大学伯克利分校版本的 Unix, 即 BSD Unix. 因此,有时人们也把套接字称为’伯克利套接字’或’ BSD 套接字’.一开始,套接字被设计用在同一台主机上的多个应用程序之间的通信.这也被称之为进程间通信或 IPC(inter-process communication).套接字有两大家族,分别是基于文件型和基于网络型.我们主要学习基于网络型的套接字.</p>
<ol>
<li><p>基于文件类型的套接字家族:</p>
<p>套接字家族名字: AF_UNIX</p>
<p>UNIX 哲学为一切皆文件(其实也不是所有的),基于文件的套接字调用的就是底层的文件系统来取数据,两个套接字进程运行在同一机器,可以通过访问同一个文件系统间接完成通信.</p>
</li>
<li><p>基于网络类型的套接字家族:</p>
<p>套接字家族名字: AF_INET</p>
<p>基于网络也就是 OSI 协议进行数据通信</p>
</li>
</ol>
<h3 id="套接字工作流程"><a href="#套接字工作流程" class="headerlink" title="套接字工作流程"></a>套接字工作流程</h3><p>其实就跟打电话很像,有拨号,接电话,通信,挂电话</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx24gh5r2dj30da0dnaaz.jpg" alt></p>
<p>首先由服务端初始化一个套接字对象,然后与本机的某个大于1023的端口绑定( bind),接着对该端口进行监听(listen),调用 accept 接口阻塞等待客户端的连接.如果在这时客户端初始化一个套接字对象,然后连接(connect)服务端的 ip 和port,如果连接成功,这时客户端与服务端的连接就建立成功了.</p>
<p>这时候可能有人再问了,三次握手呢?</p>
<p>当客户端 connect 服务端的时候就说明三次握手开始了,如果服务端 accept 有返回值,那么就说明三次握手成功.(可以使用 wireshark 进行抓包分析)<a href="https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener">wireshark 教程</a></p>
<p>TCP 连接建立成功后客户端和服务端就可以进行数据交互了.客户端发送数据请求,服务端接收请求并处理请求,然后把回应数据发送给客户端,客户端读取数据,最后关闭连接,一次通信结束.</p>
<h1 id="SOCKET使用"><a href="#SOCKET使用" class="headerlink" title="SOCKET使用"></a>SOCKET使用</h1><h3 id="套接字服务端通用使用方法"><a href="#套接字服务端通用使用方法" class="headerlink" title="套接字服务端通用使用方法"></a>套接字服务端通用使用方法</h3><p><code>from socket import *
sct = socket(socket_family, socket_type, protocal=0)
socket_family 可以为AF_UNIX 或 AF_INET,socket_type 可以是 SOCK_STREAM 或 SOCK_DGRAM.protocol 一般不填,缺省值为0.</code></p>
<p><code>获取 tcp/ip 套接字</code></p>
<p><code>tcpSock = socket(AF_INET, SOCK_STREAM)</code></p>
<p><code>绑定 ip port</code></p>
<p><code>tcpSock.bind((&#39;&#39;, 8080))</code></p>
<p><code>开始监听</code></p>
<p><code>tcpSock.listen(5)</code></p>
<p><code>被动接受 TCP 客户端连接(阻塞式)</code></p>
<p><code>tcpSock.accept()</code></p>
<p><code>获取 udp/ip 套接字</code></p>
<p><code>udpSock = socket(AF_UNIX, SOCK_DGRAM)</code></p>
<p><code>绑定 ip port</code></p>
<p><code>udpSock.bind((&#39;&#39;, 8081))</code></p>
<h3 id="套接字客户端通用方法"><a href="#套接字客户端通用方法" class="headerlink" title="套接字客户端通用方法"></a>套接字客户端通用方法</h3><p><code>连接服务端主动初始化 TCP 服务器连接</code></p>
<p><code>tcpSock.connect((&#39;&#39;, 8080))</code></p>
<h3 id="公共用途的套接字函数"><a href="#公共用途的套接字函数" class="headerlink" title="公共用途的套接字函数"></a>公共用途的套接字函数</h3><p><code>sock.recv() 接收 TCP 数据</code></p>
<p><code>sock.send() 发送 TCP 数据( send 在待发送数据量大于已端缓存区剩余空间时,数据将会丢失)</code></p>
<p><code>sock.sendall() 发送完整的 TCP 数据(本质就是循环调用 send,sendall 在待发送数据量大于已端缓存区剩余空间时,数据不丢失,循环调用 send 知道发完)</code></p>
<p><code>sock.recvfrom() 接收 UDP 数据</code></p>
<p><code>sock.sendto() 发送 UDP 数据</code></p>
<p><code>sock.getpeername() 连接到当前套接字的远端地址</code></p>
<p><code>sock.getsockname() 获取当前套接字的地址</code></p>
<p><code>sock.getsockopt() 返回指定套接字的参数</code></p>
<p><code>sock.setsockopt() 设置指定套接字的参数</code></p>
<p><code>sock.close() 关闭套接字</code></p>
<h3 id="基于-TCP-连接的套接字"><a href="#基于-TCP-连接的套接字" class="headerlink" title="基于 TCP 连接的套接字"></a>基于 TCP 连接的套接字</h3><p>tcp 是基于连接的,必须先启动服务端,然后再启动客户端去连接服务端</p>
<p>tcp 服务端 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tcp套接字对象</span></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定 ip 和端口</span></span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听连接</span></span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被动等待客户端的连接,如果有客户端连接会返回一个用于和客户端通信的套接字以及客户端的地址</span></span><br><span class="line">conn, addr = serverSock.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收客户端的数据</span></span><br><span class="line">data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给客户端返回数据</span></span><br><span class="line">conn.send(data2)</span><br></pre></td></tr></table></figure>
<p>tcp 客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建客户端套接字对象</span></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">clientSock.connect((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据到服务端</span></span><br><span class="line">data = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">clientSock.send(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收服务端的数据</span></span><br><span class="line">data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭客户端套接字</span></span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<h3 id="基于-TCP-的通信循环套接字"><a href="#基于-TCP-的通信循环套接字" class="headerlink" title="基于 TCP 的通信循环套接字"></a>基于 TCP 的通信循环套接字</h3><p>在上个版本中,服务端和客户端进行了一次通信就关闭了,很明显和实际应用不符合,所以加上通信循环,使得客户端可以和服务端进行多次通信.</p>
<p>服务端必须满足三点要求:</p>
<ol>
<li>绑定一个固定的 ip 和 port</li>
<li>一直对外提供稳定的服务</li>
<li>能够支持并发(学了多进程多线程可以支持)</li>
</ol>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8081</span>))</span><br><span class="line"></span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">conn, addr = serverSock.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通信循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">0</span>:<span class="keyword">break</span> <span class="comment"># 针对 linux 系统</span></span><br><span class="line">        print(<span class="string">'--&gt;收到客户端消息:'</span>, data)</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line">    <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">conn.close()</span><br><span class="line">serverSock.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上异常处理是因为当客户端异常断开连接时,服务端会报错</span></span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">client.connect((<span class="string">''</span>, <span class="number">8081</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通信循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = input(<span class="string">'&gt;&gt;&gt;:'</span>).stript()</span><br><span class="line">    clientSock.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<h3 id="基于-TCP-的连接循环通信循环套接字"><a href="#基于-TCP-的连接循环通信循环套接字" class="headerlink" title="基于 TCP 的连接循环通信循环套接字"></a>基于 TCP 的连接循环通信循环套接字</h3><p>在上一个版本中解决了客户端重复发消息的问题,但是作为一个服务端不可能只为一个客户提供服务,所以服务端必须可以接收多个连接(并发),这里实现的是伪并发.</p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8082</span>))</span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = serverSock.accept()</span><br><span class="line">    print(conn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            print(<span class="string">'--&gt;收到客户端的消息:'</span>, data)</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">serverSock.close()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">client.connect((<span class="string">''</span>, <span class="number">8081</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通信循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = input(<span class="string">'&gt;&gt;&gt;:'</span>).stript()</span><br><span class="line">    clientSock.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<p>至此一个可以接受多个客户端连接的 C/S 通信程序就完成了,不过服务端连接了一个客户端,那么只能为这个客户端服务,只有等这个客户端断开连接才可以连接其他的客户端.</p>
<h3 id="TCP-套接字的参数理解"><a href="#TCP-套接字的参数理解" class="headerlink" title="TCP 套接字的参数理解"></a>TCP 套接字的参数理解</h3><p>在写服务端代码的时候,发现绑定的地方的 ip 我用了空的字符串,这表示是绑定到本机的,也可以用127.0.0.1来代替,然后还有一个参数为 listen, 里面填的5.</p>
<p>在启动一个服务端时,服务端就会进入 LISTEN 状态,表示监听客户端的连接,那么这个5就表示可以监听5个连接,在套接字里面有个名词叫半连接池,就是说启动服务端时,就自动开启一个半连接池,当客户端连接服务端的时候,表示一个半连接进入半连接池了,然后操作系统就从半连接池取出这个连接,开始处理这个连接,那么后来的连接也是放进这个半连接池里,因为填的5,所以加上服务端处理的那个,一共可以连接6个(处理一个),那么之后的客户端连接都会被服务端拒绝连接,只有等之前处理的或者是半连接池里的少了一个才可以连接上服务端.</p>
<p>那么这个半连接发生在 TCP 三次握手的第几次握手呢?发生在客户端 connect 的时候,也就是第一次握手的时候,第一次握手成功,客户端连接就进入了半连接池,那么等服务端 accept 的时候,就说明三次握手连接成功.</p>
<p>目前我们实现了一个不太完美的 C/S 程序,那么有什么办法可以让服务端既可以连接多个客户端,又可以同时为它们服务呢?答案是让连接循环和通信循环放在两个 py 文件里面.</p>
<h1 id="模拟-SSH-实现远程执行命令"><a href="#模拟-SSH-实现远程执行命令" class="headerlink" title="模拟 SSH 实现远程执行命令"></a>模拟 SSH 实现远程执行命令</h1><p>结合之前学习的模块 subprocess, 可以执行传过来的命令参数,在命令行中.那么我们使用客户端传送命令,在服务端运行 subprocess 执行命令,并把得到的结果传过去.</p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8085</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = serverSock.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(cmd):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            obj = subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>),</span><br><span class="line">                                  shell=<span class="literal">True</span>,</span><br><span class="line">                                  stdout=subprocess.PIPE,</span><br><span class="line">                                  stderr=subprocess.PIPE)</span><br><span class="line">            stdout = obj.stdout.read()</span><br><span class="line">            stderr = obj.stderr.read()</span><br><span class="line">            print(len(stdout) + len(stderr))</span><br><span class="line">            conn.send(stdout+stderr)</span><br><span class="line">        <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">serverSock.close()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSock.connect((<span class="string">''</span>, <span class="number">8085</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    </span><br><span class="line">    client.send(cdm.encode(;utf<span class="number">-8</span>))</span><br><span class="line">    cmd_res = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">    print(cmd_res.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<p>结果表明当服务端发送的数据大于1024时,客户端一次收取数据量会收不完整,那么当你下次发送命令的时候,服务端回过来的数据会和上次未收完的数据粘在一起,这是一种粘包情况.</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx2youvtabj30ze0oeq8y.jpg" alt></p>
<p>有时候命名关闭服务端了,重启服务端是会出现这种问题是因为当TCP主动关闭连接一方将继续等待一定时间,这是 TCP 连接状态中的 TIME_WAIT 状态,该状态的作用是用来重发可能丢失的 ACK 报文,其二当一个服务器断开连接时,该端口可能还会重复使用,那么该端口就不能被其他的应用使用.</p>
<h4 id="Nagle-算法"><a href="#Nagle-算法" class="headerlink" title="Nagle 算法"></a>Nagle 算法</h4><p><strong>1 Nagle 算法规则</strong></p>
<p>当客户端连续发送时间间隔很短的两个数据包时,因为 TCP 协议为了优化传输效率和较少资源浪费,内部使用一种Nagle 的算法.Nagle 算法通常会在 TCP 程序里添加两行代码,在未确认数据发送的时候让发送器把数据送到系统缓存里.任何数据随后继续直到得到明显的数据确认或者直到攒到了一定数量的数据了再发包.</p>
<p> TCP/IP 协议中,无论发送多少数据,总是要在数据前面加上协议头,同时,对方收到数据,也需要发送 ACK 表示确认.为了尽可能的利用网络带宽, TCP 总是希望尽可能的发送足够大的数据.(一个连接会设置 MSS 参数,因此, TCP/IP 希望每次都能以 MSS 尺寸的数据块来发送数据).Nagle 算法就是为了尽可能发送大块数据,避免网络中充斥着许多小数据块.</p>
<p>Nagle 算法的基本定义时任意时刻,最多只能有一个未被确认的小段.所谓小段,指的是小于 MSS 尺寸的数据块,所谓未被确认,是指一个数据块发出后,没有收到对方的 ACK 确认数据已被收到.</p>
<p>Nagle 算法的规则:</p>
<ol>
<li>如果包长度达到 MSS, 则允许发送;</li>
<li>如果该包含有 FIN, 则允许发送;</li>
<li>设置了 TCP_NODELAY 选项,则允许发送;</li>
<li>未设置 TCP_CORK 选项时,如所有发出去的小数据包(包长度小于 MSS)均被确认,则允许发送;</li>
<li>上述条件都未满足,但发生了超时(一般为200ms),则立即发送.</li>
</ol>
<p>Nagle 算法只允许一个未被 ACK确认的包存在于网络,它并不管包的大小,因此它事实上就是一个扩展的停-等协议,只不过它是基于包停-等的,而不是基于字节停-等的. Nagle 算法完全由 TCP 协议的 ACK 机制决定,这会带来一些问题,比如如果对端 ACK 回复很快的话, Nagle 事实上不会拼接太多的数据包,虽然避免了网络拥塞,网络总体的利用率依然很低.</p>
<p>Nagle 算法是 silly window syndrome(SWS)预防算法的一个半集.SWS 算法预防发送少量的数据, Nagle 算法是其在发送方的实现,而接收方要做的是不要通告缓冲空间的很小增长,不通知小窗口,除非缓冲区空间有显著地增长.这里显著地增长定义为完全大小的段( MSS)或增长到大于最大窗口的一半.</p>
<p>注意：BSD的实现是允许在空闲链接上发送大的写操作剩下的最后的小段，也就是说，当超过1个MSS数据发送时，内核先依次发送完n个MSS的数据包，然后再发送尾部的小数据包，其间不再延时等待。（假设网络不阻塞且接收窗口足够大）</p>
<p><strong>举个例子</strong>，client端调用socket的write操作将一个int型数据（称为A块）写入到网络中，由于此时连接是空闲的（也就是说还没有未被确认的小段），因此这个int型数据会被马上发送到server端，接着，client端又调用write操作写入‘\r\n’（简称B块），这个时候，A块的ACK没有返回，所以可以认为已经存在了一个未被确认的小段，所以B块没有立即被发送，一直等待A块的ACK收到（大概40ms之后），B块才被发送。</p>
<p>这里还隐藏了一个问题，就是A块数据的ACK为什么40ms之后才收到？这是因为TCP/IP中不仅仅有nagle算法，还有一个<strong>TCP确认延迟机制</strong> 。当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据捎带着ACK过去。在我之前的时间中，t大概就是40ms。这就解释了为什么’\r\n’（B块）总是在A块之后40ms才发出。<br>　　当然，TCP确认延迟40ms并不是一直不变的，TCP连接的延迟确认时间一般初始化为最小值40ms，随后根据连接的重传超时时间（RTO）、上次收到数据包与本次接收数据包的时间间隔等参数进行不断调整。另外可以通过设置TCP_QUICKACK选项来取消确认延迟。</p>
<p><strong>2. TCP_NODELAY 选项</strong>　　</p>
<p>默认情况下，发送数据采用Nagle 算法。这样虽然提高了网络吞吐量，但是实时性却降低了，在一些交互性很强的应用程序来说是不允许的，使用TCP_NODELAY选项可以禁止Nagle 算法。</p>
<p>此时，应用程序向内核递交的每个数据包都会立即发送出去。需要注意的是，虽然禁止了Nagle 算法，但网络的传输仍然受到TCP确认延迟机制的影响。</p>
<p><strong>3. TCP_CORK 选项</strong>　　</p>
<p>所谓的CORK就是塞子的意思，形象地理解就是用CORK将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽力把小数据包拼接成一个大的数据包（一个MTU）再发送出去，当然若一定时间后（一般为200ms，该值尚待确认），内核仍然没有组合成一个MTU时也必须发送现有的数据（不可能让数据一直等待吧）。<br>　　然而，TCP_CORK的实现可能并不像你想象的那么完美，CORK并不会将连接完全塞住。内核其实并不知道应用层到底什么时候会发送第二批数据用于和第一批数据拼接以达到MTU的大小，因此内核会给出一个时间限制，在该时间内没有拼接成一个大包（努力接近MTU）的话，内核就会无条件发送。也就是说若应用层程序发送小包数据的间隔不够短时，TCP_CORK就没有一点作用，反而失去了数据的实时性（每个小包数据都会延时一定时间再发送）。</p>
<p><strong>4. Nagle算法与</strong> <strong>CORK算法区别</strong></p>
<p>Nagle算法和CORK算法非常类似，但是它们的着眼点不一样，Nagle算法主要避免网络因为太多的小包（协议头的比例非常之大）而拥塞，而CORK算法则是为了提高网络的利用率，使得总体上协议头占用的比例尽可能的小。如此看来这二者在避免发送小包上是一致的，在用户控制的层面上，Nagle算法完全不受用户socket的控制，你只能简单的设置TCP_NODELAY而禁用它，CORK算法同样也是通过设置或者清除TCP_CORK使能或者禁用之，然而Nagle算法关心的是网络拥塞问题，只要所有的ACK回来则发包，而CORK算法却可以关心内容，在前后数据包发送间隔很短的前提下（很重要，否则内核会帮你将分散的包发出），即使你是分散发送多个小数据包，你也可以通过使能CORK算法将这些内容拼接在一个包内，如果此时用Nagle算法的话，则可能做不到这一点。</p>
<h1 id="TCP-粘包问题"><a href="#TCP-粘包问题" class="headerlink" title="TCP 粘包问题"></a>TCP 粘包问题</h1><p>在上面的 TCP 服务端和客户端收数据的时候填的都是1024字节,表示一次从操作系统的缓存区域收取最大1024字节的数据,当一次发送数据量小于1924字节的时候每次都可以把数据收取干净,这当然是没问题的,但是如果数据量大于1024呢?会发生什么现象.会发生粘包,</p>
<p>上述代码显示了第一中粘包情况,就是一方收取的数据量小于缓存中的数据量,造成粘包,另外一种是由于 Nagle算法导致的,当客户端连续发送两个数据量较小的包时,算法会将这两个一起发送造成粘包.</p>
<p>第二种粘包例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8086</span>))</span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">conn, addr = serverSock.accept()</span><br><span class="line">data1 = conn.recv(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'第一次收:'</span>, data1)</span><br><span class="line"></span><br><span class="line">data2 = conn.recv(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'第二次收:'</span>, data2)</span><br><span class="line"></span><br><span class="line">data3 = conn.recv(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'第三次收:'</span>, data3)</span><br><span class="line"></span><br><span class="line">data4 = conn.recv(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'第四次收:'</span>, data4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 粘包问题是 tcp 协议流式传输数据的方式导致的</span></span><br><span class="line"><span class="comment"># 如何解决粘包问题:接收端能够精确地收干净每个数据包没有任何残留</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSock.connect((<span class="string">''</span>, <span class="number">8086</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp 协议会将数据量较小且发送时间间隔的数据合并成一个包发送</span></span><br><span class="line">clientSock.send(<span class="string">b'hello'</span>)</span><br><span class="line">clientSock.send(<span class="string">b'world'</span>)</span><br><span class="line">clientSock.send(<span class="string">b'musibii'</span>)</span><br><span class="line">clientSock.send(<span class="string">b'1'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">第一次收: <span class="string">b'hello'</span></span><br><span class="line">第二次收: <span class="string">b'world'</span></span><br><span class="line">第三次收: <span class="string">b'musibii1'</span></span><br><span class="line">第四次收: <span class="string">b''</span></span><br></pre></td></tr></table></figure>
<p>可以看出当两次发包间隔时间较短且数据量较少时,会当成一个包发送出去.</p>
<p>那么怎么解决粘包问题呢?</p>
<p>一是因为数据量太大收取不完全导致的,二是因为两次发包间隔时间较短且数据量较小导致的,导致收取的一方将两次数据一次性收取完成.</p>
<h4 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h4><p>还是以模拟 ssh 远程执行命令的代码作为例子:</p>
<p>首先根本原因是收取的一方不知道到底应该收取多少数据量导致的,那么我们在每次发包之前将数据的长度发过去,然后在发送真实数据,接收端先接收到真实数据的长度大小,然后依据真实数据长度大小来收包不就完美解决了吗.</p>
<p>看实例:</p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct <span class="comment"># 该模块专门用来处理字节的数据类型</span></span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8088</span>))</span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = serverSock.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(cmd) == <span class="number">0</span>: </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            obj = subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>), shell=<span class="literal">True</span>,</span><br><span class="line">                            stdout=subprocess.PIPE,</span><br><span class="line">                            stderr=subprocess.PIPE)</span><br><span class="line">            stdout = obj.stdout.read()</span><br><span class="line">            stderr = obj.stderr.read()</span><br><span class="line">            print(len(stdout) + len(stderr))</span><br><span class="line">            data_len = len(stdout) + len(stderr)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 1. 先制作固定长度的报头</span></span><br><span class="line">            header = struct.pack(<span class="string">'i'</span>, data_len) <span class="comment"># i表示转 int 型</span></span><br><span class="line">            <span class="comment"># 2. 发送报头</span></span><br><span class="line">            conn.send(header)</span><br><span class="line">            <span class="comment"># 3. 发送真实数据</span></span><br><span class="line">            conn.send(stdout)</span><br><span class="line">            conn.send(stderr)</span><br><span class="line">        <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">serverSock.close()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSock.connect((<span class="string">''</span>, <span class="number">8088</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    clientSock.send(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># 1. 先收报头,从报头里解出真实数据长度</span></span><br><span class="line">    header = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">    total_size = struct.unpack(<span class="string">'i'</span>, header)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 2. 接收真实数据</span></span><br><span class="line">    cmd_res = <span class="string">b''</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size += len(data)</span><br><span class="line">        cmd_res += data</span><br><span class="line">    print(cmd_res.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx33gu324hj31401cqk7w.jpg" alt></p>
<p>可以看出来,数据可以收干净了,所以目前来讲是不存在粘包问题的,但是问题又来了,在实际应用中,想要传输的数据如果很大怎么办?这种办法也可以行得通吗?</p>
<p>当我把要传输的数据大小调大时:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">data_len = struct.pack(<span class="string">'1'</span>, <span class="number">1111111111111111111</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx33n91563j30y204wq43.jpg" alt></p>
<p>这说明 struct 转化 int 类型的时候是有大小限制的,数字太大的转不了,那么 struct 还有一个类型表示长整形的为 q, 来试试看.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">data_len = struct.pack(<span class="string">'q'</span>, <span class="number">11111111111</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx33pbfkbqj30xy07gt92.jpg" alt></p>
<p>可以看出来是可以转的,转成了8个字节,那么如果数字在大一点呢,总归有一个不能转的数字,那么这就不是最好的解决办法.</p>
<h4 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h4><p>我们只想接收端接收到真实的数据长度就可以了,那么可不可以用一个容器把真实数据长度保存然后通过转化传输出去呢.</p>
<p>这就是在自己开发一款 C/S 程序时需要考虑的问题了,涉及到数据传输的话就需要自定义报头了.报头就是可以将真实数据的一些信息保存起来,先于真实数据发送出去</p>
<p><strong>自定义报头</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">header_dic = &#123;</span><br><span class="line">    <span class="string">'filename'</span>: <span class="string">'musibii.jpg'</span>,</span><br><span class="line">    <span class="string">'md5'</span>: <span class="string">'165069c8f668edb6b48f208f7a5c6a00'</span>,</span><br><span class="line">    <span class="string">'total_size'</span>: <span class="number">11111111111111111111111111111111111111</span></span><br><span class="line">&#125;</span><br><span class="line">header_json = json.dumps(header_dic)</span><br><span class="line">header_bytes = header_json.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(len(header_bytes), header_bytes)</span><br><span class="line"></span><br><span class="line">data_bytes_len = struct.pack(<span class="string">'i'</span>, len(header_bytes))</span><br><span class="line"></span><br><span class="line">print(data_bytes_len,len(data_bytes_len))</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx34fz443mj316o06ymy7.jpg" alt></p>
<p>可以看出来,通过这种方法可以把数据量很大的东西发送给客户端.</p>
<p><strong>具体解决办法</strong></p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json,struct</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">9090</span>))</span><br><span class="line">serverSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = serverSock.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            obj = subprocess.Popen(data.decode(<span class="string">'utf-8'</span>), shell=<span class="literal">True</span>,</span><br><span class="line">                                  stdout=subprocess.PIPE,</span><br><span class="line">                                  stderr=subprocess.PIPE)</span><br><span class="line">            stdout = obj.stdout.read()</span><br><span class="line">            stderr = obj.stderr.read()</span><br><span class="line">            data_bytes_len = len(stdout) + len(stderr)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 1. 先制作报头</span></span><br><span class="line">            header_dic = &#123;</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'musibii.jpg'</span>,</span><br><span class="line">                <span class="string">'md5'</span>: <span class="string">'165069c8f668edb6b48f208f7a5c6a00'</span>,</span><br><span class="line">                <span class="string">'total_size'</span>: data_bytes_len</span><br><span class="line">            &#125;</span><br><span class="line">            header_json = json.dumps(header_dic)</span><br><span class="line">            header_bytes = header_json.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 2. 先发送4个 bytes 的字典转化后的字节</span></span><br><span class="line">            conn.send(struct.pack(<span class="string">'i'</span>, len(header_bytes)))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 发送完整报头</span></span><br><span class="line">            conn.send(header_bytes)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 发送真实数据</span></span><br><span class="line">            conn.send(stdout)</span><br><span class="line">            conn.send(stderr)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> ConnectionResetError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">serverSock.close()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct,json</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSock.connect((<span class="string">''</span>, <span class="number">9090</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    clientSock.send(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. 先收4bytes 的服务端发过来的转化报头</span></span><br><span class="line">    header_size = struct.unpack(<span class="string">'i'</span>, clientSock.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 接收完整的报头,就是 header_dic</span></span><br><span class="line">    header_bytes = clientSock.recv(header_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 转化得到完整的报头字典</span></span><br><span class="line">    header_json = header_bytes.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    header_dic  = json.loads(header_json)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 根据 key 得到真实数据长度</span></span><br><span class="line">    total_size = header_dic[<span class="string">'total_size'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 接受真正的数据</span></span><br><span class="line">    cmd_res = <span class="string">b''</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size += len(data)</span><br><span class="line">        cmd_res += data</span><br><span class="line">    print(cmd_res.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<p>这个程序就加了两个步骤,在发送真实数据之前发送了4个字节的报头,然后发送了真是的报头数据.</p>
<p>首先在服务端定义报头(字典类型),由字典转为 json 格式,由 json 格式转为二进制,由 struct 转成四个字节的数据,客户端收到4个字节struct 转化的数据, unpack 成二进制, decode 为 json 格式的数据类型,然后反序列化成 python 字典类型,得到里面的真实数据长度.然后服务端发送真实数据,客户端循环接收真实数据.</p>
<p>到此,就完美的解决了粘包的问题.如有不对的地方,欢迎指正.</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象编程</title>
    <url>/2018/10/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一-面向对象编程与面向过程编程"><a href="#一-面向对象编程与面向过程编程" class="headerlink" title="一 面向对象编程与面向过程编程"></a>一 面向对象编程与面向过程编程</h1><h3 id="1-面向过程编程思想"><a href="#1-面向过程编程思想" class="headerlink" title="1 面向过程编程思想"></a>1 面向过程编程思想</h3><p>该思想核心是过程，指的是解决问题的步骤，即先干什么然后干什么，就像流水线一样，必须一步一步来，基于面向过程编程的是一种机械化的思维方式。</p>
<p><strong>优点</strong>： 复杂问题流程化，简单化；</p>
<p><strong>缺点</strong>：可扩展性较差。</p>
<p><strong>应用场景</strong>：一旦完成几乎不会改变，像Linux内核、git以及Apache HTTP Server等</p>
<h3 id="2-面向对象编程思想"><a href="#2-面向对象编程思想" class="headerlink" title="2 面向对象编程思想"></a>2 面向对象编程思想</h3><p>随着硬件的快速发展，业务需求越来越复杂，以及编程应用领域越来越广泛，面向过程编程已经不能满足需求了，于是另一种编程思想开始兴起，就是面向对象编程。</p>
<p>该思想核心是对象，对象是特征与技能的结合体，基于面向对象设计程序就好比自己是造物主一样，想要创造什么就创造什么，与面向过程机械式的思维方式形成鲜明对比，面向对象更加注重对现实世界的抽象化。</p>
<p><strong>优点</strong>：解决了程序的扩展性。对某一个对象单独修改，会立刻反应到整个体系中。</p>
<p><strong>缺点</strong>：1. 编程的复杂度高于面向过程编程，不了解面向对象而立即上手基于对象设计程序，容易出现过度设计的问题。一些扩展性要求低的场景使用面向对象会增加编程难度。</p>
<ol start="2">
<li>无法向面向过程的程序设计流水式的可以很精准的预测问题的处理流程与结果，面向对象的程序一旦开始就由对象之间的交互解决问题。</li>
</ol>
<p><strong>应用场景</strong>：需求经常变化的软件，一般需求的变化都集中在用户层，互联网应用，企业内部软件，游戏等</p>
<p>面向对象的程序设计并不是全部。对于一个软件质量来说，面向对象的程序设计只是用来解决扩展性。</p>
<p>一个好的应用软件应包括的特性：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwhvl8lowmj30eo0er75d.jpg" alt></p>
<h1 id="二-类与对象"><a href="#二-类与对象" class="headerlink" title="二 类与对象"></a>二 类与对象</h1><h3 id="一-类的定义"><a href="#一-类的定义" class="headerlink" title="一 类的定义"></a>一 类的定义</h3><p>类即类别、种类，是面向对象设计最重要的概念，对象是特征与技能的结合体，而类则是一系列具有相似特征与技能的抽象概念。</p>
<p>在现实中是先出现对象，然后根据一系列具有相同特征的对象定义不同的类，对象是具体的存在，而类仅仅只是一个概念，并不真实存在。</p>
<p>在程序中是先定义类，然后根据类产生对象，这与函数的使用是类似的，先定义函数，类同理，在程序中需要先定义类，后调用类，与函数不一样的是，调用函数会执行函数体代码返回的是函数的执行结果，而调用类会产生并返回一个对象。</p>
<p>在程序中，务必保证，先定义类，后使用对象。</p>
<ol>
<li>在程序中特征使用变量标识，技能使用函数标识。</li>
<li>因而类中最常见的是：变量和函数的定义。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">something</span>:</span></span><br><span class="line">    school = <span class="string">'hashangda'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'something is learning'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'something is eating'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'something is sleeping'</span>)</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ol>
<li>类中可以为任意python代码,这些代码在类定义阶段便会执行;</li>
<li>因而会产生新的名称空间,用来存放类的变量名与函数名,可以通过something.<strong><strong>dict</strong></strong>查看;</li>
<li>对于经典类来说可以通过该字典操作类名称空间的名字(新式类有限制),但python为我们提供了专门的语法进行访问;</li>
<li>点事访问属性的语法,类中定义的名字,都是类的属性(变量和函数).</li>
</ol>
<h3 id="二-程序中类的用法"><a href="#二-程序中类的用法" class="headerlink" title="二 程序中类的用法"></a>二 程序中类的用法</h3><p>在程序中用.来访问类的属性,本质操作为<strong><strong>dict</strong></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">something.school <span class="comment"># 等于经典类 something.__dict__['school']</span></span><br><span class="line">something.school = <span class="string">'oldboy'</span> <span class="comment"># 等于经典类 something.__dict__['school'] = 'oldboy'</span></span><br><span class="line">something.name = <span class="string">'musibii'</span> <span class="comment"># 等于经典类 something.__dict__['name'] = 'musibii'</span></span><br><span class="line"><span class="keyword">del</span> something.name <span class="comment"># 等于经典类 something.__dict__.pop('name')</span></span><br></pre></td></tr></table></figure>
<p>在程序中调用类(实例化对象),产生并返回一个对象,产生的对象会具有类里面的属性,并且可以通过句点法进行访问.</p>
<p>总结:</p>
<ol>
<li>类本质是一个名称空间,或者说是一个用来存放变量与函数的容器;</li>
<li>类的用途之一就是当做名称空间从其内部取出名字来使用;</li>
<li>类的主要用途是调用类产生对象.</li>
</ol>
<h3 id="三-对象的使用"><a href="#三-对象的使用" class="headerlink" title="三 对象的使用"></a>三 对象的使用</h3><p>通过调用类产生的对象成为类的实例化,调用类的返回值称之为类的一个对象/实例.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some = something() <span class="comment"># 产生一个实例对象,对象可以通过句点法访问类中的属性()</span></span><br><span class="line">print(some.school)</span><br><span class="line"><span class="comment"># 结果 hashangda</span></span><br></pre></td></tr></table></figure>
<p>类中定义的属性是由该类产生的所有对象共有的属性,那么每个对象自己特有的属性应该怎么定义的?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">something</span>:</span></span><br><span class="line">    school = <span class="string">'hashangda'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br></pre></td></tr></table></figure>
<p>类中的<strong>init</strong>方法是用来初始化一个实例对象的,并且会执行下面的代码,所以这时候要实例化对象是需要传入后面的参数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some1 = something(<span class="string">'musibii'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">some2 = something(<span class="string">'thales'</span>, <span class="number">20</span>, <span class="string">'female'</span>)</span><br><span class="line">some3 = something(<span class="string">'maffia'</span>, <span class="number">22</span>, <span class="string">'male'</span>)</span><br></pre></td></tr></table></figure>
<p>这样实例化出来的对象除了school属性值一样,其他都是自己独有的属性值.</p>
<p>调用类产生了</p>
<ol>
<li>先产生一个空对象some1,然后返回;</li>
<li>触发类中函数init的执行,将对象联通调用类括号内指定的参数一同传入init.</li>
</ol>
<p>总结:init的功能,在实例化时为对象初始化自己独有的特征(不能有返回值)</p>
<h3 id="四-属性查找"><a href="#四-属性查找" class="headerlink" title="四 属性查找"></a>四 属性查找</h3><p>属性查找和之前学的名称空间查找顺序逻辑一样,首先在对象的名称空间里面查找,没有的话去类名称空间查找,但是不会去全局名称空间查找对象的属性.</p>
<p>类中定义的变量是所有对象共享的,对象可以使用,类也可以使用,类一旦改变自己的属性的值,所有的对象也会随之改变.</p>
<h3 id="五-绑定方法"><a href="#五-绑定方法" class="headerlink" title="五 绑定方法"></a>五 绑定方法</h3><p>类中定义的变量是类的数据属性,类和对象都可以使用,并且属性的值都指向一个内存地址;</p>
<p>类中定义的函数是类的函数属性,类和对象都可以调用,类来调用的就是一个普通的函数,但类中定义的函数都是用来给对象用的,而且是绑定给对象的.</p>
<ol>
<li>类的函数:该传几个参数就传几个</li>
<li>绑定方法,指向类的函数:特殊之处是绑定给哪个对象就应该由哪个对象来调用,调用的时候就会把对象本身当做第一个参数自动传入.</li>
</ol>
<h3 id="六-一切皆对象"><a href="#六-一切皆对象" class="headerlink" title="六 一切皆对象"></a>六 一切皆对象</h3><p>在python3中统一了类和类型的概念,就是说一个类等于一种类型,比如python中的数据类型,我们也可以定义属于自己的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">muSibii</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">musibii = muSibii()</span><br><span class="line">print(type(musibii))</span><br><span class="line"><span class="comment"># 结果 &lt;class '__main__.muSibii'&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程（五）</title>
    <url>/2018/11/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章中我们学习了 基于 TCP 套接字的服务端和客户端通信,并解决了粘包的问题,解决粘包问题的思路很简单,就是确保接受方能够把数据收取干净,发多少,就收多少.</p>
<p>出现粘包的问题:原因有两个,一个是接收数据量少于发送数据量;一个是因为为了优化 TCP 的传输效率,使用了 Nagle算法,当客户端连续发送时间间隔很短的两个数据包时,在未确认数据发送的时候让发送器把数据送到系统缓存里.任何数据随后继续直到得到明显的数据确认或者直到攒到了一定数量的数据了再发包.</p>
<p>这是不可避免的,为了优化传输效率,尽量发送大块数据,避免网络中充斥的许多小数据块.知道了解决方法,那么避免粘包就很简单了,只需要在每次发送数据之前先发送真实数据的长度,然后接收方可以根据收到的真实长度收取数据了.</p>
<h1 id="SOCKET使用"><a href="#SOCKET使用" class="headerlink" title="SOCKET使用"></a>SOCKET使用</h1><p>SOCKET AF_INET套接字主要有两种协议,现在来看 UDP 协议是如何进行网络通信的.</p>
<h2 id="基于-UDP-连接的套接字"><a href="#基于-UDP-连接的套接字" class="headerlink" title="基于 UDP 连接的套接字"></a>基于 UDP 连接的套接字</h2><p>tcp 是无连接,不稳点的套接字,但是传输效率较高,所以在某些应用上如实时直播,游戏, DNS 服务器,DHCP 服务器等等.</p>
<p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">serverSock.bind((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, client_addr = serverSock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    serverSock.sendto(data.upper, client_addr)</span><br><span class="line">serverSock.close()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    clientSock.sendto(msg.encode(<span class="string">'utf-8'</span>), (<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line">    data, server_addr = clientSock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>
<p>当我们连续开多个客户端和服务端通信的时候,没有出现阻塞的情况,发出去的消息都可以收回来,这是因为 udp 是无连接的套接字,不用关注一个连接,只要你给我发消息拿到了发送方的 ip 和端口,那么就可以直接和你通信,而且不像 TCP 那样必须先启动服务端才可以, udp 在发送数据的时候,服务端没有启动也可以发送过去,只不过是发到了对方的系统缓存中.</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx41g106kmj31aa0o80xd.jpg" alt></p>
<p>那么 udp 可以实现多个客户端同时和客户端通信吗?</p>
<p>之前几个客户端可以同时和服务端通信是因为服务端的处理能力很大,看起来是同时通信一样,但是如果把客户端加到 1w, 甚至更多就会感觉到明显的时间差了.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx41qyucpxj31kw0wjk1z.jpg" alt></p>
<p>那么如何可以实现真正的并发呢?关键点就在一个通信循环和连接循环互相不干扰,不用因为 i/o 堵塞而耽搁另一个循环要做的事.</p>
<h1 id="Socketserver-模块实现并发"><a href="#Socketserver-模块实现并发" class="headerlink" title="Socketserver 模块实现并发"></a>Socketserver 模块实现并发</h1><p>在这里 python 有一个模块为 socketserver 可以实现真正的并发.</p>
<h2 id="基于-TCP-协议的并发"><a href="#基于-TCP-协议的并发" class="headerlink" title="基于 TCP 协议的并发"></a>基于 TCP 协议的并发</h2><p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sockerserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPhandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">'--&gt;收到客户端的消息:'</span>, data)</span><br><span class="line">                self.request.send(data.upper())</span><br><span class="line">            <span class="keyword">except</span> ConnectResetError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serverSock = socketserver.ThreadingTCPServer((<span class="string">'127.0.0.1'</span>, <span class="number">8081</span>), MyTCPhandler)</span><br><span class="line">    serverSock.serve_forever() <span class="comment"># 和客户端进行连接</span></span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSock.connect((<span class="string">'127.0.0.1'</span>, <span class="number">8081</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通信循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    clientSock.send(<span class="string">b'hello'</span>)</span><br><span class="line">    data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line">clientSock.close()</span><br></pre></td></tr></table></figure>
<p>这样就解决了 TCP 不能实现并发的问题了.</p>
<h2 id="基于-UDP-协议的并发"><a href="#基于-UDP-协议的并发" class="headerlink" title="基于 UDP 协议的并发"></a>基于 UDP 协议的并发</h2><p><strong>服务端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPhandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(self)</span>:</span></span><br><span class="line">        data, serverSock = self.request</span><br><span class="line">        serverSock.sendto(data.upper(), self.client_address)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = socketserver.ThreadingUDPServer((<span class="string">'127.0.0.1'</span>, <span class="number">8081</span>), MyUDPhandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clientSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    clientSock.sendto(<span class="string">b'hello'</span>, (<span class="string">'127.0.0.1'</span>, <span class="number">8081</span>))</span><br><span class="line">    data, server_addr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>
<p>这就是 UDP 实现并发的模板.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此,网络编程终于告一段落了,其实我写的是网络编程里面极少的也是较为重要的一部分,还有很多底层协议没了解,像 ping 服务器时发送的 ICMP 包,还有很多,不过我觉得了解了这些其实也就了解了互联网工作的基本方式,其余的待有时间了再来学习.</p>
<p>如有不对的地方,欢迎指正.</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
</search>
